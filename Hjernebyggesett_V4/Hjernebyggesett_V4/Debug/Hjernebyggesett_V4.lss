
Hjernebyggesett_V4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00803800  00002670  00002724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002606  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006a  0000a606  00002606  000026ba  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000005a  00803816  00803816  0000273a  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0000273a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002798  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000518  00000000  00000000  000027d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008a72  00000000  00000000  00002cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003747  00000000  00000000  0000b762  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002a81  00000000  00000000  0000eea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000974  00000000  00000000  0001192c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003653  00000000  00000000  000122a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000192a  00000000  00000000  000158f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000390  00000000  00000000  0001721d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__vector_6>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	05 a8       	ldd	r0, Z+53	; 0x35
      a6:	4c cd       	rjmp	.-1384   	; 0xfffffb40 <__eeprom_end+0xff7efb40>
      a8:	b2 d4       	rcall	.+2404   	; 0xa0e <tinyDebugger_end_line+0x8>
      aa:	4e b9       	out	0x0e, r20	; 14
      ac:	38 36       	cpi	r19, 0x68	; 104
      ae:	a9 02       	muls	r26, r25
      b0:	0c 50       	subi	r16, 0x0C	; 12
      b2:	b9 91       	ld	r27, Y+
      b4:	86 88       	ldd	r8, Z+22	; 0x16
      b6:	08 3c       	cpi	r16, 0xC8	; 200
      b8:	a6 aa       	std	Z+54, r10	; 0x36
      ba:	aa 2a       	or	r10, r26
      bc:	be 00       	.word	0x00be	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240

000000c2 <__trampolines_end>:
      c2:	00 40       	sbci	r16, 0x00	; 0
      c4:	7a 10       	cpse	r7, r10
      c6:	f3 5a       	subi	r31, 0xA3	; 163
      c8:	00 a0       	ldd	r0, Z+32	; 0x20
      ca:	72 4e       	sbci	r23, 0xE2	; 226
      cc:	18 09       	sbc	r17, r8
      ce:	00 10       	cpse	r0, r0
      d0:	a5 d4       	rcall	.+2378   	; 0xa1c <tinyDendrite_check_charge_level+0xc>
      d2:	e8 00       	.word	0x00e8	; ????
      d4:	00 e8       	ldi	r16, 0x80	; 128
      d6:	76 48       	sbci	r23, 0x86	; 134
      d8:	17 00       	.word	0x0017	; ????
      da:	00 e4       	ldi	r16, 0x40	; 64
      dc:	0b 54       	subi	r16, 0x4B	; 75
      de:	02 00       	.word	0x0002	; ????
      e0:	00 ca       	rjmp	.-3072   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
      e2:	9a 3b       	cpi	r25, 0xBA	; 186
      e4:	00 00       	nop
      e6:	00 e1       	ldi	r16, 0x10	; 16
      e8:	f5 05       	cpc	r31, r5
      ea:	00 00       	nop
      ec:	80 96       	adiw	r24, 0x20	; 32
      ee:	98 00       	.word	0x0098	; ????
      f0:	00 00       	nop
      f2:	40 42       	sbci	r20, 0x20	; 32
      f4:	0f 00       	.word	0x000f	; ????
      f6:	00 00       	nop
      f8:	a0 86       	std	Z+8, r10	; 0x08
      fa:	01 00       	.word	0x0001	; ????
      fc:	00 00       	nop
      fe:	10 27       	eor	r17, r16
     100:	00 00       	nop
     102:	00 00       	nop
     104:	e8 03       	fmulsu	r22, r16
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	64 00       	.word	0x0064	; ????
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	0a 00       	.word	0x000a	; ????
     112:	00 00       	nop
     114:	00 00       	nop
     116:	01 00       	.word	0x0001	; ????
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	2c 76       	andi	r18, 0x6C	; 108
     11e:	d8 88       	ldd	r13, Y+16	; 0x10
     120:	dc 67       	ori	r29, 0x7C	; 124
     122:	4f 08       	sbc	r4, r15
     124:	23 df       	rcall	.-442    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     126:	c1 df       	rcall	.-126    	; 0xaa <__SREG__+0x6b>
     128:	ae 59       	subi	r26, 0x9E	; 158
     12a:	e1 b1       	in	r30, 0x01	; 1
     12c:	b7 96       	adiw	r30, 0x27	; 39
     12e:	e5 e3       	ldi	r30, 0x35	; 53
     130:	e4 53       	subi	r30, 0x34	; 52
     132:	c6 3a       	cpi	r28, 0xA6	; 166
     134:	e6 51       	subi	r30, 0x16	; 22
     136:	99 76       	andi	r25, 0x69	; 105
     138:	96 e8       	ldi	r25, 0x86	; 134
     13a:	e6 c2       	rjmp	.+1484   	; 0x708 <tinyAxon_update_potential+0xea>
     13c:	84 26       	eor	r8, r20
     13e:	eb 89       	ldd	r30, Y+19	; 0x13
     140:	8c 9b       	sbis	0x11, 4	; 17
     142:	62 ed       	ldi	r22, 0xD2	; 210
     144:	40 7c       	andi	r20, 0xC0	; 192
     146:	6f fc       	.word	0xfc6f	; ????
     148:	ef bc       	out	0x2f, r14	; 47
     14a:	9c 9f       	mul	r25, r28
     14c:	40 f2       	brcs	.-112    	; 0xde <__trampolines_end+0x1c>
     14e:	ba a5       	ldd	r27, Y+42	; 0x2a
     150:	6f a5       	ldd	r22, Y+47	; 0x2f
     152:	f4 90       	lpm	r15, Z
     154:	05 5a       	subi	r16, 0xA5	; 165
     156:	2a f7       	brpl	.-54     	; 0x122 <__trampolines_end+0x60>
     158:	5c 93       	st	X, r21
     15a:	6b 6c       	ori	r22, 0xCB	; 203
     15c:	f9 67       	ori	r31, 0x79	; 121
     15e:	6d c1       	rjmp	.+730    	; 0x43a <DAC_0_initialization+0xe>
     160:	1b fc       	.word	0xfc1b	; ????
     162:	e0 e4       	ldi	r30, 0x40	; 64
     164:	0d 47       	sbci	r16, 0x7D	; 125
     166:	fe f5       	brtc	.+126    	; 0x1e6 <.do_clear_bss_loop>
     168:	20 e6       	ldi	r18, 0x60	; 96
     16a:	b5 00       	.word	0x00b5	; ????
     16c:	d0 ed       	ldi	r29, 0xD0	; 208
     16e:	90 2e       	mov	r9, r16
     170:	03 00       	.word	0x0003	; ????
     172:	94 35       	cpi	r25, 0x54	; 84
     174:	77 05       	cpc	r23, r7
     176:	00 80       	ld	r0, Z
     178:	84 1e       	adc	r8, r20
     17a:	08 00       	.word	0x0008	; ????
     17c:	00 20       	and	r0, r0
     17e:	4e 0a       	sbc	r4, r30
     180:	00 00       	nop
     182:	00 c8       	rjmp	.-4096   	; 0xfffff184 <__eeprom_end+0xff7ef184>
     184:	0c 33       	cpi	r16, 0x3C	; 60
     186:	33 33       	cpi	r19, 0x33	; 51
     188:	33 0f       	add	r19, r19
     18a:	98 6e       	ori	r25, 0xE8	; 232
     18c:	12 83       	std	Z+2, r17	; 0x02
     18e:	11 41       	sbci	r17, 0x11	; 17
     190:	ef 8d       	ldd	r30, Y+31	; 0x1f
     192:	21 14       	cp	r2, r1
     194:	89 3b       	cpi	r24, 0xB9	; 185
     196:	e6 55       	subi	r30, 0x56	; 86
     198:	16 cf       	rjmp	.-468    	; 0xffffffc6 <__eeprom_end+0xff7effc6>
     19a:	fe e6       	ldi	r31, 0x6E	; 110
     19c:	db 18       	sub	r13, r11
     19e:	d1 84       	ldd	r13, Z+9	; 0x09
     1a0:	4b 38       	cpi	r20, 0x8B	; 139
     1a2:	1b f7       	brvc	.-58     	; 0x16a <__trampolines_end+0xa8>
     1a4:	7c 1d       	adc	r23, r12
     1a6:	90 1d       	adc	r25, r0
     1a8:	a4 bb       	out	0x14, r26	; 20
     1aa:	e4 24       	eor	r14, r4
     1ac:	20 32       	cpi	r18, 0x20	; 32
     1ae:	84 72       	andi	r24, 0x24	; 36
     1b0:	5e 22       	and	r5, r30
     1b2:	81 00       	.word	0x0081	; ????
     1b4:	c9 f1       	breq	.+114    	; 0x228 <main+0x28>
     1b6:	24 ec       	ldi	r18, 0xC4	; 196
     1b8:	a1 e5       	ldi	r26, 0x51	; 81
     1ba:	3d 27       	eor	r19, r29

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	df e3       	ldi	r29, 0x3F	; 63
     1c6:	de bf       	out	0x3e, r29	; 62

000001c8 <__do_copy_data>:
     1c8:	18 e3       	ldi	r17, 0x38	; 56
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b8 e3       	ldi	r27, 0x38	; 56
     1ce:	e0 e7       	ldi	r30, 0x70	; 112
     1d0:	f6 e2       	ldi	r31, 0x26	; 38
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
     1d4:	05 90       	lpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	a6 31       	cpi	r26, 0x16	; 22
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>

000001de <__do_clear_bss>:
     1de:	28 e3       	ldi	r18, 0x38	; 56
     1e0:	a6 e1       	ldi	r26, 0x16	; 22
     1e2:	b8 e3       	ldi	r27, 0x38	; 56
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	a0 37       	cpi	r26, 0x70	; 112
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 00 01 	call	0x200	; 0x200 <main>
     1f2:	0c 94 01 13 	jmp	0x2602	; 0x2602 <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <atmel_start_init>:
     1fa:	0e 94 22 02 	call	0x444	; 0x444 <system_init>
     1fe:	08 95       	ret

00000200 <main>:

int main(void)
{	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     200:	0e 94 fd 00 	call	0x1fa	; 0x1fa <atmel_start_init>
	For some reason, instead of the reference voltage being 4.32v, it is 3.3v. 
	A plausible explanation is that the microchip does not up the voltage, so that if the microchip is only ever 
	supplied with 3.3v, it will output 3.3v as the max.
	*/
	
	VREF.CTRLA |= VREF_DAC0REFSEL_4V34_gc;
     204:	e0 ea       	ldi	r30, 0xA0	; 160
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	83 60       	ori	r24, 0x03	; 3
     20c:	80 83       	st	Z, r24
	while (1)
	{
		// We don't want to update the neuron too often because of various reasons. The tinyISR_getflag is set every ms, and so the loop is only run once every ms.  
		if(tinyISR_getflag())
     20e:	0e 94 53 06 	call	0xca6	; 0xca6 <tinyISR_getflag>
     212:	88 23       	and	r24, r24
     214:	e1 f3       	breq	.-8      	; 0x20e <main+0xe>
		{
			tinyCharge_update_charging_mode();
     216:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <tinyCharge_update_charging_mode>
			
			if(tinyCharge_is_connected_to_charger()){
     21a:	0e 94 3f 04 	call	0x87e	; 0x87e <tinyCharge_is_connected_to_charger>
     21e:	88 23       	and	r24, r24
     220:	b9 f0       	breq	.+46     	; 0x250 <main+0x50>
				// Charge loop
				
				if(tinyCharge_is_fully_charged()){
     222:	0e 94 42 04 	call	0x884	; 0x884 <tinyCharge_is_fully_charged>
     226:	88 23       	and	r24, r24
     228:	49 f0       	breq	.+18     	; 0x23c <main+0x3c>
					// When the neuron is connected to a charger, and fully charged:
					tinyLED_set_color(INN_LED, CHARGING_DONE_COLOR);
     22a:	63 e0       	ldi	r22, 0x03	; 3
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 96 06 	call	0xd2c	; 0xd2c <tinyLED_set_color>
					tinyLED_set_color(OUT_LED, LED_OFF);
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 96 06 	call	0xd2c	; 0xd2c <tinyLED_set_color>
     23a:	11 c0       	rjmp	.+34     	; 0x25e <main+0x5e>
				}
				else{
					// When the neuron is charging and is not fully charged
					tinyLED_set_color_mode(OUT_LED, CHARGING_COLOR, SWING);
     23c:	43 e0       	ldi	r20, 0x03	; 3
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
					tinyLED_set_color(INN_LED, LED_OFF);
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 96 06 	call	0xd2c	; 0xd2c <tinyLED_set_color>
     24e:	07 c0       	rjmp	.+14     	; 0x25e <main+0x5e>
				// Main loop			
				
				// Set LED
				// If the out led is turned LED_OFF, and the ping color is not disabled,
				// we turn on ping mode
				if(tinyLED_get_color(OUT_LED) == LED_OFF && PING_COLOR != LED_OFF){
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <tinyLED_get_color>
					tinyLED_set_color_mode(OUT_LED, PING_COLOR, PING);
				}				
				
				// Update button	
				tinyButton_update();
     256:	0e 94 d6 03 	call	0x7ac	; 0x7ac <tinyButton_update>
				
				// Update the potential (This is where most of the important stuff happens)
				tinyPotential_update();
     25a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <tinyPotential_update>
			}
			// Update LED
			tinyLED_update();
     25e:	0e 94 ca 06 	call	0xd94	; 0xd94 <tinyLED_update>
				
			// Switch transistors
			tinyCharge_set_transistors();
     262:	0e 94 a2 04 	call	0x944	; 0x944 <tinyCharge_set_transistors>
			
			// Prepare for next cycle
			tinyISR_setflag(false);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 50 06 	call	0xca0	; 0xca0 <tinyISR_setflag>
			tinyDebugger_send_uint32("time", tinyTime_now());
     26c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <tinyTime_now>
     270:	ab 01       	movw	r20, r22
     272:	bc 01       	movw	r22, r24
     274:	86 e0       	ldi	r24, 0x06	; 6
     276:	96 ea       	ldi	r25, 0xA6	; 166
     278:	0e 94 aa 04 	call	0x954	; 0x954 <tinyDebugger_send_uint32>
			tinyDebugger_end_line();
     27c:	0e 94 03 05 	call	0xa06	; 0xa06 <tinyDebugger_end_line>
     280:	c6 cf       	rjmp	.-116    	; 0x20e <main+0xe>

00000282 <ADC_0_init>:
     282:	e0 e4       	ldi	r30, 0x40	; 64
     284:	f6 e0       	ldi	r31, 0x06	; 6
     286:	80 e1       	ldi	r24, 0x10	; 16
     288:	82 83       	std	Z+2, r24	; 0x02
     28a:	85 e0       	ldi	r24, 0x05	; 5
     28c:	80 83       	st	Z, r24
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	08 95       	ret

00000292 <ADC_0_is_conversion_done>:
     292:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     296:	81 70       	andi	r24, 0x01	; 1
     298:	08 95       	ret

0000029a <ADC_0_get_conversion>:
     29a:	e0 e4       	ldi	r30, 0x40	; 64
     29c:	f6 e0       	ldi	r31, 0x06	; 6
     29e:	86 83       	std	Z+6, r24	; 0x06
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 87       	std	Z+8, r24	; 0x08
     2a4:	0e 94 49 01 	call	0x292	; 0x292 <ADC_0_is_conversion_done>
     2a8:	88 23       	and	r24, r24
     2aa:	e1 f3       	breq	.-8      	; 0x2a4 <ADC_0_get_conversion+0xa>
     2ac:	e0 e4       	ldi	r30, 0x40	; 64
     2ae:	f6 e0       	ldi	r31, 0x06	; 6
     2b0:	20 89       	ldd	r18, Z+16	; 0x10
     2b2:	31 89       	ldd	r19, Z+17	; 0x11
     2b4:	93 85       	ldd	r25, Z+11	; 0x0b
     2b6:	91 60       	ori	r25, 0x01	; 1
     2b8:	93 87       	std	Z+11, r25	; 0x0b
     2ba:	c9 01       	movw	r24, r18
     2bc:	08 95       	ret

000002be <BOD_init>:
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	08 95       	ret

000002c2 <DIGITAL_GLUE_LOGIC_0_init>:
     2c2:	e0 ec       	ldi	r30, 0xC0	; 192
     2c4:	f1 e0       	ldi	r31, 0x01	; 1
     2c6:	28 ea       	ldi	r18, 0xA8	; 168
     2c8:	20 87       	std	Z+8, r18	; 0x08
     2ca:	98 e0       	ldi	r25, 0x08	; 8
     2cc:	97 83       	std	Z+7, r25	; 0x07
     2ce:	8b eb       	ldi	r24, 0xBB	; 187
     2d0:	86 83       	std	Z+6, r24	; 0x06
     2d2:	39 e0       	ldi	r19, 0x09	; 9
     2d4:	35 83       	std	Z+5, r19	; 0x05
     2d6:	24 87       	std	Z+12, r18	; 0x0c
     2d8:	93 87       	std	Z+11, r25	; 0x0b
     2da:	82 87       	std	Z+10, r24	; 0x0a
     2dc:	81 e4       	ldi	r24, 0x41	; 65
     2de:	80 83       	st	Z, r24
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	08 95       	ret

000002e4 <CLKCTRL_init>:
     2e4:	47 e0       	ldi	r20, 0x07	; 7
     2e6:	68 ed       	ldi	r22, 0xD8	; 216
     2e8:	8c e7       	ldi	r24, 0x7C	; 124
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 4f 02 	call	0x49e	; 0x49e <protected_write_io>
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	68 ed       	ldi	r22, 0xD8	; 216
     2f4:	81 e6       	ldi	r24, 0x61	; 97
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 4f 02 	call	0x49e	; 0x49e <protected_write_io>
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret

00000300 <CPUINT_init>:
     300:	78 94       	sei
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	08 95       	ret

00000306 <DAC_0_init>:
     306:	81 e4       	ldi	r24, 0x41	; 65
     308:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	08 95       	ret

00000310 <DAC_0_uninit>:
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	08 95       	ret

0000031a <DAC_0_enable>:
     31a:	e0 ea       	ldi	r30, 0xA0	; 160
     31c:	f6 e0       	ldi	r31, 0x06	; 6
     31e:	80 81       	ld	r24, Z
     320:	81 60       	ori	r24, 0x01	; 1
     322:	80 83       	st	Z, r24
     324:	08 95       	ret

00000326 <DAC_0_disable>:
     326:	e0 ea       	ldi	r30, 0xA0	; 160
     328:	f6 e0       	ldi	r31, 0x06	; 6
     32a:	80 81       	ld	r24, Z
     32c:	8e 7f       	andi	r24, 0xFE	; 254
     32e:	80 83       	st	Z, r24
     330:	08 95       	ret

00000332 <DAC_0_set_output>:
     332:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     336:	08 95       	ret

00000338 <mcu_init>:
     338:	e0 e1       	ldi	r30, 0x10	; 16
     33a:	f4 e0       	ldi	r31, 0x04	; 4
     33c:	80 81       	ld	r24, Z
     33e:	88 60       	ori	r24, 0x08	; 8
     340:	81 93       	st	Z+, r24
     342:	e8 31       	cpi	r30, 0x18	; 24
     344:	84 e0       	ldi	r24, 0x04	; 4
     346:	f8 07       	cpc	r31, r24
     348:	c9 f7       	brne	.-14     	; 0x33c <mcu_init+0x4>
     34a:	e0 e3       	ldi	r30, 0x30	; 48
     34c:	f4 e0       	ldi	r31, 0x04	; 4
     34e:	80 81       	ld	r24, Z
     350:	88 60       	ori	r24, 0x08	; 8
     352:	81 93       	st	Z+, r24
     354:	e8 33       	cpi	r30, 0x38	; 56
     356:	84 e0       	ldi	r24, 0x04	; 4
     358:	f8 07       	cpc	r31, r24
     35a:	c9 f7       	brne	.-14     	; 0x34e <mcu_init+0x16>
     35c:	e0 e5       	ldi	r30, 0x50	; 80
     35e:	f4 e0       	ldi	r31, 0x04	; 4
     360:	80 81       	ld	r24, Z
     362:	88 60       	ori	r24, 0x08	; 8
     364:	81 93       	st	Z+, r24
     366:	e8 35       	cpi	r30, 0x58	; 88
     368:	84 e0       	ldi	r24, 0x04	; 4
     36a:	f8 07       	cpc	r31, r24
     36c:	c9 f7       	brne	.-14     	; 0x360 <mcu_init+0x28>
     36e:	08 95       	ret

00000370 <ADC_0_initialization>:
     370:	e5 e1       	ldi	r30, 0x15	; 21
     372:	f4 e0       	ldi	r31, 0x04	; 4
     374:	80 81       	ld	r24, Z
     376:	88 7f       	andi	r24, 0xF8	; 248
     378:	84 60       	ori	r24, 0x04	; 4
     37a:	80 83       	st	Z, r24
     37c:	80 81       	ld	r24, Z
     37e:	87 7f       	andi	r24, 0xF7	; 247
     380:	80 83       	st	Z, r24
     382:	e7 e1       	ldi	r30, 0x17	; 23
     384:	f4 e0       	ldi	r31, 0x04	; 4
     386:	80 81       	ld	r24, Z
     388:	88 7f       	andi	r24, 0xF8	; 248
     38a:	84 60       	ori	r24, 0x04	; 4
     38c:	80 83       	st	Z, r24
     38e:	80 81       	ld	r24, Z
     390:	87 7f       	andi	r24, 0xF7	; 247
     392:	80 83       	st	Z, r24
     394:	e0 e5       	ldi	r30, 0x50	; 80
     396:	f4 e0       	ldi	r31, 0x04	; 4
     398:	80 81       	ld	r24, Z
     39a:	88 7f       	andi	r24, 0xF8	; 248
     39c:	84 60       	ori	r24, 0x04	; 4
     39e:	80 83       	st	Z, r24
     3a0:	80 81       	ld	r24, Z
     3a2:	87 7f       	andi	r24, 0xF7	; 247
     3a4:	80 83       	st	Z, r24
     3a6:	e1 e5       	ldi	r30, 0x51	; 81
     3a8:	f4 e0       	ldi	r31, 0x04	; 4
     3aa:	80 81       	ld	r24, Z
     3ac:	88 7f       	andi	r24, 0xF8	; 248
     3ae:	84 60       	ori	r24, 0x04	; 4
     3b0:	80 83       	st	Z, r24
     3b2:	80 81       	ld	r24, Z
     3b4:	87 7f       	andi	r24, 0xF7	; 247
     3b6:	80 83       	st	Z, r24
     3b8:	e3 e5       	ldi	r30, 0x53	; 83
     3ba:	f4 e0       	ldi	r31, 0x04	; 4
     3bc:	80 81       	ld	r24, Z
     3be:	88 7f       	andi	r24, 0xF8	; 248
     3c0:	84 60       	ori	r24, 0x04	; 4
     3c2:	80 83       	st	Z, r24
     3c4:	80 81       	ld	r24, Z
     3c6:	87 7f       	andi	r24, 0xF7	; 247
     3c8:	80 83       	st	Z, r24
     3ca:	0e 94 41 01 	call	0x282	; 0x282 <ADC_0_init>
     3ce:	08 95       	ret

000003d0 <USART_0_initialization>:
     3d0:	23 98       	cbi	0x04, 3	; 4
     3d2:	e3 e3       	ldi	r30, 0x33	; 51
     3d4:	f4 e0       	ldi	r31, 0x04	; 4
     3d6:	80 81       	ld	r24, Z
     3d8:	87 7f       	andi	r24, 0xF7	; 247
     3da:	80 83       	st	Z, r24
     3dc:	22 9a       	sbi	0x04, 2	; 4
     3de:	2a 98       	cbi	0x05, 2	; 5
     3e0:	0e 94 89 02 	call	0x512	; 0x512 <USART_0_init>
     3e4:	08 95       	ret

000003e6 <TIMER_0_initialization>:
     3e6:	25 9a       	sbi	0x04, 5	; 4
     3e8:	2d 98       	cbi	0x05, 5	; 5
     3ea:	e0 e0       	ldi	r30, 0x00	; 0
     3ec:	f2 e0       	ldi	r31, 0x02	; 2
     3ee:	82 81       	ldd	r24, Z+2	; 0x02
     3f0:	84 60       	ori	r24, 0x04	; 4
     3f2:	82 83       	std	Z+2, r24	; 0x02
     3f4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <TIMER_0_init>
     3f8:	08 95       	ret

000003fa <DIGITAL_GLUE_LOGIC_0_initialization>:
     3fa:	24 9a       	sbi	0x04, 4	; 4
     3fc:	2c 98       	cbi	0x05, 4	; 5
     3fe:	e0 e0       	ldi	r30, 0x00	; 0
     400:	f2 e0       	ldi	r31, 0x02	; 2
     402:	80 81       	ld	r24, Z
     404:	80 61       	ori	r24, 0x10	; 16
     406:	80 83       	st	Z, r24
     408:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIGITAL_GLUE_LOGIC_0_init>
     40c:	08 95       	ret

0000040e <SPI_0_initialization>:
     40e:	02 98       	cbi	0x00, 2	; 0
     410:	e2 e1       	ldi	r30, 0x12	; 18
     412:	f4 e0       	ldi	r31, 0x04	; 4
     414:	80 81       	ld	r24, Z
     416:	87 7f       	andi	r24, 0xF7	; 247
     418:	80 83       	st	Z, r24
     41a:	01 9a       	sbi	0x00, 1	; 0
     41c:	09 98       	cbi	0x01, 1	; 1
     41e:	03 9a       	sbi	0x00, 3	; 0
     420:	0b 98       	cbi	0x01, 3	; 1
     422:	04 9a       	sbi	0x00, 4	; 0
     424:	0c 98       	cbi	0x01, 4	; 1
     426:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_0_init>
     42a:	08 95       	ret

0000042c <DAC_0_initialization>:
     42c:	e6 e1       	ldi	r30, 0x16	; 22
     42e:	f4 e0       	ldi	r31, 0x04	; 4
     430:	80 81       	ld	r24, Z
     432:	88 7f       	andi	r24, 0xF8	; 248
     434:	84 60       	ori	r24, 0x04	; 4
     436:	80 83       	st	Z, r24
     438:	80 81       	ld	r24, Z
     43a:	87 7f       	andi	r24, 0xF7	; 247
     43c:	80 83       	st	Z, r24
     43e:	0e 94 83 01 	call	0x306	; 0x306 <DAC_0_init>
     442:	08 95       	ret

00000444 <system_init>:
     444:	0e 94 9c 01 	call	0x338	; 0x338 <mcu_init>
     448:	26 98       	cbi	0x04, 6	; 4
     44a:	e6 e3       	ldi	r30, 0x36	; 54
     44c:	f4 e0       	ldi	r31, 0x04	; 4
     44e:	80 81       	ld	r24, Z
     450:	87 7f       	andi	r24, 0xF7	; 247
     452:	80 83       	st	Z, r24
     454:	27 98       	cbi	0x04, 7	; 4
     456:	e7 e3       	ldi	r30, 0x37	; 55
     458:	f4 e0       	ldi	r31, 0x04	; 4
     45a:	80 81       	ld	r24, Z
     45c:	87 7f       	andi	r24, 0xF7	; 247
     45e:	80 83       	st	Z, r24
     460:	42 98       	cbi	0x08, 2	; 8
     462:	e2 e5       	ldi	r30, 0x52	; 82
     464:	f4 e0       	ldi	r31, 0x04	; 4
     466:	80 81       	ld	r24, Z
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	80 83       	st	Z, r24
     46c:	45 9a       	sbi	0x08, 5	; 8
     46e:	4d 9a       	sbi	0x09, 5	; 9
     470:	0e 94 72 01 	call	0x2e4	; 0x2e4 <CLKCTRL_init>
     474:	0e 94 53 02 	call	0x4a6	; 0x4a6 <RTC_0_init>
     478:	0e 94 b8 01 	call	0x370	; 0x370 <ADC_0_initialization>
     47c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <USART_0_initialization>
     480:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <TIMER_0_initialization>
     484:	0e 94 fd 01 	call	0x3fa	; 0x3fa <DIGITAL_GLUE_LOGIC_0_initialization>
     488:	0e 94 07 02 	call	0x40e	; 0x40e <SPI_0_initialization>
     48c:	0e 94 16 02 	call	0x42c	; 0x42c <DAC_0_initialization>
     490:	0e 94 80 01 	call	0x300	; 0x300 <CPUINT_init>
     494:	0e 94 6f 02 	call	0x4de	; 0x4de <SLPCTRL_init>
     498:	0e 94 5f 01 	call	0x2be	; 0x2be <BOD_init>
     49c:	08 95       	ret

0000049e <protected_write_io>:
     49e:	fc 01       	movw	r30, r24
     4a0:	64 bf       	out	0x34, r22	; 52
     4a2:	40 83       	st	Z, r20
     4a4:	08 95       	ret

000004a6 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     4a6:	e0 e4       	ldi	r30, 0x40	; 64
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	81 81       	ldd	r24, Z+1	; 0x01
     4ac:	81 11       	cpse	r24, r1
     4ae:	fd cf       	rjmp	.-6      	; 0x4aa <RTC_0_init+0x4>
	}

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	RTC.CNT = 0x20; /* Counter: 0x20 */
     4b0:	e0 e4       	ldi	r30, 0x40	; 64
     4b2:	f1 e0       	ldi	r31, 0x01	; 1
     4b4:	80 e2       	ldi	r24, 0x20	; 32
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	80 87       	std	Z+8, r24	; 0x08
     4ba:	91 87       	std	Z+9, r25	; 0x09

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     4bc:	81 e8       	ldi	r24, 0x81	; 129
     4be:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x20 / TIMESCALE; /* Period: 0x20 */
     4c0:	80 e8       	ldi	r24, 0x80	; 128
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	82 87       	std	Z+10, r24	; 0x0a
     4c6:	93 87       	std	Z+11, r25	; 0x0b

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	RTC.DBGCTRL = 1 << RTC_DBGRUN_bp; /* Run in debug: enabled */
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	85 83       	std	Z+5, r24	; 0x05

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
     4cc:	82 83       	std	Z+2, r24	; 0x02
	              | 1 << RTC_OVF_bp; /* Overflow Interrupt enable: enabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     4ce:	81 89       	ldd	r24, Z+17	; 0x11
     4d0:	81 11       	cpse	r24, r1
     4d2:	fd cf       	rjmp	.-6      	; 0x4ce <RTC_0_init+0x28>
	}

	RTC.PITCTRLA = RTC_PERIOD_OFF_gc    /* Off */
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	08 95       	ret

000004de <SLPCTRL_init>:
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	08 95       	ret

000004e2 <SPI_0_init>:
     4e2:	e0 e2       	ldi	r30, 0x20	; 32
     4e4:	f8 e0       	ldi	r31, 0x08	; 8
     4e6:	83 e2       	ldi	r24, 0x23	; 35
     4e8:	80 83       	st	Z, r24
     4ea:	84 e0       	ldi	r24, 0x04	; 4
     4ec:	81 83       	std	Z+1, r24	; 0x01
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	08 95       	ret

000004f2 <TIMER_0_init>:
     4f2:	e0 e0       	ldi	r30, 0x00	; 0
     4f4:	fa e0       	ldi	r31, 0x0A	; 10
     4f6:	84 e0       	ldi	r24, 0x04	; 4
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	84 a7       	std	Z+44, r24	; 0x2c
     4fc:	95 a7       	std	Z+45, r25	; 0x2d
     4fe:	83 e4       	ldi	r24, 0x43	; 67
     500:	81 83       	std	Z+1, r24	; 0x01
     502:	84 e0       	ldi	r24, 0x04	; 4
     504:	82 83       	std	Z+2, r24	; 0x02
     506:	87 e0       	ldi	r24, 0x07	; 7
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	86 a3       	std	Z+38, r24	; 0x26
     50c:	97 a3       	std	Z+39, r25	; 0x27
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	08 95       	ret

00000512 <USART_0_init>:
     512:	e0 e0       	ldi	r30, 0x00	; 0
     514:	f8 e0       	ldi	r31, 0x08	; 8
     516:	8b e5       	ldi	r24, 0x5B	; 91
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	80 87       	std	Z+8, r24	; 0x08
     51c:	91 87       	std	Z+9, r25	; 0x09
     51e:	80 ec       	ldi	r24, 0xC0	; 192
     520:	86 83       	std	Z+6, r24	; 0x06
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	98 e3       	ldi	r25, 0x38	; 56
     526:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <__iob+0x2>
     52a:	90 93 6d 38 	sts	0x386D, r25	; 0x80386d <__iob+0x3>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	08 95       	ret

00000532 <USART_0_write>:
     532:	e0 e0       	ldi	r30, 0x00	; 0
     534:	f8 e0       	ldi	r31, 0x08	; 8
     536:	94 81       	ldd	r25, Z+4	; 0x04
     538:	95 ff       	sbrs	r25, 5
     53a:	fd cf       	rjmp	.-6      	; 0x536 <USART_0_write+0x4>
     53c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     540:	08 95       	ret

00000542 <USART_0_printCHAR>:
     542:	0e 94 99 02 	call	0x532	; 0x532 <USART_0_write>
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	08 95       	ret

0000054c <tinyAxon_add_pulse>:
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
	{
		if(pulse_queue[i] == 0){
     54c:	20 91 16 38 	lds	r18, 0x3816	; 0x803816 <__data_end>
     550:	30 91 17 38 	lds	r19, 0x3817	; 0x803817 <__data_end+0x1>
     554:	23 2b       	or	r18, r19
     556:	51 f0       	breq	.+20     	; 0x56c <tinyAxon_add_pulse+0x20>
     558:	e8 e1       	ldi	r30, 0x18	; 24
     55a:	f8 e3       	ldi	r31, 0x38	; 56
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	b9 01       	movw	r22, r18
     562:	41 91       	ld	r20, Z+
     564:	51 91       	ld	r21, Z+
     566:	45 2b       	or	r20, r21
     568:	81 f4       	brne	.+32     	; 0x58a <tinyAxon_add_pulse+0x3e>
     56a:	02 c0       	rjmp	.+4      	; 0x570 <tinyAxon_add_pulse+0x24>
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
			pulse_queue[i] = new_pulse;
     570:	66 0f       	add	r22, r22
     572:	77 1f       	adc	r23, r23
     574:	fb 01       	movw	r30, r22
     576:	ea 5e       	subi	r30, 0xEA	; 234
     578:	f7 4c       	sbci	r31, 0xC7	; 199
     57a:	80 83       	st	Z, r24
     57c:	91 83       	std	Z+1, r25	; 0x01
			pulses_in_queue++;
     57e:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     582:	8f 5f       	subi	r24, 0xFF	; 255
     584:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <pulses_in_queue>
			// We return so we only ever add one
			break;
     588:	08 95       	ret
     58a:	2f 5f       	subi	r18, 0xFF	; 255
     58c:	3f 4f       	sbci	r19, 0xFF	; 255
*/
static void tinyAxon_add_pulse(uint16_t new_pulse)
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     58e:	2a 30       	cpi	r18, 0x0A	; 10
     590:	31 05       	cpc	r19, r1
     592:	31 f7       	brne	.-52     	; 0x560 <tinyAxon_add_pulse+0x14>
     594:	08 95       	ret

00000596 <tinyAxon_is_firing>:
// DAC has no DAC_0_get_output, so we keep track of this here.
uint8_t axonOutputValue = 0;


_Bool tinyAxon_is_firing(){
	return axonOutputValue != NO_SIGNAL_OUTPUT;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <axonOutputValue>
     59c:	91 11       	cpse	r25, r1
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <tinyAxon_is_firing+0xc>
     5a0:	80 e0       	ldi	r24, 0x00	; 0
}
     5a2:	08 95       	ret

000005a4 <find_newest_pulse>:
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
     5a4:	40 91 16 38 	lds	r20, 0x3816	; 0x803816 <__data_end>
     5a8:	50 91 17 38 	lds	r21, 0x3817	; 0x803817 <__data_end+0x1>
     5ac:	e8 e1       	ldi	r30, 0x18	; 24
     5ae:	f8 e3       	ldi	r31, 0x38	; 56
	
// This function will be used with pulse_queue to find the newest pulse
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
     5b0:	80 e0       	ldi	r24, 0x00	; 0
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     5b2:	91 e0       	ldi	r25, 0x01	; 1
		if (pulse_queue[current_index] > max) {
     5b4:	21 91       	ld	r18, Z+
     5b6:	31 91       	ld	r19, Z+
     5b8:	42 17       	cp	r20, r18
     5ba:	53 07       	cpc	r21, r19
     5bc:	10 f4       	brcc	.+4      	; 0x5c2 <find_newest_pulse+0x1e>
     5be:	89 2f       	mov	r24, r25
			return_index = current_index;
			max = pulse_queue[current_index];
     5c0:	a9 01       	movw	r20, r18
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     5c2:	9f 5f       	subi	r25, 0xFF	; 255
     5c4:	9a 30       	cpi	r25, 0x0A	; 10
     5c6:	b1 f7       	brne	.-20     	; 0x5b4 <find_newest_pulse+0x10>
			return_index = current_index;
			max = pulse_queue[current_index];
		}
	}
	return return_index;
}
     5c8:	08 95       	ret

000005ca <tinyAxon_stop_sending_pulse>:
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
}

void tinyAxon_stop_sending_pulse()
{
	DAC_0_set_output(NO_SIGNAL_OUTPUT);
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 99 01 	call	0x332	; 0x332 <DAC_0_set_output>
	axonOutputValue=NO_SIGNAL_OUTPUT;
     5d2:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <axonOutputValue>
     5d6:	08 95       	ret

000005d8 <tinyAxon_remove_pulse>:

/*
If the potential is very low, we want to try to remove a pulse.
*/
bool tinyAxon_remove_pulse(void)
{
     5d8:	cf 93       	push	r28
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
     5da:	c0 91 2a 38 	lds	r28, 0x382A	; 0x80382a <pulses_in_queue>
     5de:	cc 23       	and	r28, r28
     5e0:	c9 f0       	breq	.+50     	; 0x614 <tinyAxon_remove_pulse+0x3c>
		//There was no pulse to remove.
		return false;
	}
	else{
		// If we are to remove a pulse, we want to remove the one that will fire last.
		uint8_t pulse_index = find_newest_pulse();
     5e2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <find_newest_pulse>
		uint16_t newest_pulse = pulse_queue[pulse_index];
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	fc 01       	movw	r30, r24
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	ea 5e       	subi	r30, 0xEA	; 234
     5f0:	f7 4c       	sbci	r31, 0xC7	; 199
	
		// Now we want to check if the pulse is too far away to be affected by the low potential, or close enough that we decide to remove it.
		// (When we say that the pulse is too far away, it refers to the biological process of how the potential spreads from Dendrites to axon).
		if(newest_pulse > PULSE_NO_RETURN_TIME){
     5f2:	20 81       	ld	r18, Z
     5f4:	31 81       	ldd	r19, Z+1	; 0x01
     5f6:	2d 33       	cpi	r18, 0x3D	; 61
     5f8:	31 05       	cpc	r19, r1
     5fa:	70 f0       	brcs	.+28     	; 0x618 <tinyAxon_remove_pulse+0x40>
			// We decided to remove the pulse
			pulse_queue[pulse_index] = 0;
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	fc 01       	movw	r30, r24
     602:	ea 5e       	subi	r30, 0xEA	; 234
     604:	f7 4c       	sbci	r31, 0xC7	; 199
     606:	10 82       	st	Z, r1
     608:	11 82       	std	Z+1, r1	; 0x01
			pulses_in_queue--;
     60a:	c1 50       	subi	r28, 0x01	; 1
     60c:	c0 93 2a 38 	sts	0x382A, r28	; 0x80382a <pulses_in_queue>
			return true;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	03 c0       	rjmp	.+6      	; 0x61a <tinyAxon_remove_pulse+0x42>
bool tinyAxon_remove_pulse(void)
{
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
		//There was no pulse to remove.
		return false;
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	01 c0       	rjmp	.+2      	; 0x61a <tinyAxon_remove_pulse+0x42>
			pulses_in_queue--;
			return true;
		}
		// Here we have found that there is a pulse queued, but it is old enough to let pass anyway, so now we need to put it back into the queue.
		else{
			return false;
     618:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <tinyAxon_update_potential>:
/*
Decides whether or not the axon should fire
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	6b 01       	movw	r12, r22
     628:	7c 01       	movw	r14, r24
	//While the neuron has enough potential to fire, we want to fire more
	while (potential >= THRESHOLD_POTENTIAL)
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	48 ec       	ldi	r20, 0xC8	; 200
     630:	51 e4       	ldi	r21, 0x41	; 65
     632:	0e 94 34 0c 	call	0x1868	; 0x1868 <__gesf2>
     636:	88 23       	and	r24, r24
     638:	bc f1       	brlt	.+110    	; 0x6a8 <tinyAxon_update_potential+0x8a>
	{
		// We have to check if there are already queued pulses, so that the frequency never exceeds FIRE_DELAY
		if(pulses_in_queue>0){
     63a:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     63e:	88 23       	and	r24, r24
     640:	b1 f0       	breq	.+44     	; 0x66e <tinyAxon_update_potential+0x50>
			uint16_t newest_pulse = pulse_queue[find_newest_pulse()];
     642:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <find_newest_pulse>
     646:	e8 2f       	mov	r30, r24
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	ea 5e       	subi	r30, 0xEA	; 234
     650:	f7 4c       	sbci	r31, 0xC7	; 199
			
			// There is at least one pulse in the queue, and it is "so close", that we need to offset the new pulse, so that we keep at least
			// one FIRE_DELAY between each pulse
			if(newest_pulse + FIRE_DELAY > TRAVLE_DELAY){
     652:	80 81       	ld	r24, Z
     654:	91 81       	ldd	r25, Z+1	; 0x01
     656:	0a 96       	adiw	r24, 0x0a	; 10
     658:	85 36       	cpi	r24, 0x65	; 101
     65a:	91 05       	cpc	r25, r1
     65c:	18 f0       	brcs	.+6      	; 0x664 <tinyAxon_update_potential+0x46>
				tinyAxon_add_pulse(newest_pulse + FIRE_DELAY);
     65e:	0e 94 a6 02 	call	0x54c	; 0x54c <tinyAxon_add_pulse>
     662:	09 c0       	rjmp	.+18     	; 0x676 <tinyAxon_update_potential+0x58>
			}
			// There is at least one pulse in the queue, but it's "far enough away" to ignore
			else{
				tinyAxon_add_pulse(TRAVLE_DELAY);
     664:	84 e6       	ldi	r24, 0x64	; 100
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 a6 02 	call	0x54c	; 0x54c <tinyAxon_add_pulse>
     66c:	04 c0       	rjmp	.+8      	; 0x676 <tinyAxon_update_potential+0x58>
			}
		}
		// There are no pulses in the queue, so we add a pulse as normal
		else{
			tinyAxon_add_pulse(TRAVLE_DELAY);		
     66e:	84 e6       	ldi	r24, 0x64	; 100
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 a6 02 	call	0x54c	; 0x54c <tinyAxon_add_pulse>
		}
		
		potential += POSTFIRE_POTENTIAL_REACTION; // This is usually defined as a negative value, don't be confused by the +=
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	48 ec       	ldi	r20, 0xC8	; 200
     67c:	51 e4       	ldi	r21, 0x41	; 65
     67e:	c7 01       	movw	r24, r14
     680:	b6 01       	movw	r22, r12
     682:	0e 94 ef 09 	call	0x13de	; 0x13de <__subsf3>
     686:	6b 01       	movw	r12, r22
     688:	7c 01       	movw	r14, r24
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     68a:	45 e0       	ldi	r20, 0x05	; 5
     68c:	63 e0       	ldi	r22, 0x03	; 3
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
	//While the neuron has enough potential to fire, we want to fire more
	while (potential >= THRESHOLD_POTENTIAL)
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	48 ec       	ldi	r20, 0xC8	; 200
     69a:	51 e4       	ldi	r21, 0x41	; 65
     69c:	c7 01       	movw	r24, r14
     69e:	b6 01       	movw	r22, r12
     6a0:	0e 94 34 0c 	call	0x1868	; 0x1868 <__gesf2>
     6a4:	88 23       	and	r24, r24
     6a6:	4c f6       	brge	.-110    	; 0x63a <tinyAxon_update_potential+0x1c>
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
	}
	
	// If the neuron has a very low potential, we want to remove a pulse from the queue (if there is one)
	if(potential < -THRESHOLD_POTENTIAL)
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	48 ec       	ldi	r20, 0xC8	; 200
     6ae:	51 ec       	ldi	r21, 0xC1	; 193
     6b0:	c7 01       	movw	r24, r14
     6b2:	b6 01       	movw	r22, r12
     6b4:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__cmpsf2>
     6b8:	88 23       	and	r24, r24
     6ba:	0c f0       	brlt	.+2      	; 0x6be <tinyAxon_update_potential+0xa0>
     6bc:	46 c0       	rjmp	.+140    	; 0x74a <tinyAxon_update_potential+0x12c>
	{
		if(pulses_in_queue > 0) // Perhaps this should be a separate variable? For now, we will just simply use -THRESHOLD_POTENTIAL
     6be:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     6c2:	88 23       	and	r24, r24
     6c4:	11 f1       	breq	.+68     	; 0x70a <tinyAxon_update_potential+0xec>
		{
			// The neurons potential is low enough to attempt to remove a queued fire (Fire less)
			if(tinyAxon_remove_pulse())
     6c6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <tinyAxon_remove_pulse>
     6ca:	88 23       	and	r24, r24
     6cc:	f1 f1       	breq	.+124    	; 0x74a <tinyAxon_update_potential+0x12c>
			{
				// The potential has evened out a bit
				potential += THRESHOLD_POTENTIAL;
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	48 ec       	ldi	r20, 0xC8	; 200
     6d4:	51 e4       	ldi	r21, 0x41	; 65
     6d6:	c7 01       	movw	r24, r14
     6d8:	b6 01       	movw	r22, r12
     6da:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__addsf3>
     6de:	6b 01       	movw	r12, r22
     6e0:	7c 01       	movw	r14, r24
     6e2:	33 c0       	rjmp	.+102    	; 0x74a <tinyAxon_update_potential+0x12c>
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
		{
			if(pulse_queue[i] != 0){
     6e4:	80 81       	ld	r24, Z
     6e6:	91 81       	ldd	r25, Z+1	; 0x01
     6e8:	00 97       	sbiw	r24, 0x00	; 0
     6ea:	39 f0       	breq	.+14     	; 0x6fa <tinyAxon_update_potential+0xdc>
				pulse_queue[i]--;
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	80 83       	st	Z, r24
     6f0:	91 83       	std	Z+1, r25	; 0x01
				
				// If the time went from 1 to 0, we fire the axon
				if(pulse_queue[i] == 0){
     6f2:	89 2b       	or	r24, r25
     6f4:	11 f4       	brne	.+4      	; 0x6fa <tinyAxon_update_potential+0xdc>
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
	pulses_in_queue--;
     6f6:	41 50       	subi	r20, 0x01	; 1
Function to set firing.
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
     6f8:	51 e0       	ldi	r21, 0x01	; 1
     6fa:	32 96       	adiw	r30, 0x02	; 2
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     6fc:	e2 17       	cp	r30, r18
     6fe:	f3 07       	cpc	r31, r19
     700:	89 f7       	brne	.-30     	; 0x6e4 <tinyAxon_update_potential+0xc6>
     702:	50 93 2c 38 	sts	0x382C, r21	; 0x80382c <tinyAxon_should_fire>
     706:	40 93 2a 38 	sts	0x382A, r20	; 0x80382a <pulses_in_queue>
The function should set the DAC to fire for two
update cycles once the pulse flag is set high.
*/
static void tinyAxon_update_pulse_transmitter(void)
{
	if (tinyAxon_should_fire)
     70a:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <tinyAxon_should_fire>
     70e:	88 23       	and	r24, r24
     710:	91 f0       	breq	.+36     	; 0x736 <tinyAxon_update_potential+0x118>
	{
		tinyAxon_should_fire = false;
     712:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <tinyAxon_should_fire>
*/
static void tinyAxon_start_sending_pulse()
{
	if (NEURONTYPE == EXCITATORY_NEURON)
	{
		DAC_0_set_output(EXCITATORY_NEURON_OUTPUT);
     716:	80 e8       	ldi	r24, 0x80	; 128
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 99 01 	call	0x332	; 0x332 <DAC_0_set_output>
		axonOutputValue=EXCITATORY_NEURON_OUTPUT;
     71e:	80 e8       	ldi	r24, 0x80	; 128
     720:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <axonOutputValue>
	{
		DAC_0_set_output(INHIBITORY_NEURON_OUTPUT);
		axonOutputValue=INHIBITORY_NEURON_OUTPUT;
	}
	
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
     724:	45 e0       	ldi	r20, 0x05	; 5
     726:	65 e0       	ldi	r22, 0x05	; 5
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
{
	if (tinyAxon_should_fire)
	{
		tinyAxon_should_fire = false;
		tinyAxon_start_sending_pulse();
		tinyAxon_has_just_fired = true;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <tinyAxon_has_just_fired>
     734:	15 c0       	rjmp	.+42     	; 0x760 <tinyAxon_update_potential+0x142>
		
	}
	else if (tinyAxon_has_just_fired)
     736:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <tinyAxon_has_just_fired>
     73a:	88 23       	and	r24, r24
     73c:	19 f0       	breq	.+6      	; 0x744 <tinyAxon_update_potential+0x126>
	{
		tinyAxon_has_just_fired = false;
     73e:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <tinyAxon_has_just_fired>
     742:	0e c0       	rjmp	.+28     	; 0x760 <tinyAxon_update_potential+0x142>
	}
	else if (!tinyAxon_has_just_fired && !tinyAxon_should_fire)
	{
		tinyAxon_stop_sending_pulse();
     744:	0e 94 e5 02 	call	0x5ca	; 0x5ca <tinyAxon_stop_sending_pulse>
     748:	0b c0       	rjmp	.+22     	; 0x760 <tinyAxon_update_potential+0x142>
			}
		}
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
     74a:	40 91 2a 38 	lds	r20, 0x382A	; 0x80382a <pulses_in_queue>
     74e:	44 23       	and	r20, r20
     750:	e1 f2       	breq	.-72     	; 0x70a <tinyAxon_update_potential+0xec>
     752:	50 91 2c 38 	lds	r21, 0x382C	; 0x80382c <tinyAxon_should_fire>
     756:	e6 e1       	ldi	r30, 0x16	; 22
     758:	f8 e3       	ldi	r31, 0x38	; 56
     75a:	2a e2       	ldi	r18, 0x2A	; 42
     75c:	38 e3       	ldi	r19, 0x38	; 56
     75e:	c2 cf       	rjmp	.-124    	; 0x6e4 <tinyAxon_update_potential+0xc6>
	}
	
	// Here we set the actual output of the DAC (Digital to Analog Converter)
	tinyAxon_update_pulse_transmitter();
	
	tinyDebugger_send_uint8("Axon", axonOutputValue);
     760:	60 91 2b 38 	lds	r22, 0x382B	; 0x80382b <axonOutputValue>
     764:	8b e0       	ldi	r24, 0x0B	; 11
     766:	96 ea       	ldi	r25, 0xA6	; 166
     768:	0e 94 bc 04 	call	0x978	; 0x978 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("Pulses", pulses_in_queue);
     76c:	60 91 2a 38 	lds	r22, 0x382A	; 0x80382a <pulses_in_queue>
     770:	80 e1       	ldi	r24, 0x10	; 16
     772:	96 ea       	ldi	r25, 0xA6	; 166
     774:	0e 94 bc 04 	call	0x978	; 0x978 <tinyDebugger_send_uint8>
	
	
	return potential;
}
     778:	c7 01       	movw	r24, r14
     77a:	b6 01       	movw	r22, r12
     77c:	ff 90       	pop	r15
     77e:	ef 90       	pop	r14
     780:	df 90       	pop	r13
     782:	cf 90       	pop	r12
     784:	08 95       	ret

00000786 <tinyAxon_check_charge_level>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     786:	66 b1       	in	r22, 0x06	; 6

_Bool tinyAxon_check_charge_level(void)
{
	// We check the AXON_CHECK_PIN. If it is hight while the axon is not firing, it must be connected to a charger
	
	tinyDebugger_send_uint8("Pulses", AXON_CHECK_PIN_get_level());
     788:	66 1f       	adc	r22, r22
     78a:	66 27       	eor	r22, r22
     78c:	66 1f       	adc	r22, r22
     78e:	80 e1       	ldi	r24, 0x10	; 16
     790:	96 ea       	ldi	r25, 0xA6	; 166
     792:	0e 94 bc 04 	call	0x978	; 0x978 <tinyDebugger_send_uint8>
	return (AXON_CHECK_PIN_get_level() && !tinyAxon_has_just_fired);
     796:	37 9b       	sbis	0x06, 7	; 6
     798:	05 c0       	rjmp	.+10     	; 0x7a4 <tinyAxon_check_charge_level+0x1e>
     79a:	90 91 2d 38 	lds	r25, 0x382D	; 0x80382d <tinyAxon_has_just_fired>
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	89 27       	eor	r24, r25
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <tinyAxon_check_charge_level+0x22>
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	81 70       	andi	r24, 0x01	; 1
     7aa:	08 95       	ret

000007ac <tinyButton_update>:
/*
If the button has been let go, we change button_press to true. This only lasts one cycle, before it is set to false again.
If the button is held down for longer than PULSEMODE_BUTTON_PRESS_TIME, we toggle the pulse mode state.
*/
void tinyButton_update(void)
{
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
	button_press = false;
     7b4:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <button_press>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return VPORTC.IN & (1 << pin);
     7b8:	8a b1       	in	r24, 0x0a	; 10
	_Bool button_is_pushed_down = !BUTTON_PIN_get_level(); // The digital port will be read as low if the button is pushed down.
     7ba:	d1 e0       	ldi	r29, 0x01	; 1
     7bc:	c8 2f       	mov	r28, r24
     7be:	c4 70       	andi	r28, 0x04	; 4
     7c0:	82 fd       	sbrc	r24, 2
     7c2:	d0 e0       	ldi	r29, 0x00	; 0

	if (button_is_pushed_down && !button_was_pushed_down)
     7c4:	c1 11       	cpse	r28, r1
     7c6:	39 c0       	rjmp	.+114    	; 0x83a <tinyButton_update+0x8e>
     7c8:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <button_was_pushed_down>
     7cc:	81 11       	cpse	r24, r1
     7ce:	0e c0       	rjmp	.+28     	; 0x7ec <tinyButton_update+0x40>
	{
		tinyButton_start_time = tinyTime_now();
     7d0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <tinyTime_now>
     7d4:	60 93 2e 38 	sts	0x382E, r22	; 0x80382e <tinyButton_start_time>
     7d8:	70 93 2f 38 	sts	0x382F, r23	; 0x80382f <tinyButton_start_time+0x1>
     7dc:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <tinyButton_start_time+0x2>
     7e0:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <tinyButton_start_time+0x3>
	}
	if (button_is_pushed_down && button_was_pushed_down)
     7e4:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <button_was_pushed_down>
     7e8:	88 23       	and	r24, r24
     7ea:	b9 f1       	breq	.+110    	; 0x85a <tinyButton_update+0xae>
	{
		if ((tinyTime_now() - tinyButton_start_time) > PULSEMODE_BUTTON_PRESS_TIME)
     7ec:	0e 94 e6 09 	call	0x13cc	; 0x13cc <tinyTime_now>
     7f0:	00 91 2e 38 	lds	r16, 0x382E	; 0x80382e <tinyButton_start_time>
     7f4:	10 91 2f 38 	lds	r17, 0x382F	; 0x80382f <tinyButton_start_time+0x1>
     7f8:	20 91 30 38 	lds	r18, 0x3830	; 0x803830 <tinyButton_start_time+0x2>
     7fc:	30 91 31 38 	lds	r19, 0x3831	; 0x803831 <tinyButton_start_time+0x3>
     800:	60 1b       	sub	r22, r16
     802:	71 0b       	sbc	r23, r17
     804:	82 0b       	sbc	r24, r18
     806:	93 0b       	sbc	r25, r19
     808:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__floatunsisf>
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	48 ec       	ldi	r20, 0xC8	; 200
     812:	52 e4       	ldi	r21, 0x42	; 66
     814:	0e 94 34 0c 	call	0x1868	; 0x1868 <__gesf2>
     818:	18 16       	cp	r1, r24
     81a:	7c f4       	brge	.+30     	; 0x83a <tinyButton_update+0x8e>
		{
			tinyPulse_toggle_pulse_mode();
     81c:	0e 94 78 09 	call	0x12f0	; 0x12f0 <tinyPulse_toggle_pulse_mode>
			tinyButton_start_time = tinyTime_now();
     820:	0e 94 e6 09 	call	0x13cc	; 0x13cc <tinyTime_now>
     824:	60 93 2e 38 	sts	0x382E, r22	; 0x80382e <tinyButton_start_time>
     828:	70 93 2f 38 	sts	0x382F, r23	; 0x80382f <tinyButton_start_time+0x1>
     82c:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <tinyButton_start_time+0x2>
     830:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <tinyButton_start_time+0x3>
			// We don't want switching to pulse mode to count as a button press, so we ignore the next button press
			ignore_next_button_press = true;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <ignore_next_button_press>
		}
	}
	if (!button_is_pushed_down && button_was_pushed_down)
     83a:	cc 23       	and	r28, r28
     83c:	71 f0       	breq	.+28     	; 0x85a <tinyButton_update+0xae>
     83e:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <button_was_pushed_down>
     842:	88 23       	and	r24, r24
     844:	51 f0       	breq	.+20     	; 0x85a <tinyButton_update+0xae>
	{
		if(!ignore_next_button_press){
     846:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <ignore_next_button_press>
     84a:	81 11       	cpse	r24, r1
     84c:	04 c0       	rjmp	.+8      	; 0x856 <tinyButton_update+0xaa>
			button_press = true;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <button_press>
     854:	02 c0       	rjmp	.+4      	; 0x85a <tinyButton_update+0xae>
		}
		else{
			ignore_next_button_press = false;
     856:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <ignore_next_button_press>
		}
		
	}
	button_was_pushed_down = button_is_pushed_down;
     85a:	d0 93 34 38 	sts	0x3834, r29	; 0x803834 <button_was_pushed_down>
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <tinyButton_update_potential>:

double tinyButton_update_potential(double potential){
	if(button_press){
     868:	20 91 33 38 	lds	r18, 0x3833	; 0x803833 <button_press>
     86c:	22 23       	and	r18, r18
     86e:	31 f0       	breq	.+12     	; 0x87c <tinyButton_update_potential+0x14>
		potential += BUTTON_PRESS_REACTION;
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	40 ed       	ldi	r20, 0xD0	; 208
     876:	51 e4       	ldi	r21, 0x41	; 65
     878:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__addsf3>
	}
	return potential;
}
     87c:	08 95       	ret

0000087e <tinyCharge_is_connected_to_charger>:
*/
uint8_t charge_counter = 0; 

_Bool tinyCharge_is_connected_to_charger(){
	return connected_to_charger;
}
     87e:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     882:	08 95       	ret

00000884 <tinyCharge_is_fully_charged>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     884:	86 b1       	in	r24, 0x06	; 6

_Bool tinyCharge_is_fully_charged(){
	return CHARGING_STATUS_PIN_get_level();
}
     886:	86 fb       	bst	r24, 6
     888:	88 27       	eor	r24, r24
     88a:	80 f9       	bld	r24, 0
     88c:	08 95       	ret

0000088e <tinyCharge_DAC_dissable>:
void tinyCharge_DAC_dissable(){
	
	// We need some way to disable the DAC to prevent huge current draw when charging (64mA). When there is no code uploaded to the attiny, there is no problem.
	// We're going to try to enable the pin as a dendrite, since they seem to be doing fine. Completely uninitializing the pin probably caused a microchip to be fried.
	
	DAC_0_uninit();
     88e:	0e 94 88 01 	call	0x310	; 0x310 <DAC_0_uninit>
	DAC_0_disable();
     892:	0e 94 93 01 	call	0x326	; 0x326 <DAC_0_disable>
     896:	08 95       	ret

00000898 <tinyCharge_DAC_enable>:
void tinyCharge_DAC_enable(){
	
	// We need some way to disable the DAC to prevent huge current draw when charging (64mA). When there is no code uploaded to the attiny, there is no problem.
	// We're going to try to enable the pin as a dendrite, since they seem to be doing fine. Completely uninitializing the pin probably caused a microchip to be fried.
	
	DAC_0_init();
     898:	0e 94 83 01 	call	0x306	; 0x306 <DAC_0_init>
	DAC_0_enable();
     89c:	0e 94 8d 01 	call	0x31a	; 0x31a <DAC_0_enable>
     8a0:	08 95       	ret

000008a2 <tinyCharge_switch_mode>:
}


void tinyCharge_switch_mode(){
	
	if(connected_to_charger){
     8a2:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     8a6:	88 23       	and	r24, r24
     8a8:	89 f0       	breq	.+34     	; 0x8cc <tinyCharge_switch_mode+0x2a>
		// Switch from main to charging mode
		
		// Set LED
		tinyLED_set_color_mode(OUT_LED, CHARGING_COLOR, SWING);
     8aa:	43 e0       	ldi	r20, 0x03	; 3
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
		tinyLED_set_color(INN_LED, LED_OFF);
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	0e 94 96 06 	call	0xd2c	; 0xd2c <tinyLED_set_color>


		// Stop axon from firing
		// (There is a small chance that the neuron is put into charging mode as it is firing. The axon is then never told to stop firing)
		tinyAxon_stop_sending_pulse();
     8bc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <tinyAxon_stop_sending_pulse>

		// disable DAC
		tinyCharge_DAC_dissable();
     8c0:	0e 94 47 04 	call	0x88e	; 0x88e <tinyCharge_DAC_dissable>
		
		// We also turn off pulse mode, because it's confusing if it suddenly comes on
		// after it has been charging
		tinyPulse_set_pulse_mode(false);
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	0e 94 94 09 	call	0x1328	; 0x1328 <tinyPulse_set_pulse_mode>
     8ca:	08 95       	ret
	}
	else{
		// Switch from charge to main mode
		
		// Set LED
		tinyLED_set_color(OUT_LED, LED_OFF);
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	0e 94 96 06 	call	0xd2c	; 0xd2c <tinyLED_set_color>
		tinyLED_set_color(INN_LED, LED_OFF);
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	0e 94 96 06 	call	0xd2c	; 0xd2c <tinyLED_set_color>
		
		// enable DAC
		tinyCharge_DAC_enable();
     8dc:	0e 94 4c 04 	call	0x898	; 0x898 <tinyCharge_DAC_enable>
     8e0:	08 95       	ret

000008e2 <tinyCharge_set_charging_mode>:
	}
}

void tinyCharge_set_charging_mode(_Bool charging_status){
	if(charging_status != connected_to_charger){
     8e2:	90 91 59 38 	lds	r25, 0x3859	; 0x803859 <connected_to_charger>
     8e6:	98 17       	cp	r25, r24
     8e8:	21 f0       	breq	.+8      	; 0x8f2 <tinyCharge_set_charging_mode+0x10>
		connected_to_charger = charging_status;
     8ea:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <connected_to_charger>
		tinyCharge_switch_mode();
     8ee:	0e 94 51 04 	call	0x8a2	; 0x8a2 <tinyCharge_switch_mode>
     8f2:	08 95       	ret

000008f4 <tinyCharge_update_charging_mode>:
*/
void tinyCharge_update_charging_mode(){
	// For complicated reasons, the axon_check_level will be high even when the charger is not connected
	// WHEN the neuron is in charging mode, hence we ignore the axon level when the neuron is in charging mode
	_Bool charging;
	if(connected_to_charger){
     8f4:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     8f8:	88 23       	and	r24, r24
     8fa:	19 f0       	breq	.+6      	; 0x902 <tinyCharge_update_charging_mode+0xe>
		charging = tinyDendrite_check_charge_level();
     8fc:	0e 94 08 05 	call	0xa10	; 0xa10 <tinyDendrite_check_charge_level>
     900:	0a c0       	rjmp	.+20     	; 0x916 <tinyCharge_update_charging_mode+0x22>
	} else{
		charging = tinyDendrite_check_charge_level() || tinyAxon_check_charge_level();
     902:	0e 94 08 05 	call	0xa10	; 0xa10 <tinyDendrite_check_charge_level>
     906:	81 11       	cpse	r24, r1
     908:	03 c0       	rjmp	.+6      	; 0x910 <tinyCharge_update_charging_mode+0x1c>
     90a:	0e 94 c3 03 	call	0x786	; 0x786 <tinyAxon_check_charge_level>
     90e:	02 c0       	rjmp	.+4      	; 0x914 <tinyCharge_update_charging_mode+0x20>
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	81 70       	andi	r24, 0x01	; 1
	}
	
	// In order to prevent the axon from stimulating itself, we only switch into charging mode when the conditions have been right for several cycles
	if(!connected_to_charger && charging){
     916:	90 91 59 38 	lds	r25, 0x3859	; 0x803859 <connected_to_charger>
     91a:	91 11       	cpse	r25, r1
     91c:	10 c0       	rjmp	.+32     	; 0x93e <tinyCharge_update_charging_mode+0x4a>
     91e:	88 23       	and	r24, r24
     920:	71 f0       	breq	.+28     	; 0x93e <tinyCharge_update_charging_mode+0x4a>
		charge_counter++;
     922:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <charge_counter>
     926:	8f 5f       	subi	r24, 0xFF	; 255
		if(charge_counter > CYCLES_REQUIRED_FOR_CHARGING_MODE_SWITCH){
     928:	8b 30       	cpi	r24, 0x0B	; 11
     92a:	18 f4       	brcc	.+6      	; 0x932 <tinyCharge_update_charging_mode+0x3e>
		charging = tinyDendrite_check_charge_level() || tinyAxon_check_charge_level();
	}
	
	// In order to prevent the axon from stimulating itself, we only switch into charging mode when the conditions have been right for several cycles
	if(!connected_to_charger && charging){
		charge_counter++;
     92c:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <charge_counter>
     930:	08 95       	ret
		if(charge_counter > CYCLES_REQUIRED_FOR_CHARGING_MODE_SWITCH){
			charge_counter = 0;
     932:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <charge_counter>
			tinyCharge_set_charging_mode(charging);
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	0e 94 71 04 	call	0x8e2	; 0x8e2 <tinyCharge_set_charging_mode>
     93c:	08 95       	ret
		}
	}
	else{
		tinyCharge_set_charging_mode(charging);
     93e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <tinyCharge_set_charging_mode>
     942:	08 95       	ret

00000944 <tinyCharge_set_transistors>:
}



void tinyCharge_set_transistors(){
	if(connected_to_charger){
     944:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     948:	88 23       	and	r24, r24
     94a:	11 f0       	breq	.+4      	; 0x950 <tinyCharge_set_transistors+0xc>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     94c:	4d 98       	cbi	0x09, 5	; 9
     94e:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     950:	4d 9a       	sbi	0x09, 5	; 9
     952:	08 95       	ret

00000954 <tinyDebugger_send_uint32>:
}
void tinyDebugger_send_string(const char* name, char * value){
	if(DEBUGGING){
		printf("%s:%s\t", name, value);
	}
}
     954:	7f 93       	push	r23
     956:	6f 93       	push	r22
     958:	5f 93       	push	r21
     95a:	4f 93       	push	r20
     95c:	9f 93       	push	r25
     95e:	8f 93       	push	r24
     960:	8f e1       	ldi	r24, 0x1F	; 31
     962:	96 ea       	ldi	r25, 0xA6	; 166
     964:	9f 93       	push	r25
     966:	8f 93       	push	r24
     968:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <printf>
     96c:	8d b7       	in	r24, 0x3d	; 61
     96e:	9e b7       	in	r25, 0x3e	; 62
     970:	08 96       	adiw	r24, 0x08	; 8
     972:	8d bf       	out	0x3d, r24	; 61
     974:	9e bf       	out	0x3e, r25	; 62
     976:	08 95       	ret

00000978 <tinyDebugger_send_uint8>:
     978:	1f 92       	push	r1
     97a:	6f 93       	push	r22
     97c:	9f 93       	push	r25
     97e:	8f 93       	push	r24
     980:	88 e2       	ldi	r24, 0x28	; 40
     982:	96 ea       	ldi	r25, 0xA6	; 166
     984:	9f 93       	push	r25
     986:	8f 93       	push	r24
     988:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <printf>
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	08 95       	ret

0000099a <tinyDebugger_send_double>:
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	64 97       	sbiw	r28, 0x14	; 20
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	d8 2e       	mov	r13, r24
     9b6:	c9 2e       	mov	r12, r25
     9b8:	cb 01       	movw	r24, r22
     9ba:	ba 01       	movw	r22, r20
     9bc:	9e 01       	movw	r18, r28
     9be:	2f 5f       	subi	r18, 0xFF	; 255
     9c0:	3f 4f       	sbci	r19, 0xFF	; 255
     9c2:	79 01       	movw	r14, r18
     9c4:	89 01       	movw	r16, r18
     9c6:	21 e0       	ldi	r18, 0x01	; 1
     9c8:	41 e0       	ldi	r20, 0x01	; 1
     9ca:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <dtostrf>
     9ce:	ff 92       	push	r15
     9d0:	ef 92       	push	r14
     9d2:	cf 92       	push	r12
     9d4:	df 92       	push	r13
     9d6:	80 e3       	ldi	r24, 0x30	; 48
     9d8:	96 ea       	ldi	r25, 0xA6	; 166
     9da:	9f 93       	push	r25
     9dc:	8f 93       	push	r24
     9de:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <printf>
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	64 96       	adiw	r28, 0x14	; 20
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	df 90       	pop	r13
     a02:	cf 90       	pop	r12
     a04:	08 95       	ret

00000a06 <tinyDebugger_end_line>:
void tinyDebugger_end_line(){
	if(DEBUGGING){
		printf("\r\n");
     a06:	8f e3       	ldi	r24, 0x3F	; 63
     a08:	96 ea       	ldi	r25, 0xA6	; 166
     a0a:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <puts>
     a0e:	08 95       	ret

00000a10 <tinyDendrite_check_charge_level>:
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
}

_Bool tinyDendrite_check_charge_level(void)
{
     a10:	cf 92       	push	r12
     a12:	df 92       	push	r13
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	ce e0       	ldi	r28, 0x0E	; 14
     a22:	d8 e3       	ldi	r29, 0x38	; 56
     a24:	00 e4       	ldi	r16, 0x40	; 64
     a26:	18 e3       	ldi	r17, 0x38	; 56
     a28:	0f 2e       	mov	r0, r31
     a2a:	f3 e1       	ldi	r31, 0x13	; 19
     a2c:	cf 2e       	mov	r12, r31
     a2e:	f8 e3       	ldi	r31, 0x38	; 56
     a30:	df 2e       	mov	r13, r31
     a32:	f0 2d       	mov	r31, r0
     a34:	78 01       	movw	r14, r16
*/
static void tinyDendrite_read_signals(void)
{
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_values[i] = ADC_0_get_conversion(Dendrite_ports[i]);
     a36:	89 91       	ld	r24, Y+
     a38:	0e 94 4d 01 	call	0x29a	; 0x29a <ADC_0_get_conversion>
     a3c:	f7 01       	movw	r30, r14
     a3e:	81 93       	st	Z+, r24
     a40:	7f 01       	movw	r14, r30
/*
This function reads the voltage at the Dendrite inputs with the ADC
*/
static void tinyDendrite_read_signals(void)
{
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
     a42:	cc 15       	cp	r28, r12
     a44:	dd 05       	cpc	r29, r13
     a46:	b9 f7       	brne	.-18     	; 0xa36 <tinyDendrite_check_charge_level+0x26>
	{
		tinyDendrite_values[i] = ADC_0_get_conversion(Dendrite_ports[i]);
	}
	tinyDebugger_send_uint8("D1", tinyDendrite_values[0]);
     a48:	c0 e4       	ldi	r28, 0x40	; 64
     a4a:	d8 e3       	ldi	r29, 0x38	; 56
     a4c:	68 81       	ld	r22, Y
     a4e:	81 e4       	ldi	r24, 0x41	; 65
     a50:	96 ea       	ldi	r25, 0xA6	; 166
     a52:	0e 94 bc 04 	call	0x978	; 0x978 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D2", tinyDendrite_values[1]);
     a56:	69 81       	ldd	r22, Y+1	; 0x01
     a58:	84 e4       	ldi	r24, 0x44	; 68
     a5a:	96 ea       	ldi	r25, 0xA6	; 166
     a5c:	0e 94 bc 04 	call	0x978	; 0x978 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D3", tinyDendrite_values[2]);
     a60:	6a 81       	ldd	r22, Y+2	; 0x02
     a62:	87 e4       	ldi	r24, 0x47	; 71
     a64:	96 ea       	ldi	r25, 0xA6	; 166
     a66:	0e 94 bc 04 	call	0x978	; 0x978 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
     a6a:	6b 81       	ldd	r22, Y+3	; 0x03
     a6c:	8a e4       	ldi	r24, 0x4A	; 74
     a6e:	96 ea       	ldi	r25, 0xA6	; 166
     a70:	0e 94 bc 04 	call	0x978	; 0x978 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
     a74:	6c 81       	ldd	r22, Y+4	; 0x04
     a76:	8d e4       	ldi	r24, 0x4D	; 77
     a78:	96 ea       	ldi	r25, 0xA6	; 166
     a7a:	0e 94 bc 04 	call	0x978	; 0x978 <tinyDebugger_send_uint8>
     a7e:	eb e3       	ldi	r30, 0x3B	; 59
     a80:	f8 e3       	ldi	r31, 0x38	; 56
     a82:	a6 e3       	ldi	r26, 0x36	; 54
     a84:	b8 e3       	ldi	r27, 0x38	; 56
     a86:	20 e4       	ldi	r18, 0x40	; 64
     a88:	38 e3       	ldi	r19, 0x38	; 56
}

_Bool tinyDendrite_check_charge_level(void)
{
	_Bool charging = false;
     a8a:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     a8c:	47 e0       	ldi	r20, 0x07	; 7
	_Bool charging = false;
	
	tinyDendrite_read_signals();
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     a8e:	90 81       	ld	r25, Z
     a90:	9d 93       	st	X+, r25
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     a92:	e8 01       	movw	r28, r16
     a94:	99 91       	ld	r25, Y+
     a96:	8e 01       	movw	r16, r28
     a98:	99 3e       	cpi	r25, 0xE9	; 233
     a9a:	10 f0       	brcs	.+4      	; 0xaa0 <tinyDendrite_check_charge_level+0x90>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     a9c:	40 83       	st	Z, r20
			charging = true;
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	31 96       	adiw	r30, 0x01	; 1
_Bool tinyDendrite_check_charge_level(void)
{
	_Bool charging = false;
	
	tinyDendrite_read_signals();
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     aa2:	e2 17       	cp	r30, r18
     aa4:	f3 07       	cpc	r31, r19
     aa6:	99 f7       	brne	.-26     	; 0xa8e <tinyDendrite_check_charge_level+0x7e>
			tinyDendrite_current_signals[i] = CHARGING;
			charging = true;
		}
	}
	return charging;
}
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	df 90       	pop	r13
     ab6:	cf 90       	pop	r12
     ab8:	08 95       	ret

00000aba <tinyDendrite_update_signals>:

/*
This function converts the 8 bit value from the ADC into one of the signal types defined in DendriteSignal
*/
void tinyDendrite_update_signals(void)
{
     aba:	af 92       	push	r10
     abc:	bf 92       	push	r11
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	eb e3       	ldi	r30, 0x3B	; 59
     ace:	f8 e3       	ldi	r31, 0x38	; 56
     ad0:	26 e3       	ldi	r18, 0x36	; 54
     ad2:	38 e3       	ldi	r19, 0x38	; 56
     ad4:	c0 e4       	ldi	r28, 0x40	; 64
     ad6:	d8 e3       	ldi	r29, 0x38	; 56
     ad8:	40 e4       	ldi	r20, 0x40	; 64
     ada:	58 e3       	ldi	r21, 0x38	; 56
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     adc:	dd 24       	eor	r13, r13
     ade:	d3 94       	inc	r13
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     ae0:	0f 2e       	mov	r0, r31
     ae2:	f3 e0       	ldi	r31, 0x03	; 3
     ae4:	ef 2e       	mov	r14, r31
     ae6:	f0 2d       	mov	r31, r0
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     ae8:	68 94       	set
     aea:	ff 24       	eor	r15, r15
     aec:	f1 f8       	bld	r15, 1
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     aee:	04 e0       	ldi	r16, 0x04	; 4
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     af0:	16 e0       	ldi	r17, 0x06	; 6
			// been moved to tinyDendrite_check_charging.
			//charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     af2:	75 e0       	ldi	r23, 0x05	; 5
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     af4:	67 e0       	ldi	r22, 0x07	; 7
     af6:	5f 01       	movw	r10, r30
	//tinyDendrite_read_signals();
	// It was commented out anyway because of double debugging messages
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     af8:	80 81       	ld	r24, Z
     afa:	d9 01       	movw	r26, r18
     afc:	8d 93       	st	X+, r24
     afe:	9d 01       	movw	r18, r26
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     b00:	99 91       	ld	r25, Y+
     b02:	99 3e       	cpi	r25, 0xE9	; 233
     b04:	10 f0       	brcs	.+4      	; 0xb0a <tinyDendrite_update_signals+0x50>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     b06:	60 83       	st	Z, r22
     b08:	19 c0       	rjmp	.+50     	; 0xb3c <tinyDendrite_update_signals+0x82>
			// Previously, we used this function to check charging, but this has now
			// been moved to tinyDendrite_check_charging.
			//charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
     b0a:	98 3c       	cpi	r25, 0xC8	; 200
     b0c:	10 f0       	brcs	.+4      	; 0xb12 <tinyDendrite_update_signals+0x58>
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     b0e:	70 83       	st	Z, r23
     b10:	15 c0       	rjmp	.+42     	; 0xb3c <tinyDendrite_update_signals+0x82>
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
     b12:	97 3a       	cpi	r25, 0xA7	; 167
     b14:	10 f0       	brcs	.+4      	; 0xb1a <tinyDendrite_update_signals+0x60>
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     b16:	10 83       	st	Z, r17
     b18:	11 c0       	rjmp	.+34     	; 0xb3c <tinyDendrite_update_signals+0x82>
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
     b1a:	95 38       	cpi	r25, 0x85	; 133
     b1c:	10 f0       	brcs	.+4      	; 0xb22 <tinyDendrite_update_signals+0x68>
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     b1e:	00 83       	st	Z, r16
     b20:	0d c0       	rjmp	.+26     	; 0xb3c <tinyDendrite_update_signals+0x82>
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
     b22:	94 36       	cpi	r25, 0x64	; 100
     b24:	10 f0       	brcs	.+4      	; 0xb2a <tinyDendrite_update_signals+0x70>
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     b26:	f0 82       	st	Z, r15
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <tinyDendrite_update_signals+0x82>
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
     b2a:	93 34       	cpi	r25, 0x43	; 67
     b2c:	10 f0       	brcs	.+4      	; 0xb32 <tinyDendrite_update_signals+0x78>
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     b2e:	e0 82       	st	Z, r14
     b30:	05 c0       	rjmp	.+10     	; 0xb3c <tinyDendrite_update_signals+0x82>
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
     b32:	92 32       	cpi	r25, 0x22	; 34
     b34:	10 f0       	brcs	.+4      	; 0xb3a <tinyDendrite_update_signals+0x80>
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     b36:	d0 82       	st	Z, r13
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <tinyDendrite_update_signals+0x82>
		}
		else
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     b3a:	10 82       	st	Z, r1
		}
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
     b3c:	d5 01       	movw	r26, r10
     b3e:	9c 91       	ld	r25, X
     b40:	89 13       	cpse	r24, r25
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <tinyDendrite_update_signals+0x8c>
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     b44:	1c 92       	st	X, r1
     b46:	31 96       	adiw	r30, 0x01	; 1
	//Since read_signals is called in check_charge_level, and check_charge_level is called at the beginning
	//of every loop, it's probably unnecessary to read the signals again, but I'll leave it inn for now.
	//tinyDendrite_read_signals();
	// It was commented out anyway because of double debugging messages
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     b48:	e4 17       	cp	r30, r20
     b4a:	f5 07       	cpc	r31, r21
     b4c:	a1 f6       	brne	.-88     	; 0xaf6 <tinyDendrite_update_signals+0x3c>
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
		}
	}
}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	bf 90       	pop	r11
     b5e:	af 90       	pop	r10
     b60:	08 95       	ret

00000b62 <tinyDendrite_get_potential>:
/*
This is the master function of the module that is callable from
outside. It uses the previously declared functions to return the potential.
*/
int16_t tinyDendrite_get_potential()
{
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
	if(tinyAxon_is_firing() && IGNORE_INPUT_WHILE_FIRING){
     b6e:	0e 94 cb 02 	call	0x596	; 0x596 <tinyAxon_is_firing>
		
		return NO_SIGNAL_REACTION;
	}
	
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
     b72:	0e 94 5d 05 	call	0xaba	; 0xaba <tinyDendrite_update_signals>
     b76:	cb e3       	ldi	r28, 0x3B	; 59
     b78:	d8 e3       	ldi	r29, 0x38	; 56
     b7a:	0f 2e       	mov	r0, r31
     b7c:	f0 e4       	ldi	r31, 0x40	; 64
     b7e:	ef 2e       	mov	r14, r31
     b80:	f8 e3       	ldi	r31, 0x38	; 56
     b82:	ff 2e       	mov	r15, r31
     b84:	f0 2d       	mov	r31, r0
	
	int16_t return_potential_val = 0;
     b86:	00 e0       	ldi	r16, 0x00	; 0
     b88:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		switch(tinyDendrite_current_signals[i])
     b8a:	89 91       	ld	r24, Y+
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	19 f1       	breq	.+70     	; 0xbd6 <tinyDendrite_get_potential+0x74>
     b90:	28 f4       	brcc	.+10     	; 0xb9c <tinyDendrite_get_potential+0x3a>
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	81 f1       	breq	.+96     	; 0xbf6 <tinyDendrite_get_potential+0x94>
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	31 f1       	breq	.+76     	; 0xbe6 <tinyDendrite_get_potential+0x84>
     b9a:	34 c0       	rjmp	.+104    	; 0xc04 <tinyDendrite_get_potential+0xa2>
     b9c:	85 30       	cpi	r24, 0x05	; 5
     b9e:	59 f0       	breq	.+22     	; 0xbb6 <tinyDendrite_get_potential+0x54>
     ba0:	90 f0       	brcs	.+36     	; 0xbc6 <tinyDendrite_get_potential+0x64>
     ba2:	86 30       	cpi	r24, 0x06	; 6
     ba4:	79 f5       	brne	.+94     	; 0xc04 <tinyDendrite_get_potential+0xa2>
		{
			case NO_SIGNAL:
				return_potential_val += NO_SIGNAL_REACTION;
				break;
			case HIGH_EXCITE:
				return_potential_val += HIGH_EXCITE_REACTION;
     ba6:	0c 5c       	subi	r16, 0xCC	; 204
     ba8:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     baa:	45 e0       	ldi	r20, 0x05	; 5
     bac:	63 e0       	ldi	r22, 0x03	; 3
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
				break;
     bb4:	27 c0       	rjmp	.+78     	; 0xc04 <tinyDendrite_get_potential+0xa2>
			case NORMAL_EXCITE:
				return_potential_val += NORMAL_EXCITE_REACTION;
     bb6:	07 5e       	subi	r16, 0xE7	; 231
     bb8:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     bba:	45 e0       	ldi	r20, 0x05	; 5
     bbc:	63 e0       	ldi	r22, 0x03	; 3
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
				break;
     bc4:	1f c0       	rjmp	.+62     	; 0xc04 <tinyDendrite_get_potential+0xa2>
			case LOW_EXCITE:
				return_potential_val += LOW_EXCITE_REACTION;
     bc6:	0c 5e       	subi	r16, 0xEC	; 236
     bc8:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     bca:	45 e0       	ldi	r20, 0x05	; 5
     bcc:	63 e0       	ldi	r22, 0x03	; 3
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
				break;
     bd4:	17 c0       	rjmp	.+46     	; 0xc04 <tinyDendrite_get_potential+0xa2>
			case HIGH_INHIB:
				return_potential_val += HIGH_INHIB_REACTION;
     bd6:	02 53       	subi	r16, 0x32	; 50
     bd8:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     bda:	45 e0       	ldi	r20, 0x05	; 5
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
				break;
     be4:	0f c0       	rjmp	.+30     	; 0xc04 <tinyDendrite_get_potential+0xa2>
			case NORMAL_INHIB:
				return_potential_val += NORMAL_INHIB_REACTION;
     be6:	09 51       	subi	r16, 0x19	; 25
     be8:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     bea:	45 e0       	ldi	r20, 0x05	; 5
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
				break;
     bf4:	07 c0       	rjmp	.+14     	; 0xc04 <tinyDendrite_get_potential+0xa2>
			case LOW_INHIB:
				return_potential_val += LOW_INHIB_REACTION;
     bf6:	04 51       	subi	r16, 0x14	; 20
     bf8:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     bfa:	45 e0       	ldi	r20, 0x05	; 5
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
	
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
	
	int16_t return_potential_val = 0;
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     c04:	ce 15       	cp	r28, r14
     c06:	df 05       	cpc	r29, r15
     c08:	09 f0       	breq	.+2      	; 0xc0c <tinyDendrite_get_potential+0xaa>
     c0a:	bf cf       	rjmp	.-130    	; 0xb8a <tinyDendrite_get_potential+0x28>
		}
	}
	
	return return_potential_val;
	
}
     c0c:	c8 01       	movw	r24, r16
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	ff 90       	pop	r15
     c18:	ef 90       	pop	r14
     c1a:	08 95       	ret

00000c1c <tinyDendrite_update_potential>:

double tinyDendrite_update_potential(double potential){
     c1c:	cf 92       	push	r12
     c1e:	df 92       	push	r13
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	6b 01       	movw	r12, r22
     c26:	7c 01       	movw	r14, r24
	
	int16_t potential_change = tinyDendrite_get_potential();
     c28:	0e 94 b1 05 	call	0xb62	; 0xb62 <tinyDendrite_get_potential>
	potential += potential_change;
	return potential;
     c2c:	bc 01       	movw	r22, r24
     c2e:	99 0f       	add	r25, r25
     c30:	88 0b       	sbc	r24, r24
     c32:	99 0b       	sbc	r25, r25
     c34:	0e 94 3e 0b 	call	0x167c	; 0x167c <__floatsisf>
     c38:	a7 01       	movw	r20, r14
     c3a:	96 01       	movw	r18, r12
     c3c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__addsf3>
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	df 90       	pop	r13
     c46:	cf 90       	pop	r12
     c48:	08 95       	ret

00000c4a <__vector_6>:
     c4a:	1f 92       	push	r1
     c4c:	0f 92       	push	r0
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	0f 92       	push	r0
     c52:	11 24       	eor	r1, r1
     c54:	2f 93       	push	r18
     c56:	3f 93       	push	r19
     c58:	4f 93       	push	r20
     c5a:	5f 93       	push	r21
     c5c:	6f 93       	push	r22
     c5e:	7f 93       	push	r23
     c60:	8f 93       	push	r24
     c62:	9f 93       	push	r25
     c64:	af 93       	push	r26
     c66:	bf 93       	push	r27
     c68:	cf 93       	push	r28
     c6a:	ef 93       	push	r30
     c6c:	ff 93       	push	r31
     c6e:	c1 e0       	ldi	r28, 0x01	; 1
     c70:	c0 93 45 38 	sts	0x3845, r28	; 0x803845 <tinyISR_interrupt_flag>
     c74:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <tinyTime_counter_increment>
     c78:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c7c:	ff 91       	pop	r31
     c7e:	ef 91       	pop	r30
     c80:	cf 91       	pop	r28
     c82:	bf 91       	pop	r27
     c84:	af 91       	pop	r26
     c86:	9f 91       	pop	r25
     c88:	8f 91       	pop	r24
     c8a:	7f 91       	pop	r23
     c8c:	6f 91       	pop	r22
     c8e:	5f 91       	pop	r21
     c90:	4f 91       	pop	r20
     c92:	3f 91       	pop	r19
     c94:	2f 91       	pop	r18
     c96:	0f 90       	pop	r0
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	0f 90       	pop	r0
     c9c:	1f 90       	pop	r1
     c9e:	18 95       	reti

00000ca0 <tinyISR_setflag>:
     ca0:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <tinyISR_interrupt_flag>
     ca4:	08 95       	ret

00000ca6 <tinyISR_getflag>:
     ca6:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <tinyISR_interrupt_flag>
     caa:	08 95       	ret

00000cac <tinyLED_SPIWriteByte>:
Function used to send a byte over SPI, which in turn gets
translated to the bit-sequence required by the LEDs over the CCL.
*/
static void tinyLED_SPIWriteByte(uint8_t byte)
{
	SPI0.INTFLAGS = SPI0_INTFLAGS; // clear the write collision flag to allow writing
     cac:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
     cb0:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
	TCA0.SINGLE.CNT = 0; // reset TCA counter register to ensure the first rising edge of the PWM is predictable
     cb4:	e0 e0       	ldi	r30, 0x00	; 0
     cb6:	fa e0       	ldi	r31, 0x0A	; 10
     cb8:	10 a2       	std	Z+32, r1	; 0x20
     cba:	11 a2       	std	Z+33, r1	; 0x21
	
	// start TCA
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 1 << TCA_SPLIT_ENABLE_bp;
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	90 83       	st	Z, r25
	SPI0_DATA = byte;
     cc0:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>

	while((SPI0.INTFLAGS & SPI_RXCIE_bm) == 0){} // wait for transfer to complete
     cc4:	e0 e2       	ldi	r30, 0x20	; 32
     cc6:	f8 e0       	ldi	r31, 0x08	; 8
     cc8:	83 81       	ldd	r24, Z+3	; 0x03
     cca:	88 23       	and	r24, r24
     ccc:	ec f7       	brge	.-6      	; 0xcc8 <tinyLED_SPIWriteByte+0x1c>
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
     cce:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     cd2:	08 95       	ret

00000cd4 <tinyLED_get_color>:
	tinyLED_set_color_mode(LED_id, color, STABLE);
}

enum Colors tinyLED_get_color(uint8_t LED_id)
{
	return tinyLED_settings[LED_id].color;
     cd4:	e8 2f       	mov	r30, r24
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	ee 59       	subi	r30, 0x9E	; 158
     cde:	f7 4c       	sbci	r31, 0xC7	; 199
}
     ce0:	80 81       	ld	r24, Z
     ce2:	08 95       	ret

00000ce4 <tinyLED_set_color_mode>:
{
	// If we are in pulse mode, we want to stay in pulse mode after we have flashed a light.
	// We do this by storing the previous mode in old settings.
	// However, it can happen that two flashes comes very quickly after one another, that leads
	// to an infinite flash loop, therefore, we only store the settings if it is not flash mode.
	if(tinyLED_settings[LED_id].mode != FLASH_ONCE){
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	fc 01       	movw	r30, r24
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	ee 59       	subi	r30, 0x9E	; 158
     cee:	f7 4c       	sbci	r31, 0xC7	; 199
     cf0:	51 81       	ldd	r21, Z+1	; 0x01
     cf2:	55 30       	cpi	r21, 0x05	; 5
     cf4:	61 f0       	breq	.+24     	; 0xd0e <tinyLED_set_color_mode+0x2a>
		// We use two lines to avoid pointer trouble. (I'm not good with pointers)
		tinyLED_old_settings[LED_id].color = tinyLED_settings[LED_id].color;
     cf6:	9c 01       	movw	r18, r24
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	f9 01       	movw	r30, r18
     cfe:	ea 59       	subi	r30, 0x9A	; 154
     d00:	f7 4c       	sbci	r31, 0xC7	; 199
     d02:	d9 01       	movw	r26, r18
     d04:	ae 59       	subi	r26, 0x9E	; 158
     d06:	b7 4c       	sbci	r27, 0xC7	; 199
     d08:	2c 91       	ld	r18, X
     d0a:	20 83       	st	Z, r18
		tinyLED_old_settings[LED_id].mode = tinyLED_settings[LED_id].mode;
     d0c:	51 83       	std	Z+1, r21	; 0x01
	}
	
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_settings[LED_id] = setting;
     d0e:	fc 01       	movw	r30, r24
     d10:	ee 0f       	add	r30, r30
     d12:	ff 1f       	adc	r31, r31
     d14:	ee 59       	subi	r30, 0x9E	; 158
     d16:	f7 4c       	sbci	r31, 0xC7	; 199
     d18:	60 83       	st	Z, r22
     d1a:	41 83       	std	Z+1, r20	; 0x01
	if (mode == FLASH_ONCE)
     d1c:	45 30       	cpi	r20, 0x05	; 5
     d1e:	29 f4       	brne	.+10     	; 0xd2a <tinyLED_set_color_mode+0x46>
	{
		tinyLED_flash_once_time[LED_id] = 1000*FLASH_TIME;
     d20:	fc 01       	movw	r30, r24
     d22:	e6 5a       	subi	r30, 0xA6	; 166
     d24:	f7 4c       	sbci	r31, 0xC7	; 199
     d26:	2a e0       	ldi	r18, 0x0A	; 10
     d28:	20 83       	st	Z, r18
     d2a:	08 95       	ret

00000d2c <tinyLED_set_color>:
/*
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color(uint8_t LED_id, enum Colors color)
{
	tinyLED_set_color_mode(LED_id, color, STABLE);
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
     d32:	08 95       	ret

00000d34 <tinyLED_RGB_Color_Compare>:
	return rgb_color;
			
};
// This might be cause of strange light behavior?
//Message		expected 'struct RGB_Color *' but argument is of type 'struct RGB_Color (*)[2]'	Hjernebyggesett_V4	C:\Users\Elias Lundheim\Documents\GitHub\neural\Hjernebyggesett_V4\Hjernebyggesett_V4\tinyLED\tinyLED.c	121
_Bool tinyLED_RGB_Color_Compare(struct RGB_Color (*a)[NUMBER_OF_LEDS], struct RGB_Color (*b)[NUMBER_OF_LEDS]){
     d34:	dc 01       	movw	r26, r24
     d36:	fb 01       	movw	r30, r22
	for (int i=0; i<NUMBER_OF_LEDS; i++)
	{
		if(!((*a)[i].red==(*b)[i].red && (*a)[i].green==(*b)[i].green && (*a)[i].blue==(*b)[i].blue)){
     d38:	9c 91       	ld	r25, X
     d3a:	80 81       	ld	r24, Z
     d3c:	98 13       	cpse	r25, r24
     d3e:	20 c0       	rjmp	.+64     	; 0xd80 <tinyLED_RGB_Color_Compare+0x4c>
     d40:	11 96       	adiw	r26, 0x01	; 1
     d42:	9c 91       	ld	r25, X
     d44:	11 97       	sbiw	r26, 0x01	; 1
     d46:	81 81       	ldd	r24, Z+1	; 0x01
     d48:	98 13       	cpse	r25, r24
     d4a:	1c c0       	rjmp	.+56     	; 0xd84 <tinyLED_RGB_Color_Compare+0x50>
     d4c:	12 96       	adiw	r26, 0x02	; 2
     d4e:	9c 91       	ld	r25, X
     d50:	12 97       	sbiw	r26, 0x02	; 2
     d52:	82 81       	ldd	r24, Z+2	; 0x02
     d54:	98 13       	cpse	r25, r24
     d56:	18 c0       	rjmp	.+48     	; 0xd88 <tinyLED_RGB_Color_Compare+0x54>
     d58:	13 96       	adiw	r26, 0x03	; 3
     d5a:	9c 91       	ld	r25, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	83 81       	ldd	r24, Z+3	; 0x03
     d60:	98 13       	cpse	r25, r24
     d62:	14 c0       	rjmp	.+40     	; 0xd8c <tinyLED_RGB_Color_Compare+0x58>
     d64:	14 96       	adiw	r26, 0x04	; 4
     d66:	9c 91       	ld	r25, X
     d68:	14 97       	sbiw	r26, 0x04	; 4
     d6a:	84 81       	ldd	r24, Z+4	; 0x04
     d6c:	98 13       	cpse	r25, r24
     d6e:	10 c0       	rjmp	.+32     	; 0xd90 <tinyLED_RGB_Color_Compare+0x5c>
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	15 96       	adiw	r26, 0x05	; 5
     d74:	2c 91       	ld	r18, X
     d76:	95 81       	ldd	r25, Z+5	; 0x05
     d78:	29 17       	cp	r18, r25
     d7a:	59 f0       	breq	.+22     	; 0xd92 <tinyLED_RGB_Color_Compare+0x5e>
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	08 95       	ret
			return false;
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	08 95       	ret
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	08 95       	ret
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	08 95       	ret
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	08 95       	ret
     d90:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
     d92:	08 95       	ret

00000d94 <tinyLED_update>:
/*
function to write the current LED-array on to the LEDs and
effectively update the values stored in the LEDs to the values stored in the MCU.
*/
void tinyLED_update(void)
{
     d94:	2f 92       	push	r2
     d96:	3f 92       	push	r3
     d98:	4f 92       	push	r4
     d9a:	5f 92       	push	r5
     d9c:	6f 92       	push	r6
     d9e:	7f 92       	push	r7
     da0:	8f 92       	push	r8
     da2:	9f 92       	push	r9
     da4:	af 92       	push	r10
     da6:	bf 92       	push	r11
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	6f 97       	sbiw	r28, 0x1f	; 31
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	de bf       	out	0x3e, r29	; 62
			
	uint32_t now = tinyTime_now();
     dc2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <tinyTime_now>
     dc6:	6b 01       	movw	r12, r22
     dc8:	7c 01       	movw	r14, r24
	
	// This is a sin curve, but between 0 and 1 instead of -1 and 1
	double sinValue = 0.5+sin((double)now/(100*M_PI/SWING_RATE))/2;
     dca:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__floatunsisf>
     dce:	22 ed       	ldi	r18, 0xD2	; 210
     dd0:	33 e5       	ldi	r19, 0x53	; 83
     dd2:	4b ef       	ldi	r20, 0xFB	; 251
     dd4:	51 e4       	ldi	r21, 0x41	; 65
     dd6:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__divsf3>
     dda:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <sin>
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e0       	ldi	r20, 0x00	; 0
     de4:	5f e3       	ldi	r21, 0x3F	; 63
     de6:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	5f e3       	ldi	r21, 0x3F	; 63
     df2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__addsf3>
     df6:	6f 83       	std	Y+7, r22	; 0x07
     df8:	78 87       	std	Y+8, r23	; 0x08
     dfa:	89 87       	std	Y+9, r24	; 0x09
     dfc:	9a 87       	std	Y+10, r25	; 0x0a
	
	// If FLASH_RATE is one, then that means that the left side of the "<" will just count from 0 to 1000, and flash_on will be true for half of the time
	_Bool flash_on = now%(uint32_t)(1000/FLASH_RATE)  <   500/FLASH_RATE;
     dfe:	c7 01       	movw	r24, r14
     e00:	b6 01       	movw	r22, r12
     e02:	22 e3       	ldi	r18, 0x32	; 50
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__udivmodsi4>
     e0e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__floatunsisf>
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	48 ec       	ldi	r20, 0xC8	; 200
     e18:	51 e4       	ldi	r21, 0x41	; 65
     e1a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__cmpsf2>
     e1e:	88 1f       	adc	r24, r24
     e20:	88 27       	eor	r24, r24
     e22:	88 1f       	adc	r24, r24
     e24:	8b 87       	std	Y+11, r24	; 0x0b
	
	// PING_RATE is usually small, so the left side counts to some large number. Since flash_time usually is also quite small,
	// the left side will usually be larger than the right
	_Bool ping_on =  now%(uint32_t)(1000/PING_RATE)   <   1000*FLASH_TIME;
     e26:	c7 01       	movw	r24, r14
     e28:	b6 01       	movw	r22, r12
     e2a:	24 ef       	ldi	r18, 0xF4	; 244
     e2c:	31 e0       	ldi	r19, 0x01	; 1
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__udivmodsi4>
     e36:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__floatunsisf>
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e2       	ldi	r20, 0x20	; 32
     e40:	51 e4       	ldi	r21, 0x41	; 65
     e42:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__cmpsf2>
     e46:	88 1f       	adc	r24, r24
     e48:	88 27       	eor	r24, r24
     e4a:	88 1f       	adc	r24, r24
     e4c:	0f 2e       	mov	r0, r31
     e4e:	f2 e6       	ldi	r31, 0x62	; 98
     e50:	2f 2e       	mov	r2, r31
     e52:	f8 e3       	ldi	r31, 0x38	; 56
     e54:	3f 2e       	mov	r3, r31
     e56:	f0 2d       	mov	r31, r0
     e58:	9e 01       	movw	r18, r28
     e5a:	2f 5f       	subi	r18, 0xFF	; 255
     e5c:	3f 4f       	sbci	r19, 0xFF	; 255
     e5e:	69 01       	movw	r12, r18
     e60:	0f 2e       	mov	r0, r31
     e62:	f6 e6       	ldi	r31, 0x66	; 102
     e64:	af 2e       	mov	r10, r31
     e66:	f8 e3       	ldi	r31, 0x38	; 56
     e68:	bf 2e       	mov	r11, r31
     e6a:	f0 2d       	mov	r31, r0
     e6c:	0a e5       	ldi	r16, 0x5A	; 90
     e6e:	18 e3       	ldi	r17, 0x38	; 56
     e70:	0f 2e       	mov	r0, r31
     e72:	f6 e6       	ldi	r31, 0x66	; 102
     e74:	4f 2e       	mov	r4, r31
     e76:	f8 e3       	ldi	r31, 0x38	; 56
     e78:	5f 2e       	mov	r5, r31
     e7a:	f0 2d       	mov	r31, r0
     e7c:	39 01       	movw	r6, r18
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
				break;
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	28 8b       	std	Y+16, r18	; 0x10
     e88:	39 8b       	std	Y+17, r19	; 0x11
     e8a:	4a 8b       	std	Y+18, r20	; 0x12
     e8c:	5b 8b       	std	Y+19, r21	; 0x13
     e8e:	f1 01       	movw	r30, r2
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
}

static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
     e90:	80 81       	ld	r24, Z
     e92:	83 30       	cpi	r24, 0x03	; 3
     e94:	79 f0       	breq	.+30     	; 0xeb4 <tinyLED_update+0x120>
     e96:	28 f4       	brcc	.+10     	; 0xea2 <tinyLED_update+0x10e>
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	41 f0       	breq	.+16     	; 0xeac <tinyLED_update+0x118>
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	89 f0       	breq	.+34     	; 0xec2 <tinyLED_update+0x12e>
     ea0:	28 c0       	rjmp	.+80     	; 0xef2 <tinyLED_update+0x15e>
     ea2:	84 30       	cpi	r24, 0x04	; 4
     ea4:	a9 f0       	breq	.+42     	; 0xed0 <tinyLED_update+0x13c>
     ea6:	85 30       	cpi	r24, 0x05	; 5
     ea8:	d1 f0       	breq	.+52     	; 0xede <tinyLED_update+0x14a>
     eaa:	23 c0       	rjmp	.+70     	; 0xef2 <tinyLED_update+0x15e>
	{
		case LED_OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
			break;
		case RED:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 0, 0};
     eac:	f1 2c       	mov	r15, r1
     eae:	e1 2c       	mov	r14, r1
     eb0:	69 e1       	ldi	r22, 0x19	; 25
     eb2:	22 c0       	rjmp	.+68     	; 0xef8 <tinyLED_update+0x164>
			break;
		case GREEN:
			rgb_color = (struct RGB_Color){0, 255*LED_BRIGHTNESS, 0};
     eb4:	f1 2c       	mov	r15, r1
     eb6:	0f 2e       	mov	r0, r31
     eb8:	f9 e1       	ldi	r31, 0x19	; 25
     eba:	ef 2e       	mov	r14, r31
     ebc:	f0 2d       	mov	r31, r0
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	1b c0       	rjmp	.+54     	; 0xef8 <tinyLED_update+0x164>
			break;
		case BLUE:
			rgb_color = (struct RGB_Color){0, 0, 255*LED_BRIGHTNESS};
     ec2:	0f 2e       	mov	r0, r31
     ec4:	f9 e1       	ldi	r31, 0x19	; 25
     ec6:	ff 2e       	mov	r15, r31
     ec8:	f0 2d       	mov	r31, r0
     eca:	e1 2c       	mov	r14, r1
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	14 c0       	rjmp	.+40     	; 0xef8 <tinyLED_update+0x164>
			break;
		case YELLOW:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 0};
     ed0:	f1 2c       	mov	r15, r1
     ed2:	0f 2e       	mov	r0, r31
     ed4:	f9 e1       	ldi	r31, 0x19	; 25
     ed6:	ef 2e       	mov	r14, r31
     ed8:	f0 2d       	mov	r31, r0
     eda:	69 e1       	ldi	r22, 0x19	; 25
     edc:	0d c0       	rjmp	.+26     	; 0xef8 <tinyLED_update+0x164>
			// Should the /3 be there? This requires testing.
			// After testing, findings were that at 0.1 brightness, one would see the three LEDs instead of one white led
			// We try with /2 instead.
			// We find that the best results come from not dividing by anything. At leasts in the lower brightness settings, and that
			// is where we suspect it will be most of the time. When we divide, the LEDs are so weak, that they appear as three lights instead of one.
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS};
     ede:	0f 2e       	mov	r0, r31
     ee0:	f9 e1       	ldi	r31, 0x19	; 25
     ee2:	ff 2e       	mov	r15, r31
     ee4:	f0 2d       	mov	r31, r0
     ee6:	0f 2e       	mov	r0, r31
     ee8:	f9 e1       	ldi	r31, 0x19	; 25
     eea:	ef 2e       	mov	r14, r31
     eec:	f0 2d       	mov	r31, r0
     eee:	69 e1       	ldi	r22, 0x19	; 25
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <tinyLED_update+0x164>
static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
	{
		case LED_OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
     ef2:	f1 2c       	mov	r15, r1
     ef4:	e1 2c       	mov	r14, r1
     ef6:	60 e0       	ldi	r22, 0x00	; 0
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
	{		
		// Convert enum to RGB_Color
		rgb_colors[i] = tinyLED_enum_to_RGB_Color(tinyLED_settings[i].color);
     ef8:	d3 01       	movw	r26, r6
     efa:	6c 93       	st	X, r22
     efc:	11 96       	adiw	r26, 0x01	; 1
     efe:	ec 92       	st	X, r14
     f00:	11 97       	sbiw	r26, 0x01	; 1
     f02:	12 96       	adiw	r26, 0x02	; 2
     f04:	fc 92       	st	X, r15
			
		// Adjust colors according to mode
		switch(tinyLED_settings[i].mode)
     f06:	81 81       	ldd	r24, Z+1	; 0x01
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	09 f4       	brne	.+2      	; 0xf0e <tinyLED_update+0x17a>
     f0c:	50 c0       	rjmp	.+160    	; 0xfae <tinyLED_update+0x21a>
     f0e:	28 f4       	brcc	.+10     	; 0xf1a <tinyLED_update+0x186>
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	51 f0       	breq	.+20     	; 0xf28 <tinyLED_update+0x194>
     f14:	82 30       	cpi	r24, 0x02	; 2
     f16:	c9 f1       	breq	.+114    	; 0xf8a <tinyLED_update+0x1f6>
     f18:	05 c1       	rjmp	.+522    	; 0x1124 <tinyLED_update+0x390>
     f1a:	84 30       	cpi	r24, 0x04	; 4
     f1c:	09 f4       	brne	.+2      	; 0xf20 <tinyLED_update+0x18c>
     f1e:	78 c0       	rjmp	.+240    	; 0x1010 <tinyLED_update+0x27c>
     f20:	85 30       	cpi	r24, 0x05	; 5
     f22:	09 f4       	brne	.+2      	; 0xf26 <tinyLED_update+0x192>
     f24:	f2 c0       	rjmp	.+484    	; 0x110a <tinyLED_update+0x376>
     f26:	fe c0       	rjmp	.+508    	; 0x1124 <tinyLED_update+0x390>
		{
			case STABLE:
				break;
			case WEAK:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*WEAK_BRIGHTNESS, rgb_colors[i].green*WEAK_BRIGHTNESS, rgb_colors[i].blue*WEAK_BRIGHTNESS};
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 3e 0b 	call	0x167c	; 0x167c <__floatsisf>
     f32:	2d ec       	ldi	r18, 0xCD	; 205
     f34:	3c ec       	ldi	r19, 0xCC	; 204
     f36:	4c ec       	ldi	r20, 0xCC	; 204
     f38:	5d e3       	ldi	r21, 0x3D	; 61
     f3a:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
     f3e:	0e 94 0d 0b 	call	0x161a	; 0x161a <__fixunssfsi>
     f42:	f3 01       	movw	r30, r6
     f44:	60 83       	st	Z, r22
     f46:	6e 2d       	mov	r22, r14
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 3e 0b 	call	0x167c	; 0x167c <__floatsisf>
     f52:	2d ec       	ldi	r18, 0xCD	; 205
     f54:	3c ec       	ldi	r19, 0xCC	; 204
     f56:	4c ec       	ldi	r20, 0xCC	; 204
     f58:	5d e3       	ldi	r21, 0x3D	; 61
     f5a:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
     f5e:	0e 94 0d 0b 	call	0x161a	; 0x161a <__fixunssfsi>
     f62:	d3 01       	movw	r26, r6
     f64:	11 96       	adiw	r26, 0x01	; 1
     f66:	6c 93       	st	X, r22
     f68:	6f 2d       	mov	r22, r15
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 3e 0b 	call	0x167c	; 0x167c <__floatsisf>
     f74:	2d ec       	ldi	r18, 0xCD	; 205
     f76:	3c ec       	ldi	r19, 0xCC	; 204
     f78:	4c ec       	ldi	r20, 0xCC	; 204
     f7a:	5d e3       	ldi	r21, 0x3D	; 61
     f7c:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
     f80:	0e 94 0d 0b 	call	0x161a	; 0x161a <__fixunssfsi>
     f84:	f3 01       	movw	r30, r6
     f86:	62 83       	std	Z+2, r22	; 0x02
				break;
     f88:	cd c0       	rjmp	.+410    	; 0x1124 <tinyLED_update+0x390>
			case FLASH:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*flash_on, rgb_colors[i].green*flash_on, rgb_colors[i].blue*flash_on};
     f8a:	fb 85       	ldd	r31, Y+11	; 0x0b
     f8c:	f6 9f       	mul	r31, r22
     f8e:	60 2d       	mov	r22, r0
     f90:	11 24       	eor	r1, r1
     f92:	d3 01       	movw	r26, r6
     f94:	6c 93       	st	X, r22
     f96:	fe 9d       	mul	r31, r14
     f98:	e0 2c       	mov	r14, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	11 96       	adiw	r26, 0x01	; 1
     f9e:	ec 92       	st	X, r14
     fa0:	11 97       	sbiw	r26, 0x01	; 1
     fa2:	ff 9d       	mul	r31, r15
     fa4:	f0 2c       	mov	r15, r0
     fa6:	11 24       	eor	r1, r1
     fa8:	12 96       	adiw	r26, 0x02	; 2
     faa:	fc 92       	st	X, r15
				break;
     fac:	bb c0       	rjmp	.+374    	; 0x1124 <tinyLED_update+0x390>
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 3e 0b 	call	0x167c	; 0x167c <__floatsisf>
     fb8:	2f 81       	ldd	r18, Y+7	; 0x07
     fba:	38 85       	ldd	r19, Y+8	; 0x08
     fbc:	49 85       	ldd	r20, Y+9	; 0x09
     fbe:	5a 85       	ldd	r21, Y+10	; 0x0a
     fc0:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
     fc4:	0e 94 0d 0b 	call	0x161a	; 0x161a <__fixunssfsi>
     fc8:	f3 01       	movw	r30, r6
     fca:	60 83       	st	Z, r22
     fcc:	6e 2d       	mov	r22, r14
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 3e 0b 	call	0x167c	; 0x167c <__floatsisf>
     fd8:	2f 81       	ldd	r18, Y+7	; 0x07
     fda:	38 85       	ldd	r19, Y+8	; 0x08
     fdc:	49 85       	ldd	r20, Y+9	; 0x09
     fde:	5a 85       	ldd	r21, Y+10	; 0x0a
     fe0:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
     fe4:	0e 94 0d 0b 	call	0x161a	; 0x161a <__fixunssfsi>
     fe8:	d3 01       	movw	r26, r6
     fea:	11 96       	adiw	r26, 0x01	; 1
     fec:	6c 93       	st	X, r22
     fee:	6f 2d       	mov	r22, r15
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 3e 0b 	call	0x167c	; 0x167c <__floatsisf>
     ffa:	2f 81       	ldd	r18, Y+7	; 0x07
     ffc:	38 85       	ldd	r19, Y+8	; 0x08
     ffe:	49 85       	ldd	r20, Y+9	; 0x09
    1000:	5a 85       	ldd	r21, Y+10	; 0x0a
    1002:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
    1006:	0e 94 0d 0b 	call	0x161a	; 0x161a <__fixunssfsi>
    100a:	f3 01       	movw	r30, r6
    100c:	62 83       	std	Z+2, r22	; 0x02
				break;
    100e:	8a c0       	rjmp	.+276    	; 0x1124 <tinyLED_update+0x390>
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__floatunsisf>
    101a:	9b 01       	movw	r18, r22
    101c:	ac 01       	movw	r20, r24
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	80 e8       	ldi	r24, 0x80	; 128
    1024:	9f e3       	ldi	r25, 0x3F	; 63
    1026:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <fmin>
    102a:	6c 8b       	std	Y+20, r22	; 0x14
    102c:	7d 8b       	std	Y+21, r23	; 0x15
    102e:	8e 8b       	std	Y+22, r24	; 0x16
    1030:	9f 8b       	std	Y+23, r25	; 0x17
    1032:	68 89       	ldd	r22, Y+16	; 0x10
    1034:	79 89       	ldd	r23, Y+17	; 0x11
    1036:	8a 89       	ldd	r24, Y+18	; 0x12
    1038:	9b 89       	ldd	r25, Y+19	; 0x13
    103a:	0e 94 3e 0b 	call	0x167c	; 0x167c <__floatsisf>
    103e:	6c 87       	std	Y+12, r22	; 0x0c
    1040:	7d 87       	std	Y+13, r23	; 0x0d
    1042:	8e 87       	std	Y+14, r24	; 0x0e
    1044:	9f 87       	std	Y+15, r25	; 0x0f
    1046:	6e 2d       	mov	r22, r14
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__floatunsisf>
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	80 e8       	ldi	r24, 0x80	; 128
    105c:	9f e3       	ldi	r25, 0x3F	; 63
    105e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <fmin>
    1062:	68 8f       	std	Y+24, r22	; 0x18
    1064:	79 8f       	std	Y+25, r23	; 0x19
    1066:	8a 8f       	std	Y+26, r24	; 0x1a
    1068:	9b 8f       	std	Y+27, r25	; 0x1b
    106a:	6f 2d       	mov	r22, r15
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__floatunsisf>
    1076:	9b 01       	movw	r18, r22
    1078:	ac 01       	movw	r20, r24
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	80 e8       	ldi	r24, 0x80	; 128
    1080:	9f e3       	ldi	r25, 0x3F	; 63
    1082:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <fmin>
    1086:	6c 8f       	std	Y+28, r22	; 0x1c
    1088:	7d 8f       	std	Y+29, r23	; 0x1d
    108a:	8e 8f       	std	Y+30, r24	; 0x1e
    108c:	9f 8f       	std	Y+31, r25	; 0x1f
    108e:	23 e3       	ldi	r18, 0x33	; 51
    1090:	33 e3       	ldi	r19, 0x33	; 51
    1092:	43 ea       	ldi	r20, 0xA3	; 163
    1094:	50 e4       	ldi	r21, 0x40	; 64
    1096:	6c 89       	ldd	r22, Y+20	; 0x14
    1098:	7d 89       	ldd	r23, Y+21	; 0x15
    109a:	8e 89       	ldd	r24, Y+22	; 0x16
    109c:	9f 89       	ldd	r25, Y+23	; 0x17
    109e:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
    10a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    10a6:	4e 85       	ldd	r20, Y+14	; 0x0e
    10a8:	5f 85       	ldd	r21, Y+15	; 0x0f
    10aa:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
    10ae:	0e 94 0d 0b 	call	0x161a	; 0x161a <__fixunssfsi>
    10b2:	d3 01       	movw	r26, r6
    10b4:	6c 93       	st	X, r22
    10b6:	23 e3       	ldi	r18, 0x33	; 51
    10b8:	33 e3       	ldi	r19, 0x33	; 51
    10ba:	43 ea       	ldi	r20, 0xA3	; 163
    10bc:	50 e4       	ldi	r21, 0x40	; 64
    10be:	68 8d       	ldd	r22, Y+24	; 0x18
    10c0:	79 8d       	ldd	r23, Y+25	; 0x19
    10c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    10c6:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
    10ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    10cc:	3d 85       	ldd	r19, Y+13	; 0x0d
    10ce:	4e 85       	ldd	r20, Y+14	; 0x0e
    10d0:	5f 85       	ldd	r21, Y+15	; 0x0f
    10d2:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
    10d6:	0e 94 0d 0b 	call	0x161a	; 0x161a <__fixunssfsi>
    10da:	f3 01       	movw	r30, r6
    10dc:	61 83       	std	Z+1, r22	; 0x01
    10de:	23 e3       	ldi	r18, 0x33	; 51
    10e0:	33 e3       	ldi	r19, 0x33	; 51
    10e2:	43 ea       	ldi	r20, 0xA3	; 163
    10e4:	50 e4       	ldi	r21, 0x40	; 64
    10e6:	6c 8d       	ldd	r22, Y+28	; 0x1c
    10e8:	7d 8d       	ldd	r23, Y+29	; 0x1d
    10ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10ee:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
    10f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10f4:	3d 85       	ldd	r19, Y+13	; 0x0d
    10f6:	4e 85       	ldd	r20, Y+14	; 0x0e
    10f8:	5f 85       	ldd	r21, Y+15	; 0x0f
    10fa:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
    10fe:	0e 94 0d 0b 	call	0x161a	; 0x161a <__fixunssfsi>
    1102:	d3 01       	movw	r26, r6
    1104:	12 96       	adiw	r26, 0x02	; 2
    1106:	6c 93       	st	X, r22
				break;
    1108:	0d c0       	rjmp	.+26     	; 0x1124 <tinyLED_update+0x390>
			case FLASH_ONCE:
				if(tinyLED_flash_once_time[i]>0){
    110a:	d8 01       	movw	r26, r16
    110c:	8c 91       	ld	r24, X
    110e:	88 23       	and	r24, r24
    1110:	19 f0       	breq	.+6      	; 0x1118 <tinyLED_update+0x384>
					rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red, rgb_colors[i].green, rgb_colors[i].blue};
					tinyLED_flash_once_time[i]--;
    1112:	81 50       	subi	r24, 0x01	; 1
    1114:	8c 93       	st	X, r24
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <tinyLED_update+0x390>
				}
				else{
					// Here we return to the previous color and mode
					tinyLED_settings[i].color = tinyLED_old_settings[i].color;
    1118:	d5 01       	movw	r26, r10
    111a:	8c 91       	ld	r24, X
    111c:	80 83       	st	Z, r24
					tinyLED_settings[i].mode = tinyLED_old_settings[i].mode;
    111e:	11 96       	adiw	r26, 0x01	; 1
    1120:	8c 91       	ld	r24, X
    1122:	81 83       	std	Z+1, r24	; 0x01
    1124:	b2 e0       	ldi	r27, 0x02	; 2
    1126:	2b 0e       	add	r2, r27
    1128:	31 1c       	adc	r3, r1
    112a:	e3 e0       	ldi	r30, 0x03	; 3
    112c:	6e 0e       	add	r6, r30
    112e:	71 1c       	adc	r7, r1
    1130:	f2 e0       	ldi	r31, 0x02	; 2
    1132:	af 0e       	add	r10, r31
    1134:	b1 1c       	adc	r11, r1
    1136:	0f 5f       	subi	r16, 0xFF	; 255
    1138:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// This is where we store all the actual color values we want to send to the LED
	struct RGB_Color rgb_colors[NUMBER_OF_LEDS];
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
    113a:	24 14       	cp	r2, r4
    113c:	35 04       	cpc	r3, r5
    113e:	09 f0       	breq	.+2      	; 0x1142 <tinyLED_update+0x3ae>
    1140:	a6 ce       	rjmp	.-692    	; 0xe8e <tinyLED_update+0xfa>
				break;
		}
	}
	
	// We only write to the LEDs if there is something to change. (eg. in SWING mode, we update the LEDs almost every cycle)
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
    1142:	6c e5       	ldi	r22, 0x5C	; 92
    1144:	78 e3       	ldi	r23, 0x38	; 56
    1146:	ce 01       	movw	r24, r28
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	0e 94 9a 06 	call	0xd34	; 0xd34 <tinyLED_RGB_Color_Compare>
    114e:	81 11       	cpse	r24, r1
    1150:	2f c0       	rjmp	.+94     	; 0x11b0 <tinyLED_update+0x41c>
    1152:	0c e5       	ldi	r16, 0x5C	; 92
    1154:	18 e3       	ldi	r17, 0x38	; 56
    1156:	7e 01       	movw	r14, r28
    1158:	27 e0       	ldi	r18, 0x07	; 7
    115a:	e2 0e       	add	r14, r18
    115c:	f1 1c       	adc	r15, r1
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
		{
			// Write to LEDs
			//For some reason, the data-bus to the LEDs is serialized as GRB
			//which means the 24-bit data-bus will look like [Green[0:7], Red[0:7], Blue[0:7]]
			tinyLED_SPIWriteByte(rgb_colors[i].green);
    115e:	d6 01       	movw	r26, r12
    1160:	11 96       	adiw	r26, 0x01	; 1
    1162:	8c 91       	ld	r24, X
    1164:	0e 94 56 06 	call	0xcac	; 0xcac <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].red);
    1168:	f6 01       	movw	r30, r12
    116a:	80 81       	ld	r24, Z
    116c:	0e 94 56 06 	call	0xcac	; 0xcac <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
    1170:	d6 01       	movw	r26, r12
    1172:	12 96       	adiw	r26, 0x02	; 2
    1174:	8c 91       	ld	r24, X
    1176:	0e 94 56 06 	call	0xcac	; 0xcac <tinyLED_SPIWriteByte>
			tinyLED_old_colors[i] = rgb_colors[i];
    117a:	f6 01       	movw	r30, r12
    117c:	81 91       	ld	r24, Z+
    117e:	91 91       	ld	r25, Z+
    1180:	a1 91       	ld	r26, Z+
    1182:	6f 01       	movw	r12, r30
    1184:	f8 01       	movw	r30, r16
    1186:	81 93       	st	Z+, r24
    1188:	91 93       	st	Z+, r25
    118a:	a1 93       	st	Z+, r26
    118c:	8f 01       	movw	r16, r30
		}
	}
	
	// We only write to the LEDs if there is something to change. (eg. in SWING mode, we update the LEDs almost every cycle)
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
    118e:	ce 14       	cp	r12, r14
    1190:	df 04       	cpc	r13, r15
    1192:	29 f7       	brne	.-54     	; 0x115e <tinyLED_update+0x3ca>
			tinyLED_SPIWriteByte(rgb_colors[i].green);
			tinyLED_SPIWriteByte(rgb_colors[i].red);
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
			tinyLED_old_colors[i] = rgb_colors[i];
		}
		tinyDebugger_send_uint8("LED1 color", tinyLED_settings[0].color);
    1194:	02 e6       	ldi	r16, 0x62	; 98
    1196:	18 e3       	ldi	r17, 0x38	; 56
    1198:	d8 01       	movw	r26, r16
    119a:	6c 91       	ld	r22, X
    119c:	80 e5       	ldi	r24, 0x50	; 80
    119e:	96 ea       	ldi	r25, 0xA6	; 166
    11a0:	0e 94 bc 04 	call	0x978	; 0x978 <tinyDebugger_send_uint8>
		tinyDebugger_send_uint8("LED2 color", tinyLED_settings[1].color);
    11a4:	f8 01       	movw	r30, r16
    11a6:	62 81       	ldd	r22, Z+2	; 0x02
    11a8:	8b e5       	ldi	r24, 0x5B	; 91
    11aa:	96 ea       	ldi	r25, 0xA6	; 166
    11ac:	0e 94 bc 04 	call	0x978	; 0x978 <tinyDebugger_send_uint8>
	}
}
    11b0:	6f 96       	adiw	r28, 0x1f	; 31
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	df 90       	pop	r13
    11c4:	cf 90       	pop	r12
    11c6:	bf 90       	pop	r11
    11c8:	af 90       	pop	r10
    11ca:	9f 90       	pop	r9
    11cc:	8f 90       	pop	r8
    11ce:	7f 90       	pop	r7
    11d0:	6f 90       	pop	r6
    11d2:	5f 90       	pop	r5
    11d4:	4f 90       	pop	r4
    11d6:	3f 90       	pop	r3
    11d8:	2f 90       	pop	r2
    11da:	08 95       	ret

000011dc <tinyPotential_update>:

/*
Update the potential
*/
void tinyPotential_update()
{
    11dc:	cf 92       	push	r12
    11de:	df 92       	push	r13
    11e0:	ef 92       	push	r14
    11e2:	ff 92       	push	r15
Function to decay the potential towards 0
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
    11e4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <tinyTime_now>
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    11e8:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <previous_update_time>
    11ec:	68 1b       	sub	r22, r24
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__floatunsisf>
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	48 ec       	ldi	r20, 0xC8	; 200
    11fe:	52 e4       	ldi	r21, 0x42	; 66
    1200:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__divsf3>
    1204:	90 58       	subi	r25, 0x80	; 128
    1206:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <exp>
    120a:	20 91 4a 38 	lds	r18, 0x384A	; 0x80384a <tinyPotential_potential>
    120e:	30 91 4b 38 	lds	r19, 0x384B	; 0x80384b <tinyPotential_potential+0x1>
    1212:	40 91 4c 38 	lds	r20, 0x384C	; 0x80384c <tinyPotential_potential+0x2>
    1216:	50 91 4d 38 	lds	r21, 0x384D	; 0x80384d <tinyPotential_potential+0x3>
    121a:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
    121e:	6b 01       	movw	r12, r22
    1220:	7c 01       	movw	r14, r24
	if(fabs(tinyPotential_potential)<0.1){
    1222:	9f 77       	andi	r25, 0x7F	; 127
    1224:	2d ec       	ldi	r18, 0xCD	; 205
    1226:	3c ec       	ldi	r19, 0xCC	; 204
    1228:	4c ec       	ldi	r20, 0xCC	; 204
    122a:	5d e3       	ldi	r21, 0x3D	; 61
    122c:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__cmpsf2>
    1230:	88 23       	and	r24, r24
    1232:	4c f0       	brlt	.+18     	; 0x1246 <tinyPotential_update+0x6a>
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    1234:	c0 92 4a 38 	sts	0x384A, r12	; 0x80384a <tinyPotential_potential>
    1238:	d0 92 4b 38 	sts	0x384B, r13	; 0x80384b <tinyPotential_potential+0x1>
    123c:	e0 92 4c 38 	sts	0x384C, r14	; 0x80384c <tinyPotential_potential+0x2>
    1240:	f0 92 4d 38 	sts	0x384D, r15	; 0x80384d <tinyPotential_potential+0x3>
    1244:	08 c0       	rjmp	.+16     	; 0x1256 <tinyPotential_update+0x7a>
	if(fabs(tinyPotential_potential)<0.1){
		tinyPotential_potential=0;
    1246:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <tinyPotential_potential>
    124a:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <tinyPotential_potential+0x1>
    124e:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <tinyPotential_potential+0x2>
    1252:	10 92 4d 38 	sts	0x384D, r1	; 0x80384d <tinyPotential_potential+0x3>
	}
	previous_update_time = tinyTime_now();
    1256:	0e 94 e6 09 	call	0x13cc	; 0x13cc <tinyTime_now>
    125a:	60 93 46 38 	sts	0x3846, r22	; 0x803846 <previous_update_time>
    125e:	70 93 47 38 	sts	0x3847, r23	; 0x803847 <previous_update_time+0x1>
    1262:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <previous_update_time+0x2>
    1266:	90 93 49 38 	sts	0x3849, r25	; 0x803849 <previous_update_time+0x3>
void tinyPotential_update()
{
	//Some of the potential in the neuron has decayed away
	tinyPotential_decay();
	// Update potential with values from Dendrites
	tinyPotential_potential = tinyDendrite_update_potential(tinyPotential_potential);
    126a:	60 91 4a 38 	lds	r22, 0x384A	; 0x80384a <tinyPotential_potential>
    126e:	70 91 4b 38 	lds	r23, 0x384B	; 0x80384b <tinyPotential_potential+0x1>
    1272:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <tinyPotential_potential+0x2>
    1276:	90 91 4d 38 	lds	r25, 0x384D	; 0x80384d <tinyPotential_potential+0x3>
    127a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <tinyDendrite_update_potential>
    127e:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <tinyPotential_potential>
    1282:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <tinyPotential_potential+0x1>
    1286:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <tinyPotential_potential+0x2>
    128a:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <tinyPotential_potential+0x3>
	
	// Update potential from button press
	tinyPotential_potential = tinyButton_update_potential(tinyPotential_potential);
    128e:	0e 94 34 04 	call	0x868	; 0x868 <tinyButton_update_potential>
    1292:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <tinyPotential_potential>
    1296:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <tinyPotential_potential+0x1>
    129a:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <tinyPotential_potential+0x2>
    129e:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <tinyPotential_potential+0x3>
	
	// Update potential with values from spontaneous pulse.
	tinyPotential_potential = tinyPulse_update_potential(tinyPotential_potential);
    12a2:	0e 94 9a 09 	call	0x1334	; 0x1334 <tinyPulse_update_potential>
    12a6:	ab 01       	movw	r20, r22
    12a8:	bc 01       	movw	r22, r24
    12aa:	40 93 4a 38 	sts	0x384A, r20	; 0x80384a <tinyPotential_potential>
    12ae:	50 93 4b 38 	sts	0x384B, r21	; 0x80384b <tinyPotential_potential+0x1>
    12b2:	60 93 4c 38 	sts	0x384C, r22	; 0x80384c <tinyPotential_potential+0x2>
    12b6:	70 93 4d 38 	sts	0x384D, r23	; 0x80384d <tinyPotential_potential+0x3>
	
	tinyDebugger_send_double("Potential", tinyPotential_potential);
    12ba:	86 e6       	ldi	r24, 0x66	; 102
    12bc:	96 ea       	ldi	r25, 0xA6	; 166
    12be:	0e 94 cd 04 	call	0x99a	; 0x99a <tinyDebugger_send_double>
	
	
	// Let the axon affect the potential
	// This is also where we decide whether or not the axon should fire
	tinyPotential_potential = tinyAxon_update_potential(tinyPotential_potential);
    12c2:	60 91 4a 38 	lds	r22, 0x384A	; 0x80384a <tinyPotential_potential>
    12c6:	70 91 4b 38 	lds	r23, 0x384B	; 0x80384b <tinyPotential_potential+0x1>
    12ca:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <tinyPotential_potential+0x2>
    12ce:	90 91 4d 38 	lds	r25, 0x384D	; 0x80384d <tinyPotential_potential+0x3>
    12d2:	0e 94 0f 03 	call	0x61e	; 0x61e <tinyAxon_update_potential>
    12d6:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <tinyPotential_potential>
    12da:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <tinyPotential_potential+0x1>
    12de:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <tinyPotential_potential+0x2>
    12e2:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <tinyPotential_potential+0x3>
}
    12e6:	ff 90       	pop	r15
    12e8:	ef 90       	pop	r14
    12ea:	df 90       	pop	r13
    12ec:	cf 90       	pop	r12
    12ee:	08 95       	ret

000012f0 <tinyPulse_toggle_pulse_mode>:
_Bool tinyPulse_is_in_pulse_mode(){
	return pulse_mode;
}

void tinyPulse_toggle_pulse_mode(){
	pulse_mode = !pulse_mode;
    12f0:	90 91 54 38 	lds	r25, 0x3854	; 0x803854 <pulse_mode>
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	89 27       	eor	r24, r25
    12f8:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <pulse_mode>
	
	if(tinyPulse_is_in_pulse_mode()){
    12fc:	88 23       	and	r24, r24
    12fe:	59 f0       	breq	.+22     	; 0x1316 <tinyPulse_toggle_pulse_mode+0x26>
		tinyLED_set_color_mode(OUT_LED, PULSEMODE_COLOR, WEAK);
    1300:	41 e0       	ldi	r20, 0x01	; 1
    1302:	62 e0       	ldi	r22, 0x02	; 2
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
		tinyLED_set_color_mode(INN_LED, PULSEMODE_COLOR, WEAK);
    130a:	41 e0       	ldi	r20, 0x01	; 1
    130c:	62 e0       	ldi	r22, 0x02	; 2
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
    1314:	08 95       	ret
	}
	else{
		tinyLED_set_color(OUT_LED, LED_OFF);
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	0e 94 96 06 	call	0xd2c	; 0xd2c <tinyLED_set_color>
		tinyLED_set_color(INN_LED, LED_OFF);
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	0e 94 96 06 	call	0xd2c	; 0xd2c <tinyLED_set_color>
    1326:	08 95       	ret

00001328 <tinyPulse_set_pulse_mode>:
	}
}

void tinyPulse_set_pulse_mode(_Bool mode){
	if (pulse_mode != mode)
    1328:	90 91 54 38 	lds	r25, 0x3854	; 0x803854 <pulse_mode>
    132c:	98 13       	cpse	r25, r24
	{
		tinyPulse_toggle_pulse_mode();
    132e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <tinyPulse_toggle_pulse_mode>
    1332:	08 95       	ret

00001334 <tinyPulse_update_potential>:
	}
}

double tinyPulse_update_potential(double potential){
    1334:	cf 92       	push	r12
    1336:	df 92       	push	r13
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	6b 01       	movw	r12, r22
    133e:	7c 01       	movw	r14, r24
	if(pulse_mode){
    1340:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <pulse_mode>
    1344:	88 23       	and	r24, r24
    1346:	39 f1       	breq	.+78     	; 0x1396 <tinyPulse_update_potential+0x62>
		
		time_since_last_pulse = tinyTime_now() - time_of_last_pulse;
    1348:	0e 94 e6 09 	call	0x13cc	; 0x13cc <tinyTime_now>
    134c:	20 91 50 38 	lds	r18, 0x3850	; 0x803850 <time_of_last_pulse>
    1350:	30 91 51 38 	lds	r19, 0x3851	; 0x803851 <time_of_last_pulse+0x1>
    1354:	62 1b       	sub	r22, r18
    1356:	73 0b       	sbc	r23, r19
    1358:	60 93 4e 38 	sts	0x384E, r22	; 0x80384e <time_since_last_pulse>
    135c:	70 93 4f 38 	sts	0x384F, r23	; 0x80384f <time_since_last_pulse+0x1>
		
		if(time_since_last_pulse >= ideal_time_between_pulses){
    1360:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <ideal_time_between_pulses>
    1364:	90 91 14 38 	lds	r25, 0x3814	; 0x803814 <ideal_time_between_pulses+0x1>
    1368:	68 17       	cp	r22, r24
    136a:	79 07       	cpc	r23, r25
    136c:	a0 f0       	brcs	.+40     	; 0x1396 <tinyPulse_update_potential+0x62>
			// This isn't actually a button press. You could have a separate variable for this, but it seems unnecessary.
			potential += BUTTON_PRESS_REACTION;
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 ed       	ldi	r20, 0xD0	; 208
    1374:	51 e4       	ldi	r21, 0x41	; 65
    1376:	c7 01       	movw	r24, r14
    1378:	b6 01       	movw	r22, r12
    137a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__addsf3>
    137e:	6b 01       	movw	r12, r22
    1380:	7c 01       	movw	r14, r24
			time_of_last_pulse = tinyTime_now();			
    1382:	0e 94 e6 09 	call	0x13cc	; 0x13cc <tinyTime_now>
    1386:	60 93 50 38 	sts	0x3850, r22	; 0x803850 <time_of_last_pulse>
    138a:	70 93 51 38 	sts	0x3851, r23	; 0x803851 <time_of_last_pulse+0x1>
    138e:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <time_of_last_pulse+0x2>
    1392:	90 93 53 38 	sts	0x3853, r25	; 0x803853 <time_of_last_pulse+0x3>
		}
	}
	return potential;
}
    1396:	c7 01       	movw	r24, r14
    1398:	b6 01       	movw	r22, r12
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
    13a2:	08 95       	ret

000013a4 <tinyTime_counter_increment>:
    13a4:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <time_counter>
    13a8:	90 91 56 38 	lds	r25, 0x3856	; 0x803856 <time_counter+0x1>
    13ac:	a0 91 57 38 	lds	r26, 0x3857	; 0x803857 <time_counter+0x2>
    13b0:	b0 91 58 38 	lds	r27, 0x3858	; 0x803858 <time_counter+0x3>
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	a1 1d       	adc	r26, r1
    13b8:	b1 1d       	adc	r27, r1
    13ba:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <time_counter>
    13be:	90 93 56 38 	sts	0x3856, r25	; 0x803856 <time_counter+0x1>
    13c2:	a0 93 57 38 	sts	0x3857, r26	; 0x803857 <time_counter+0x2>
    13c6:	b0 93 58 38 	sts	0x3858, r27	; 0x803858 <time_counter+0x3>
    13ca:	08 95       	ret

000013cc <tinyTime_now>:
    13cc:	60 91 55 38 	lds	r22, 0x3855	; 0x803855 <time_counter>
    13d0:	70 91 56 38 	lds	r23, 0x3856	; 0x803856 <time_counter+0x1>
    13d4:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <time_counter+0x2>
    13d8:	90 91 58 38 	lds	r25, 0x3858	; 0x803858 <time_counter+0x3>
    13dc:	08 95       	ret

000013de <__subsf3>:
    13de:	50 58       	subi	r21, 0x80	; 128

000013e0 <__addsf3>:
    13e0:	bb 27       	eor	r27, r27
    13e2:	aa 27       	eor	r26, r26
    13e4:	0e 94 07 0a 	call	0x140e	; 0x140e <__addsf3x>
    13e8:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__fp_round>
    13ec:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__fp_pscA>
    13f0:	38 f0       	brcs	.+14     	; 0x1400 <__addsf3+0x20>
    13f2:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__fp_pscB>
    13f6:	20 f0       	brcs	.+8      	; 0x1400 <__addsf3+0x20>
    13f8:	39 f4       	brne	.+14     	; 0x1408 <__addsf3+0x28>
    13fa:	9f 3f       	cpi	r25, 0xFF	; 255
    13fc:	19 f4       	brne	.+6      	; 0x1404 <__addsf3+0x24>
    13fe:	26 f4       	brtc	.+8      	; 0x1408 <__addsf3+0x28>
    1400:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__fp_nan>
    1404:	0e f4       	brtc	.+2      	; 0x1408 <__addsf3+0x28>
    1406:	e0 95       	com	r30
    1408:	e7 fb       	bst	r30, 7
    140a:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__fp_inf>

0000140e <__addsf3x>:
    140e:	e9 2f       	mov	r30, r25
    1410:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__fp_split3>
    1414:	58 f3       	brcs	.-42     	; 0x13ec <__addsf3+0xc>
    1416:	ba 17       	cp	r27, r26
    1418:	62 07       	cpc	r22, r18
    141a:	73 07       	cpc	r23, r19
    141c:	84 07       	cpc	r24, r20
    141e:	95 07       	cpc	r25, r21
    1420:	20 f0       	brcs	.+8      	; 0x142a <__addsf3x+0x1c>
    1422:	79 f4       	brne	.+30     	; 0x1442 <__addsf3x+0x34>
    1424:	a6 f5       	brtc	.+104    	; 0x148e <__addsf3x+0x80>
    1426:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_zero>
    142a:	0e f4       	brtc	.+2      	; 0x142e <__addsf3x+0x20>
    142c:	e0 95       	com	r30
    142e:	0b 2e       	mov	r0, r27
    1430:	ba 2f       	mov	r27, r26
    1432:	a0 2d       	mov	r26, r0
    1434:	0b 01       	movw	r0, r22
    1436:	b9 01       	movw	r22, r18
    1438:	90 01       	movw	r18, r0
    143a:	0c 01       	movw	r0, r24
    143c:	ca 01       	movw	r24, r20
    143e:	a0 01       	movw	r20, r0
    1440:	11 24       	eor	r1, r1
    1442:	ff 27       	eor	r31, r31
    1444:	59 1b       	sub	r21, r25
    1446:	99 f0       	breq	.+38     	; 0x146e <__addsf3x+0x60>
    1448:	59 3f       	cpi	r21, 0xF9	; 249
    144a:	50 f4       	brcc	.+20     	; 0x1460 <__addsf3x+0x52>
    144c:	50 3e       	cpi	r21, 0xE0	; 224
    144e:	68 f1       	brcs	.+90     	; 0x14aa <__addsf3x+0x9c>
    1450:	1a 16       	cp	r1, r26
    1452:	f0 40       	sbci	r31, 0x00	; 0
    1454:	a2 2f       	mov	r26, r18
    1456:	23 2f       	mov	r18, r19
    1458:	34 2f       	mov	r19, r20
    145a:	44 27       	eor	r20, r20
    145c:	58 5f       	subi	r21, 0xF8	; 248
    145e:	f3 cf       	rjmp	.-26     	; 0x1446 <__addsf3x+0x38>
    1460:	46 95       	lsr	r20
    1462:	37 95       	ror	r19
    1464:	27 95       	ror	r18
    1466:	a7 95       	ror	r26
    1468:	f0 40       	sbci	r31, 0x00	; 0
    146a:	53 95       	inc	r21
    146c:	c9 f7       	brne	.-14     	; 0x1460 <__addsf3x+0x52>
    146e:	7e f4       	brtc	.+30     	; 0x148e <__addsf3x+0x80>
    1470:	1f 16       	cp	r1, r31
    1472:	ba 0b       	sbc	r27, r26
    1474:	62 0b       	sbc	r22, r18
    1476:	73 0b       	sbc	r23, r19
    1478:	84 0b       	sbc	r24, r20
    147a:	ba f0       	brmi	.+46     	; 0x14aa <__addsf3x+0x9c>
    147c:	91 50       	subi	r25, 0x01	; 1
    147e:	a1 f0       	breq	.+40     	; 0x14a8 <__addsf3x+0x9a>
    1480:	ff 0f       	add	r31, r31
    1482:	bb 1f       	adc	r27, r27
    1484:	66 1f       	adc	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	88 1f       	adc	r24, r24
    148a:	c2 f7       	brpl	.-16     	; 0x147c <__addsf3x+0x6e>
    148c:	0e c0       	rjmp	.+28     	; 0x14aa <__addsf3x+0x9c>
    148e:	ba 0f       	add	r27, r26
    1490:	62 1f       	adc	r22, r18
    1492:	73 1f       	adc	r23, r19
    1494:	84 1f       	adc	r24, r20
    1496:	48 f4       	brcc	.+18     	; 0x14aa <__addsf3x+0x9c>
    1498:	87 95       	ror	r24
    149a:	77 95       	ror	r23
    149c:	67 95       	ror	r22
    149e:	b7 95       	ror	r27
    14a0:	f7 95       	ror	r31
    14a2:	9e 3f       	cpi	r25, 0xFE	; 254
    14a4:	08 f0       	brcs	.+2      	; 0x14a8 <__addsf3x+0x9a>
    14a6:	b0 cf       	rjmp	.-160    	; 0x1408 <__addsf3+0x28>
    14a8:	93 95       	inc	r25
    14aa:	88 0f       	add	r24, r24
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <__addsf3x+0xa2>
    14ae:	99 27       	eor	r25, r25
    14b0:	ee 0f       	add	r30, r30
    14b2:	97 95       	ror	r25
    14b4:	87 95       	ror	r24
    14b6:	08 95       	ret

000014b8 <__cmpsf2>:
    14b8:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fp_cmp>
    14bc:	08 f4       	brcc	.+2      	; 0x14c0 <__cmpsf2+0x8>
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	08 95       	ret

000014c2 <__divsf3>:
    14c2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__divsf3x>
    14c6:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__fp_round>
    14ca:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__fp_pscB>
    14ce:	58 f0       	brcs	.+22     	; 0x14e6 <__divsf3+0x24>
    14d0:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__fp_pscA>
    14d4:	40 f0       	brcs	.+16     	; 0x14e6 <__divsf3+0x24>
    14d6:	29 f4       	brne	.+10     	; 0x14e2 <__divsf3+0x20>
    14d8:	5f 3f       	cpi	r21, 0xFF	; 255
    14da:	29 f0       	breq	.+10     	; 0x14e6 <__divsf3+0x24>
    14dc:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__fp_inf>
    14e0:	51 11       	cpse	r21, r1
    14e2:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__fp_szero>
    14e6:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__fp_nan>

000014ea <__divsf3x>:
    14ea:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__fp_split3>
    14ee:	68 f3       	brcs	.-38     	; 0x14ca <__divsf3+0x8>

000014f0 <__divsf3_pse>:
    14f0:	99 23       	and	r25, r25
    14f2:	b1 f3       	breq	.-20     	; 0x14e0 <__divsf3+0x1e>
    14f4:	55 23       	and	r21, r21
    14f6:	91 f3       	breq	.-28     	; 0x14dc <__divsf3+0x1a>
    14f8:	95 1b       	sub	r25, r21
    14fa:	55 0b       	sbc	r21, r21
    14fc:	bb 27       	eor	r27, r27
    14fe:	aa 27       	eor	r26, r26
    1500:	62 17       	cp	r22, r18
    1502:	73 07       	cpc	r23, r19
    1504:	84 07       	cpc	r24, r20
    1506:	38 f0       	brcs	.+14     	; 0x1516 <__divsf3_pse+0x26>
    1508:	9f 5f       	subi	r25, 0xFF	; 255
    150a:	5f 4f       	sbci	r21, 0xFF	; 255
    150c:	22 0f       	add	r18, r18
    150e:	33 1f       	adc	r19, r19
    1510:	44 1f       	adc	r20, r20
    1512:	aa 1f       	adc	r26, r26
    1514:	a9 f3       	breq	.-22     	; 0x1500 <__divsf3_pse+0x10>
    1516:	35 d0       	rcall	.+106    	; 0x1582 <__divsf3_pse+0x92>
    1518:	0e 2e       	mov	r0, r30
    151a:	3a f0       	brmi	.+14     	; 0x152a <__divsf3_pse+0x3a>
    151c:	e0 e8       	ldi	r30, 0x80	; 128
    151e:	32 d0       	rcall	.+100    	; 0x1584 <__divsf3_pse+0x94>
    1520:	91 50       	subi	r25, 0x01	; 1
    1522:	50 40       	sbci	r21, 0x00	; 0
    1524:	e6 95       	lsr	r30
    1526:	00 1c       	adc	r0, r0
    1528:	ca f7       	brpl	.-14     	; 0x151c <__divsf3_pse+0x2c>
    152a:	2b d0       	rcall	.+86     	; 0x1582 <__divsf3_pse+0x92>
    152c:	fe 2f       	mov	r31, r30
    152e:	29 d0       	rcall	.+82     	; 0x1582 <__divsf3_pse+0x92>
    1530:	66 0f       	add	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	bb 1f       	adc	r27, r27
    1538:	26 17       	cp	r18, r22
    153a:	37 07       	cpc	r19, r23
    153c:	48 07       	cpc	r20, r24
    153e:	ab 07       	cpc	r26, r27
    1540:	b0 e8       	ldi	r27, 0x80	; 128
    1542:	09 f0       	breq	.+2      	; 0x1546 <__divsf3_pse+0x56>
    1544:	bb 0b       	sbc	r27, r27
    1546:	80 2d       	mov	r24, r0
    1548:	bf 01       	movw	r22, r30
    154a:	ff 27       	eor	r31, r31
    154c:	93 58       	subi	r25, 0x83	; 131
    154e:	5f 4f       	sbci	r21, 0xFF	; 255
    1550:	3a f0       	brmi	.+14     	; 0x1560 <__divsf3_pse+0x70>
    1552:	9e 3f       	cpi	r25, 0xFE	; 254
    1554:	51 05       	cpc	r21, r1
    1556:	78 f0       	brcs	.+30     	; 0x1576 <__divsf3_pse+0x86>
    1558:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__fp_inf>
    155c:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__fp_szero>
    1560:	5f 3f       	cpi	r21, 0xFF	; 255
    1562:	e4 f3       	brlt	.-8      	; 0x155c <__divsf3_pse+0x6c>
    1564:	98 3e       	cpi	r25, 0xE8	; 232
    1566:	d4 f3       	brlt	.-12     	; 0x155c <__divsf3_pse+0x6c>
    1568:	86 95       	lsr	r24
    156a:	77 95       	ror	r23
    156c:	67 95       	ror	r22
    156e:	b7 95       	ror	r27
    1570:	f7 95       	ror	r31
    1572:	9f 5f       	subi	r25, 0xFF	; 255
    1574:	c9 f7       	brne	.-14     	; 0x1568 <__divsf3_pse+0x78>
    1576:	88 0f       	add	r24, r24
    1578:	91 1d       	adc	r25, r1
    157a:	96 95       	lsr	r25
    157c:	87 95       	ror	r24
    157e:	97 f9       	bld	r25, 7
    1580:	08 95       	ret
    1582:	e1 e0       	ldi	r30, 0x01	; 1
    1584:	66 0f       	add	r22, r22
    1586:	77 1f       	adc	r23, r23
    1588:	88 1f       	adc	r24, r24
    158a:	bb 1f       	adc	r27, r27
    158c:	62 17       	cp	r22, r18
    158e:	73 07       	cpc	r23, r19
    1590:	84 07       	cpc	r24, r20
    1592:	ba 07       	cpc	r27, r26
    1594:	20 f0       	brcs	.+8      	; 0x159e <__divsf3_pse+0xae>
    1596:	62 1b       	sub	r22, r18
    1598:	73 0b       	sbc	r23, r19
    159a:	84 0b       	sbc	r24, r20
    159c:	ba 0b       	sbc	r27, r26
    159e:	ee 1f       	adc	r30, r30
    15a0:	88 f7       	brcc	.-30     	; 0x1584 <__divsf3_pse+0x94>
    15a2:	e0 95       	com	r30
    15a4:	08 95       	ret
    15a6:	29 f4       	brne	.+10     	; 0x15b2 <__divsf3_pse+0xc2>
    15a8:	16 f0       	brts	.+4      	; 0x15ae <__divsf3_pse+0xbe>
    15aa:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__fp_inf>
    15ae:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_zero>
    15b2:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__fp_nan>

000015b6 <exp>:
    15b6:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fp_splitA>
    15ba:	a8 f3       	brcs	.-22     	; 0x15a6 <__divsf3_pse+0xb6>
    15bc:	96 38       	cpi	r25, 0x86	; 134
    15be:	a0 f7       	brcc	.-24     	; 0x15a8 <__divsf3_pse+0xb8>
    15c0:	07 f8       	bld	r0, 7
    15c2:	0f 92       	push	r0
    15c4:	e8 94       	clt
    15c6:	2b e3       	ldi	r18, 0x3B	; 59
    15c8:	3a ea       	ldi	r19, 0xAA	; 170
    15ca:	48 eb       	ldi	r20, 0xB8	; 184
    15cc:	5f e7       	ldi	r21, 0x7F	; 127
    15ce:	0e 94 c5 0c 	call	0x198a	; 0x198a <__mulsf3_pse>
    15d2:	0f 92       	push	r0
    15d4:	0f 92       	push	r0
    15d6:	0f 92       	push	r0
    15d8:	4d b7       	in	r20, 0x3d	; 61
    15da:	5e b7       	in	r21, 0x3e	; 62
    15dc:	0f 92       	push	r0
    15de:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <modf>
    15e2:	ec e7       	ldi	r30, 0x7C	; 124
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	0e 94 c5 0b 	call	0x178a	; 0x178a <__fp_powser>
    15ea:	4f 91       	pop	r20
    15ec:	5f 91       	pop	r21
    15ee:	ef 91       	pop	r30
    15f0:	ff 91       	pop	r31
    15f2:	e5 95       	asr	r30
    15f4:	ee 1f       	adc	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	49 f0       	breq	.+18     	; 0x160c <exp+0x56>
    15fa:	fe 57       	subi	r31, 0x7E	; 126
    15fc:	e0 68       	ori	r30, 0x80	; 128
    15fe:	44 27       	eor	r20, r20
    1600:	ee 0f       	add	r30, r30
    1602:	44 1f       	adc	r20, r20
    1604:	fa 95       	dec	r31
    1606:	e1 f7       	brne	.-8      	; 0x1600 <exp+0x4a>
    1608:	41 95       	neg	r20
    160a:	55 0b       	sbc	r21, r21
    160c:	0e 94 45 0c 	call	0x188a	; 0x188a <ldexp>
    1610:	0f 90       	pop	r0
    1612:	07 fe       	sbrs	r0, 7
    1614:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <inverse>
    1618:	08 95       	ret

0000161a <__fixunssfsi>:
    161a:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fp_splitA>
    161e:	88 f0       	brcs	.+34     	; 0x1642 <__fixunssfsi+0x28>
    1620:	9f 57       	subi	r25, 0x7F	; 127
    1622:	98 f0       	brcs	.+38     	; 0x164a <__fixunssfsi+0x30>
    1624:	b9 2f       	mov	r27, r25
    1626:	99 27       	eor	r25, r25
    1628:	b7 51       	subi	r27, 0x17	; 23
    162a:	b0 f0       	brcs	.+44     	; 0x1658 <__fixunssfsi+0x3e>
    162c:	e1 f0       	breq	.+56     	; 0x1666 <__fixunssfsi+0x4c>
    162e:	66 0f       	add	r22, r22
    1630:	77 1f       	adc	r23, r23
    1632:	88 1f       	adc	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	1a f0       	brmi	.+6      	; 0x163e <__fixunssfsi+0x24>
    1638:	ba 95       	dec	r27
    163a:	c9 f7       	brne	.-14     	; 0x162e <__fixunssfsi+0x14>
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <__fixunssfsi+0x4c>
    163e:	b1 30       	cpi	r27, 0x01	; 1
    1640:	91 f0       	breq	.+36     	; 0x1666 <__fixunssfsi+0x4c>
    1642:	0e 94 2d 0c 	call	0x185a	; 0x185a <__fp_zero>
    1646:	b1 e0       	ldi	r27, 0x01	; 1
    1648:	08 95       	ret
    164a:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_zero>
    164e:	67 2f       	mov	r22, r23
    1650:	78 2f       	mov	r23, r24
    1652:	88 27       	eor	r24, r24
    1654:	b8 5f       	subi	r27, 0xF8	; 248
    1656:	39 f0       	breq	.+14     	; 0x1666 <__fixunssfsi+0x4c>
    1658:	b9 3f       	cpi	r27, 0xF9	; 249
    165a:	cc f3       	brlt	.-14     	; 0x164e <__fixunssfsi+0x34>
    165c:	86 95       	lsr	r24
    165e:	77 95       	ror	r23
    1660:	67 95       	ror	r22
    1662:	b3 95       	inc	r27
    1664:	d9 f7       	brne	.-10     	; 0x165c <__fixunssfsi+0x42>
    1666:	3e f4       	brtc	.+14     	; 0x1676 <__fixunssfsi+0x5c>
    1668:	90 95       	com	r25
    166a:	80 95       	com	r24
    166c:	70 95       	com	r23
    166e:	61 95       	neg	r22
    1670:	7f 4f       	sbci	r23, 0xFF	; 255
    1672:	8f 4f       	sbci	r24, 0xFF	; 255
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	08 95       	ret

00001678 <__floatunsisf>:
    1678:	e8 94       	clt
    167a:	09 c0       	rjmp	.+18     	; 0x168e <__floatsisf+0x12>

0000167c <__floatsisf>:
    167c:	97 fb       	bst	r25, 7
    167e:	3e f4       	brtc	.+14     	; 0x168e <__floatsisf+0x12>
    1680:	90 95       	com	r25
    1682:	80 95       	com	r24
    1684:	70 95       	com	r23
    1686:	61 95       	neg	r22
    1688:	7f 4f       	sbci	r23, 0xFF	; 255
    168a:	8f 4f       	sbci	r24, 0xFF	; 255
    168c:	9f 4f       	sbci	r25, 0xFF	; 255
    168e:	99 23       	and	r25, r25
    1690:	a9 f0       	breq	.+42     	; 0x16bc <__floatsisf+0x40>
    1692:	f9 2f       	mov	r31, r25
    1694:	96 e9       	ldi	r25, 0x96	; 150
    1696:	bb 27       	eor	r27, r27
    1698:	93 95       	inc	r25
    169a:	f6 95       	lsr	r31
    169c:	87 95       	ror	r24
    169e:	77 95       	ror	r23
    16a0:	67 95       	ror	r22
    16a2:	b7 95       	ror	r27
    16a4:	f1 11       	cpse	r31, r1
    16a6:	f8 cf       	rjmp	.-16     	; 0x1698 <__floatsisf+0x1c>
    16a8:	fa f4       	brpl	.+62     	; 0x16e8 <__floatsisf+0x6c>
    16aa:	bb 0f       	add	r27, r27
    16ac:	11 f4       	brne	.+4      	; 0x16b2 <__floatsisf+0x36>
    16ae:	60 ff       	sbrs	r22, 0
    16b0:	1b c0       	rjmp	.+54     	; 0x16e8 <__floatsisf+0x6c>
    16b2:	6f 5f       	subi	r22, 0xFF	; 255
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	8f 4f       	sbci	r24, 0xFF	; 255
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	16 c0       	rjmp	.+44     	; 0x16e8 <__floatsisf+0x6c>
    16bc:	88 23       	and	r24, r24
    16be:	11 f0       	breq	.+4      	; 0x16c4 <__floatsisf+0x48>
    16c0:	96 e9       	ldi	r25, 0x96	; 150
    16c2:	11 c0       	rjmp	.+34     	; 0x16e6 <__floatsisf+0x6a>
    16c4:	77 23       	and	r23, r23
    16c6:	21 f0       	breq	.+8      	; 0x16d0 <__floatsisf+0x54>
    16c8:	9e e8       	ldi	r25, 0x8E	; 142
    16ca:	87 2f       	mov	r24, r23
    16cc:	76 2f       	mov	r23, r22
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <__floatsisf+0x5e>
    16d0:	66 23       	and	r22, r22
    16d2:	71 f0       	breq	.+28     	; 0x16f0 <__floatsisf+0x74>
    16d4:	96 e8       	ldi	r25, 0x86	; 134
    16d6:	86 2f       	mov	r24, r22
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	2a f0       	brmi	.+10     	; 0x16e8 <__floatsisf+0x6c>
    16de:	9a 95       	dec	r25
    16e0:	66 0f       	add	r22, r22
    16e2:	77 1f       	adc	r23, r23
    16e4:	88 1f       	adc	r24, r24
    16e6:	da f7       	brpl	.-10     	; 0x16de <__floatsisf+0x62>
    16e8:	88 0f       	add	r24, r24
    16ea:	96 95       	lsr	r25
    16ec:	87 95       	ror	r24
    16ee:	97 f9       	bld	r25, 7
    16f0:	08 95       	ret

000016f2 <fmin>:
    16f2:	99 0f       	add	r25, r25
    16f4:	bb 0b       	sbc	r27, r27
    16f6:	55 0f       	add	r21, r21
    16f8:	aa 0b       	sbc	r26, r26
    16fa:	e0 e8       	ldi	r30, 0x80	; 128
    16fc:	fe ef       	ldi	r31, 0xFE	; 254
    16fe:	16 16       	cp	r1, r22
    1700:	17 06       	cpc	r1, r23
    1702:	e8 07       	cpc	r30, r24
    1704:	f9 07       	cpc	r31, r25
    1706:	70 f0       	brcs	.+28     	; 0x1724 <fmin+0x32>
    1708:	12 16       	cp	r1, r18
    170a:	13 06       	cpc	r1, r19
    170c:	e4 07       	cpc	r30, r20
    170e:	f5 07       	cpc	r31, r21
    1710:	60 f0       	brcs	.+24     	; 0x172a <fmin+0x38>
    1712:	ba 17       	cp	r27, r26
    1714:	54 f0       	brlt	.+20     	; 0x172a <fmin+0x38>
    1716:	31 f4       	brne	.+12     	; 0x1724 <fmin+0x32>
    1718:	26 17       	cp	r18, r22
    171a:	37 07       	cpc	r19, r23
    171c:	48 07       	cpc	r20, r24
    171e:	59 07       	cpc	r21, r25
    1720:	a7 95       	ror	r26
    1722:	1b f4       	brvc	.+6      	; 0x172a <fmin+0x38>
    1724:	b9 01       	movw	r22, r18
    1726:	ca 01       	movw	r24, r20
    1728:	ba 2f       	mov	r27, r26
    172a:	b6 95       	lsr	r27
    172c:	97 95       	ror	r25
    172e:	08 95       	ret

00001730 <__fp_cmp>:
    1730:	99 0f       	add	r25, r25
    1732:	00 08       	sbc	r0, r0
    1734:	55 0f       	add	r21, r21
    1736:	aa 0b       	sbc	r26, r26
    1738:	e0 e8       	ldi	r30, 0x80	; 128
    173a:	fe ef       	ldi	r31, 0xFE	; 254
    173c:	16 16       	cp	r1, r22
    173e:	17 06       	cpc	r1, r23
    1740:	e8 07       	cpc	r30, r24
    1742:	f9 07       	cpc	r31, r25
    1744:	c0 f0       	brcs	.+48     	; 0x1776 <__fp_cmp+0x46>
    1746:	12 16       	cp	r1, r18
    1748:	13 06       	cpc	r1, r19
    174a:	e4 07       	cpc	r30, r20
    174c:	f5 07       	cpc	r31, r21
    174e:	98 f0       	brcs	.+38     	; 0x1776 <__fp_cmp+0x46>
    1750:	62 1b       	sub	r22, r18
    1752:	73 0b       	sbc	r23, r19
    1754:	84 0b       	sbc	r24, r20
    1756:	95 0b       	sbc	r25, r21
    1758:	39 f4       	brne	.+14     	; 0x1768 <__fp_cmp+0x38>
    175a:	0a 26       	eor	r0, r26
    175c:	61 f0       	breq	.+24     	; 0x1776 <__fp_cmp+0x46>
    175e:	23 2b       	or	r18, r19
    1760:	24 2b       	or	r18, r20
    1762:	25 2b       	or	r18, r21
    1764:	21 f4       	brne	.+8      	; 0x176e <__fp_cmp+0x3e>
    1766:	08 95       	ret
    1768:	0a 26       	eor	r0, r26
    176a:	09 f4       	brne	.+2      	; 0x176e <__fp_cmp+0x3e>
    176c:	a1 40       	sbci	r26, 0x01	; 1
    176e:	a6 95       	lsr	r26
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	81 1d       	adc	r24, r1
    1774:	81 1d       	adc	r24, r1
    1776:	08 95       	ret

00001778 <__fp_inf>:
    1778:	97 f9       	bld	r25, 7
    177a:	9f 67       	ori	r25, 0x7F	; 127
    177c:	80 e8       	ldi	r24, 0x80	; 128
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	08 95       	ret

00001784 <__fp_nan>:
    1784:	9f ef       	ldi	r25, 0xFF	; 255
    1786:	80 ec       	ldi	r24, 0xC0	; 192
    1788:	08 95       	ret

0000178a <__fp_powser>:
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	1f 93       	push	r17
    1790:	0f 93       	push	r16
    1792:	ff 92       	push	r15
    1794:	ef 92       	push	r14
    1796:	df 92       	push	r13
    1798:	7b 01       	movw	r14, r22
    179a:	8c 01       	movw	r16, r24
    179c:	68 94       	set
    179e:	06 c0       	rjmp	.+12     	; 0x17ac <__fp_powser+0x22>
    17a0:	da 2e       	mov	r13, r26
    17a2:	ef 01       	movw	r28, r30
    17a4:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__mulsf3x>
    17a8:	fe 01       	movw	r30, r28
    17aa:	e8 94       	clt
    17ac:	a5 91       	lpm	r26, Z+
    17ae:	25 91       	lpm	r18, Z+
    17b0:	35 91       	lpm	r19, Z+
    17b2:	45 91       	lpm	r20, Z+
    17b4:	55 91       	lpm	r21, Z+
    17b6:	a6 f3       	brts	.-24     	; 0x17a0 <__fp_powser+0x16>
    17b8:	ef 01       	movw	r28, r30
    17ba:	0e 94 07 0a 	call	0x140e	; 0x140e <__addsf3x>
    17be:	fe 01       	movw	r30, r28
    17c0:	97 01       	movw	r18, r14
    17c2:	a8 01       	movw	r20, r16
    17c4:	da 94       	dec	r13
    17c6:	69 f7       	brne	.-38     	; 0x17a2 <__fp_powser+0x18>
    17c8:	df 90       	pop	r13
    17ca:	ef 90       	pop	r14
    17cc:	ff 90       	pop	r15
    17ce:	0f 91       	pop	r16
    17d0:	1f 91       	pop	r17
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <__fp_pscA>:
    17d8:	00 24       	eor	r0, r0
    17da:	0a 94       	dec	r0
    17dc:	16 16       	cp	r1, r22
    17de:	17 06       	cpc	r1, r23
    17e0:	18 06       	cpc	r1, r24
    17e2:	09 06       	cpc	r0, r25
    17e4:	08 95       	ret

000017e6 <__fp_pscB>:
    17e6:	00 24       	eor	r0, r0
    17e8:	0a 94       	dec	r0
    17ea:	12 16       	cp	r1, r18
    17ec:	13 06       	cpc	r1, r19
    17ee:	14 06       	cpc	r1, r20
    17f0:	05 06       	cpc	r0, r21
    17f2:	08 95       	ret

000017f4 <__fp_round>:
    17f4:	09 2e       	mov	r0, r25
    17f6:	03 94       	inc	r0
    17f8:	00 0c       	add	r0, r0
    17fa:	11 f4       	brne	.+4      	; 0x1800 <__fp_round+0xc>
    17fc:	88 23       	and	r24, r24
    17fe:	52 f0       	brmi	.+20     	; 0x1814 <__fp_round+0x20>
    1800:	bb 0f       	add	r27, r27
    1802:	40 f4       	brcc	.+16     	; 0x1814 <__fp_round+0x20>
    1804:	bf 2b       	or	r27, r31
    1806:	11 f4       	brne	.+4      	; 0x180c <__fp_round+0x18>
    1808:	60 ff       	sbrs	r22, 0
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <__fp_round+0x20>
    180c:	6f 5f       	subi	r22, 0xFF	; 255
    180e:	7f 4f       	sbci	r23, 0xFF	; 255
    1810:	8f 4f       	sbci	r24, 0xFF	; 255
    1812:	9f 4f       	sbci	r25, 0xFF	; 255
    1814:	08 95       	ret

00001816 <__fp_split3>:
    1816:	57 fd       	sbrc	r21, 7
    1818:	90 58       	subi	r25, 0x80	; 128
    181a:	44 0f       	add	r20, r20
    181c:	55 1f       	adc	r21, r21
    181e:	59 f0       	breq	.+22     	; 0x1836 <__fp_splitA+0x10>
    1820:	5f 3f       	cpi	r21, 0xFF	; 255
    1822:	71 f0       	breq	.+28     	; 0x1840 <__fp_splitA+0x1a>
    1824:	47 95       	ror	r20

00001826 <__fp_splitA>:
    1826:	88 0f       	add	r24, r24
    1828:	97 fb       	bst	r25, 7
    182a:	99 1f       	adc	r25, r25
    182c:	61 f0       	breq	.+24     	; 0x1846 <__fp_splitA+0x20>
    182e:	9f 3f       	cpi	r25, 0xFF	; 255
    1830:	79 f0       	breq	.+30     	; 0x1850 <__fp_splitA+0x2a>
    1832:	87 95       	ror	r24
    1834:	08 95       	ret
    1836:	12 16       	cp	r1, r18
    1838:	13 06       	cpc	r1, r19
    183a:	14 06       	cpc	r1, r20
    183c:	55 1f       	adc	r21, r21
    183e:	f2 cf       	rjmp	.-28     	; 0x1824 <__fp_split3+0xe>
    1840:	46 95       	lsr	r20
    1842:	f1 df       	rcall	.-30     	; 0x1826 <__fp_splitA>
    1844:	08 c0       	rjmp	.+16     	; 0x1856 <__fp_splitA+0x30>
    1846:	16 16       	cp	r1, r22
    1848:	17 06       	cpc	r1, r23
    184a:	18 06       	cpc	r1, r24
    184c:	99 1f       	adc	r25, r25
    184e:	f1 cf       	rjmp	.-30     	; 0x1832 <__fp_splitA+0xc>
    1850:	86 95       	lsr	r24
    1852:	71 05       	cpc	r23, r1
    1854:	61 05       	cpc	r22, r1
    1856:	08 94       	sec
    1858:	08 95       	ret

0000185a <__fp_zero>:
    185a:	e8 94       	clt

0000185c <__fp_szero>:
    185c:	bb 27       	eor	r27, r27
    185e:	66 27       	eor	r22, r22
    1860:	77 27       	eor	r23, r23
    1862:	cb 01       	movw	r24, r22
    1864:	97 f9       	bld	r25, 7
    1866:	08 95       	ret

00001868 <__gesf2>:
    1868:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fp_cmp>
    186c:	08 f4       	brcc	.+2      	; 0x1870 <__gesf2+0x8>
    186e:	8f ef       	ldi	r24, 0xFF	; 255
    1870:	08 95       	ret

00001872 <inverse>:
    1872:	9b 01       	movw	r18, r22
    1874:	ac 01       	movw	r20, r24
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	80 e8       	ldi	r24, 0x80	; 128
    187c:	9f e3       	ldi	r25, 0x3F	; 63
    187e:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__divsf3>
    1882:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__fp_inf>
    1886:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__fp_mpack>

0000188a <ldexp>:
    188a:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fp_splitA>
    188e:	d8 f3       	brcs	.-10     	; 0x1886 <inverse+0x14>
    1890:	99 23       	and	r25, r25
    1892:	c9 f3       	breq	.-14     	; 0x1886 <inverse+0x14>
    1894:	94 0f       	add	r25, r20
    1896:	51 1d       	adc	r21, r1
    1898:	a3 f3       	brvs	.-24     	; 0x1882 <inverse+0x10>
    189a:	91 50       	subi	r25, 0x01	; 1
    189c:	50 40       	sbci	r21, 0x00	; 0
    189e:	94 f0       	brlt	.+36     	; 0x18c4 <ldexp+0x3a>
    18a0:	59 f0       	breq	.+22     	; 0x18b8 <ldexp+0x2e>
    18a2:	88 23       	and	r24, r24
    18a4:	32 f0       	brmi	.+12     	; 0x18b2 <ldexp+0x28>
    18a6:	66 0f       	add	r22, r22
    18a8:	77 1f       	adc	r23, r23
    18aa:	88 1f       	adc	r24, r24
    18ac:	91 50       	subi	r25, 0x01	; 1
    18ae:	50 40       	sbci	r21, 0x00	; 0
    18b0:	c1 f7       	brne	.-16     	; 0x18a2 <ldexp+0x18>
    18b2:	9e 3f       	cpi	r25, 0xFE	; 254
    18b4:	51 05       	cpc	r21, r1
    18b6:	2c f7       	brge	.-54     	; 0x1882 <inverse+0x10>
    18b8:	88 0f       	add	r24, r24
    18ba:	91 1d       	adc	r25, r1
    18bc:	96 95       	lsr	r25
    18be:	87 95       	ror	r24
    18c0:	97 f9       	bld	r25, 7
    18c2:	08 95       	ret
    18c4:	5f 3f       	cpi	r21, 0xFF	; 255
    18c6:	ac f0       	brlt	.+42     	; 0x18f2 <ldexp+0x68>
    18c8:	98 3e       	cpi	r25, 0xE8	; 232
    18ca:	9c f0       	brlt	.+38     	; 0x18f2 <ldexp+0x68>
    18cc:	bb 27       	eor	r27, r27
    18ce:	86 95       	lsr	r24
    18d0:	77 95       	ror	r23
    18d2:	67 95       	ror	r22
    18d4:	b7 95       	ror	r27
    18d6:	08 f4       	brcc	.+2      	; 0x18da <ldexp+0x50>
    18d8:	b1 60       	ori	r27, 0x01	; 1
    18da:	93 95       	inc	r25
    18dc:	c1 f7       	brne	.-16     	; 0x18ce <ldexp+0x44>
    18de:	bb 0f       	add	r27, r27
    18e0:	58 f7       	brcc	.-42     	; 0x18b8 <ldexp+0x2e>
    18e2:	11 f4       	brne	.+4      	; 0x18e8 <ldexp+0x5e>
    18e4:	60 ff       	sbrs	r22, 0
    18e6:	e8 cf       	rjmp	.-48     	; 0x18b8 <ldexp+0x2e>
    18e8:	6f 5f       	subi	r22, 0xFF	; 255
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	8f 4f       	sbci	r24, 0xFF	; 255
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	e3 cf       	rjmp	.-58     	; 0x18b8 <ldexp+0x2e>
    18f2:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__fp_szero>

000018f6 <modf>:
    18f6:	fa 01       	movw	r30, r20
    18f8:	dc 01       	movw	r26, r24
    18fa:	aa 0f       	add	r26, r26
    18fc:	bb 1f       	adc	r27, r27
    18fe:	9b 01       	movw	r18, r22
    1900:	ac 01       	movw	r20, r24
    1902:	bf 57       	subi	r27, 0x7F	; 127
    1904:	28 f4       	brcc	.+10     	; 0x1910 <modf+0x1a>
    1906:	22 27       	eor	r18, r18
    1908:	33 27       	eor	r19, r19
    190a:	44 27       	eor	r20, r20
    190c:	50 78       	andi	r21, 0x80	; 128
    190e:	20 c0       	rjmp	.+64     	; 0x1950 <modf+0x5a>
    1910:	b7 51       	subi	r27, 0x17	; 23
    1912:	90 f4       	brcc	.+36     	; 0x1938 <modf+0x42>
    1914:	ab 2f       	mov	r26, r27
    1916:	00 24       	eor	r0, r0
    1918:	46 95       	lsr	r20
    191a:	37 95       	ror	r19
    191c:	27 95       	ror	r18
    191e:	01 1c       	adc	r0, r1
    1920:	a3 95       	inc	r26
    1922:	d2 f3       	brmi	.-12     	; 0x1918 <modf+0x22>
    1924:	00 20       	and	r0, r0
    1926:	71 f0       	breq	.+28     	; 0x1944 <modf+0x4e>
    1928:	22 0f       	add	r18, r18
    192a:	33 1f       	adc	r19, r19
    192c:	44 1f       	adc	r20, r20
    192e:	b3 95       	inc	r27
    1930:	da f3       	brmi	.-10     	; 0x1928 <modf+0x32>
    1932:	0e d0       	rcall	.+28     	; 0x1950 <modf+0x5a>
    1934:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__subsf3>
    1938:	61 30       	cpi	r22, 0x01	; 1
    193a:	71 05       	cpc	r23, r1
    193c:	a0 e8       	ldi	r26, 0x80	; 128
    193e:	8a 07       	cpc	r24, r26
    1940:	b9 46       	sbci	r27, 0x69	; 105
    1942:	30 f4       	brcc	.+12     	; 0x1950 <modf+0x5a>
    1944:	9b 01       	movw	r18, r22
    1946:	ac 01       	movw	r20, r24
    1948:	66 27       	eor	r22, r22
    194a:	77 27       	eor	r23, r23
    194c:	88 27       	eor	r24, r24
    194e:	90 78       	andi	r25, 0x80	; 128
    1950:	30 96       	adiw	r30, 0x00	; 0
    1952:	21 f0       	breq	.+8      	; 0x195c <modf+0x66>
    1954:	20 83       	st	Z, r18
    1956:	31 83       	std	Z+1, r19	; 0x01
    1958:	42 83       	std	Z+2, r20	; 0x02
    195a:	53 83       	std	Z+3, r21	; 0x03
    195c:	08 95       	ret

0000195e <__mulsf3>:
    195e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__mulsf3x>
    1962:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__fp_round>
    1966:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__fp_pscA>
    196a:	38 f0       	brcs	.+14     	; 0x197a <__mulsf3+0x1c>
    196c:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__fp_pscB>
    1970:	20 f0       	brcs	.+8      	; 0x197a <__mulsf3+0x1c>
    1972:	95 23       	and	r25, r21
    1974:	11 f0       	breq	.+4      	; 0x197a <__mulsf3+0x1c>
    1976:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__fp_inf>
    197a:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__fp_nan>
    197e:	11 24       	eor	r1, r1
    1980:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__fp_szero>

00001984 <__mulsf3x>:
    1984:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__fp_split3>
    1988:	70 f3       	brcs	.-36     	; 0x1966 <__mulsf3+0x8>

0000198a <__mulsf3_pse>:
    198a:	95 9f       	mul	r25, r21
    198c:	c1 f3       	breq	.-16     	; 0x197e <__mulsf3+0x20>
    198e:	95 0f       	add	r25, r21
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	55 1f       	adc	r21, r21
    1994:	62 9f       	mul	r22, r18
    1996:	f0 01       	movw	r30, r0
    1998:	72 9f       	mul	r23, r18
    199a:	bb 27       	eor	r27, r27
    199c:	f0 0d       	add	r31, r0
    199e:	b1 1d       	adc	r27, r1
    19a0:	63 9f       	mul	r22, r19
    19a2:	aa 27       	eor	r26, r26
    19a4:	f0 0d       	add	r31, r0
    19a6:	b1 1d       	adc	r27, r1
    19a8:	aa 1f       	adc	r26, r26
    19aa:	64 9f       	mul	r22, r20
    19ac:	66 27       	eor	r22, r22
    19ae:	b0 0d       	add	r27, r0
    19b0:	a1 1d       	adc	r26, r1
    19b2:	66 1f       	adc	r22, r22
    19b4:	82 9f       	mul	r24, r18
    19b6:	22 27       	eor	r18, r18
    19b8:	b0 0d       	add	r27, r0
    19ba:	a1 1d       	adc	r26, r1
    19bc:	62 1f       	adc	r22, r18
    19be:	73 9f       	mul	r23, r19
    19c0:	b0 0d       	add	r27, r0
    19c2:	a1 1d       	adc	r26, r1
    19c4:	62 1f       	adc	r22, r18
    19c6:	83 9f       	mul	r24, r19
    19c8:	a0 0d       	add	r26, r0
    19ca:	61 1d       	adc	r22, r1
    19cc:	22 1f       	adc	r18, r18
    19ce:	74 9f       	mul	r23, r20
    19d0:	33 27       	eor	r19, r19
    19d2:	a0 0d       	add	r26, r0
    19d4:	61 1d       	adc	r22, r1
    19d6:	23 1f       	adc	r18, r19
    19d8:	84 9f       	mul	r24, r20
    19da:	60 0d       	add	r22, r0
    19dc:	21 1d       	adc	r18, r1
    19de:	82 2f       	mov	r24, r18
    19e0:	76 2f       	mov	r23, r22
    19e2:	6a 2f       	mov	r22, r26
    19e4:	11 24       	eor	r1, r1
    19e6:	9f 57       	subi	r25, 0x7F	; 127
    19e8:	50 40       	sbci	r21, 0x00	; 0
    19ea:	9a f0       	brmi	.+38     	; 0x1a12 <__mulsf3_pse+0x88>
    19ec:	f1 f0       	breq	.+60     	; 0x1a2a <__mulsf3_pse+0xa0>
    19ee:	88 23       	and	r24, r24
    19f0:	4a f0       	brmi	.+18     	; 0x1a04 <__mulsf3_pse+0x7a>
    19f2:	ee 0f       	add	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	bb 1f       	adc	r27, r27
    19f8:	66 1f       	adc	r22, r22
    19fa:	77 1f       	adc	r23, r23
    19fc:	88 1f       	adc	r24, r24
    19fe:	91 50       	subi	r25, 0x01	; 1
    1a00:	50 40       	sbci	r21, 0x00	; 0
    1a02:	a9 f7       	brne	.-22     	; 0x19ee <__mulsf3_pse+0x64>
    1a04:	9e 3f       	cpi	r25, 0xFE	; 254
    1a06:	51 05       	cpc	r21, r1
    1a08:	80 f0       	brcs	.+32     	; 0x1a2a <__mulsf3_pse+0xa0>
    1a0a:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__fp_inf>
    1a0e:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__fp_szero>
    1a12:	5f 3f       	cpi	r21, 0xFF	; 255
    1a14:	e4 f3       	brlt	.-8      	; 0x1a0e <__mulsf3_pse+0x84>
    1a16:	98 3e       	cpi	r25, 0xE8	; 232
    1a18:	d4 f3       	brlt	.-12     	; 0x1a0e <__mulsf3_pse+0x84>
    1a1a:	86 95       	lsr	r24
    1a1c:	77 95       	ror	r23
    1a1e:	67 95       	ror	r22
    1a20:	b7 95       	ror	r27
    1a22:	f7 95       	ror	r31
    1a24:	e7 95       	ror	r30
    1a26:	9f 5f       	subi	r25, 0xFF	; 255
    1a28:	c1 f7       	brne	.-16     	; 0x1a1a <__mulsf3_pse+0x90>
    1a2a:	fe 2b       	or	r31, r30
    1a2c:	88 0f       	add	r24, r24
    1a2e:	91 1d       	adc	r25, r1
    1a30:	96 95       	lsr	r25
    1a32:	87 95       	ror	r24
    1a34:	97 f9       	bld	r25, 7
    1a36:	08 95       	ret

00001a38 <sin>:
    1a38:	9f 93       	push	r25
    1a3a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__fp_rempio2>
    1a3e:	0f 90       	pop	r0
    1a40:	07 fc       	sbrc	r0, 7
    1a42:	ee 5f       	subi	r30, 0xFE	; 254
    1a44:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_sinus>

00001a48 <__fp_mpack>:
    1a48:	9f 3f       	cpi	r25, 0xFF	; 255
    1a4a:	31 f0       	breq	.+12     	; 0x1a58 <__fp_mpack_finite+0xc>

00001a4c <__fp_mpack_finite>:
    1a4c:	91 50       	subi	r25, 0x01	; 1
    1a4e:	20 f4       	brcc	.+8      	; 0x1a58 <__fp_mpack_finite+0xc>
    1a50:	87 95       	ror	r24
    1a52:	77 95       	ror	r23
    1a54:	67 95       	ror	r22
    1a56:	b7 95       	ror	r27
    1a58:	88 0f       	add	r24, r24
    1a5a:	91 1d       	adc	r25, r1
    1a5c:	96 95       	lsr	r25
    1a5e:	87 95       	ror	r24
    1a60:	97 f9       	bld	r25, 7
    1a62:	08 95       	ret
    1a64:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__fp_nan>

00001a68 <__fp_rempio2>:
    1a68:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fp_splitA>
    1a6c:	d8 f3       	brcs	.-10     	; 0x1a64 <__fp_mpack_finite+0x18>
    1a6e:	e8 94       	clt
    1a70:	e0 e0       	ldi	r30, 0x00	; 0
    1a72:	bb 27       	eor	r27, r27
    1a74:	9f 57       	subi	r25, 0x7F	; 127
    1a76:	f0 f0       	brcs	.+60     	; 0x1ab4 <__fp_rempio2+0x4c>
    1a78:	2a ed       	ldi	r18, 0xDA	; 218
    1a7a:	3f e0       	ldi	r19, 0x0F	; 15
    1a7c:	49 ec       	ldi	r20, 0xC9	; 201
    1a7e:	06 c0       	rjmp	.+12     	; 0x1a8c <__fp_rempio2+0x24>
    1a80:	ee 0f       	add	r30, r30
    1a82:	bb 0f       	add	r27, r27
    1a84:	66 1f       	adc	r22, r22
    1a86:	77 1f       	adc	r23, r23
    1a88:	88 1f       	adc	r24, r24
    1a8a:	28 f0       	brcs	.+10     	; 0x1a96 <__fp_rempio2+0x2e>
    1a8c:	b2 3a       	cpi	r27, 0xA2	; 162
    1a8e:	62 07       	cpc	r22, r18
    1a90:	73 07       	cpc	r23, r19
    1a92:	84 07       	cpc	r24, r20
    1a94:	28 f0       	brcs	.+10     	; 0x1aa0 <__fp_rempio2+0x38>
    1a96:	b2 5a       	subi	r27, 0xA2	; 162
    1a98:	62 0b       	sbc	r22, r18
    1a9a:	73 0b       	sbc	r23, r19
    1a9c:	84 0b       	sbc	r24, r20
    1a9e:	e3 95       	inc	r30
    1aa0:	9a 95       	dec	r25
    1aa2:	72 f7       	brpl	.-36     	; 0x1a80 <__fp_rempio2+0x18>
    1aa4:	80 38       	cpi	r24, 0x80	; 128
    1aa6:	30 f4       	brcc	.+12     	; 0x1ab4 <__fp_rempio2+0x4c>
    1aa8:	9a 95       	dec	r25
    1aaa:	bb 0f       	add	r27, r27
    1aac:	66 1f       	adc	r22, r22
    1aae:	77 1f       	adc	r23, r23
    1ab0:	88 1f       	adc	r24, r24
    1ab2:	d2 f7       	brpl	.-12     	; 0x1aa8 <__fp_rempio2+0x40>
    1ab4:	90 48       	sbci	r25, 0x80	; 128
    1ab6:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__fp_mpack_finite>

00001aba <__fp_sinus>:
    1aba:	ef 93       	push	r30
    1abc:	e0 ff       	sbrs	r30, 0
    1abe:	07 c0       	rjmp	.+14     	; 0x1ace <__fp_sinus+0x14>
    1ac0:	a2 ea       	ldi	r26, 0xA2	; 162
    1ac2:	2a ed       	ldi	r18, 0xDA	; 218
    1ac4:	3f e0       	ldi	r19, 0x0F	; 15
    1ac6:	49 ec       	ldi	r20, 0xC9	; 201
    1ac8:	5f eb       	ldi	r21, 0xBF	; 191
    1aca:	0e 94 07 0a 	call	0x140e	; 0x140e <__addsf3x>
    1ace:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__fp_round>
    1ad2:	0f 90       	pop	r0
    1ad4:	03 94       	inc	r0
    1ad6:	01 fc       	sbrc	r0, 1
    1ad8:	90 58       	subi	r25, 0x80	; 128
    1ada:	e4 ea       	ldi	r30, 0xA4	; 164
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__fp_powsodd>

00001ae2 <__fp_powsodd>:
    1ae2:	9f 93       	push	r25
    1ae4:	8f 93       	push	r24
    1ae6:	7f 93       	push	r23
    1ae8:	6f 93       	push	r22
    1aea:	ff 93       	push	r31
    1aec:	ef 93       	push	r30
    1aee:	9b 01       	movw	r18, r22
    1af0:	ac 01       	movw	r20, r24
    1af2:	0e 94 af 0c 	call	0x195e	; 0x195e <__mulsf3>
    1af6:	ef 91       	pop	r30
    1af8:	ff 91       	pop	r31
    1afa:	0e 94 c5 0b 	call	0x178a	; 0x178a <__fp_powser>
    1afe:	2f 91       	pop	r18
    1b00:	3f 91       	pop	r19
    1b02:	4f 91       	pop	r20
    1b04:	5f 91       	pop	r21
    1b06:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__mulsf3>

00001b0a <__udivmodsi4>:
    1b0a:	a1 e2       	ldi	r26, 0x21	; 33
    1b0c:	1a 2e       	mov	r1, r26
    1b0e:	aa 1b       	sub	r26, r26
    1b10:	bb 1b       	sub	r27, r27
    1b12:	fd 01       	movw	r30, r26
    1b14:	0d c0       	rjmp	.+26     	; 0x1b30 <__udivmodsi4_ep>

00001b16 <__udivmodsi4_loop>:
    1b16:	aa 1f       	adc	r26, r26
    1b18:	bb 1f       	adc	r27, r27
    1b1a:	ee 1f       	adc	r30, r30
    1b1c:	ff 1f       	adc	r31, r31
    1b1e:	a2 17       	cp	r26, r18
    1b20:	b3 07       	cpc	r27, r19
    1b22:	e4 07       	cpc	r30, r20
    1b24:	f5 07       	cpc	r31, r21
    1b26:	20 f0       	brcs	.+8      	; 0x1b30 <__udivmodsi4_ep>
    1b28:	a2 1b       	sub	r26, r18
    1b2a:	b3 0b       	sbc	r27, r19
    1b2c:	e4 0b       	sbc	r30, r20
    1b2e:	f5 0b       	sbc	r31, r21

00001b30 <__udivmodsi4_ep>:
    1b30:	66 1f       	adc	r22, r22
    1b32:	77 1f       	adc	r23, r23
    1b34:	88 1f       	adc	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	1a 94       	dec	r1
    1b3a:	69 f7       	brne	.-38     	; 0x1b16 <__udivmodsi4_loop>
    1b3c:	60 95       	com	r22
    1b3e:	70 95       	com	r23
    1b40:	80 95       	com	r24
    1b42:	90 95       	com	r25
    1b44:	9b 01       	movw	r18, r22
    1b46:	ac 01       	movw	r20, r24
    1b48:	bd 01       	movw	r22, r26
    1b4a:	cf 01       	movw	r24, r30
    1b4c:	08 95       	ret

00001b4e <dtostrf>:
    1b4e:	ef 92       	push	r14
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	e8 01       	movw	r28, r16
    1b5a:	47 fd       	sbrc	r20, 7
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <dtostrf+0x14>
    1b5e:	34 e0       	ldi	r19, 0x04	; 4
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <dtostrf+0x16>
    1b62:	34 e1       	ldi	r19, 0x14	; 20
    1b64:	04 2e       	mov	r0, r20
    1b66:	00 0c       	add	r0, r0
    1b68:	55 0b       	sbc	r21, r21
    1b6a:	57 ff       	sbrs	r21, 7
    1b6c:	03 c0       	rjmp	.+6      	; 0x1b74 <dtostrf+0x26>
    1b6e:	51 95       	neg	r21
    1b70:	41 95       	neg	r20
    1b72:	51 09       	sbc	r21, r1
    1b74:	e3 2e       	mov	r14, r19
    1b76:	02 2f       	mov	r16, r18
    1b78:	24 2f       	mov	r18, r20
    1b7a:	ae 01       	movw	r20, r28
    1b7c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <dtoa_prf>
    1b80:	ce 01       	movw	r24, r28
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	1f 91       	pop	r17
    1b88:	0f 91       	pop	r16
    1b8a:	ef 90       	pop	r14
    1b8c:	08 95       	ret

00001b8e <printf>:
    1b8e:	a0 e0       	ldi	r26, 0x00	; 0
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ed ec       	ldi	r30, 0xCD	; 205
    1b94:	fd e0       	ldi	r31, 0x0D	; 13
    1b96:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__prologue_saves__+0x20>
    1b9a:	ae 01       	movw	r20, r28
    1b9c:	4b 5f       	subi	r20, 0xFB	; 251
    1b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba0:	fa 01       	movw	r30, r20
    1ba2:	61 91       	ld	r22, Z+
    1ba4:	71 91       	ld	r23, Z+
    1ba6:	af 01       	movw	r20, r30
    1ba8:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <__iob+0x2>
    1bac:	90 91 6d 38 	lds	r25, 0x386D	; 0x80386d <__iob+0x3>
    1bb0:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <vfprintf>
    1bb4:	e2 e0       	ldi	r30, 0x02	; 2
    1bb6:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x20>

00001bba <puts>:
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	e0 91 6c 38 	lds	r30, 0x386C	; 0x80386c <__iob+0x2>
    1bc6:	f0 91 6d 38 	lds	r31, 0x386D	; 0x80386d <__iob+0x3>
    1bca:	23 81       	ldd	r18, Z+3	; 0x03
    1bcc:	21 ff       	sbrs	r18, 1
    1bce:	1b c0       	rjmp	.+54     	; 0x1c06 <puts+0x4c>
    1bd0:	8c 01       	movw	r16, r24
    1bd2:	d0 e0       	ldi	r29, 0x00	; 0
    1bd4:	c0 e0       	ldi	r28, 0x00	; 0
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	81 91       	ld	r24, Z+
    1bda:	8f 01       	movw	r16, r30
    1bdc:	60 91 6c 38 	lds	r22, 0x386C	; 0x80386c <__iob+0x2>
    1be0:	70 91 6d 38 	lds	r23, 0x386D	; 0x80386d <__iob+0x3>
    1be4:	db 01       	movw	r26, r22
    1be6:	18 96       	adiw	r26, 0x08	; 8
    1be8:	ed 91       	ld	r30, X+
    1bea:	fc 91       	ld	r31, X
    1bec:	19 97       	sbiw	r26, 0x09	; 9
    1bee:	88 23       	and	r24, r24
    1bf0:	31 f0       	breq	.+12     	; 0x1bfe <puts+0x44>
    1bf2:	09 95       	icall
    1bf4:	89 2b       	or	r24, r25
    1bf6:	79 f3       	breq	.-34     	; 0x1bd6 <puts+0x1c>
    1bf8:	df ef       	ldi	r29, 0xFF	; 255
    1bfa:	cf ef       	ldi	r28, 0xFF	; 255
    1bfc:	ec cf       	rjmp	.-40     	; 0x1bd6 <puts+0x1c>
    1bfe:	8a e0       	ldi	r24, 0x0A	; 10
    1c00:	09 95       	icall
    1c02:	89 2b       	or	r24, r25
    1c04:	19 f0       	breq	.+6      	; 0x1c0c <puts+0x52>
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	9f ef       	ldi	r25, 0xFF	; 255
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <puts+0x56>
    1c0c:	8d 2f       	mov	r24, r29
    1c0e:	9c 2f       	mov	r25, r28
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	1f 91       	pop	r17
    1c16:	0f 91       	pop	r16
    1c18:	08 95       	ret

00001c1a <vfprintf>:
    1c1a:	ab e0       	ldi	r26, 0x0B	; 11
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e3 e1       	ldi	r30, 0x13	; 19
    1c20:	fe e0       	ldi	r31, 0x0E	; 14
    1c22:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__prologue_saves__>
    1c26:	6c 01       	movw	r12, r24
    1c28:	7b 01       	movw	r14, r22
    1c2a:	8a 01       	movw	r16, r20
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	16 82       	std	Z+6, r1	; 0x06
    1c30:	17 82       	std	Z+7, r1	; 0x07
    1c32:	83 81       	ldd	r24, Z+3	; 0x03
    1c34:	81 ff       	sbrs	r24, 1
    1c36:	cc c1       	rjmp	.+920    	; 0x1fd0 <vfprintf+0x3b6>
    1c38:	ce 01       	movw	r24, r28
    1c3a:	01 96       	adiw	r24, 0x01	; 1
    1c3c:	3c 01       	movw	r6, r24
    1c3e:	f6 01       	movw	r30, r12
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	f7 01       	movw	r30, r14
    1c44:	93 fd       	sbrc	r25, 3
    1c46:	85 91       	lpm	r24, Z+
    1c48:	93 ff       	sbrs	r25, 3
    1c4a:	81 91       	ld	r24, Z+
    1c4c:	7f 01       	movw	r14, r30
    1c4e:	88 23       	and	r24, r24
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <vfprintf+0x3a>
    1c52:	ba c1       	rjmp	.+884    	; 0x1fc8 <vfprintf+0x3ae>
    1c54:	85 32       	cpi	r24, 0x25	; 37
    1c56:	39 f4       	brne	.+14     	; 0x1c66 <vfprintf+0x4c>
    1c58:	93 fd       	sbrc	r25, 3
    1c5a:	85 91       	lpm	r24, Z+
    1c5c:	93 ff       	sbrs	r25, 3
    1c5e:	81 91       	ld	r24, Z+
    1c60:	7f 01       	movw	r14, r30
    1c62:	85 32       	cpi	r24, 0x25	; 37
    1c64:	29 f4       	brne	.+10     	; 0x1c70 <vfprintf+0x56>
    1c66:	b6 01       	movw	r22, r12
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1c6e:	e7 cf       	rjmp	.-50     	; 0x1c3e <vfprintf+0x24>
    1c70:	91 2c       	mov	r9, r1
    1c72:	21 2c       	mov	r2, r1
    1c74:	31 2c       	mov	r3, r1
    1c76:	ff e1       	ldi	r31, 0x1F	; 31
    1c78:	f3 15       	cp	r31, r3
    1c7a:	d8 f0       	brcs	.+54     	; 0x1cb2 <vfprintf+0x98>
    1c7c:	8b 32       	cpi	r24, 0x2B	; 43
    1c7e:	79 f0       	breq	.+30     	; 0x1c9e <vfprintf+0x84>
    1c80:	38 f4       	brcc	.+14     	; 0x1c90 <vfprintf+0x76>
    1c82:	80 32       	cpi	r24, 0x20	; 32
    1c84:	79 f0       	breq	.+30     	; 0x1ca4 <vfprintf+0x8a>
    1c86:	83 32       	cpi	r24, 0x23	; 35
    1c88:	a1 f4       	brne	.+40     	; 0x1cb2 <vfprintf+0x98>
    1c8a:	23 2d       	mov	r18, r3
    1c8c:	20 61       	ori	r18, 0x10	; 16
    1c8e:	1d c0       	rjmp	.+58     	; 0x1cca <vfprintf+0xb0>
    1c90:	8d 32       	cpi	r24, 0x2D	; 45
    1c92:	61 f0       	breq	.+24     	; 0x1cac <vfprintf+0x92>
    1c94:	80 33       	cpi	r24, 0x30	; 48
    1c96:	69 f4       	brne	.+26     	; 0x1cb2 <vfprintf+0x98>
    1c98:	23 2d       	mov	r18, r3
    1c9a:	21 60       	ori	r18, 0x01	; 1
    1c9c:	16 c0       	rjmp	.+44     	; 0x1cca <vfprintf+0xb0>
    1c9e:	83 2d       	mov	r24, r3
    1ca0:	82 60       	ori	r24, 0x02	; 2
    1ca2:	38 2e       	mov	r3, r24
    1ca4:	e3 2d       	mov	r30, r3
    1ca6:	e4 60       	ori	r30, 0x04	; 4
    1ca8:	3e 2e       	mov	r3, r30
    1caa:	2a c0       	rjmp	.+84     	; 0x1d00 <vfprintf+0xe6>
    1cac:	f3 2d       	mov	r31, r3
    1cae:	f8 60       	ori	r31, 0x08	; 8
    1cb0:	1d c0       	rjmp	.+58     	; 0x1cec <vfprintf+0xd2>
    1cb2:	37 fc       	sbrc	r3, 7
    1cb4:	2d c0       	rjmp	.+90     	; 0x1d10 <vfprintf+0xf6>
    1cb6:	20 ed       	ldi	r18, 0xD0	; 208
    1cb8:	28 0f       	add	r18, r24
    1cba:	2a 30       	cpi	r18, 0x0A	; 10
    1cbc:	40 f0       	brcs	.+16     	; 0x1cce <vfprintf+0xb4>
    1cbe:	8e 32       	cpi	r24, 0x2E	; 46
    1cc0:	b9 f4       	brne	.+46     	; 0x1cf0 <vfprintf+0xd6>
    1cc2:	36 fc       	sbrc	r3, 6
    1cc4:	81 c1       	rjmp	.+770    	; 0x1fc8 <vfprintf+0x3ae>
    1cc6:	23 2d       	mov	r18, r3
    1cc8:	20 64       	ori	r18, 0x40	; 64
    1cca:	32 2e       	mov	r3, r18
    1ccc:	19 c0       	rjmp	.+50     	; 0x1d00 <vfprintf+0xe6>
    1cce:	36 fe       	sbrs	r3, 6
    1cd0:	06 c0       	rjmp	.+12     	; 0x1cde <vfprintf+0xc4>
    1cd2:	8a e0       	ldi	r24, 0x0A	; 10
    1cd4:	98 9e       	mul	r9, r24
    1cd6:	20 0d       	add	r18, r0
    1cd8:	11 24       	eor	r1, r1
    1cda:	92 2e       	mov	r9, r18
    1cdc:	11 c0       	rjmp	.+34     	; 0x1d00 <vfprintf+0xe6>
    1cde:	ea e0       	ldi	r30, 0x0A	; 10
    1ce0:	2e 9e       	mul	r2, r30
    1ce2:	20 0d       	add	r18, r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	22 2e       	mov	r2, r18
    1ce8:	f3 2d       	mov	r31, r3
    1cea:	f0 62       	ori	r31, 0x20	; 32
    1cec:	3f 2e       	mov	r3, r31
    1cee:	08 c0       	rjmp	.+16     	; 0x1d00 <vfprintf+0xe6>
    1cf0:	8c 36       	cpi	r24, 0x6C	; 108
    1cf2:	21 f4       	brne	.+8      	; 0x1cfc <vfprintf+0xe2>
    1cf4:	83 2d       	mov	r24, r3
    1cf6:	80 68       	ori	r24, 0x80	; 128
    1cf8:	38 2e       	mov	r3, r24
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <vfprintf+0xe6>
    1cfc:	88 36       	cpi	r24, 0x68	; 104
    1cfe:	41 f4       	brne	.+16     	; 0x1d10 <vfprintf+0xf6>
    1d00:	f7 01       	movw	r30, r14
    1d02:	93 fd       	sbrc	r25, 3
    1d04:	85 91       	lpm	r24, Z+
    1d06:	93 ff       	sbrs	r25, 3
    1d08:	81 91       	ld	r24, Z+
    1d0a:	7f 01       	movw	r14, r30
    1d0c:	81 11       	cpse	r24, r1
    1d0e:	b3 cf       	rjmp	.-154    	; 0x1c76 <vfprintf+0x5c>
    1d10:	98 2f       	mov	r25, r24
    1d12:	9f 7d       	andi	r25, 0xDF	; 223
    1d14:	95 54       	subi	r25, 0x45	; 69
    1d16:	93 30       	cpi	r25, 0x03	; 3
    1d18:	28 f4       	brcc	.+10     	; 0x1d24 <vfprintf+0x10a>
    1d1a:	0c 5f       	subi	r16, 0xFC	; 252
    1d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1e:	9f e3       	ldi	r25, 0x3F	; 63
    1d20:	99 83       	std	Y+1, r25	; 0x01
    1d22:	0d c0       	rjmp	.+26     	; 0x1d3e <vfprintf+0x124>
    1d24:	83 36       	cpi	r24, 0x63	; 99
    1d26:	31 f0       	breq	.+12     	; 0x1d34 <vfprintf+0x11a>
    1d28:	83 37       	cpi	r24, 0x73	; 115
    1d2a:	71 f0       	breq	.+28     	; 0x1d48 <vfprintf+0x12e>
    1d2c:	83 35       	cpi	r24, 0x53	; 83
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <vfprintf+0x118>
    1d30:	59 c0       	rjmp	.+178    	; 0x1de4 <vfprintf+0x1ca>
    1d32:	21 c0       	rjmp	.+66     	; 0x1d76 <vfprintf+0x15c>
    1d34:	f8 01       	movw	r30, r16
    1d36:	80 81       	ld	r24, Z
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	0e 5f       	subi	r16, 0xFE	; 254
    1d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3e:	88 24       	eor	r8, r8
    1d40:	83 94       	inc	r8
    1d42:	91 2c       	mov	r9, r1
    1d44:	53 01       	movw	r10, r6
    1d46:	13 c0       	rjmp	.+38     	; 0x1d6e <vfprintf+0x154>
    1d48:	28 01       	movw	r4, r16
    1d4a:	f2 e0       	ldi	r31, 0x02	; 2
    1d4c:	4f 0e       	add	r4, r31
    1d4e:	51 1c       	adc	r5, r1
    1d50:	f8 01       	movw	r30, r16
    1d52:	a0 80       	ld	r10, Z
    1d54:	b1 80       	ldd	r11, Z+1	; 0x01
    1d56:	36 fe       	sbrs	r3, 6
    1d58:	03 c0       	rjmp	.+6      	; 0x1d60 <vfprintf+0x146>
    1d5a:	69 2d       	mov	r22, r9
    1d5c:	70 e0       	ldi	r23, 0x00	; 0
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <vfprintf+0x14a>
    1d60:	6f ef       	ldi	r22, 0xFF	; 255
    1d62:	7f ef       	ldi	r23, 0xFF	; 255
    1d64:	c5 01       	movw	r24, r10
    1d66:	0e 94 2b 12 	call	0x2456	; 0x2456 <strnlen>
    1d6a:	4c 01       	movw	r8, r24
    1d6c:	82 01       	movw	r16, r4
    1d6e:	f3 2d       	mov	r31, r3
    1d70:	ff 77       	andi	r31, 0x7F	; 127
    1d72:	3f 2e       	mov	r3, r31
    1d74:	16 c0       	rjmp	.+44     	; 0x1da2 <vfprintf+0x188>
    1d76:	28 01       	movw	r4, r16
    1d78:	22 e0       	ldi	r18, 0x02	; 2
    1d7a:	42 0e       	add	r4, r18
    1d7c:	51 1c       	adc	r5, r1
    1d7e:	f8 01       	movw	r30, r16
    1d80:	a0 80       	ld	r10, Z
    1d82:	b1 80       	ldd	r11, Z+1	; 0x01
    1d84:	36 fe       	sbrs	r3, 6
    1d86:	03 c0       	rjmp	.+6      	; 0x1d8e <vfprintf+0x174>
    1d88:	69 2d       	mov	r22, r9
    1d8a:	70 e0       	ldi	r23, 0x00	; 0
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <vfprintf+0x178>
    1d8e:	6f ef       	ldi	r22, 0xFF	; 255
    1d90:	7f ef       	ldi	r23, 0xFF	; 255
    1d92:	c5 01       	movw	r24, r10
    1d94:	0e 94 20 12 	call	0x2440	; 0x2440 <strnlen_P>
    1d98:	4c 01       	movw	r8, r24
    1d9a:	f3 2d       	mov	r31, r3
    1d9c:	f0 68       	ori	r31, 0x80	; 128
    1d9e:	3f 2e       	mov	r3, r31
    1da0:	82 01       	movw	r16, r4
    1da2:	33 fc       	sbrc	r3, 3
    1da4:	1b c0       	rjmp	.+54     	; 0x1ddc <vfprintf+0x1c2>
    1da6:	82 2d       	mov	r24, r2
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	88 16       	cp	r8, r24
    1dac:	99 06       	cpc	r9, r25
    1dae:	b0 f4       	brcc	.+44     	; 0x1ddc <vfprintf+0x1c2>
    1db0:	b6 01       	movw	r22, r12
    1db2:	80 e2       	ldi	r24, 0x20	; 32
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1dba:	2a 94       	dec	r2
    1dbc:	f4 cf       	rjmp	.-24     	; 0x1da6 <vfprintf+0x18c>
    1dbe:	f5 01       	movw	r30, r10
    1dc0:	37 fc       	sbrc	r3, 7
    1dc2:	85 91       	lpm	r24, Z+
    1dc4:	37 fe       	sbrs	r3, 7
    1dc6:	81 91       	ld	r24, Z+
    1dc8:	5f 01       	movw	r10, r30
    1dca:	b6 01       	movw	r22, r12
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1dd2:	21 10       	cpse	r2, r1
    1dd4:	2a 94       	dec	r2
    1dd6:	21 e0       	ldi	r18, 0x01	; 1
    1dd8:	82 1a       	sub	r8, r18
    1dda:	91 08       	sbc	r9, r1
    1ddc:	81 14       	cp	r8, r1
    1dde:	91 04       	cpc	r9, r1
    1de0:	71 f7       	brne	.-36     	; 0x1dbe <vfprintf+0x1a4>
    1de2:	e8 c0       	rjmp	.+464    	; 0x1fb4 <vfprintf+0x39a>
    1de4:	84 36       	cpi	r24, 0x64	; 100
    1de6:	11 f0       	breq	.+4      	; 0x1dec <vfprintf+0x1d2>
    1de8:	89 36       	cpi	r24, 0x69	; 105
    1dea:	41 f5       	brne	.+80     	; 0x1e3c <vfprintf+0x222>
    1dec:	f8 01       	movw	r30, r16
    1dee:	37 fe       	sbrs	r3, 7
    1df0:	07 c0       	rjmp	.+14     	; 0x1e00 <vfprintf+0x1e6>
    1df2:	60 81       	ld	r22, Z
    1df4:	71 81       	ldd	r23, Z+1	; 0x01
    1df6:	82 81       	ldd	r24, Z+2	; 0x02
    1df8:	93 81       	ldd	r25, Z+3	; 0x03
    1dfa:	0c 5f       	subi	r16, 0xFC	; 252
    1dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfe:	08 c0       	rjmp	.+16     	; 0x1e10 <vfprintf+0x1f6>
    1e00:	60 81       	ld	r22, Z
    1e02:	71 81       	ldd	r23, Z+1	; 0x01
    1e04:	07 2e       	mov	r0, r23
    1e06:	00 0c       	add	r0, r0
    1e08:	88 0b       	sbc	r24, r24
    1e0a:	99 0b       	sbc	r25, r25
    1e0c:	0e 5f       	subi	r16, 0xFE	; 254
    1e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e10:	f3 2d       	mov	r31, r3
    1e12:	ff 76       	andi	r31, 0x6F	; 111
    1e14:	3f 2e       	mov	r3, r31
    1e16:	97 ff       	sbrs	r25, 7
    1e18:	09 c0       	rjmp	.+18     	; 0x1e2c <vfprintf+0x212>
    1e1a:	90 95       	com	r25
    1e1c:	80 95       	com	r24
    1e1e:	70 95       	com	r23
    1e20:	61 95       	neg	r22
    1e22:	7f 4f       	sbci	r23, 0xFF	; 255
    1e24:	8f 4f       	sbci	r24, 0xFF	; 255
    1e26:	9f 4f       	sbci	r25, 0xFF	; 255
    1e28:	f0 68       	ori	r31, 0x80	; 128
    1e2a:	3f 2e       	mov	r3, r31
    1e2c:	2a e0       	ldi	r18, 0x0A	; 10
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	a3 01       	movw	r20, r6
    1e32:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__ultoa_invert>
    1e36:	88 2e       	mov	r8, r24
    1e38:	86 18       	sub	r8, r6
    1e3a:	45 c0       	rjmp	.+138    	; 0x1ec6 <vfprintf+0x2ac>
    1e3c:	85 37       	cpi	r24, 0x75	; 117
    1e3e:	31 f4       	brne	.+12     	; 0x1e4c <vfprintf+0x232>
    1e40:	23 2d       	mov	r18, r3
    1e42:	2f 7e       	andi	r18, 0xEF	; 239
    1e44:	b2 2e       	mov	r11, r18
    1e46:	2a e0       	ldi	r18, 0x0A	; 10
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	25 c0       	rjmp	.+74     	; 0x1e96 <vfprintf+0x27c>
    1e4c:	93 2d       	mov	r25, r3
    1e4e:	99 7f       	andi	r25, 0xF9	; 249
    1e50:	b9 2e       	mov	r11, r25
    1e52:	8f 36       	cpi	r24, 0x6F	; 111
    1e54:	c1 f0       	breq	.+48     	; 0x1e86 <vfprintf+0x26c>
    1e56:	18 f4       	brcc	.+6      	; 0x1e5e <vfprintf+0x244>
    1e58:	88 35       	cpi	r24, 0x58	; 88
    1e5a:	79 f0       	breq	.+30     	; 0x1e7a <vfprintf+0x260>
    1e5c:	b5 c0       	rjmp	.+362    	; 0x1fc8 <vfprintf+0x3ae>
    1e5e:	80 37       	cpi	r24, 0x70	; 112
    1e60:	19 f0       	breq	.+6      	; 0x1e68 <vfprintf+0x24e>
    1e62:	88 37       	cpi	r24, 0x78	; 120
    1e64:	21 f0       	breq	.+8      	; 0x1e6e <vfprintf+0x254>
    1e66:	b0 c0       	rjmp	.+352    	; 0x1fc8 <vfprintf+0x3ae>
    1e68:	e9 2f       	mov	r30, r25
    1e6a:	e0 61       	ori	r30, 0x10	; 16
    1e6c:	be 2e       	mov	r11, r30
    1e6e:	b4 fe       	sbrs	r11, 4
    1e70:	0d c0       	rjmp	.+26     	; 0x1e8c <vfprintf+0x272>
    1e72:	fb 2d       	mov	r31, r11
    1e74:	f4 60       	ori	r31, 0x04	; 4
    1e76:	bf 2e       	mov	r11, r31
    1e78:	09 c0       	rjmp	.+18     	; 0x1e8c <vfprintf+0x272>
    1e7a:	34 fe       	sbrs	r3, 4
    1e7c:	0a c0       	rjmp	.+20     	; 0x1e92 <vfprintf+0x278>
    1e7e:	29 2f       	mov	r18, r25
    1e80:	26 60       	ori	r18, 0x06	; 6
    1e82:	b2 2e       	mov	r11, r18
    1e84:	06 c0       	rjmp	.+12     	; 0x1e92 <vfprintf+0x278>
    1e86:	28 e0       	ldi	r18, 0x08	; 8
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	05 c0       	rjmp	.+10     	; 0x1e96 <vfprintf+0x27c>
    1e8c:	20 e1       	ldi	r18, 0x10	; 16
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <vfprintf+0x27c>
    1e92:	20 e1       	ldi	r18, 0x10	; 16
    1e94:	32 e0       	ldi	r19, 0x02	; 2
    1e96:	f8 01       	movw	r30, r16
    1e98:	b7 fe       	sbrs	r11, 7
    1e9a:	07 c0       	rjmp	.+14     	; 0x1eaa <vfprintf+0x290>
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	0c 5f       	subi	r16, 0xFC	; 252
    1ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea8:	06 c0       	rjmp	.+12     	; 0x1eb6 <vfprintf+0x29c>
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 5f       	subi	r16, 0xFE	; 254
    1eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb6:	a3 01       	movw	r20, r6
    1eb8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__ultoa_invert>
    1ebc:	88 2e       	mov	r8, r24
    1ebe:	86 18       	sub	r8, r6
    1ec0:	fb 2d       	mov	r31, r11
    1ec2:	ff 77       	andi	r31, 0x7F	; 127
    1ec4:	3f 2e       	mov	r3, r31
    1ec6:	36 fe       	sbrs	r3, 6
    1ec8:	0d c0       	rjmp	.+26     	; 0x1ee4 <vfprintf+0x2ca>
    1eca:	23 2d       	mov	r18, r3
    1ecc:	2e 7f       	andi	r18, 0xFE	; 254
    1ece:	a2 2e       	mov	r10, r18
    1ed0:	89 14       	cp	r8, r9
    1ed2:	58 f4       	brcc	.+22     	; 0x1eea <vfprintf+0x2d0>
    1ed4:	34 fe       	sbrs	r3, 4
    1ed6:	0b c0       	rjmp	.+22     	; 0x1eee <vfprintf+0x2d4>
    1ed8:	32 fc       	sbrc	r3, 2
    1eda:	09 c0       	rjmp	.+18     	; 0x1eee <vfprintf+0x2d4>
    1edc:	83 2d       	mov	r24, r3
    1ede:	8e 7e       	andi	r24, 0xEE	; 238
    1ee0:	a8 2e       	mov	r10, r24
    1ee2:	05 c0       	rjmp	.+10     	; 0x1eee <vfprintf+0x2d4>
    1ee4:	b8 2c       	mov	r11, r8
    1ee6:	a3 2c       	mov	r10, r3
    1ee8:	03 c0       	rjmp	.+6      	; 0x1ef0 <vfprintf+0x2d6>
    1eea:	b8 2c       	mov	r11, r8
    1eec:	01 c0       	rjmp	.+2      	; 0x1ef0 <vfprintf+0x2d6>
    1eee:	b9 2c       	mov	r11, r9
    1ef0:	a4 fe       	sbrs	r10, 4
    1ef2:	0f c0       	rjmp	.+30     	; 0x1f12 <vfprintf+0x2f8>
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	e8 0d       	add	r30, r8
    1ef8:	f1 1d       	adc	r31, r1
    1efa:	80 81       	ld	r24, Z
    1efc:	80 33       	cpi	r24, 0x30	; 48
    1efe:	21 f4       	brne	.+8      	; 0x1f08 <vfprintf+0x2ee>
    1f00:	9a 2d       	mov	r25, r10
    1f02:	99 7e       	andi	r25, 0xE9	; 233
    1f04:	a9 2e       	mov	r10, r25
    1f06:	09 c0       	rjmp	.+18     	; 0x1f1a <vfprintf+0x300>
    1f08:	a2 fe       	sbrs	r10, 2
    1f0a:	06 c0       	rjmp	.+12     	; 0x1f18 <vfprintf+0x2fe>
    1f0c:	b3 94       	inc	r11
    1f0e:	b3 94       	inc	r11
    1f10:	04 c0       	rjmp	.+8      	; 0x1f1a <vfprintf+0x300>
    1f12:	8a 2d       	mov	r24, r10
    1f14:	86 78       	andi	r24, 0x86	; 134
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <vfprintf+0x300>
    1f18:	b3 94       	inc	r11
    1f1a:	a3 fc       	sbrc	r10, 3
    1f1c:	11 c0       	rjmp	.+34     	; 0x1f40 <vfprintf+0x326>
    1f1e:	a0 fe       	sbrs	r10, 0
    1f20:	06 c0       	rjmp	.+12     	; 0x1f2e <vfprintf+0x314>
    1f22:	b2 14       	cp	r11, r2
    1f24:	88 f4       	brcc	.+34     	; 0x1f48 <vfprintf+0x32e>
    1f26:	28 0c       	add	r2, r8
    1f28:	92 2c       	mov	r9, r2
    1f2a:	9b 18       	sub	r9, r11
    1f2c:	0e c0       	rjmp	.+28     	; 0x1f4a <vfprintf+0x330>
    1f2e:	b2 14       	cp	r11, r2
    1f30:	60 f4       	brcc	.+24     	; 0x1f4a <vfprintf+0x330>
    1f32:	b6 01       	movw	r22, r12
    1f34:	80 e2       	ldi	r24, 0x20	; 32
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1f3c:	b3 94       	inc	r11
    1f3e:	f7 cf       	rjmp	.-18     	; 0x1f2e <vfprintf+0x314>
    1f40:	b2 14       	cp	r11, r2
    1f42:	18 f4       	brcc	.+6      	; 0x1f4a <vfprintf+0x330>
    1f44:	2b 18       	sub	r2, r11
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <vfprintf+0x332>
    1f48:	98 2c       	mov	r9, r8
    1f4a:	21 2c       	mov	r2, r1
    1f4c:	a4 fe       	sbrs	r10, 4
    1f4e:	10 c0       	rjmp	.+32     	; 0x1f70 <vfprintf+0x356>
    1f50:	b6 01       	movw	r22, r12
    1f52:	80 e3       	ldi	r24, 0x30	; 48
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1f5a:	a2 fe       	sbrs	r10, 2
    1f5c:	17 c0       	rjmp	.+46     	; 0x1f8c <vfprintf+0x372>
    1f5e:	a1 fc       	sbrc	r10, 1
    1f60:	03 c0       	rjmp	.+6      	; 0x1f68 <vfprintf+0x34e>
    1f62:	88 e7       	ldi	r24, 0x78	; 120
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <vfprintf+0x352>
    1f68:	88 e5       	ldi	r24, 0x58	; 88
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	b6 01       	movw	r22, r12
    1f6e:	0c c0       	rjmp	.+24     	; 0x1f88 <vfprintf+0x36e>
    1f70:	8a 2d       	mov	r24, r10
    1f72:	86 78       	andi	r24, 0x86	; 134
    1f74:	59 f0       	breq	.+22     	; 0x1f8c <vfprintf+0x372>
    1f76:	a1 fe       	sbrs	r10, 1
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <vfprintf+0x364>
    1f7a:	8b e2       	ldi	r24, 0x2B	; 43
    1f7c:	01 c0       	rjmp	.+2      	; 0x1f80 <vfprintf+0x366>
    1f7e:	80 e2       	ldi	r24, 0x20	; 32
    1f80:	a7 fc       	sbrc	r10, 7
    1f82:	8d e2       	ldi	r24, 0x2D	; 45
    1f84:	b6 01       	movw	r22, r12
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1f8c:	89 14       	cp	r8, r9
    1f8e:	38 f4       	brcc	.+14     	; 0x1f9e <vfprintf+0x384>
    1f90:	b6 01       	movw	r22, r12
    1f92:	80 e3       	ldi	r24, 0x30	; 48
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1f9a:	9a 94       	dec	r9
    1f9c:	f7 cf       	rjmp	.-18     	; 0x1f8c <vfprintf+0x372>
    1f9e:	8a 94       	dec	r8
    1fa0:	f3 01       	movw	r30, r6
    1fa2:	e8 0d       	add	r30, r8
    1fa4:	f1 1d       	adc	r31, r1
    1fa6:	80 81       	ld	r24, Z
    1fa8:	b6 01       	movw	r22, r12
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1fb0:	81 10       	cpse	r8, r1
    1fb2:	f5 cf       	rjmp	.-22     	; 0x1f9e <vfprintf+0x384>
    1fb4:	22 20       	and	r2, r2
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <vfprintf+0x3a0>
    1fb8:	42 ce       	rjmp	.-892    	; 0x1c3e <vfprintf+0x24>
    1fba:	b6 01       	movw	r22, r12
    1fbc:	80 e2       	ldi	r24, 0x20	; 32
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1fc4:	2a 94       	dec	r2
    1fc6:	f6 cf       	rjmp	.-20     	; 0x1fb4 <vfprintf+0x39a>
    1fc8:	f6 01       	movw	r30, r12
    1fca:	86 81       	ldd	r24, Z+6	; 0x06
    1fcc:	97 81       	ldd	r25, Z+7	; 0x07
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <vfprintf+0x3ba>
    1fd0:	8f ef       	ldi	r24, 0xFF	; 255
    1fd2:	9f ef       	ldi	r25, 0xFF	; 255
    1fd4:	2b 96       	adiw	r28, 0x0b	; 11
    1fd6:	e2 e1       	ldi	r30, 0x12	; 18
    1fd8:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__epilogue_restores__>

00001fdc <dtoa_prf>:
    1fdc:	a9 e0       	ldi	r26, 0x09	; 9
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e4 ef       	ldi	r30, 0xF4	; 244
    1fe2:	ff e0       	ldi	r31, 0x0F	; 15
    1fe4:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__prologue_saves__+0xc>
    1fe8:	6a 01       	movw	r12, r20
    1fea:	12 2f       	mov	r17, r18
    1fec:	b0 2e       	mov	r11, r16
    1fee:	2b e3       	ldi	r18, 0x3B	; 59
    1ff0:	20 17       	cp	r18, r16
    1ff2:	20 f0       	brcs	.+8      	; 0x1ffc <dtoa_prf+0x20>
    1ff4:	ff 24       	eor	r15, r15
    1ff6:	f3 94       	inc	r15
    1ff8:	f0 0e       	add	r15, r16
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <dtoa_prf+0x24>
    1ffc:	2c e3       	ldi	r18, 0x3C	; 60
    1ffe:	f2 2e       	mov	r15, r18
    2000:	0f 2d       	mov	r16, r15
    2002:	27 e0       	ldi	r18, 0x07	; 7
    2004:	ae 01       	movw	r20, r28
    2006:	4f 5f       	subi	r20, 0xFF	; 255
    2008:	5f 4f       	sbci	r21, 0xFF	; 255
    200a:	0e 94 48 11 	call	0x2290	; 0x2290 <__ftoa_engine>
    200e:	bc 01       	movw	r22, r24
    2010:	49 81       	ldd	r20, Y+1	; 0x01
    2012:	84 2f       	mov	r24, r20
    2014:	89 70       	andi	r24, 0x09	; 9
    2016:	81 30       	cpi	r24, 0x01	; 1
    2018:	31 f0       	breq	.+12     	; 0x2026 <dtoa_prf+0x4a>
    201a:	e1 fc       	sbrc	r14, 1
    201c:	06 c0       	rjmp	.+12     	; 0x202a <dtoa_prf+0x4e>
    201e:	e0 fe       	sbrs	r14, 0
    2020:	06 c0       	rjmp	.+12     	; 0x202e <dtoa_prf+0x52>
    2022:	90 e2       	ldi	r25, 0x20	; 32
    2024:	05 c0       	rjmp	.+10     	; 0x2030 <dtoa_prf+0x54>
    2026:	9d e2       	ldi	r25, 0x2D	; 45
    2028:	03 c0       	rjmp	.+6      	; 0x2030 <dtoa_prf+0x54>
    202a:	9b e2       	ldi	r25, 0x2B	; 43
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <dtoa_prf+0x54>
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	5e 2d       	mov	r21, r14
    2032:	50 71       	andi	r21, 0x10	; 16
    2034:	43 ff       	sbrs	r20, 3
    2036:	3c c0       	rjmp	.+120    	; 0x20b0 <dtoa_prf+0xd4>
    2038:	91 11       	cpse	r25, r1
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <dtoa_prf+0x64>
    203c:	83 e0       	ldi	r24, 0x03	; 3
    203e:	01 c0       	rjmp	.+2      	; 0x2042 <dtoa_prf+0x66>
    2040:	84 e0       	ldi	r24, 0x04	; 4
    2042:	81 17       	cp	r24, r17
    2044:	18 f4       	brcc	.+6      	; 0x204c <dtoa_prf+0x70>
    2046:	21 2f       	mov	r18, r17
    2048:	28 1b       	sub	r18, r24
    204a:	01 c0       	rjmp	.+2      	; 0x204e <dtoa_prf+0x72>
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	51 11       	cpse	r21, r1
    2050:	0b c0       	rjmp	.+22     	; 0x2068 <dtoa_prf+0x8c>
    2052:	f6 01       	movw	r30, r12
    2054:	82 2f       	mov	r24, r18
    2056:	30 e2       	ldi	r19, 0x20	; 32
    2058:	88 23       	and	r24, r24
    205a:	19 f0       	breq	.+6      	; 0x2062 <dtoa_prf+0x86>
    205c:	31 93       	st	Z+, r19
    205e:	81 50       	subi	r24, 0x01	; 1
    2060:	fb cf       	rjmp	.-10     	; 0x2058 <dtoa_prf+0x7c>
    2062:	c2 0e       	add	r12, r18
    2064:	d1 1c       	adc	r13, r1
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	99 23       	and	r25, r25
    206a:	29 f0       	breq	.+10     	; 0x2076 <dtoa_prf+0x9a>
    206c:	d6 01       	movw	r26, r12
    206e:	9c 93       	st	X, r25
    2070:	f6 01       	movw	r30, r12
    2072:	31 96       	adiw	r30, 0x01	; 1
    2074:	6f 01       	movw	r12, r30
    2076:	c6 01       	movw	r24, r12
    2078:	03 96       	adiw	r24, 0x03	; 3
    207a:	e2 fe       	sbrs	r14, 2
    207c:	0a c0       	rjmp	.+20     	; 0x2092 <dtoa_prf+0xb6>
    207e:	3e e4       	ldi	r19, 0x4E	; 78
    2080:	d6 01       	movw	r26, r12
    2082:	3c 93       	st	X, r19
    2084:	41 e4       	ldi	r20, 0x41	; 65
    2086:	11 96       	adiw	r26, 0x01	; 1
    2088:	4c 93       	st	X, r20
    208a:	11 97       	sbiw	r26, 0x01	; 1
    208c:	12 96       	adiw	r26, 0x02	; 2
    208e:	3c 93       	st	X, r19
    2090:	06 c0       	rjmp	.+12     	; 0x209e <dtoa_prf+0xc2>
    2092:	3e e6       	ldi	r19, 0x6E	; 110
    2094:	f6 01       	movw	r30, r12
    2096:	30 83       	st	Z, r19
    2098:	41 e6       	ldi	r20, 0x61	; 97
    209a:	41 83       	std	Z+1, r20	; 0x01
    209c:	32 83       	std	Z+2, r19	; 0x02
    209e:	fc 01       	movw	r30, r24
    20a0:	32 2f       	mov	r19, r18
    20a2:	40 e2       	ldi	r20, 0x20	; 32
    20a4:	33 23       	and	r19, r19
    20a6:	09 f4       	brne	.+2      	; 0x20aa <dtoa_prf+0xce>
    20a8:	42 c0       	rjmp	.+132    	; 0x212e <dtoa_prf+0x152>
    20aa:	41 93       	st	Z+, r20
    20ac:	31 50       	subi	r19, 0x01	; 1
    20ae:	fa cf       	rjmp	.-12     	; 0x20a4 <dtoa_prf+0xc8>
    20b0:	42 ff       	sbrs	r20, 2
    20b2:	44 c0       	rjmp	.+136    	; 0x213c <dtoa_prf+0x160>
    20b4:	91 11       	cpse	r25, r1
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <dtoa_prf+0xe0>
    20b8:	83 e0       	ldi	r24, 0x03	; 3
    20ba:	01 c0       	rjmp	.+2      	; 0x20be <dtoa_prf+0xe2>
    20bc:	84 e0       	ldi	r24, 0x04	; 4
    20be:	81 17       	cp	r24, r17
    20c0:	18 f4       	brcc	.+6      	; 0x20c8 <dtoa_prf+0xec>
    20c2:	21 2f       	mov	r18, r17
    20c4:	28 1b       	sub	r18, r24
    20c6:	01 c0       	rjmp	.+2      	; 0x20ca <dtoa_prf+0xee>
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	51 11       	cpse	r21, r1
    20cc:	0b c0       	rjmp	.+22     	; 0x20e4 <dtoa_prf+0x108>
    20ce:	f6 01       	movw	r30, r12
    20d0:	82 2f       	mov	r24, r18
    20d2:	30 e2       	ldi	r19, 0x20	; 32
    20d4:	88 23       	and	r24, r24
    20d6:	19 f0       	breq	.+6      	; 0x20de <dtoa_prf+0x102>
    20d8:	31 93       	st	Z+, r19
    20da:	81 50       	subi	r24, 0x01	; 1
    20dc:	fb cf       	rjmp	.-10     	; 0x20d4 <dtoa_prf+0xf8>
    20de:	c2 0e       	add	r12, r18
    20e0:	d1 1c       	adc	r13, r1
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	99 23       	and	r25, r25
    20e6:	29 f0       	breq	.+10     	; 0x20f2 <dtoa_prf+0x116>
    20e8:	d6 01       	movw	r26, r12
    20ea:	9c 93       	st	X, r25
    20ec:	f6 01       	movw	r30, r12
    20ee:	31 96       	adiw	r30, 0x01	; 1
    20f0:	6f 01       	movw	r12, r30
    20f2:	c6 01       	movw	r24, r12
    20f4:	03 96       	adiw	r24, 0x03	; 3
    20f6:	e2 fe       	sbrs	r14, 2
    20f8:	0b c0       	rjmp	.+22     	; 0x2110 <dtoa_prf+0x134>
    20fa:	39 e4       	ldi	r19, 0x49	; 73
    20fc:	d6 01       	movw	r26, r12
    20fe:	3c 93       	st	X, r19
    2100:	3e e4       	ldi	r19, 0x4E	; 78
    2102:	11 96       	adiw	r26, 0x01	; 1
    2104:	3c 93       	st	X, r19
    2106:	11 97       	sbiw	r26, 0x01	; 1
    2108:	36 e4       	ldi	r19, 0x46	; 70
    210a:	12 96       	adiw	r26, 0x02	; 2
    210c:	3c 93       	st	X, r19
    210e:	07 c0       	rjmp	.+14     	; 0x211e <dtoa_prf+0x142>
    2110:	39 e6       	ldi	r19, 0x69	; 105
    2112:	f6 01       	movw	r30, r12
    2114:	30 83       	st	Z, r19
    2116:	3e e6       	ldi	r19, 0x6E	; 110
    2118:	31 83       	std	Z+1, r19	; 0x01
    211a:	36 e6       	ldi	r19, 0x66	; 102
    211c:	32 83       	std	Z+2, r19	; 0x02
    211e:	fc 01       	movw	r30, r24
    2120:	32 2f       	mov	r19, r18
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	33 23       	and	r19, r19
    2126:	19 f0       	breq	.+6      	; 0x212e <dtoa_prf+0x152>
    2128:	41 93       	st	Z+, r20
    212a:	31 50       	subi	r19, 0x01	; 1
    212c:	fb cf       	rjmp	.-10     	; 0x2124 <dtoa_prf+0x148>
    212e:	fc 01       	movw	r30, r24
    2130:	e2 0f       	add	r30, r18
    2132:	f1 1d       	adc	r31, r1
    2134:	10 82       	st	Z, r1
    2136:	8e ef       	ldi	r24, 0xFE	; 254
    2138:	9f ef       	ldi	r25, 0xFF	; 255
    213a:	a6 c0       	rjmp	.+332    	; 0x2288 <dtoa_prf+0x2ac>
    213c:	21 e0       	ldi	r18, 0x01	; 1
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	91 11       	cpse	r25, r1
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <dtoa_prf+0x16c>
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	16 16       	cp	r1, r22
    214a:	17 06       	cpc	r1, r23
    214c:	1c f4       	brge	.+6      	; 0x2154 <dtoa_prf+0x178>
    214e:	fb 01       	movw	r30, r22
    2150:	31 96       	adiw	r30, 0x01	; 1
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <dtoa_prf+0x17c>
    2154:	e1 e0       	ldi	r30, 0x01	; 1
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	2e 0f       	add	r18, r30
    215a:	3f 1f       	adc	r19, r31
    215c:	bb 20       	and	r11, r11
    215e:	21 f0       	breq	.+8      	; 0x2168 <dtoa_prf+0x18c>
    2160:	eb 2d       	mov	r30, r11
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	31 96       	adiw	r30, 0x01	; 1
    2166:	02 c0       	rjmp	.+4      	; 0x216c <dtoa_prf+0x190>
    2168:	e0 e0       	ldi	r30, 0x00	; 0
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	2e 0f       	add	r18, r30
    216e:	3f 1f       	adc	r19, r31
    2170:	e1 2f       	mov	r30, r17
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	2e 17       	cp	r18, r30
    2176:	3f 07       	cpc	r19, r31
    2178:	1c f4       	brge	.+6      	; 0x2180 <dtoa_prf+0x1a4>
    217a:	12 1b       	sub	r17, r18
    217c:	21 2f       	mov	r18, r17
    217e:	01 c0       	rjmp	.+2      	; 0x2182 <dtoa_prf+0x1a6>
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	8e 2d       	mov	r24, r14
    2184:	88 71       	andi	r24, 0x18	; 24
    2186:	59 f4       	brne	.+22     	; 0x219e <dtoa_prf+0x1c2>
    2188:	f6 01       	movw	r30, r12
    218a:	82 2f       	mov	r24, r18
    218c:	30 e2       	ldi	r19, 0x20	; 32
    218e:	88 23       	and	r24, r24
    2190:	19 f0       	breq	.+6      	; 0x2198 <dtoa_prf+0x1bc>
    2192:	31 93       	st	Z+, r19
    2194:	81 50       	subi	r24, 0x01	; 1
    2196:	fb cf       	rjmp	.-10     	; 0x218e <dtoa_prf+0x1b2>
    2198:	c2 0e       	add	r12, r18
    219a:	d1 1c       	adc	r13, r1
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	99 23       	and	r25, r25
    21a0:	29 f0       	breq	.+10     	; 0x21ac <dtoa_prf+0x1d0>
    21a2:	d6 01       	movw	r26, r12
    21a4:	9c 93       	st	X, r25
    21a6:	f6 01       	movw	r30, r12
    21a8:	31 96       	adiw	r30, 0x01	; 1
    21aa:	6f 01       	movw	r12, r30
    21ac:	51 11       	cpse	r21, r1
    21ae:	0b c0       	rjmp	.+22     	; 0x21c6 <dtoa_prf+0x1ea>
    21b0:	f6 01       	movw	r30, r12
    21b2:	82 2f       	mov	r24, r18
    21b4:	90 e3       	ldi	r25, 0x30	; 48
    21b6:	88 23       	and	r24, r24
    21b8:	19 f0       	breq	.+6      	; 0x21c0 <dtoa_prf+0x1e4>
    21ba:	91 93       	st	Z+, r25
    21bc:	81 50       	subi	r24, 0x01	; 1
    21be:	fb cf       	rjmp	.-10     	; 0x21b6 <dtoa_prf+0x1da>
    21c0:	c2 0e       	add	r12, r18
    21c2:	d1 1c       	adc	r13, r1
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	0f 2d       	mov	r16, r15
    21c8:	06 0f       	add	r16, r22
    21ca:	9a 81       	ldd	r25, Y+2	; 0x02
    21cc:	34 2f       	mov	r19, r20
    21ce:	30 71       	andi	r19, 0x10	; 16
    21d0:	44 ff       	sbrs	r20, 4
    21d2:	03 c0       	rjmp	.+6      	; 0x21da <dtoa_prf+0x1fe>
    21d4:	91 33       	cpi	r25, 0x31	; 49
    21d6:	09 f4       	brne	.+2      	; 0x21da <dtoa_prf+0x1fe>
    21d8:	01 50       	subi	r16, 0x01	; 1
    21da:	10 16       	cp	r1, r16
    21dc:	24 f4       	brge	.+8      	; 0x21e6 <dtoa_prf+0x20a>
    21de:	09 30       	cpi	r16, 0x09	; 9
    21e0:	18 f0       	brcs	.+6      	; 0x21e8 <dtoa_prf+0x20c>
    21e2:	08 e0       	ldi	r16, 0x08	; 8
    21e4:	01 c0       	rjmp	.+2      	; 0x21e8 <dtoa_prf+0x20c>
    21e6:	01 e0       	ldi	r16, 0x01	; 1
    21e8:	ab 01       	movw	r20, r22
    21ea:	77 ff       	sbrs	r23, 7
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <dtoa_prf+0x216>
    21ee:	40 e0       	ldi	r20, 0x00	; 0
    21f0:	50 e0       	ldi	r21, 0x00	; 0
    21f2:	fb 01       	movw	r30, r22
    21f4:	e4 1b       	sub	r30, r20
    21f6:	f5 0b       	sbc	r31, r21
    21f8:	a1 e0       	ldi	r26, 0x01	; 1
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	ac 0f       	add	r26, r28
    21fe:	bd 1f       	adc	r27, r29
    2200:	ea 0f       	add	r30, r26
    2202:	fb 1f       	adc	r31, r27
    2204:	8e e2       	ldi	r24, 0x2E	; 46
    2206:	a8 2e       	mov	r10, r24
    2208:	4b 01       	movw	r8, r22
    220a:	80 1a       	sub	r8, r16
    220c:	91 08       	sbc	r9, r1
    220e:	0b 2d       	mov	r16, r11
    2210:	10 e0       	ldi	r17, 0x00	; 0
    2212:	11 95       	neg	r17
    2214:	01 95       	neg	r16
    2216:	11 09       	sbc	r17, r1
    2218:	4f 3f       	cpi	r20, 0xFF	; 255
    221a:	bf ef       	ldi	r27, 0xFF	; 255
    221c:	5b 07       	cpc	r21, r27
    221e:	21 f4       	brne	.+8      	; 0x2228 <dtoa_prf+0x24c>
    2220:	d6 01       	movw	r26, r12
    2222:	ac 92       	st	X, r10
    2224:	11 96       	adiw	r26, 0x01	; 1
    2226:	6d 01       	movw	r12, r26
    2228:	64 17       	cp	r22, r20
    222a:	75 07       	cpc	r23, r21
    222c:	2c f0       	brlt	.+10     	; 0x2238 <dtoa_prf+0x25c>
    222e:	84 16       	cp	r8, r20
    2230:	95 06       	cpc	r9, r21
    2232:	14 f4       	brge	.+4      	; 0x2238 <dtoa_prf+0x25c>
    2234:	81 81       	ldd	r24, Z+1	; 0x01
    2236:	01 c0       	rjmp	.+2      	; 0x223a <dtoa_prf+0x25e>
    2238:	80 e3       	ldi	r24, 0x30	; 48
    223a:	41 50       	subi	r20, 0x01	; 1
    223c:	51 09       	sbc	r21, r1
    223e:	31 96       	adiw	r30, 0x01	; 1
    2240:	d6 01       	movw	r26, r12
    2242:	11 96       	adiw	r26, 0x01	; 1
    2244:	7d 01       	movw	r14, r26
    2246:	40 17       	cp	r20, r16
    2248:	51 07       	cpc	r21, r17
    224a:	24 f0       	brlt	.+8      	; 0x2254 <dtoa_prf+0x278>
    224c:	d6 01       	movw	r26, r12
    224e:	8c 93       	st	X, r24
    2250:	67 01       	movw	r12, r14
    2252:	e2 cf       	rjmp	.-60     	; 0x2218 <dtoa_prf+0x23c>
    2254:	64 17       	cp	r22, r20
    2256:	75 07       	cpc	r23, r21
    2258:	39 f4       	brne	.+14     	; 0x2268 <dtoa_prf+0x28c>
    225a:	96 33       	cpi	r25, 0x36	; 54
    225c:	20 f4       	brcc	.+8      	; 0x2266 <dtoa_prf+0x28a>
    225e:	95 33       	cpi	r25, 0x35	; 53
    2260:	19 f4       	brne	.+6      	; 0x2268 <dtoa_prf+0x28c>
    2262:	31 11       	cpse	r19, r1
    2264:	01 c0       	rjmp	.+2      	; 0x2268 <dtoa_prf+0x28c>
    2266:	81 e3       	ldi	r24, 0x31	; 49
    2268:	f6 01       	movw	r30, r12
    226a:	80 83       	st	Z, r24
    226c:	f7 01       	movw	r30, r14
    226e:	82 2f       	mov	r24, r18
    2270:	90 e2       	ldi	r25, 0x20	; 32
    2272:	88 23       	and	r24, r24
    2274:	19 f0       	breq	.+6      	; 0x227c <dtoa_prf+0x2a0>
    2276:	91 93       	st	Z+, r25
    2278:	81 50       	subi	r24, 0x01	; 1
    227a:	fb cf       	rjmp	.-10     	; 0x2272 <dtoa_prf+0x296>
    227c:	f7 01       	movw	r30, r14
    227e:	e2 0f       	add	r30, r18
    2280:	f1 1d       	adc	r31, r1
    2282:	10 82       	st	Z, r1
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	29 96       	adiw	r28, 0x09	; 9
    228a:	ec e0       	ldi	r30, 0x0C	; 12
    228c:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__epilogue_restores__+0xc>

00002290 <__ftoa_engine>:
    2290:	28 30       	cpi	r18, 0x08	; 8
    2292:	08 f0       	brcs	.+2      	; 0x2296 <__ftoa_engine+0x6>
    2294:	27 e0       	ldi	r18, 0x07	; 7
    2296:	33 27       	eor	r19, r19
    2298:	da 01       	movw	r26, r20
    229a:	99 0f       	add	r25, r25
    229c:	31 1d       	adc	r19, r1
    229e:	87 fd       	sbrc	r24, 7
    22a0:	91 60       	ori	r25, 0x01	; 1
    22a2:	00 96       	adiw	r24, 0x00	; 0
    22a4:	61 05       	cpc	r22, r1
    22a6:	71 05       	cpc	r23, r1
    22a8:	39 f4       	brne	.+14     	; 0x22b8 <__ftoa_engine+0x28>
    22aa:	32 60       	ori	r19, 0x02	; 2
    22ac:	2e 5f       	subi	r18, 0xFE	; 254
    22ae:	3d 93       	st	X+, r19
    22b0:	30 e3       	ldi	r19, 0x30	; 48
    22b2:	2a 95       	dec	r18
    22b4:	e1 f7       	brne	.-8      	; 0x22ae <__ftoa_engine+0x1e>
    22b6:	08 95       	ret
    22b8:	9f 3f       	cpi	r25, 0xFF	; 255
    22ba:	30 f0       	brcs	.+12     	; 0x22c8 <__ftoa_engine+0x38>
    22bc:	80 38       	cpi	r24, 0x80	; 128
    22be:	71 05       	cpc	r23, r1
    22c0:	61 05       	cpc	r22, r1
    22c2:	09 f0       	breq	.+2      	; 0x22c6 <__ftoa_engine+0x36>
    22c4:	3c 5f       	subi	r19, 0xFC	; 252
    22c6:	3c 5f       	subi	r19, 0xFC	; 252
    22c8:	3d 93       	st	X+, r19
    22ca:	91 30       	cpi	r25, 0x01	; 1
    22cc:	08 f0       	brcs	.+2      	; 0x22d0 <__ftoa_engine+0x40>
    22ce:	80 68       	ori	r24, 0x80	; 128
    22d0:	91 1d       	adc	r25, r1
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	1f 93       	push	r17
    22d8:	0f 93       	push	r16
    22da:	ff 92       	push	r15
    22dc:	ef 92       	push	r14
    22de:	19 2f       	mov	r17, r25
    22e0:	98 7f       	andi	r25, 0xF8	; 248
    22e2:	96 95       	lsr	r25
    22e4:	e9 2f       	mov	r30, r25
    22e6:	96 95       	lsr	r25
    22e8:	96 95       	lsr	r25
    22ea:	e9 0f       	add	r30, r25
    22ec:	ff 27       	eor	r31, r31
    22ee:	e4 5e       	subi	r30, 0xE4	; 228
    22f0:	fe 4f       	sbci	r31, 0xFE	; 254
    22f2:	99 27       	eor	r25, r25
    22f4:	33 27       	eor	r19, r19
    22f6:	ee 24       	eor	r14, r14
    22f8:	ff 24       	eor	r15, r15
    22fa:	a7 01       	movw	r20, r14
    22fc:	e7 01       	movw	r28, r14
    22fe:	05 90       	lpm	r0, Z+
    2300:	08 94       	sec
    2302:	07 94       	ror	r0
    2304:	28 f4       	brcc	.+10     	; 0x2310 <__ftoa_engine+0x80>
    2306:	36 0f       	add	r19, r22
    2308:	e7 1e       	adc	r14, r23
    230a:	f8 1e       	adc	r15, r24
    230c:	49 1f       	adc	r20, r25
    230e:	51 1d       	adc	r21, r1
    2310:	66 0f       	add	r22, r22
    2312:	77 1f       	adc	r23, r23
    2314:	88 1f       	adc	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	06 94       	lsr	r0
    231a:	a1 f7       	brne	.-24     	; 0x2304 <__ftoa_engine+0x74>
    231c:	05 90       	lpm	r0, Z+
    231e:	07 94       	ror	r0
    2320:	28 f4       	brcc	.+10     	; 0x232c <__ftoa_engine+0x9c>
    2322:	e7 0e       	add	r14, r23
    2324:	f8 1e       	adc	r15, r24
    2326:	49 1f       	adc	r20, r25
    2328:	56 1f       	adc	r21, r22
    232a:	c1 1d       	adc	r28, r1
    232c:	77 0f       	add	r23, r23
    232e:	88 1f       	adc	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	66 1f       	adc	r22, r22
    2334:	06 94       	lsr	r0
    2336:	a1 f7       	brne	.-24     	; 0x2320 <__ftoa_engine+0x90>
    2338:	05 90       	lpm	r0, Z+
    233a:	07 94       	ror	r0
    233c:	28 f4       	brcc	.+10     	; 0x2348 <__ftoa_engine+0xb8>
    233e:	f8 0e       	add	r15, r24
    2340:	49 1f       	adc	r20, r25
    2342:	56 1f       	adc	r21, r22
    2344:	c7 1f       	adc	r28, r23
    2346:	d1 1d       	adc	r29, r1
    2348:	88 0f       	add	r24, r24
    234a:	99 1f       	adc	r25, r25
    234c:	66 1f       	adc	r22, r22
    234e:	77 1f       	adc	r23, r23
    2350:	06 94       	lsr	r0
    2352:	a1 f7       	brne	.-24     	; 0x233c <__ftoa_engine+0xac>
    2354:	05 90       	lpm	r0, Z+
    2356:	07 94       	ror	r0
    2358:	20 f4       	brcc	.+8      	; 0x2362 <__ftoa_engine+0xd2>
    235a:	49 0f       	add	r20, r25
    235c:	56 1f       	adc	r21, r22
    235e:	c7 1f       	adc	r28, r23
    2360:	d8 1f       	adc	r29, r24
    2362:	99 0f       	add	r25, r25
    2364:	66 1f       	adc	r22, r22
    2366:	77 1f       	adc	r23, r23
    2368:	88 1f       	adc	r24, r24
    236a:	06 94       	lsr	r0
    236c:	a9 f7       	brne	.-22     	; 0x2358 <__ftoa_engine+0xc8>
    236e:	84 91       	lpm	r24, Z
    2370:	10 95       	com	r17
    2372:	17 70       	andi	r17, 0x07	; 7
    2374:	41 f0       	breq	.+16     	; 0x2386 <__ftoa_engine+0xf6>
    2376:	d6 95       	lsr	r29
    2378:	c7 95       	ror	r28
    237a:	57 95       	ror	r21
    237c:	47 95       	ror	r20
    237e:	f7 94       	ror	r15
    2380:	e7 94       	ror	r14
    2382:	1a 95       	dec	r17
    2384:	c1 f7       	brne	.-16     	; 0x2376 <__ftoa_engine+0xe6>
    2386:	e2 ec       	ldi	r30, 0xC2	; 194
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	68 94       	set
    238c:	15 90       	lpm	r1, Z+
    238e:	15 91       	lpm	r17, Z+
    2390:	35 91       	lpm	r19, Z+
    2392:	65 91       	lpm	r22, Z+
    2394:	95 91       	lpm	r25, Z+
    2396:	05 90       	lpm	r0, Z+
    2398:	7f e2       	ldi	r23, 0x2F	; 47
    239a:	73 95       	inc	r23
    239c:	e1 18       	sub	r14, r1
    239e:	f1 0a       	sbc	r15, r17
    23a0:	43 0b       	sbc	r20, r19
    23a2:	56 0b       	sbc	r21, r22
    23a4:	c9 0b       	sbc	r28, r25
    23a6:	d0 09       	sbc	r29, r0
    23a8:	c0 f7       	brcc	.-16     	; 0x239a <__ftoa_engine+0x10a>
    23aa:	e1 0c       	add	r14, r1
    23ac:	f1 1e       	adc	r15, r17
    23ae:	43 1f       	adc	r20, r19
    23b0:	56 1f       	adc	r21, r22
    23b2:	c9 1f       	adc	r28, r25
    23b4:	d0 1d       	adc	r29, r0
    23b6:	7e f4       	brtc	.+30     	; 0x23d6 <__ftoa_engine+0x146>
    23b8:	70 33       	cpi	r23, 0x30	; 48
    23ba:	11 f4       	brne	.+4      	; 0x23c0 <__ftoa_engine+0x130>
    23bc:	8a 95       	dec	r24
    23be:	e6 cf       	rjmp	.-52     	; 0x238c <__ftoa_engine+0xfc>
    23c0:	e8 94       	clt
    23c2:	01 50       	subi	r16, 0x01	; 1
    23c4:	30 f0       	brcs	.+12     	; 0x23d2 <__ftoa_engine+0x142>
    23c6:	08 0f       	add	r16, r24
    23c8:	0a f4       	brpl	.+2      	; 0x23cc <__ftoa_engine+0x13c>
    23ca:	00 27       	eor	r16, r16
    23cc:	02 17       	cp	r16, r18
    23ce:	08 f4       	brcc	.+2      	; 0x23d2 <__ftoa_engine+0x142>
    23d0:	20 2f       	mov	r18, r16
    23d2:	23 95       	inc	r18
    23d4:	02 2f       	mov	r16, r18
    23d6:	7a 33       	cpi	r23, 0x3A	; 58
    23d8:	28 f0       	brcs	.+10     	; 0x23e4 <__ftoa_engine+0x154>
    23da:	79 e3       	ldi	r23, 0x39	; 57
    23dc:	7d 93       	st	X+, r23
    23de:	2a 95       	dec	r18
    23e0:	e9 f7       	brne	.-6      	; 0x23dc <__ftoa_engine+0x14c>
    23e2:	10 c0       	rjmp	.+32     	; 0x2404 <__ftoa_engine+0x174>
    23e4:	7d 93       	st	X+, r23
    23e6:	2a 95       	dec	r18
    23e8:	89 f6       	brne	.-94     	; 0x238c <__ftoa_engine+0xfc>
    23ea:	06 94       	lsr	r0
    23ec:	97 95       	ror	r25
    23ee:	67 95       	ror	r22
    23f0:	37 95       	ror	r19
    23f2:	17 95       	ror	r17
    23f4:	17 94       	ror	r1
    23f6:	e1 18       	sub	r14, r1
    23f8:	f1 0a       	sbc	r15, r17
    23fa:	43 0b       	sbc	r20, r19
    23fc:	56 0b       	sbc	r21, r22
    23fe:	c9 0b       	sbc	r28, r25
    2400:	d0 09       	sbc	r29, r0
    2402:	98 f0       	brcs	.+38     	; 0x242a <__ftoa_engine+0x19a>
    2404:	23 95       	inc	r18
    2406:	7e 91       	ld	r23, -X
    2408:	73 95       	inc	r23
    240a:	7a 33       	cpi	r23, 0x3A	; 58
    240c:	08 f0       	brcs	.+2      	; 0x2410 <__ftoa_engine+0x180>
    240e:	70 e3       	ldi	r23, 0x30	; 48
    2410:	7c 93       	st	X, r23
    2412:	20 13       	cpse	r18, r16
    2414:	b8 f7       	brcc	.-18     	; 0x2404 <__ftoa_engine+0x174>
    2416:	7e 91       	ld	r23, -X
    2418:	70 61       	ori	r23, 0x10	; 16
    241a:	7d 93       	st	X+, r23
    241c:	30 f0       	brcs	.+12     	; 0x242a <__ftoa_engine+0x19a>
    241e:	83 95       	inc	r24
    2420:	71 e3       	ldi	r23, 0x31	; 49
    2422:	7d 93       	st	X+, r23
    2424:	70 e3       	ldi	r23, 0x30	; 48
    2426:	2a 95       	dec	r18
    2428:	e1 f7       	brne	.-8      	; 0x2422 <__ftoa_engine+0x192>
    242a:	11 24       	eor	r1, r1
    242c:	ef 90       	pop	r14
    242e:	ff 90       	pop	r15
    2430:	0f 91       	pop	r16
    2432:	1f 91       	pop	r17
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	99 27       	eor	r25, r25
    243a:	87 fd       	sbrc	r24, 7
    243c:	90 95       	com	r25
    243e:	08 95       	ret

00002440 <strnlen_P>:
    2440:	fc 01       	movw	r30, r24
    2442:	05 90       	lpm	r0, Z+
    2444:	61 50       	subi	r22, 0x01	; 1
    2446:	70 40       	sbci	r23, 0x00	; 0
    2448:	01 10       	cpse	r0, r1
    244a:	d8 f7       	brcc	.-10     	; 0x2442 <strnlen_P+0x2>
    244c:	80 95       	com	r24
    244e:	90 95       	com	r25
    2450:	8e 0f       	add	r24, r30
    2452:	9f 1f       	adc	r25, r31
    2454:	08 95       	ret

00002456 <strnlen>:
    2456:	fc 01       	movw	r30, r24
    2458:	61 50       	subi	r22, 0x01	; 1
    245a:	70 40       	sbci	r23, 0x00	; 0
    245c:	01 90       	ld	r0, Z+
    245e:	01 10       	cpse	r0, r1
    2460:	d8 f7       	brcc	.-10     	; 0x2458 <strnlen+0x2>
    2462:	80 95       	com	r24
    2464:	90 95       	com	r25
    2466:	8e 0f       	add	r24, r30
    2468:	9f 1f       	adc	r25, r31
    246a:	08 95       	ret

0000246c <fputc>:
    246c:	0f 93       	push	r16
    246e:	1f 93       	push	r17
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	fb 01       	movw	r30, r22
    2476:	23 81       	ldd	r18, Z+3	; 0x03
    2478:	21 fd       	sbrc	r18, 1
    247a:	03 c0       	rjmp	.+6      	; 0x2482 <fputc+0x16>
    247c:	8f ef       	ldi	r24, 0xFF	; 255
    247e:	9f ef       	ldi	r25, 0xFF	; 255
    2480:	2c c0       	rjmp	.+88     	; 0x24da <fputc+0x6e>
    2482:	22 ff       	sbrs	r18, 2
    2484:	16 c0       	rjmp	.+44     	; 0x24b2 <fputc+0x46>
    2486:	46 81       	ldd	r20, Z+6	; 0x06
    2488:	57 81       	ldd	r21, Z+7	; 0x07
    248a:	24 81       	ldd	r18, Z+4	; 0x04
    248c:	35 81       	ldd	r19, Z+5	; 0x05
    248e:	42 17       	cp	r20, r18
    2490:	53 07       	cpc	r21, r19
    2492:	44 f4       	brge	.+16     	; 0x24a4 <fputc+0x38>
    2494:	a0 81       	ld	r26, Z
    2496:	b1 81       	ldd	r27, Z+1	; 0x01
    2498:	9d 01       	movw	r18, r26
    249a:	2f 5f       	subi	r18, 0xFF	; 255
    249c:	3f 4f       	sbci	r19, 0xFF	; 255
    249e:	20 83       	st	Z, r18
    24a0:	31 83       	std	Z+1, r19	; 0x01
    24a2:	8c 93       	st	X, r24
    24a4:	26 81       	ldd	r18, Z+6	; 0x06
    24a6:	37 81       	ldd	r19, Z+7	; 0x07
    24a8:	2f 5f       	subi	r18, 0xFF	; 255
    24aa:	3f 4f       	sbci	r19, 0xFF	; 255
    24ac:	26 83       	std	Z+6, r18	; 0x06
    24ae:	37 83       	std	Z+7, r19	; 0x07
    24b0:	14 c0       	rjmp	.+40     	; 0x24da <fputc+0x6e>
    24b2:	8b 01       	movw	r16, r22
    24b4:	ec 01       	movw	r28, r24
    24b6:	fb 01       	movw	r30, r22
    24b8:	00 84       	ldd	r0, Z+8	; 0x08
    24ba:	f1 85       	ldd	r31, Z+9	; 0x09
    24bc:	e0 2d       	mov	r30, r0
    24be:	09 95       	icall
    24c0:	89 2b       	or	r24, r25
    24c2:	e1 f6       	brne	.-72     	; 0x247c <fputc+0x10>
    24c4:	d8 01       	movw	r26, r16
    24c6:	16 96       	adiw	r26, 0x06	; 6
    24c8:	8d 91       	ld	r24, X+
    24ca:	9c 91       	ld	r25, X
    24cc:	17 97       	sbiw	r26, 0x07	; 7
    24ce:	01 96       	adiw	r24, 0x01	; 1
    24d0:	16 96       	adiw	r26, 0x06	; 6
    24d2:	8d 93       	st	X+, r24
    24d4:	9c 93       	st	X, r25
    24d6:	17 97       	sbiw	r26, 0x07	; 7
    24d8:	ce 01       	movw	r24, r28
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	1f 91       	pop	r17
    24e0:	0f 91       	pop	r16
    24e2:	08 95       	ret

000024e4 <__ultoa_invert>:
    24e4:	fa 01       	movw	r30, r20
    24e6:	aa 27       	eor	r26, r26
    24e8:	28 30       	cpi	r18, 0x08	; 8
    24ea:	51 f1       	breq	.+84     	; 0x2540 <__ultoa_invert+0x5c>
    24ec:	20 31       	cpi	r18, 0x10	; 16
    24ee:	81 f1       	breq	.+96     	; 0x2550 <__ultoa_invert+0x6c>
    24f0:	e8 94       	clt
    24f2:	6f 93       	push	r22
    24f4:	6e 7f       	andi	r22, 0xFE	; 254
    24f6:	6e 5f       	subi	r22, 0xFE	; 254
    24f8:	7f 4f       	sbci	r23, 0xFF	; 255
    24fa:	8f 4f       	sbci	r24, 0xFF	; 255
    24fc:	9f 4f       	sbci	r25, 0xFF	; 255
    24fe:	af 4f       	sbci	r26, 0xFF	; 255
    2500:	b1 e0       	ldi	r27, 0x01	; 1
    2502:	3e d0       	rcall	.+124    	; 0x2580 <__ultoa_invert+0x9c>
    2504:	b4 e0       	ldi	r27, 0x04	; 4
    2506:	3c d0       	rcall	.+120    	; 0x2580 <__ultoa_invert+0x9c>
    2508:	67 0f       	add	r22, r23
    250a:	78 1f       	adc	r23, r24
    250c:	89 1f       	adc	r24, r25
    250e:	9a 1f       	adc	r25, r26
    2510:	a1 1d       	adc	r26, r1
    2512:	68 0f       	add	r22, r24
    2514:	79 1f       	adc	r23, r25
    2516:	8a 1f       	adc	r24, r26
    2518:	91 1d       	adc	r25, r1
    251a:	a1 1d       	adc	r26, r1
    251c:	6a 0f       	add	r22, r26
    251e:	71 1d       	adc	r23, r1
    2520:	81 1d       	adc	r24, r1
    2522:	91 1d       	adc	r25, r1
    2524:	a1 1d       	adc	r26, r1
    2526:	20 d0       	rcall	.+64     	; 0x2568 <__ultoa_invert+0x84>
    2528:	09 f4       	brne	.+2      	; 0x252c <__ultoa_invert+0x48>
    252a:	68 94       	set
    252c:	3f 91       	pop	r19
    252e:	2a e0       	ldi	r18, 0x0A	; 10
    2530:	26 9f       	mul	r18, r22
    2532:	11 24       	eor	r1, r1
    2534:	30 19       	sub	r19, r0
    2536:	30 5d       	subi	r19, 0xD0	; 208
    2538:	31 93       	st	Z+, r19
    253a:	de f6       	brtc	.-74     	; 0x24f2 <__ultoa_invert+0xe>
    253c:	cf 01       	movw	r24, r30
    253e:	08 95       	ret
    2540:	46 2f       	mov	r20, r22
    2542:	47 70       	andi	r20, 0x07	; 7
    2544:	40 5d       	subi	r20, 0xD0	; 208
    2546:	41 93       	st	Z+, r20
    2548:	b3 e0       	ldi	r27, 0x03	; 3
    254a:	0f d0       	rcall	.+30     	; 0x256a <__ultoa_invert+0x86>
    254c:	c9 f7       	brne	.-14     	; 0x2540 <__ultoa_invert+0x5c>
    254e:	f6 cf       	rjmp	.-20     	; 0x253c <__ultoa_invert+0x58>
    2550:	46 2f       	mov	r20, r22
    2552:	4f 70       	andi	r20, 0x0F	; 15
    2554:	40 5d       	subi	r20, 0xD0	; 208
    2556:	4a 33       	cpi	r20, 0x3A	; 58
    2558:	18 f0       	brcs	.+6      	; 0x2560 <__ultoa_invert+0x7c>
    255a:	49 5d       	subi	r20, 0xD9	; 217
    255c:	31 fd       	sbrc	r19, 1
    255e:	40 52       	subi	r20, 0x20	; 32
    2560:	41 93       	st	Z+, r20
    2562:	02 d0       	rcall	.+4      	; 0x2568 <__ultoa_invert+0x84>
    2564:	a9 f7       	brne	.-22     	; 0x2550 <__ultoa_invert+0x6c>
    2566:	ea cf       	rjmp	.-44     	; 0x253c <__ultoa_invert+0x58>
    2568:	b4 e0       	ldi	r27, 0x04	; 4
    256a:	a6 95       	lsr	r26
    256c:	97 95       	ror	r25
    256e:	87 95       	ror	r24
    2570:	77 95       	ror	r23
    2572:	67 95       	ror	r22
    2574:	ba 95       	dec	r27
    2576:	c9 f7       	brne	.-14     	; 0x256a <__ultoa_invert+0x86>
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	61 05       	cpc	r22, r1
    257c:	71 05       	cpc	r23, r1
    257e:	08 95       	ret
    2580:	9b 01       	movw	r18, r22
    2582:	ac 01       	movw	r20, r24
    2584:	0a 2e       	mov	r0, r26
    2586:	06 94       	lsr	r0
    2588:	57 95       	ror	r21
    258a:	47 95       	ror	r20
    258c:	37 95       	ror	r19
    258e:	27 95       	ror	r18
    2590:	ba 95       	dec	r27
    2592:	c9 f7       	brne	.-14     	; 0x2586 <__ultoa_invert+0xa2>
    2594:	62 0f       	add	r22, r18
    2596:	73 1f       	adc	r23, r19
    2598:	84 1f       	adc	r24, r20
    259a:	95 1f       	adc	r25, r21
    259c:	a0 1d       	adc	r26, r0
    259e:	08 95       	ret

000025a0 <__prologue_saves__>:
    25a0:	2f 92       	push	r2
    25a2:	3f 92       	push	r3
    25a4:	4f 92       	push	r4
    25a6:	5f 92       	push	r5
    25a8:	6f 92       	push	r6
    25aa:	7f 92       	push	r7
    25ac:	8f 92       	push	r8
    25ae:	9f 92       	push	r9
    25b0:	af 92       	push	r10
    25b2:	bf 92       	push	r11
    25b4:	cf 92       	push	r12
    25b6:	df 92       	push	r13
    25b8:	ef 92       	push	r14
    25ba:	ff 92       	push	r15
    25bc:	0f 93       	push	r16
    25be:	1f 93       	push	r17
    25c0:	cf 93       	push	r28
    25c2:	df 93       	push	r29
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	ca 1b       	sub	r28, r26
    25ca:	db 0b       	sbc	r29, r27
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	09 94       	ijmp

000025d2 <__epilogue_restores__>:
    25d2:	2a 88       	ldd	r2, Y+18	; 0x12
    25d4:	39 88       	ldd	r3, Y+17	; 0x11
    25d6:	48 88       	ldd	r4, Y+16	; 0x10
    25d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    25da:	6e 84       	ldd	r6, Y+14	; 0x0e
    25dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    25de:	8c 84       	ldd	r8, Y+12	; 0x0c
    25e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    25e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    25e4:	b9 84       	ldd	r11, Y+9	; 0x09
    25e6:	c8 84       	ldd	r12, Y+8	; 0x08
    25e8:	df 80       	ldd	r13, Y+7	; 0x07
    25ea:	ee 80       	ldd	r14, Y+6	; 0x06
    25ec:	fd 80       	ldd	r15, Y+5	; 0x05
    25ee:	0c 81       	ldd	r16, Y+4	; 0x04
    25f0:	1b 81       	ldd	r17, Y+3	; 0x03
    25f2:	aa 81       	ldd	r26, Y+2	; 0x02
    25f4:	b9 81       	ldd	r27, Y+1	; 0x01
    25f6:	ce 0f       	add	r28, r30
    25f8:	d1 1d       	adc	r29, r1
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	ed 01       	movw	r28, r26
    2600:	08 95       	ret

00002602 <_exit>:
    2602:	f8 94       	cli

00002604 <__stop_program>:
    2604:	ff cf       	rjmp	.-2      	; 0x2604 <__stop_program>
