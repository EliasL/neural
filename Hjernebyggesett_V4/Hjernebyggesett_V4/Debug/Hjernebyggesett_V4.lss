
Hjernebyggesett_V4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00803800  0000243a  000024ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023d0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006a  0000a3d0  000023d0  00002484  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000056  00803816  00803816  00002504  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002504  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002560  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004d0  00000000  00000000  000025a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000865a  00000000  00000000  00002a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000036da  00000000  00000000  0000b0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002905  00000000  00000000  0000e7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008a0  00000000  00000000  000110ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003505  00000000  00000000  0001194c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000173f  00000000  00000000  00014e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000348  00000000  00000000  00016590  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__vector_6>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	05 a8       	ldd	r0, Z+53	; 0x35
      a6:	4c cd       	rjmp	.-1384   	; 0xfffffb40 <__eeprom_end+0xff7efb40>
      a8:	b2 d4       	rcall	.+2404   	; 0xa0e <tinyDendrite_update_signals+0xac>
      aa:	4e b9       	out	0x0e, r20	; 14
      ac:	38 36       	cpi	r19, 0x68	; 104
      ae:	a9 02       	muls	r26, r25
      b0:	0c 50       	subi	r16, 0x0C	; 12
      b2:	b9 91       	ld	r27, Y+
      b4:	86 88       	ldd	r8, Z+22	; 0x16
      b6:	08 3c       	cpi	r16, 0xC8	; 200
      b8:	a6 aa       	std	Z+54, r10	; 0x36
      ba:	aa 2a       	or	r10, r26
      bc:	be 00       	.word	0x00be	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240

000000c2 <__trampolines_end>:
      c2:	00 40       	sbci	r16, 0x00	; 0
      c4:	7a 10       	cpse	r7, r10
      c6:	f3 5a       	subi	r31, 0xA3	; 163
      c8:	00 a0       	ldd	r0, Z+32	; 0x20
      ca:	72 4e       	sbci	r23, 0xE2	; 226
      cc:	18 09       	sbc	r17, r8
      ce:	00 10       	cpse	r0, r0
      d0:	a5 d4       	rcall	.+2378   	; 0xa1c <tinyDendrite_update_signals+0xba>
      d2:	e8 00       	.word	0x00e8	; ????
      d4:	00 e8       	ldi	r16, 0x80	; 128
      d6:	76 48       	sbci	r23, 0x86	; 134
      d8:	17 00       	.word	0x0017	; ????
      da:	00 e4       	ldi	r16, 0x40	; 64
      dc:	0b 54       	subi	r16, 0x4B	; 75
      de:	02 00       	.word	0x0002	; ????
      e0:	00 ca       	rjmp	.-3072   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
      e2:	9a 3b       	cpi	r25, 0xBA	; 186
      e4:	00 00       	nop
      e6:	00 e1       	ldi	r16, 0x10	; 16
      e8:	f5 05       	cpc	r31, r5
      ea:	00 00       	nop
      ec:	80 96       	adiw	r24, 0x20	; 32
      ee:	98 00       	.word	0x0098	; ????
      f0:	00 00       	nop
      f2:	40 42       	sbci	r20, 0x20	; 32
      f4:	0f 00       	.word	0x000f	; ????
      f6:	00 00       	nop
      f8:	a0 86       	std	Z+8, r10	; 0x08
      fa:	01 00       	.word	0x0001	; ????
      fc:	00 00       	nop
      fe:	10 27       	eor	r17, r16
     100:	00 00       	nop
     102:	00 00       	nop
     104:	e8 03       	fmulsu	r22, r16
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	64 00       	.word	0x0064	; ????
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	0a 00       	.word	0x000a	; ????
     112:	00 00       	nop
     114:	00 00       	nop
     116:	01 00       	.word	0x0001	; ????
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	2c 76       	andi	r18, 0x6C	; 108
     11e:	d8 88       	ldd	r13, Y+16	; 0x10
     120:	dc 67       	ori	r29, 0x7C	; 124
     122:	4f 08       	sbc	r4, r15
     124:	23 df       	rcall	.-442    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     126:	c1 df       	rcall	.-126    	; 0xaa <__SREG__+0x6b>
     128:	ae 59       	subi	r26, 0x9E	; 158
     12a:	e1 b1       	in	r30, 0x01	; 1
     12c:	b7 96       	adiw	r30, 0x27	; 39
     12e:	e5 e3       	ldi	r30, 0x35	; 53
     130:	e4 53       	subi	r30, 0x34	; 52
     132:	c6 3a       	cpi	r28, 0xA6	; 166
     134:	e6 51       	subi	r30, 0x16	; 22
     136:	99 76       	andi	r25, 0x69	; 105
     138:	96 e8       	ldi	r25, 0x86	; 134
     13a:	e6 c2       	rjmp	.+1484   	; 0x708 <tinyAxon_update_potential+0x12a>
     13c:	84 26       	eor	r8, r20
     13e:	eb 89       	ldd	r30, Y+19	; 0x13
     140:	8c 9b       	sbis	0x11, 4	; 17
     142:	62 ed       	ldi	r22, 0xD2	; 210
     144:	40 7c       	andi	r20, 0xC0	; 192
     146:	6f fc       	.word	0xfc6f	; ????
     148:	ef bc       	out	0x2f, r14	; 47
     14a:	9c 9f       	mul	r25, r28
     14c:	40 f2       	brcs	.-112    	; 0xde <__trampolines_end+0x1c>
     14e:	ba a5       	ldd	r27, Y+42	; 0x2a
     150:	6f a5       	ldd	r22, Y+47	; 0x2f
     152:	f4 90       	lpm	r15, Z
     154:	05 5a       	subi	r16, 0xA5	; 165
     156:	2a f7       	brpl	.-54     	; 0x122 <__trampolines_end+0x60>
     158:	5c 93       	st	X, r21
     15a:	6b 6c       	ori	r22, 0xCB	; 203
     15c:	f9 67       	ori	r31, 0x79	; 121
     15e:	6d c1       	rjmp	.+730    	; 0x43a <system_init+0x28>
     160:	1b fc       	.word	0xfc1b	; ????
     162:	e0 e4       	ldi	r30, 0x40	; 64
     164:	0d 47       	sbci	r16, 0x7D	; 125
     166:	fe f5       	brtc	.+126    	; 0x1e6 <.do_clear_bss_loop>
     168:	20 e6       	ldi	r18, 0x60	; 96
     16a:	b5 00       	.word	0x00b5	; ????
     16c:	d0 ed       	ldi	r29, 0xD0	; 208
     16e:	90 2e       	mov	r9, r16
     170:	03 00       	.word	0x0003	; ????
     172:	94 35       	cpi	r25, 0x54	; 84
     174:	77 05       	cpc	r23, r7
     176:	00 80       	ld	r0, Z
     178:	84 1e       	adc	r8, r20
     17a:	08 00       	.word	0x0008	; ????
     17c:	00 20       	and	r0, r0
     17e:	4e 0a       	sbc	r4, r30
     180:	00 00       	nop
     182:	00 c8       	rjmp	.-4096   	; 0xfffff184 <__eeprom_end+0xff7ef184>
     184:	0c 33       	cpi	r16, 0x3C	; 60
     186:	33 33       	cpi	r19, 0x33	; 51
     188:	33 0f       	add	r19, r19
     18a:	98 6e       	ori	r25, 0xE8	; 232
     18c:	12 83       	std	Z+2, r17	; 0x02
     18e:	11 41       	sbci	r17, 0x11	; 17
     190:	ef 8d       	ldd	r30, Y+31	; 0x1f
     192:	21 14       	cp	r2, r1
     194:	89 3b       	cpi	r24, 0xB9	; 185
     196:	e6 55       	subi	r30, 0x56	; 86
     198:	16 cf       	rjmp	.-468    	; 0xffffffc6 <__eeprom_end+0xff7effc6>
     19a:	fe e6       	ldi	r31, 0x6E	; 110
     19c:	db 18       	sub	r13, r11
     19e:	d1 84       	ldd	r13, Z+9	; 0x09
     1a0:	4b 38       	cpi	r20, 0x8B	; 139
     1a2:	1b f7       	brvc	.-58     	; 0x16a <__trampolines_end+0xa8>
     1a4:	7c 1d       	adc	r23, r12
     1a6:	90 1d       	adc	r25, r0
     1a8:	a4 bb       	out	0x14, r26	; 20
     1aa:	e4 24       	eor	r14, r4
     1ac:	20 32       	cpi	r18, 0x20	; 32
     1ae:	84 72       	andi	r24, 0x24	; 36
     1b0:	5e 22       	and	r5, r30
     1b2:	81 00       	.word	0x0081	; ????
     1b4:	c9 f1       	breq	.+114    	; 0x228 <main+0x28>
     1b6:	24 ec       	ldi	r18, 0xC4	; 196
     1b8:	a1 e5       	ldi	r26, 0x51	; 81
     1ba:	3d 27       	eor	r19, r29

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	df e3       	ldi	r29, 0x3F	; 63
     1c6:	de bf       	out	0x3e, r29	; 62

000001c8 <__do_copy_data>:
     1c8:	18 e3       	ldi	r17, 0x38	; 56
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b8 e3       	ldi	r27, 0x38	; 56
     1ce:	ea e3       	ldi	r30, 0x3A	; 58
     1d0:	f4 e2       	ldi	r31, 0x24	; 36
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
     1d4:	05 90       	lpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	a6 31       	cpi	r26, 0x16	; 22
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>

000001de <__do_clear_bss>:
     1de:	28 e3       	ldi	r18, 0x38	; 56
     1e0:	a6 e1       	ldi	r26, 0x16	; 22
     1e2:	b8 e3       	ldi	r27, 0x38	; 56
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	ac 36       	cpi	r26, 0x6C	; 108
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 00 01 	call	0x200	; 0x200 <main>
     1f2:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     1fa:	0e 94 09 02 	call	0x412	; 0x412 <system_init>
     1fe:	08 95       	ret

00000200 <main>:

int main(void)
{	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     200:	0e 94 fd 00 	call	0x1fa	; 0x1fa <atmel_start_init>
	For some reason, instead of the reference voltage being 4.32v, it is 3.3v. 
	A plausible explanation is that the microchip does not up the voltage, so that if the microchip is only ever 
	supplied with 3.3v, it will output 3.3v as the max.
	*/
	
	VREF.CTRLA |= VREF_DAC0REFSEL_4V34_gc;
     204:	e0 ea       	ldi	r30, 0xA0	; 160
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	83 60       	ori	r24, 0x03	; 3
     20c:	80 83       	st	Z, r24
	 
	while (1)
	{
		// We don't want to update the neuron too often because of various reasons. The tinyISR_getflag is set every ms, and so the loop is only run once every ms.  
		if(tinyISR_getflag())
     20e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <tinyISR_getflag>
     212:	88 23       	and	r24, r24
     214:	e1 f3       	breq	.-8      	; 0x20e <main+0xe>
		{
			
			if(tinyCharge_is_connected_to_charger()){
     216:	0e 94 03 04 	call	0x806	; 0x806 <tinyCharge_is_connected_to_charger>
     21a:	88 23       	and	r24, r24
     21c:	59 f0       	breq	.+22     	; 0x234 <main+0x34>
				// Charge loop
				
				if(tinyCharge_is_fully_charged()){
     21e:	0e 94 06 04 	call	0x80c	; 0x80c <tinyCharge_is_fully_charged>
     222:	88 23       	and	r24, r24
     224:	21 f0       	breq	.+8      	; 0x22e <main+0x2e>
					tinyLED_set_color(OUT_LED, CHARGING_DONE_COLOR);
     226:	63 e0       	ldi	r22, 0x03	; 3
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	0e 94 c4 05 	call	0xb88	; 0xb88 <tinyLED_set_color>
				}				
				// We check the Dendrites in order to detect if we have stopped charging
				tinyDendrite_update_signals();
     22e:	0e 94 b1 04 	call	0x962	; 0x962 <tinyDendrite_update_signals>
     232:	0d c0       	rjmp	.+26     	; 0x24e <main+0x4e>
			}
			else{
				// Main loop			
				
				// Set LED
				if(tinyLED_get_color(OUT_LED) == OFF){
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	0e 94 cd 05 	call	0xb9a	; 0xb9a <tinyLED_get_color>
     23a:	81 11       	cpse	r24, r1
     23c:	04 c0       	rjmp	.+8      	; 0x246 <main+0x46>
					tinyLED_set_color_mode(OUT_LED, PING_COLOR, PING);
     23e:	43 e0       	ldi	r20, 0x03	; 3
     240:	62 e0       	ldi	r22, 0x02	; 2
     242:	0e 94 d5 05 	call	0xbaa	; 0xbaa <tinyLED_set_color_mode>
				}
				
				// Update button	
				tinyButton_update();
     246:	0e 94 a4 03 	call	0x748	; 0x748 <tinyButton_update>
				
				// Update the potential (This is where most of the important stuff happens)
				tinyPotential_update();
     24a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <tinyPotential_update>
			}
			// Update LED
			tinyLED_update();
     24e:	0e 94 15 06 	call	0xc2a	; 0xc2a <tinyLED_update>
				
			// Switch transistors
			tinyCharge_set_transistors();
     252:	0e 94 2d 04 	call	0x85a	; 0x85a <tinyCharge_set_transistors>
			
			// Prepare for next cycle
			tinyISR_setflag(false);
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	0e 94 aa 05 	call	0xb54	; 0xb54 <tinyISR_setflag>
			tinyDebugger_send_uint32("time", tinyTime_now());
     25c:	0e 94 cb 08 	call	0x1196	; 0x1196 <tinyTime_now>
     260:	ab 01       	movw	r20, r22
     262:	bc 01       	movw	r22, r24
     264:	80 ed       	ldi	r24, 0xD0	; 208
     266:	93 ea       	ldi	r25, 0xA3	; 163
     268:	0e 94 35 04 	call	0x86a	; 0x86a <tinyDebugger_send_uint32>
			tinyDebugger_end_line();
     26c:	0e 94 9c 04 	call	0x938	; 0x938 <tinyDebugger_end_line>
     270:	ce cf       	rjmp	.-100    	; 0x20e <main+0xe>

00000272 <ADC_0_init>:
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC1.RES);
}
     272:	e0 e4       	ldi	r30, 0x40	; 64
     274:	f6 e0       	ldi	r31, 0x06	; 6
     276:	80 e1       	ldi	r24, 0x10	; 16
     278:	82 83       	std	Z+2, r24	; 0x02
     27a:	85 e0       	ldi	r24, 0x05	; 5
     27c:	80 83       	st	Z, r24
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	08 95       	ret

00000282 <ADC_0_is_conversion_done>:
     282:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     286:	81 70       	andi	r24, 0x01	; 1
     288:	08 95       	ret

0000028a <ADC_0_get_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_1_channel_t channel)
{
	ADC1.MUXPOS  = channel;
     28a:	e0 e4       	ldi	r30, 0x40	; 64
     28c:	f6 e0       	ldi	r31, 0x06	; 6
     28e:	86 83       	std	Z+6, r24	; 0x06
	ADC1.COMMAND = ADC_STCONV_bm;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	80 87       	std	Z+8, r24	; 0x08
adc_result_t ADC_0_get_conversion(adc_1_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
	while (!ADC_0_is_conversion_done())
     294:	0e 94 41 01 	call	0x282	; 0x282 <ADC_0_is_conversion_done>
     298:	88 23       	and	r24, r24
     29a:	e1 f3       	breq	.-8      	; 0x294 <ADC_0_get_conversion+0xa>
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC1.RES);
     29c:	e0 e4       	ldi	r30, 0x40	; 64
     29e:	f6 e0       	ldi	r31, 0x06	; 6
     2a0:	20 89       	ldd	r18, Z+16	; 0x10
     2a2:	31 89       	ldd	r19, Z+17	; 0x11

	ADC_0_start_conversion(channel);
	while (!ADC_0_is_conversion_done())
		;
	res = ADC_0_get_conversion_result();
	ADC1.INTFLAGS |= ADC_RESRDY_bm;
     2a4:	93 85       	ldd	r25, Z+11	; 0x0b
     2a6:	91 60       	ori	r25, 0x01	; 1
     2a8:	93 87       	std	Z+11, r25	; 0x0b
	return res;
}
     2aa:	c9 01       	movw	r24, r18
     2ac:	08 95       	ret

000002ae <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	08 95       	ret

000002b2 <DIGITAL_GLUE_LOGIC_0_init>:

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.LUT0CTRLA).

	// CCL.SEQCTRL0 = CCL_SEQSEL_DISABLE_gc /* Sequential logic disabled */;

	CCL.TRUTH0 = 168; /* Truth 0: 168 */
     2b2:	e0 ec       	ldi	r30, 0xC0	; 192
     2b4:	f1 e0       	ldi	r31, 0x01	; 1
     2b6:	28 ea       	ldi	r18, 0xA8	; 168
     2b8:	20 87       	std	Z+8, r18	; 0x08

	CCL.LUT0CTRLC = CCL_INSEL2_TCA0_gc /* TCA0 WO2 input source */;
     2ba:	98 e0       	ldi	r25, 0x08	; 8
     2bc:	97 83       	std	Z+7, r25	; 0x07

	CCL.LUT0CTRLB = CCL_INSEL0_SPI0_gc /* SPI0 SCK source */
     2be:	8b eb       	ldi	r24, 0xBB	; 187
     2c0:	86 83       	std	Z+6, r24	; 0x06
	                | CCL_INSEL1_SPI0_gc /* SPI0 MOSI input source */;

	CCL.LUT0CTRLA = 0 << CCL_CLKSRC_bp       /* Clock Source Selection: disabled */
     2c2:	39 e0       	ldi	r19, 0x09	; 9
     2c4:	35 83       	std	Z+5, r19	; 0x05
	                | CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	                | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	                | 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	                | 1 << CCL_OUTEN_bp;     /* Output Enable: enabled */

	CCL.TRUTH1 = 168; /* Truth 1: 168 */
     2c6:	24 87       	std	Z+12, r18	; 0x0c

	CCL.LUT1CTRLC = CCL_INSEL2_TCA0_gc /* TCA0 WO2 input source */;
     2c8:	93 87       	std	Z+11, r25	; 0x0b

	CCL.LUT1CTRLB = CCL_INSEL0_SPI0_gc /* SPI0 SCK source */
     2ca:	82 87       	std	Z+10, r24	; 0x0a
	//		 | CCL_EDGEDET_DIS_gc /* Edge detector is disabled */
	//		 | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	//		 | 0 << CCL_ENABLE_bp /* LUT Enable: disabled */
	//		 | 0 << CCL_OUTEN_bp; /* Output Enable: disabled */

	CCL.CTRLA = 1 << CCL_ENABLE_bp      /* Enable: enabled */
     2cc:	81 e4       	ldi	r24, 0x41	; 65
     2ce:	80 83       	st	Z, r24
	            | 1 << CCL_RUNSTDBY_bp; /* Run in Standby: enabled */

	return 0;
}
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	08 95       	ret

000002d4 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     2d4:	47 e0       	ldi	r20, 0x07	; 7
     2d6:	68 ed       	ldi	r22, 0xD8	; 216
     2d8:	8c e7       	ldi	r24, 0x7C	; 124
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 36 02 	call	0x46c	; 0x46c <protected_write_io>
     2e0:	41 e0       	ldi	r20, 0x01	; 1
     2e2:	68 ed       	ldi	r22, 0xD8	; 216
     2e4:	81 e6       	ldi	r24, 0x61	; 97
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 36 02 	call	0x46c	; 0x46c <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 95       	ret

000002f0 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     2f0:	78 94       	sei

	return 0;
}
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	08 95       	ret

000002f6 <DAC_0_init>:
 *
 * \return Nothing
 */
void DAC_0_disable()
{
	DAC0.CTRLA &= ~DAC_ENABLE_bm;
     2f6:	81 e4       	ldi	r24, 0x41	; 65
     2f8:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret

00000300 <DAC_0_set_output>:
 *
 * \return Nothing
 */
void DAC_0_set_output(dac_resolution_t value)
{
	DAC0.DATA = value;
     300:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     304:	08 95       	ret

00000306 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     306:	e0 e1       	ldi	r30, 0x10	; 16
     308:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     30a:	80 81       	ld	r24, Z
     30c:	88 60       	ori	r24, 0x08	; 8
     30e:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     310:	e8 31       	cpi	r30, 0x18	; 24
     312:	84 e0       	ldi	r24, 0x04	; 4
     314:	f8 07       	cpc	r31, r24
     316:	c9 f7       	brne	.-14     	; 0x30a <mcu_init+0x4>
     318:	e0 e3       	ldi	r30, 0x30	; 48
     31a:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     31c:	80 81       	ld	r24, Z
     31e:	88 60       	ori	r24, 0x08	; 8
     320:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     322:	e8 33       	cpi	r30, 0x38	; 56
     324:	84 e0       	ldi	r24, 0x04	; 4
     326:	f8 07       	cpc	r31, r24
     328:	c9 f7       	brne	.-14     	; 0x31c <mcu_init+0x16>
     32a:	e0 e5       	ldi	r30, 0x50	; 80
     32c:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     32e:	80 81       	ld	r24, Z
     330:	88 60       	ori	r24, 0x08	; 8
     332:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     334:	e8 35       	cpi	r30, 0x58	; 88
     336:	84 e0       	ldi	r24, 0x04	; 4
     338:	f8 07       	cpc	r31, r24
     33a:	c9 f7       	brne	.-14     	; 0x32e <mcu_init+0x28>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     33c:	08 95       	ret

0000033e <ADC_0_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     33e:	e5 e1       	ldi	r30, 0x15	; 21
     340:	f4 e0       	ldi	r31, 0x04	; 4
     342:	80 81       	ld	r24, Z
     344:	88 7f       	andi	r24, 0xF8	; 248
     346:	84 60       	ori	r24, 0x04	; 4
     348:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     34a:	80 81       	ld	r24, Z
     34c:	87 7f       	andi	r24, 0xF7	; 247
     34e:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     350:	e7 e1       	ldi	r30, 0x17	; 23
     352:	f4 e0       	ldi	r31, 0x04	; 4
     354:	80 81       	ld	r24, Z
     356:	88 7f       	andi	r24, 0xF8	; 248
     358:	84 60       	ori	r24, 0x04	; 4
     35a:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     35c:	80 81       	ld	r24, Z
     35e:	87 7f       	andi	r24, 0xF7	; 247
     360:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     362:	e0 e5       	ldi	r30, 0x50	; 80
     364:	f4 e0       	ldi	r31, 0x04	; 4
     366:	80 81       	ld	r24, Z
     368:	88 7f       	andi	r24, 0xF8	; 248
     36a:	84 60       	ori	r24, 0x04	; 4
     36c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     36e:	80 81       	ld	r24, Z
     370:	87 7f       	andi	r24, 0xF7	; 247
     372:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     374:	e1 e5       	ldi	r30, 0x51	; 81
     376:	f4 e0       	ldi	r31, 0x04	; 4
     378:	80 81       	ld	r24, Z
     37a:	88 7f       	andi	r24, 0xF8	; 248
     37c:	84 60       	ori	r24, 0x04	; 4
     37e:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     380:	80 81       	ld	r24, Z
     382:	87 7f       	andi	r24, 0xF7	; 247
     384:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     386:	e3 e5       	ldi	r30, 0x53	; 83
     388:	f4 e0       	ldi	r31, 0x04	; 4
     38a:	80 81       	ld	r24, Z
     38c:	88 7f       	andi	r24, 0xF8	; 248
     38e:	84 60       	ori	r24, 0x04	; 4
     390:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     392:	80 81       	ld	r24, Z
     394:	87 7f       	andi	r24, 0xF7	; 247
     396:	80 83       	st	Z, r24
	// Disable digital input buffer
	DEN4_PIN_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	DEN4_PIN_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
     398:	0e 94 39 01 	call	0x272	; 0x272 <ADC_0_init>
     39c:	08 95       	ret

0000039e <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     39e:	23 98       	cbi	0x04, 3	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     3a0:	e3 e3       	ldi	r30, 0x33	; 51
     3a2:	f4 e0       	ldi	r31, 0x04	; 4
     3a4:	80 81       	ld	r24, Z
     3a6:	87 7f       	andi	r24, 0xF7	; 247
     3a8:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     3aa:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     3ac:	2a 98       	cbi	0x05, 2	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     3ae:	0e 94 70 02 	call	0x4e0	; 0x4e0 <USART_0_init>
     3b2:	08 95       	ret

000003b4 <TIMER_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     3b4:	25 9a       	sbi	0x04, 5	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     3b6:	2d 98       	cbi	0x05, 5	; 5
	    // <false"> Low
	    // <true"> High
	    false);

	/* set the alternate pin mux */
	PORTMUX.CTRLC |= PORTMUX_TCA02_bm;
     3b8:	e0 e0       	ldi	r30, 0x00	; 0
     3ba:	f2 e0       	ldi	r31, 0x02	; 2
     3bc:	82 81       	ldd	r24, Z+2	; 0x02
     3be:	84 60       	ori	r24, 0x04	; 4
     3c0:	82 83       	std	Z+2, r24	; 0x02

	TIMER_0_init();
     3c2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <TIMER_0_init>
     3c6:	08 95       	ret

000003c8 <DIGITAL_GLUE_LOGIC_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     3c8:	24 9a       	sbi	0x04, 4	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     3ca:	2c 98       	cbi	0x05, 4	; 5
	    // <false"> Low
	    // <true"> High
	    false);

	/* set the alternate pin mux */
	PORTMUX.CTRLA |= PORTMUX_LUT0_bm;
     3cc:	e0 e0       	ldi	r30, 0x00	; 0
     3ce:	f2 e0       	ldi	r31, 0x02	; 2
     3d0:	80 81       	ld	r24, Z
     3d2:	80 61       	ori	r24, 0x10	; 16
     3d4:	80 83       	st	Z, r24

	DIGITAL_GLUE_LOGIC_0_init();
     3d6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIGITAL_GLUE_LOGIC_0_init>
     3da:	08 95       	ret

000003dc <SPI_0_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     3dc:	02 98       	cbi	0x00, 2	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     3de:	e2 e1       	ldi	r30, 0x12	; 18
     3e0:	f4 e0       	ldi	r31, 0x04	; 4
     3e2:	80 81       	ld	r24, Z
     3e4:	87 7f       	andi	r24, 0xF7	; 247
     3e6:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     3e8:	01 9a       	sbi	0x00, 1	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     3ea:	09 98       	cbi	0x01, 1	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     3ec:	03 9a       	sbi	0x00, 3	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     3ee:	0b 98       	cbi	0x01, 3	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     3f0:	04 9a       	sbi	0x00, 4	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     3f2:	0c 98       	cbi	0x01, 4	; 1
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
     3f4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SPI_0_init>
     3f8:	08 95       	ret

000003fa <DAC_0_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     3fa:	e6 e1       	ldi	r30, 0x16	; 22
     3fc:	f4 e0       	ldi	r31, 0x04	; 4
     3fe:	80 81       	ld	r24, Z
     400:	88 7f       	andi	r24, 0xF8	; 248
     402:	84 60       	ori	r24, 0x04	; 4
     404:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     406:	80 81       	ld	r24, Z
     408:	87 7f       	andi	r24, 0xF7	; 247
     40a:	80 83       	st	Z, r24
	// Disable digital input buffer
	AXON_PIN_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	AXON_PIN_set_pull_mode(PORT_PULL_OFF);

	DAC_0_init();
     40c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <DAC_0_init>
     410:	08 95       	ret

00000412 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     412:	0e 94 83 01 	call	0x306	; 0x306 <mcu_init>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     416:	26 98       	cbi	0x04, 6	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     418:	e6 e3       	ldi	r30, 0x36	; 54
     41a:	f4 e0       	ldi	r31, 0x04	; 4
     41c:	80 81       	ld	r24, Z
     41e:	87 7f       	andi	r24, 0xF7	; 247
     420:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     422:	27 98       	cbi	0x04, 7	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     424:	e7 e3       	ldi	r30, 0x37	; 55
     426:	f4 e0       	ldi	r31, 0x04	; 4
     428:	80 81       	ld	r24, Z
     42a:	87 7f       	andi	r24, 0xF7	; 247
     42c:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     42e:	42 98       	cbi	0x08, 2	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     430:	e2 e5       	ldi	r30, 0x52	; 82
     432:	f4 e0       	ldi	r31, 0x04	; 4
     434:	80 81       	ld	r24, Z
     436:	88 60       	ori	r24, 0x08	; 8
     438:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     43a:	45 9a       	sbi	0x08, 5	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     43c:	4d 9a       	sbi	0x09, 5	; 9
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    true);

	CLKCTRL_init();
     43e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CLKCTRL_init>

	RTC_0_init();
     442:	0e 94 3a 02 	call	0x474	; 0x474 <RTC_0_init>

	ADC_0_initialization();
     446:	0e 94 9f 01 	call	0x33e	; 0x33e <ADC_0_initialization>

	USART_0_initialization();
     44a:	0e 94 cf 01 	call	0x39e	; 0x39e <USART_0_initialization>

	TIMER_0_initialization();
     44e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <TIMER_0_initialization>

	DIGITAL_GLUE_LOGIC_0_initialization();
     452:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <DIGITAL_GLUE_LOGIC_0_initialization>

	SPI_0_initialization();
     456:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SPI_0_initialization>

	DAC_0_initialization();
     45a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <DAC_0_initialization>

	CPUINT_init();
     45e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CPUINT_init>

	SLPCTRL_init();
     462:	0e 94 56 02 	call	0x4ac	; 0x4ac <SLPCTRL_init>

	BOD_init();
     466:	0e 94 57 01 	call	0x2ae	; 0x2ae <BOD_init>
     46a:	08 95       	ret

0000046c <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     46c:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     46e:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     470:	40 83       	st	Z, r20
	ret                             // Return to caller
     472:	08 95       	ret

00000474 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     474:	e0 e4       	ldi	r30, 0x40	; 64
     476:	f1 e0       	ldi	r31, 0x01	; 1
     478:	81 81       	ldd	r24, Z+1	; 0x01
     47a:	81 11       	cpse	r24, r1
     47c:	fd cf       	rjmp	.-6      	; 0x478 <RTC_0_init+0x4>
	}

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	RTC.CNT = 0x20; /* Counter: 0x20 */
     47e:	e0 e4       	ldi	r30, 0x40	; 64
     480:	f1 e0       	ldi	r31, 0x01	; 1
     482:	80 e2       	ldi	r24, 0x20	; 32
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	80 87       	std	Z+8, r24	; 0x08
     488:	91 87       	std	Z+9, r25	; 0x09

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     48a:	81 e8       	ldi	r24, 0x81	; 129
     48c:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x20 / TIMESCALE; /* Period: 0x20 */
     48e:	80 e8       	ldi	r24, 0x80	; 128
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	82 87       	std	Z+10, r24	; 0x0a
     494:	93 87       	std	Z+11, r25	; 0x0b

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	RTC.DBGCTRL = 1 << RTC_DBGRUN_bp; /* Run in debug: enabled */
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	85 83       	std	Z+5, r24	; 0x05

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
     49a:	82 83       	std	Z+2, r24	; 0x02
	              | 1 << RTC_OVF_bp; /* Overflow Interrupt enable: enabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     49c:	81 89       	ldd	r24, Z+17	; 0x11
     49e:	81 11       	cpse	r24, r1
     4a0:	fd cf       	rjmp	.-6      	; 0x49c <RTC_0_init+0x28>
	}

	RTC.PITCTRLA = RTC_PERIOD_OFF_gc    /* Off */
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	08 95       	ret

000004ac <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	08 95       	ret

000004b0 <SPI_0_init>:
 * \return Initialization status
 */
int8_t SPI_0_init()
{

	SPI0.CTRLA = 0 << SPI_CLK2X_bp     /* Enable Double Speed: disabled */
     4b0:	e0 e2       	ldi	r30, 0x20	; 32
     4b2:	f8 e0       	ldi	r31, 0x08	; 8
     4b4:	83 e2       	ldi	r24, 0x23	; 35
     4b6:	80 83       	st	Z, r24
	             | 0 << SPI_DORD_bp    /* Data Order Setting: disabled */
	             | 1 << SPI_ENABLE_bp  /* Enable Module: enabled */
	             | 1 << SPI_MASTER_bp  /* SPI module in master mode */
	             | SPI_PRESC_DIV16_gc; /* System Clock / 16 */

	SPI0.CTRLB = 0 << SPI_BUFEN_bp   /* Buffer Mode Enable: disabled */
     4b8:	84 e0       	ldi	r24, 0x04	; 4
     4ba:	81 83       	std	Z+1, r24	; 0x01
	//		 | 0 << SPI_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << SPI_SSIE_bp /* Slave Select Trigger Interrupt Enable: disabled */
	//		 | 0 << SPI_TXCIE_bp; /* Transfer Complete Interrupt Enable: disabled */

	return 0;
}
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	08 95       	ret

000004c0 <TIMER_0_init>:

	// TCA0.SINGLE.CMP0 = 0x0; /* Compare Register 0: 0x0 */

	// TCA0.SINGLE.CMP1 = 0x0; /* Compare Register 1: 0x0 */

	TCA0.SINGLE.CMP2 = 0x4; /* Compare Register 2: 0x4 */
     4c0:	e0 e0       	ldi	r30, 0x00	; 0
     4c2:	fa e0       	ldi	r31, 0x0A	; 10
     4c4:	84 e0       	ldi	r24, 0x04	; 4
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	84 a7       	std	Z+44, r24	; 0x2c
     4ca:	95 a7       	std	Z+45, r25	; 0x2d

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
     4cc:	83 e4       	ldi	r24, 0x43	; 67
     4ce:	81 83       	std	Z+1, r24	; 0x01
	                    | 0 << TCA_SINGLE_CMP0EN_bp         /* Compare 0 Enable: disabled */
	                    | 0 << TCA_SINGLE_CMP1EN_bp         /* Compare 1 Enable: disabled */
	                    | 1 << TCA_SINGLE_CMP2EN_bp         /* Compare 2 Enable: enabled */
	                    | TCA_SINGLE_WGMODE_SINGLESLOPE_gc; /*  */

	TCA0.SINGLE.CTRLC = 0 << TCA_SINGLE_CMP0OV_bp    /* Compare 0 Waveform Output Value: disabled */
     4d0:	84 e0       	ldi	r24, 0x04	; 4
     4d2:	82 83       	std	Z+2, r24	; 0x02
	// TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp /* Compare 0 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	TCA0.SINGLE.PER = 0x7; /* Period: 0x7 */
     4d4:	87 e0       	ldi	r24, 0x07	; 7
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	86 a3       	std	Z+38, r24	; 0x26
     4da:	97 a3       	std	Z+39, r25	; 0x27

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp; /* Module Enable: disabled */

	return 0;
}
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	08 95       	ret

000004e0 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART0.STATUS & USART_RXCIF_bm))
		;
	return USART0.RXDATAL;
}
     4e0:	e0 e0       	ldi	r30, 0x00	; 0
     4e2:	f8 e0       	ldi	r31, 0x08	; 8
     4e4:	8b e5       	ldi	r24, 0x5B	; 91
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	80 87       	std	Z+8, r24	; 0x08
     4ea:	91 87       	std	Z+9, r25	; 0x09
     4ec:	80 ec       	ldi	r24, 0xC0	; 192
     4ee:	86 83       	std	Z+6, r24	; 0x06
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	98 e3       	ldi	r25, 0x38	; 56
     4f4:	80 93 68 38 	sts	0x3868, r24	; 0x803868 <__iob+0x2>
     4f8:	90 93 69 38 	sts	0x3869, r25	; 0x803869 <__iob+0x3>
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	08 95       	ret

00000500 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
     500:	e0 e0       	ldi	r30, 0x00	; 0
     502:	f8 e0       	ldi	r31, 0x08	; 8
     504:	94 81       	ldd	r25, Z+4	; 0x04
     506:	95 ff       	sbrs	r25, 5
     508:	fd cf       	rjmp	.-6      	; 0x504 <USART_0_write+0x4>
		;
	USART0.TXDATAL = data;
     50a:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     50e:	08 95       	ret

00000510 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
     510:	0e 94 80 02 	call	0x500	; 0x500 <USART_0_write>
	return 0;
}
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	08 95       	ret

0000051a <tinyAxon_add_pulse>:
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
	{
		if(pulse_queue[i] == 0){
     51a:	20 91 17 38 	lds	r18, 0x3817	; 0x803817 <pulse_queue>
     51e:	30 91 18 38 	lds	r19, 0x3818	; 0x803818 <pulse_queue+0x1>
     522:	23 2b       	or	r18, r19
     524:	51 f0       	breq	.+20     	; 0x53a <tinyAxon_add_pulse+0x20>
     526:	e9 e1       	ldi	r30, 0x19	; 25
     528:	f8 e3       	ldi	r31, 0x38	; 56
     52a:	21 e0       	ldi	r18, 0x01	; 1
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	b9 01       	movw	r22, r18
     530:	41 91       	ld	r20, Z+
     532:	51 91       	ld	r21, Z+
     534:	45 2b       	or	r20, r21
     536:	81 f4       	brne	.+32     	; 0x558 <tinyAxon_add_pulse+0x3e>
     538:	02 c0       	rjmp	.+4      	; 0x53e <tinyAxon_add_pulse+0x24>
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	70 e0       	ldi	r23, 0x00	; 0
			pulse_queue[i] = new_pulse;
     53e:	66 0f       	add	r22, r22
     540:	77 1f       	adc	r23, r23
     542:	fb 01       	movw	r30, r22
     544:	e9 5e       	subi	r30, 0xE9	; 233
     546:	f7 4c       	sbci	r31, 0xC7	; 199
     548:	80 83       	st	Z, r24
     54a:	91 83       	std	Z+1, r25	; 0x01
			pulses_in_queue++;
     54c:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <pulses_in_queue>
     550:	8f 5f       	subi	r24, 0xFF	; 255
     552:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <pulses_in_queue>
			// We return so we only ever add one
			break;
     556:	08 95       	ret
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
*/
static void tinyAxon_add_pulse(uint16_t new_pulse)
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     55c:	2a 30       	cpi	r18, 0x0A	; 10
     55e:	31 05       	cpc	r19, r1
     560:	31 f7       	brne	.-52     	; 0x52e <tinyAxon_add_pulse+0x14>
     562:	08 95       	ret

00000564 <find_newest_pulse>:
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
     564:	40 91 17 38 	lds	r20, 0x3817	; 0x803817 <pulse_queue>
     568:	50 91 18 38 	lds	r21, 0x3818	; 0x803818 <pulse_queue+0x1>
     56c:	e9 e1       	ldi	r30, 0x19	; 25
     56e:	f8 e3       	ldi	r31, 0x38	; 56
	
// This function will be used with pulse_queue to find the newest pulse
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
     570:	80 e0       	ldi	r24, 0x00	; 0
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     572:	91 e0       	ldi	r25, 0x01	; 1
		if (pulse_queue[current_index] > max) {
     574:	21 91       	ld	r18, Z+
     576:	31 91       	ld	r19, Z+
     578:	42 17       	cp	r20, r18
     57a:	53 07       	cpc	r21, r19
     57c:	10 f4       	brcc	.+4      	; 0x582 <find_newest_pulse+0x1e>
     57e:	89 2f       	mov	r24, r25
			return_index = current_index;
			max = pulse_queue[current_index];
     580:	a9 01       	movw	r20, r18
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     582:	9f 5f       	subi	r25, 0xFF	; 255
     584:	9a 30       	cpi	r25, 0x0A	; 10
     586:	b1 f7       	brne	.-20     	; 0x574 <find_newest_pulse+0x10>
			return_index = current_index;
			max = pulse_queue[current_index];
		}
	}
	return return_index;
}
     588:	08 95       	ret

0000058a <tinyAxon_stop_sending_pulse>:
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
}

void tinyAxon_stop_sending_pulse()
{
	DAC_0_set_output(NO_SIGNAL_OUTPUT);
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 80 01 	call	0x300	; 0x300 <DAC_0_set_output>
	axonOutputValue=NO_SIGNAL_OUTPUT;
     592:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <__data_end>
     596:	08 95       	ret

00000598 <tinyAxon_remove_pulse>:

/*
If the potential is very low, we want to try to remove a pulse.
*/
bool tinyAxon_remove_pulse(void)
{
     598:	cf 93       	push	r28
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
     59a:	c0 91 2b 38 	lds	r28, 0x382B	; 0x80382b <pulses_in_queue>
     59e:	cc 23       	and	r28, r28
     5a0:	c9 f0       	breq	.+50     	; 0x5d4 <tinyAxon_remove_pulse+0x3c>
		//There was no pulse to remove.
		return false;
	}
	else{
		// If we are to remove a pulse, we want to remove the one that will fire last.
		uint8_t pulse_index = find_newest_pulse();
     5a2:	0e 94 b2 02 	call	0x564	; 0x564 <find_newest_pulse>
		uint16_t newest_pulse = pulse_queue[pulse_index];
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	fc 01       	movw	r30, r24
     5aa:	ee 0f       	add	r30, r30
     5ac:	ff 1f       	adc	r31, r31
     5ae:	e9 5e       	subi	r30, 0xE9	; 233
     5b0:	f7 4c       	sbci	r31, 0xC7	; 199
	
		// Now we want to check if the pulse is too far away to be affected by the low potential, or close enough that we decide to remove it.
		// (When we say that the pulse is too far away, it refers to the biological process of how the potential spreads from Dendrites to axon).
		if(newest_pulse > PULSE_NO_RETURN_TIME){
     5b2:	20 81       	ld	r18, Z
     5b4:	31 81       	ldd	r19, Z+1	; 0x01
     5b6:	2d 33       	cpi	r18, 0x3D	; 61
     5b8:	31 05       	cpc	r19, r1
     5ba:	70 f0       	brcs	.+28     	; 0x5d8 <tinyAxon_remove_pulse+0x40>
			// We decided to remove the pulse
			pulse_queue[pulse_index] = 0;
     5bc:	88 0f       	add	r24, r24
     5be:	99 1f       	adc	r25, r25
     5c0:	fc 01       	movw	r30, r24
     5c2:	e9 5e       	subi	r30, 0xE9	; 233
     5c4:	f7 4c       	sbci	r31, 0xC7	; 199
     5c6:	10 82       	st	Z, r1
     5c8:	11 82       	std	Z+1, r1	; 0x01
			pulses_in_queue--;
     5ca:	c1 50       	subi	r28, 0x01	; 1
     5cc:	c0 93 2b 38 	sts	0x382B, r28	; 0x80382b <pulses_in_queue>
			return true;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	03 c0       	rjmp	.+6      	; 0x5da <tinyAxon_remove_pulse+0x42>
bool tinyAxon_remove_pulse(void)
{
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
		//There was no pulse to remove.
		return false;
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <tinyAxon_remove_pulse+0x42>
			pulses_in_queue--;
			return true;
		}
		// Here we have found that there is a pulse queued, but it is old enough to let pass anyway, so now we need to put it back into the queue.
		else{
			return false;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <tinyAxon_update_potential>:
/*
Decides whether or not the axon should fire
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
     5de:	cf 92       	push	r12
     5e0:	df 92       	push	r13
     5e2:	ef 92       	push	r14
     5e4:	ff 92       	push	r15
     5e6:	6b 01       	movw	r12, r22
     5e8:	7c 01       	movw	r14, r24
	//While the neuron has enough potential to fire, we want to fire more
	while (potential >= THRESHOLD_POTENTIAL)
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	48 ec       	ldi	r20, 0xC8	; 200
     5f0:	51 e4       	ldi	r21, 0x41	; 65
     5f2:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     5f6:	88 23       	and	r24, r24
     5f8:	bc f1       	brlt	.+110    	; 0x668 <tinyAxon_update_potential+0x8a>
	{
		// We have to check if there are already queued pulses, so that the frequency never exceeds FIRE_DELAY
		if(pulses_in_queue>0){
     5fa:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <pulses_in_queue>
     5fe:	88 23       	and	r24, r24
     600:	b1 f0       	breq	.+44     	; 0x62e <tinyAxon_update_potential+0x50>
			uint16_t newest_pulse = pulse_queue[find_newest_pulse()];
     602:	0e 94 b2 02 	call	0x564	; 0x564 <find_newest_pulse>
     606:	e8 2f       	mov	r30, r24
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	ee 0f       	add	r30, r30
     60c:	ff 1f       	adc	r31, r31
     60e:	e9 5e       	subi	r30, 0xE9	; 233
     610:	f7 4c       	sbci	r31, 0xC7	; 199
			
			// There is at least one pulse in the queue, and it is so close, that we need to offset the new pulse, so that we keep at least
			// one FIRE_DELAY between each pulse
			if(newest_pulse + FIRE_DELAY > TRAVLE_DELAY){
     612:	80 81       	ld	r24, Z
     614:	91 81       	ldd	r25, Z+1	; 0x01
     616:	0a 96       	adiw	r24, 0x0a	; 10
     618:	85 36       	cpi	r24, 0x65	; 101
     61a:	91 05       	cpc	r25, r1
     61c:	18 f0       	brcs	.+6      	; 0x624 <tinyAxon_update_potential+0x46>
				tinyAxon_add_pulse(newest_pulse + FIRE_DELAY);
     61e:	0e 94 8d 02 	call	0x51a	; 0x51a <tinyAxon_add_pulse>
     622:	09 c0       	rjmp	.+18     	; 0x636 <tinyAxon_update_potential+0x58>
			}
			// There is at least one pulse in the queue, but it's far enough away to ignore
			else{
				tinyAxon_add_pulse(TRAVLE_DELAY);
     624:	84 e6       	ldi	r24, 0x64	; 100
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 8d 02 	call	0x51a	; 0x51a <tinyAxon_add_pulse>
     62c:	04 c0       	rjmp	.+8      	; 0x636 <tinyAxon_update_potential+0x58>
			}
		}
		// There are no pulses in the queue, so we add a pulse as normal
		else{
			tinyAxon_add_pulse(TRAVLE_DELAY);		
     62e:	84 e6       	ldi	r24, 0x64	; 100
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 8d 02 	call	0x51a	; 0x51a <tinyAxon_add_pulse>
		}
		
		potential += POSTFIRE_POTENTIAL_REACTION; // This is usually defined as a negative value, don't be confused by the +=
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	48 ec       	ldi	r20, 0xC8	; 200
     63c:	51 e4       	ldi	r21, 0x41	; 65
     63e:	c7 01       	movw	r24, r14
     640:	b6 01       	movw	r22, r12
     642:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__subsf3>
     646:	6b 01       	movw	r12, r22
     648:	7c 01       	movw	r14, r24
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     64a:	44 e0       	ldi	r20, 0x04	; 4
     64c:	63 e0       	ldi	r22, 0x03	; 3
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	0e 94 d5 05 	call	0xbaa	; 0xbaa <tinyLED_set_color_mode>
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
	//While the neuron has enough potential to fire, we want to fire more
	while (potential >= THRESHOLD_POTENTIAL)
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	48 ec       	ldi	r20, 0xC8	; 200
     65a:	51 e4       	ldi	r21, 0x41	; 65
     65c:	c7 01       	movw	r24, r14
     65e:	b6 01       	movw	r22, r12
     660:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     664:	88 23       	and	r24, r24
     666:	4c f6       	brge	.-110    	; 0x5fa <tinyAxon_update_potential+0x1c>
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
	}
	
	// If the neuron has a very low potential, we want to remove a pulse from the queue (if there is one)
	if(potential < -THRESHOLD_POTENTIAL && pulses_in_queue > 0) // Perhaps this should be a separate variable? For now, we will just simply use -THRESHOLD_POTENTIAL
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	48 ec       	ldi	r20, 0xC8	; 200
     66e:	51 ec       	ldi	r21, 0xC1	; 193
     670:	c7 01       	movw	r24, r14
     672:	b6 01       	movw	r22, r12
     674:	0e 94 41 09 	call	0x1282	; 0x1282 <__cmpsf2>
     678:	88 23       	and	r24, r24
     67a:	0c f0       	brlt	.+2      	; 0x67e <tinyAxon_update_potential+0xa0>
     67c:	46 c0       	rjmp	.+140    	; 0x70a <tinyAxon_update_potential+0x12c>
     67e:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <pulses_in_queue>
     682:	88 23       	and	r24, r24
     684:	11 f1       	breq	.+68     	; 0x6ca <tinyAxon_update_potential+0xec>
	{
		// The neurons potential is low enough to attempt to remove a queued fire (Fire less)
		if(tinyAxon_remove_pulse())
     686:	0e 94 cc 02 	call	0x598	; 0x598 <tinyAxon_remove_pulse>
     68a:	88 23       	and	r24, r24
     68c:	f1 f1       	breq	.+124    	; 0x70a <tinyAxon_update_potential+0x12c>
		{
			// The potential has evened out a bit
			potential += THRESHOLD_POTENTIAL;
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	48 ec       	ldi	r20, 0xC8	; 200
     694:	51 e4       	ldi	r21, 0x41	; 65
     696:	c7 01       	movw	r24, r14
     698:	b6 01       	movw	r22, r12
     69a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__addsf3>
     69e:	6b 01       	movw	r12, r22
     6a0:	7c 01       	movw	r14, r24
     6a2:	33 c0       	rjmp	.+102    	; 0x70a <tinyAxon_update_potential+0x12c>
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
		{
			if(pulse_queue[i] != 0){
     6a4:	80 81       	ld	r24, Z
     6a6:	91 81       	ldd	r25, Z+1	; 0x01
     6a8:	00 97       	sbiw	r24, 0x00	; 0
     6aa:	39 f0       	breq	.+14     	; 0x6ba <tinyAxon_update_potential+0xdc>
				pulse_queue[i]--;
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	80 83       	st	Z, r24
     6b0:	91 83       	std	Z+1, r25	; 0x01
				
				// If the time went from 1 to 0, we fire the axon
				if(pulse_queue[i] == 0){
     6b2:	89 2b       	or	r24, r25
     6b4:	11 f4       	brne	.+4      	; 0x6ba <tinyAxon_update_potential+0xdc>
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
	pulses_in_queue--;
     6b6:	41 50       	subi	r20, 0x01	; 1
Function to set firing.
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
     6b8:	51 e0       	ldi	r21, 0x01	; 1
     6ba:	32 96       	adiw	r30, 0x02	; 2
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     6bc:	e2 17       	cp	r30, r18
     6be:	f3 07       	cpc	r31, r19
     6c0:	89 f7       	brne	.-30     	; 0x6a4 <tinyAxon_update_potential+0xc6>
     6c2:	50 93 2c 38 	sts	0x382C, r21	; 0x80382c <tinyAxon_should_fire>
     6c6:	40 93 2b 38 	sts	0x382B, r20	; 0x80382b <pulses_in_queue>
The function should set the DAC to fire for two
update cycles once the pulse flag is set high.
*/
static void tinyAxon_update_pulse_transmitter(void)
{
	if (tinyAxon_should_fire)
     6ca:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <tinyAxon_should_fire>
     6ce:	88 23       	and	r24, r24
     6d0:	91 f0       	breq	.+36     	; 0x6f6 <tinyAxon_update_potential+0x118>
	{
		tinyAxon_should_fire = false;
     6d2:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <tinyAxon_should_fire>
		tinyAxon_has_fired = true;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <tinyAxon_has_fired>
*/
static void tinyAxon_start_sending_pulse()
{
	if (NEURONTYPE == EXCITATORY_NEURON)
	{
		DAC_0_set_output(EXCITATORY_NEURON_OUTPUT);
     6dc:	82 ed       	ldi	r24, 0xD2	; 210
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 80 01 	call	0x300	; 0x300 <DAC_0_set_output>
		axonOutputValue=EXCITATORY_NEURON_OUTPUT;
     6e4:	82 ed       	ldi	r24, 0xD2	; 210
     6e6:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <__data_end>
	{
		DAC_0_set_output(INHIBITORY_NEURON_OUTPUT);
		axonOutputValue=INHIBITORY_NEURON_OUTPUT;
	}
	
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
     6ea:	44 e0       	ldi	r20, 0x04	; 4
     6ec:	64 e0       	ldi	r22, 0x04	; 4
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	0e 94 d5 05 	call	0xbaa	; 0xbaa <tinyLED_set_color_mode>
     6f4:	15 c0       	rjmp	.+42     	; 0x720 <tinyAxon_update_potential+0x142>
		tinyAxon_should_fire = false;
		tinyAxon_has_fired = true;
		
		tinyAxon_start_sending_pulse();
	}
	else if (tinyAxon_has_fired)
     6f6:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <tinyAxon_has_fired>
     6fa:	88 23       	and	r24, r24
     6fc:	19 f0       	breq	.+6      	; 0x704 <tinyAxon_update_potential+0x126>
	{
		tinyAxon_has_fired = false;
     6fe:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <tinyAxon_has_fired>
     702:	0e c0       	rjmp	.+28     	; 0x720 <tinyAxon_update_potential+0x142>
	}
	else if (!tinyAxon_has_fired && !tinyAxon_should_fire)
	{
		tinyAxon_stop_sending_pulse();
     704:	0e 94 c5 02 	call	0x58a	; 0x58a <tinyAxon_stop_sending_pulse>
     708:	0b c0       	rjmp	.+22     	; 0x720 <tinyAxon_update_potential+0x142>
			potential += THRESHOLD_POTENTIAL;
		}
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
     70a:	40 91 2b 38 	lds	r20, 0x382B	; 0x80382b <pulses_in_queue>
     70e:	44 23       	and	r20, r20
     710:	e1 f2       	breq	.-72     	; 0x6ca <tinyAxon_update_potential+0xec>
     712:	50 91 2c 38 	lds	r21, 0x382C	; 0x80382c <tinyAxon_should_fire>
     716:	e7 e1       	ldi	r30, 0x17	; 23
     718:	f8 e3       	ldi	r31, 0x38	; 56
     71a:	2b e2       	ldi	r18, 0x2B	; 43
     71c:	38 e3       	ldi	r19, 0x38	; 56
     71e:	c2 cf       	rjmp	.-124    	; 0x6a4 <tinyAxon_update_potential+0xc6>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     720:	86 b1       	in	r24, 0x06	; 6
	// We need to check if the axon is connected to a charger. We do this by checking the AXON_CHECK_PIN. If it is hight while the axon is not firing, it must be connected to a charger
	if(AXON_CHECK_PIN_get_level() && !tinyAxon_should_fire){
		//tinyCharge_set_charging_mode(true);
	}
	
	tinyDebugger_send_uint8("Axon", axonOutputValue);
     722:	60 91 16 38 	lds	r22, 0x3816	; 0x803816 <__data_end>
     726:	85 ed       	ldi	r24, 0xD5	; 213
     728:	93 ea       	ldi	r25, 0xA3	; 163
     72a:	0e 94 4b 04 	call	0x896	; 0x896 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("Pulses", pulses_in_queue);
     72e:	60 91 2b 38 	lds	r22, 0x382B	; 0x80382b <pulses_in_queue>
     732:	8a ed       	ldi	r24, 0xDA	; 218
     734:	93 ea       	ldi	r25, 0xA3	; 163
     736:	0e 94 4b 04 	call	0x896	; 0x896 <tinyDebugger_send_uint8>
	
	return potential;
}
     73a:	c7 01       	movw	r24, r14
     73c:	b6 01       	movw	r22, r12
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	08 95       	ret

00000748 <tinyButton_update>:
/*
If the button has been let go, we change button_press to true. This only lasts one cycle, before it is set to false again.
If the button is held down for longer than PULSEMODE_BUTTON_PRESS_TIME, we toggle the pulse mode state.
*/
void tinyButton_update(void)
{
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
	button_press = false;
     750:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <button_press>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return VPORTC.IN & (1 << pin);
     754:	8a b1       	in	r24, 0x0a	; 10
	_Bool button_is_pushed_down = !BUTTON_PIN_get_level(); // The digital port will be read as low if the button is pushed down.
     756:	d1 e0       	ldi	r29, 0x01	; 1
     758:	c8 2f       	mov	r28, r24
     75a:	c4 70       	andi	r28, 0x04	; 4
     75c:	82 fd       	sbrc	r24, 2
     75e:	d0 e0       	ldi	r29, 0x00	; 0

	if (button_is_pushed_down && !button_was_pushed_down)
     760:	c1 11       	cpse	r28, r1
     762:	36 c0       	rjmp	.+108    	; 0x7d0 <tinyButton_update+0x88>
     764:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <button_was_pushed_down>
     768:	81 11       	cpse	r24, r1
     76a:	0e c0       	rjmp	.+28     	; 0x788 <tinyButton_update+0x40>
	{
		tinyButton_start_time = tinyTime_now();
     76c:	0e 94 cb 08 	call	0x1196	; 0x1196 <tinyTime_now>
     770:	60 93 2e 38 	sts	0x382E, r22	; 0x80382e <tinyButton_start_time>
     774:	70 93 2f 38 	sts	0x382F, r23	; 0x80382f <tinyButton_start_time+0x1>
     778:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <tinyButton_start_time+0x2>
     77c:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <tinyButton_start_time+0x3>
	}
	if (button_is_pushed_down && button_was_pushed_down)
     780:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <button_was_pushed_down>
     784:	88 23       	and	r24, r24
     786:	69 f1       	breq	.+90     	; 0x7e2 <tinyButton_update+0x9a>
	{
		if ((tinyTime_now() - tinyButton_start_time) > PULSEMODE_BUTTON_PRESS_TIME)
     788:	0e 94 cb 08 	call	0x1196	; 0x1196 <tinyTime_now>
     78c:	00 91 2e 38 	lds	r16, 0x382E	; 0x80382e <tinyButton_start_time>
     790:	10 91 2f 38 	lds	r17, 0x382F	; 0x80382f <tinyButton_start_time+0x1>
     794:	20 91 30 38 	lds	r18, 0x3830	; 0x803830 <tinyButton_start_time+0x2>
     798:	30 91 31 38 	lds	r19, 0x3831	; 0x803831 <tinyButton_start_time+0x3>
     79c:	60 1b       	sub	r22, r16
     79e:	71 0b       	sbc	r23, r17
     7a0:	82 0b       	sbc	r24, r18
     7a2:	93 0b       	sbc	r25, r19
     7a4:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	48 ec       	ldi	r20, 0xC8	; 200
     7ae:	52 e4       	ldi	r21, 0x42	; 66
     7b0:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     7b4:	18 16       	cp	r1, r24
     7b6:	64 f4       	brge	.+24     	; 0x7d0 <tinyButton_update+0x88>
		{
			tinyPulse_toggle_pulse_mode();
     7b8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <tinyPulse_toggle_pulse_mode>
			tinyButton_start_time = tinyTime_now();
     7bc:	0e 94 cb 08 	call	0x1196	; 0x1196 <tinyTime_now>
     7c0:	60 93 2e 38 	sts	0x382E, r22	; 0x80382e <tinyButton_start_time>
     7c4:	70 93 2f 38 	sts	0x382F, r23	; 0x80382f <tinyButton_start_time+0x1>
     7c8:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <tinyButton_start_time+0x2>
     7cc:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <tinyButton_start_time+0x3>
		}
	}
	if (!button_is_pushed_down && button_was_pushed_down)
     7d0:	cc 23       	and	r28, r28
     7d2:	39 f0       	breq	.+14     	; 0x7e2 <tinyButton_update+0x9a>
     7d4:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <button_was_pushed_down>
     7d8:	88 23       	and	r24, r24
     7da:	19 f0       	breq	.+6      	; 0x7e2 <tinyButton_update+0x9a>
	{
		button_press = true;
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <button_press>
	}
	button_was_pushed_down = button_is_pushed_down;
     7e2:	d0 93 33 38 	sts	0x3833, r29	; 0x803833 <button_was_pushed_down>
}
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	08 95       	ret

000007f0 <tinyButton_update_potential>:

double tinyButton_update_potential(double potential){
	if(button_press){
     7f0:	20 91 32 38 	lds	r18, 0x3832	; 0x803832 <button_press>
     7f4:	22 23       	and	r18, r18
     7f6:	31 f0       	breq	.+12     	; 0x804 <tinyButton_update_potential+0x14>
		potential += BUTTON_PRESS_REACTION;
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	48 ec       	ldi	r20, 0xC8	; 200
     7fe:	51 e4       	ldi	r21, 0x41	; 65
     800:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__addsf3>
	}
	return potential;
}
     804:	08 95       	ret

00000806 <tinyCharge_is_connected_to_charger>:

_Bool connected_to_charger;

_Bool tinyCharge_is_connected_to_charger(){
	return connected_to_charger;
}
     806:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     80a:	08 95       	ret

0000080c <tinyCharge_is_fully_charged>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     80c:	86 b1       	in	r24, 0x06	; 6

_Bool tinyCharge_is_fully_charged(){
	return CHARGING_STATUS_PIN_get_level();
}
     80e:	86 fb       	bst	r24, 6
     810:	88 27       	eor	r24, r24
     812:	80 f9       	bld	r24, 0
     814:	08 95       	ret

00000816 <tinyCharge_switch_mode>:
	}
}

void tinyCharge_switch_mode(){
	
	if(connected_to_charger){
     816:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     81a:	88 23       	and	r24, r24
     81c:	61 f0       	breq	.+24     	; 0x836 <tinyCharge_switch_mode+0x20>
		// Switch from main to charging mode
		
		// Set LED
		tinyLED_set_color(OUT_LED, OFF);
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	0e 94 c4 05 	call	0xb88	; 0xb88 <tinyLED_set_color>
		tinyLED_set_color_mode(INN_LED, CHARGING_COLOR, SWING);
     826:	42 e0       	ldi	r20, 0x02	; 2
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <tinyLED_set_color_mode>
		
		// Stop axon from firing
		// (There is a small chance that the neuron is put into charging mode as it is firing. The axon is then never told to stop firing)
		tinyAxon_stop_sending_pulse();
     830:	0e 94 c5 02 	call	0x58a	; 0x58a <tinyAxon_stop_sending_pulse>
     834:	08 95       	ret
	}
	else{
		// Switch from charge to main mode
		
		// Set LED
		tinyLED_set_color(OUT_LED, OFF);
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	0e 94 c4 05 	call	0xb88	; 0xb88 <tinyLED_set_color>
		tinyLED_set_color(INN_LED, OFF);
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	0e 94 c4 05 	call	0xb88	; 0xb88 <tinyLED_set_color>
     846:	08 95       	ret

00000848 <tinyCharge_set_charging_mode>:
_Bool tinyCharge_is_fully_charged(){
	return CHARGING_STATUS_PIN_get_level();
}

void tinyCharge_set_charging_mode(_Bool charging_status){
	if(charging_status != connected_to_charger){
     848:	90 91 59 38 	lds	r25, 0x3859	; 0x803859 <connected_to_charger>
     84c:	98 17       	cp	r25, r24
     84e:	21 f0       	breq	.+8      	; 0x858 <tinyCharge_set_charging_mode+0x10>
		connected_to_charger = charging_status;
     850:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <connected_to_charger>
		tinyCharge_switch_mode();
     854:	0e 94 0b 04 	call	0x816	; 0x816 <tinyCharge_switch_mode>
     858:	08 95       	ret

0000085a <tinyCharge_set_transistors>:
	}
}


void tinyCharge_set_transistors(){
	if(connected_to_charger){
     85a:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     85e:	88 23       	and	r24, r24
     860:	11 f0       	breq	.+4      	; 0x866 <tinyCharge_set_transistors+0xc>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     862:	4d 98       	cbi	0x09, 5	; 9
     864:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     866:	4d 9a       	sbi	0x09, 5	; 9
     868:	08 95       	ret

0000086a <tinyDebugger_send_uint32>:
		printf("%s:%5s\t", name, number);
	}
}
void tinyDebugger_send_string(const char* name, char * value){
	if(DEBUGGING && tinyDebugger_send_message){
		printf("%s:%s\t", name, value);
     86a:	20 91 0e 38 	lds	r18, 0x380E	; 0x80380e <tinyDebugger_send_message>
     86e:	22 23       	and	r18, r18
     870:	89 f0       	breq	.+34     	; 0x894 <tinyDebugger_send_uint32+0x2a>
     872:	7f 93       	push	r23
     874:	6f 93       	push	r22
     876:	5f 93       	push	r21
     878:	4f 93       	push	r20
     87a:	9f 93       	push	r25
     87c:	8f 93       	push	r24
     87e:	89 ee       	ldi	r24, 0xE9	; 233
     880:	93 ea       	ldi	r25, 0xA3	; 163
     882:	9f 93       	push	r25
     884:	8f 93       	push	r24
     886:	0e 94 ac 0c 	call	0x1958	; 0x1958 <printf>
     88a:	8d b7       	in	r24, 0x3d	; 61
     88c:	9e b7       	in	r25, 0x3e	; 62
     88e:	08 96       	adiw	r24, 0x08	; 8
     890:	8d bf       	out	0x3d, r24	; 61
     892:	9e bf       	out	0x3e, r25	; 62
     894:	08 95       	ret

00000896 <tinyDebugger_send_uint8>:
     896:	20 91 0e 38 	lds	r18, 0x380E	; 0x80380e <tinyDebugger_send_message>
     89a:	22 23       	and	r18, r18
     89c:	81 f0       	breq	.+32     	; 0x8be <tinyDebugger_send_uint8+0x28>
     89e:	1f 92       	push	r1
     8a0:	6f 93       	push	r22
     8a2:	9f 93       	push	r25
     8a4:	8f 93       	push	r24
     8a6:	82 ef       	ldi	r24, 0xF2	; 242
     8a8:	93 ea       	ldi	r25, 0xA3	; 163
     8aa:	9f 93       	push	r25
     8ac:	8f 93       	push	r24
     8ae:	0e 94 ac 0c 	call	0x1958	; 0x1958 <printf>
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	08 95       	ret

000008c0 <tinyDebugger_send_double>:
     8c0:	cf 92       	push	r12
     8c2:	df 92       	push	r13
     8c4:	ef 92       	push	r14
     8c6:	ff 92       	push	r15
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	64 97       	sbiw	r28, 0x14	; 20
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	38 2f       	mov	r19, r24
     8dc:	e9 2f       	mov	r30, r25
     8de:	20 91 0e 38 	lds	r18, 0x380E	; 0x80380e <tinyDebugger_send_message>
     8e2:	22 23       	and	r18, r18
     8e4:	e9 f0       	breq	.+58     	; 0x920 <tinyDebugger_send_double+0x60>
     8e6:	cb 01       	movw	r24, r22
     8e8:	ba 01       	movw	r22, r20
     8ea:	ee 2e       	mov	r14, r30
     8ec:	f3 2e       	mov	r15, r19
     8ee:	9e 01       	movw	r18, r28
     8f0:	2f 5f       	subi	r18, 0xFF	; 255
     8f2:	3f 4f       	sbci	r19, 0xFF	; 255
     8f4:	69 01       	movw	r12, r18
     8f6:	89 01       	movw	r16, r18
     8f8:	21 e0       	ldi	r18, 0x01	; 1
     8fa:	41 e0       	ldi	r20, 0x01	; 1
     8fc:	0e 94 8c 0c 	call	0x1918	; 0x1918 <dtostrf>
     900:	df 92       	push	r13
     902:	cf 92       	push	r12
     904:	ef 92       	push	r14
     906:	ff 92       	push	r15
     908:	8a ef       	ldi	r24, 0xFA	; 250
     90a:	93 ea       	ldi	r25, 0xA3	; 163
     90c:	9f 93       	push	r25
     90e:	8f 93       	push	r24
     910:	0e 94 ac 0c 	call	0x1958	; 0x1958 <printf>
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	64 96       	adiw	r28, 0x14	; 20
     922:	cd bf       	out	0x3d, r28	; 61
     924:	de bf       	out	0x3e, r29	; 62
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	df 90       	pop	r13
     934:	cf 90       	pop	r12
     936:	08 95       	ret

00000938 <tinyDebugger_end_line>:
	}
}
void tinyDebugger_end_line(){
	if(DEBUGGING && tinyDebugger_send_message){
     938:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <tinyDebugger_send_message>
     93c:	88 23       	and	r24, r24
     93e:	21 f0       	breq	.+8      	; 0x948 <tinyDebugger_end_line+0x10>
		printf("\r\n");
     940:	89 e0       	ldi	r24, 0x09	; 9
     942:	94 ea       	ldi	r25, 0xA4	; 164
     944:	0e 94 c2 0c 	call	0x1984	; 0x1984 <puts>
	}
	tinyDebugger_print_attempts++;
     948:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <tinyDebugger_print_attempts>
     94c:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <tinyDebugger_print_attempts+0x1>
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <tinyDebugger_print_attempts>
     956:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <tinyDebugger_print_attempts+0x1>
	tinyDebugger_send_message = tinyDebugger_print_attempts%DEBUG_EVERY == 0;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <tinyDebugger_send_message>
     960:	08 95       	ret

00000962 <tinyDendrite_update_signals>:
/*
This function converts the 8 bit value from the ADC into one of the signal types defined in DendriteSignal
We also update the charging state
*/
void tinyDendrite_update_signals(void)
{
     962:	af 92       	push	r10
     964:	bf 92       	push	r11
     966:	cf 92       	push	r12
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	cf e0       	ldi	r28, 0x0F	; 15
     978:	d8 e3       	ldi	r29, 0x38	; 56
     97a:	00 e4       	ldi	r16, 0x40	; 64
     97c:	18 e3       	ldi	r17, 0x38	; 56
     97e:	0f 2e       	mov	r0, r31
     980:	f4 e1       	ldi	r31, 0x14	; 20
     982:	cf 2e       	mov	r12, r31
     984:	f8 e3       	ldi	r31, 0x38	; 56
     986:	df 2e       	mov	r13, r31
     988:	f0 2d       	mov	r31, r0
     98a:	78 01       	movw	r14, r16
*/
static void tinyDendrite_read_signals(void)
{
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_values[i] = ADC_0_get_conversion(Dendrite_ports[i]);
     98c:	89 91       	ld	r24, Y+
     98e:	0e 94 45 01 	call	0x28a	; 0x28a <ADC_0_get_conversion>
     992:	d7 01       	movw	r26, r14
     994:	8d 93       	st	X+, r24
     996:	7d 01       	movw	r14, r26
/*
This function reads the voltage at the Dendrite inputs with the ADC
*/
static void tinyDendrite_read_signals(void)
{
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
     998:	cc 15       	cp	r28, r12
     99a:	dd 05       	cpc	r29, r13
     99c:	b9 f7       	brne	.-18     	; 0x98c <tinyDendrite_update_signals+0x2a>
	{
		tinyDendrite_values[i] = ADC_0_get_conversion(Dendrite_ports[i]);
	}
	tinyDebugger_send_uint8("D1", tinyDendrite_values[0]);
     99e:	c0 e4       	ldi	r28, 0x40	; 64
     9a0:	d8 e3       	ldi	r29, 0x38	; 56
     9a2:	68 81       	ld	r22, Y
     9a4:	8b e0       	ldi	r24, 0x0B	; 11
     9a6:	94 ea       	ldi	r25, 0xA4	; 164
     9a8:	0e 94 4b 04 	call	0x896	; 0x896 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D2", tinyDendrite_values[1]);
     9ac:	69 81       	ldd	r22, Y+1	; 0x01
     9ae:	8e e0       	ldi	r24, 0x0E	; 14
     9b0:	94 ea       	ldi	r25, 0xA4	; 164
     9b2:	0e 94 4b 04 	call	0x896	; 0x896 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D3", tinyDendrite_values[2]);
     9b6:	6a 81       	ldd	r22, Y+2	; 0x02
     9b8:	81 e1       	ldi	r24, 0x11	; 17
     9ba:	94 ea       	ldi	r25, 0xA4	; 164
     9bc:	0e 94 4b 04 	call	0x896	; 0x896 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
     9c0:	6b 81       	ldd	r22, Y+3	; 0x03
     9c2:	84 e1       	ldi	r24, 0x14	; 20
     9c4:	94 ea       	ldi	r25, 0xA4	; 164
     9c6:	0e 94 4b 04 	call	0x896	; 0x896 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
     9ca:	6c 81       	ldd	r22, Y+4	; 0x04
     9cc:	87 e1       	ldi	r24, 0x17	; 23
     9ce:	94 ea       	ldi	r25, 0xA4	; 164
     9d0:	0e 94 4b 04 	call	0x896	; 0x896 <tinyDebugger_send_uint8>
     9d4:	eb e3       	ldi	r30, 0x3B	; 59
     9d6:	f8 e3       	ldi	r31, 0x38	; 56
     9d8:	c6 e3       	ldi	r28, 0x36	; 54
     9da:	d8 e3       	ldi	r29, 0x38	; 56
     9dc:	40 e4       	ldi	r20, 0x40	; 64
     9de:	58 e3       	ldi	r21, 0x38	; 56
{
	
	//Read the analog voltage values on each of the Dendrites
	tinyDendrite_read_signals();
	
	_Bool charging = false;
     9e0:	80 e0       	ldi	r24, 0x00	; 0
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     9e2:	31 e0       	ldi	r19, 0x01	; 1
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     9e4:	0f 2e       	mov	r0, r31
     9e6:	f3 e0       	ldi	r31, 0x03	; 3
     9e8:	cf 2e       	mov	r12, r31
     9ea:	f0 2d       	mov	r31, r0
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     9ec:	68 94       	set
     9ee:	dd 24       	eor	r13, r13
     9f0:	d1 f8       	bld	r13, 1
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     9f2:	68 94       	set
     9f4:	ee 24       	eor	r14, r14
     9f6:	e2 f8       	bld	r14, 2
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     9f8:	0f 2e       	mov	r0, r31
     9fa:	f6 e0       	ldi	r31, 0x06	; 6
     9fc:	ff 2e       	mov	r15, r31
     9fe:	f0 2d       	mov	r31, r0
			tinyDendrite_current_signals[i] = CHARGING;
			charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     a00:	75 e0       	ldi	r23, 0x05	; 5
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     a02:	67 e0       	ldi	r22, 0x07	; 7
     a04:	5f 01       	movw	r10, r30
	
	_Bool charging = false;
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     a06:	90 81       	ld	r25, Z
     a08:	99 93       	st	Y+, r25
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     a0a:	d8 01       	movw	r26, r16
     a0c:	2d 91       	ld	r18, X+
     a0e:	8d 01       	movw	r16, r26
     a10:	29 3e       	cpi	r18, 0xE9	; 233
     a12:	18 f0       	brcs	.+6      	; 0xa1a <tinyDendrite_update_signals+0xb8>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     a14:	60 83       	st	Z, r22
			charging = true;
     a16:	83 2f       	mov	r24, r19
     a18:	19 c0       	rjmp	.+50     	; 0xa4c <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
     a1a:	28 3c       	cpi	r18, 0xC8	; 200
     a1c:	10 f0       	brcs	.+4      	; 0xa22 <tinyDendrite_update_signals+0xc0>
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     a1e:	70 83       	st	Z, r23
     a20:	15 c0       	rjmp	.+42     	; 0xa4c <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
     a22:	27 3a       	cpi	r18, 0xA7	; 167
     a24:	10 f0       	brcs	.+4      	; 0xa2a <tinyDendrite_update_signals+0xc8>
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     a26:	f0 82       	st	Z, r15
     a28:	11 c0       	rjmp	.+34     	; 0xa4c <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
     a2a:	25 38       	cpi	r18, 0x85	; 133
     a2c:	10 f0       	brcs	.+4      	; 0xa32 <tinyDendrite_update_signals+0xd0>
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     a2e:	e0 82       	st	Z, r14
     a30:	0d c0       	rjmp	.+26     	; 0xa4c <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
     a32:	24 36       	cpi	r18, 0x64	; 100
     a34:	10 f0       	brcs	.+4      	; 0xa3a <tinyDendrite_update_signals+0xd8>
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     a36:	d0 82       	st	Z, r13
     a38:	09 c0       	rjmp	.+18     	; 0xa4c <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
     a3a:	23 34       	cpi	r18, 0x43	; 67
     a3c:	10 f0       	brcs	.+4      	; 0xa42 <tinyDendrite_update_signals+0xe0>
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     a3e:	c0 82       	st	Z, r12
     a40:	05 c0       	rjmp	.+10     	; 0xa4c <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
     a42:	22 32       	cpi	r18, 0x22	; 34
     a44:	10 f0       	brcs	.+4      	; 0xa4a <tinyDendrite_update_signals+0xe8>
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     a46:	30 83       	st	Z, r19
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <tinyDendrite_update_signals+0xea>
		}
		else
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     a4a:	10 82       	st	Z, r1
		}
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
     a4c:	d5 01       	movw	r26, r10
     a4e:	2c 91       	ld	r18, X
     a50:	92 13       	cpse	r25, r18
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <tinyDendrite_update_signals+0xf4>
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     a54:	1c 92       	st	X, r1
     a56:	31 96       	adiw	r30, 0x01	; 1
	//Read the analog voltage values on each of the Dendrites
	tinyDendrite_read_signals();
	
	_Bool charging = false;
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     a58:	e4 17       	cp	r30, r20
     a5a:	f5 07       	cpc	r31, r21
     a5c:	99 f6       	brne	.-90     	; 0xa04 <tinyDendrite_update_signals+0xa2>
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
		}
	}
	tinyCharge_set_charging_mode(charging);
     a5e:	0e 94 24 04 	call	0x848	; 0x848 <tinyCharge_set_charging_mode>
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	bf 90       	pop	r11
     a74:	af 90       	pop	r10
     a76:	08 95       	ret

00000a78 <tinyDendrite_get_potential>:
outside. It uses the previously declared functions to return the potential.
*/
int16_t tinyDendrite_get_potential()
{
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
     a78:	0e 94 b1 04 	call	0x962	; 0x962 <tinyDendrite_update_signals>
     a7c:	eb e3       	ldi	r30, 0x3B	; 59
     a7e:	f8 e3       	ldi	r31, 0x38	; 56
     a80:	40 e4       	ldi	r20, 0x40	; 64
     a82:	58 e3       	ldi	r21, 0x38	; 56
	
	int16_t return_potential_val = 0;
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		switch(tinyDendrite_current_signals[i])
     a88:	91 91       	ld	r25, Z+
     a8a:	93 30       	cpi	r25, 0x03	; 3
     a8c:	a1 f0       	breq	.+40     	; 0xab6 <tinyDendrite_get_potential+0x3e>
     a8e:	28 f4       	brcc	.+10     	; 0xa9a <tinyDendrite_get_potential+0x22>
     a90:	91 30       	cpi	r25, 0x01	; 1
     a92:	b9 f0       	breq	.+46     	; 0xac2 <tinyDendrite_get_potential+0x4a>
     a94:	92 30       	cpi	r25, 0x02	; 2
     a96:	91 f0       	breq	.+36     	; 0xabc <tinyDendrite_get_potential+0x44>
     a98:	16 c0       	rjmp	.+44     	; 0xac6 <tinyDendrite_get_potential+0x4e>
     a9a:	95 30       	cpi	r25, 0x05	; 5
     a9c:	31 f0       	breq	.+12     	; 0xaaa <tinyDendrite_get_potential+0x32>
     a9e:	40 f0       	brcs	.+16     	; 0xab0 <tinyDendrite_get_potential+0x38>
     aa0:	96 30       	cpi	r25, 0x06	; 6
     aa2:	89 f4       	brne	.+34     	; 0xac6 <tinyDendrite_get_potential+0x4e>
		{
			case NO_SIGNAL:
				return_potential_val += NO_SIGNAL_REACTION;
				break;
			case HIGH_EXCITE:
				return_potential_val += HIGH_EXCITE_REACTION;
     aa4:	2c 5c       	subi	r18, 0xCC	; 204
     aa6:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
     aa8:	0e c0       	rjmp	.+28     	; 0xac6 <tinyDendrite_get_potential+0x4e>
			case NORMAL_EXCITE:
				return_potential_val += NORMAL_EXCITE_REACTION;
     aaa:	27 5e       	subi	r18, 0xE7	; 231
     aac:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
     aae:	0b c0       	rjmp	.+22     	; 0xac6 <tinyDendrite_get_potential+0x4e>
			case LOW_EXCITE:
				return_potential_val += LOW_EXCITE_REACTION;
     ab0:	2c 5e       	subi	r18, 0xEC	; 236
     ab2:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
     ab4:	08 c0       	rjmp	.+16     	; 0xac6 <tinyDendrite_get_potential+0x4e>
			case HIGH_INHIB:
				return_potential_val += HIGH_INHIB_REACTION;
     ab6:	22 53       	subi	r18, 0x32	; 50
     ab8:	31 09       	sbc	r19, r1
				break;
     aba:	05 c0       	rjmp	.+10     	; 0xac6 <tinyDendrite_get_potential+0x4e>
			case NORMAL_INHIB:
				return_potential_val += NORMAL_INHIB_REACTION;
     abc:	29 51       	subi	r18, 0x19	; 25
     abe:	31 09       	sbc	r19, r1
				break;
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <tinyDendrite_get_potential+0x4e>
			case LOW_INHIB:
				return_potential_val += LOW_INHIB_REACTION;
     ac2:	24 51       	subi	r18, 0x14	; 20
     ac4:	31 09       	sbc	r19, r1
{
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
	
	int16_t return_potential_val = 0;
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     ac6:	e4 17       	cp	r30, r20
     ac8:	f5 07       	cpc	r31, r21
     aca:	f1 f6       	brne	.-68     	; 0xa88 <tinyDendrite_get_potential+0x10>
			default:
				break;
		}
	}
	return return_potential_val;
}
     acc:	c9 01       	movw	r24, r18
     ace:	08 95       	ret

00000ad0 <tinyDendrite_update_potential>:

double tinyDendrite_update_potential(double potential){
     ad0:	cf 92       	push	r12
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	6b 01       	movw	r12, r22
     ada:	7c 01       	movw	r14, r24
	
	int16_t potential_change = tinyDendrite_get_potential();
     adc:	0e 94 3c 05 	call	0xa78	; 0xa78 <tinyDendrite_get_potential>
	potential += potential_change;
	return potential;
     ae0:	bc 01       	movw	r22, r24
     ae2:	99 0f       	add	r25, r25
     ae4:	88 0b       	sbc	r24, r24
     ae6:	99 0b       	sbc	r25, r25
     ae8:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatsisf>
     aec:	a7 01       	movw	r20, r14
     aee:	96 01       	movw	r18, r12
     af0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__addsf3>
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	cf 90       	pop	r12
     afc:	08 95       	ret

00000afe <__vector_6>:
This function is called every time the RTC (Real Time Clock) counter overflows.
With the current settings, it will be called every ms.
The RTC clock runs at 1kHz, and the number of cycles before overflow is set with RTC.PER = someHexValue (e.g. 0x20) in src/rtc.c
*/
ISR(RTC_CNT_vect)
{
     afe:	1f 92       	push	r1
     b00:	0f 92       	push	r0
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	0f 92       	push	r0
     b06:	11 24       	eor	r1, r1
     b08:	2f 93       	push	r18
     b0a:	3f 93       	push	r19
     b0c:	4f 93       	push	r20
     b0e:	5f 93       	push	r21
     b10:	6f 93       	push	r22
     b12:	7f 93       	push	r23
     b14:	8f 93       	push	r24
     b16:	9f 93       	push	r25
     b18:	af 93       	push	r26
     b1a:	bf 93       	push	r27
     b1c:	cf 93       	push	r28
     b1e:	ef 93       	push	r30
     b20:	ff 93       	push	r31
static _Bool tinyISR_interrupt_flag = false;


void tinyISR_setflag(_Bool new_flag_val)
{
	tinyISR_interrupt_flag = new_flag_val;
     b22:	c1 e0       	ldi	r28, 0x01	; 1
     b24:	c0 93 45 38 	sts	0x3845, r28	; 0x803845 <tinyISR_interrupt_flag>
{
	// Set flag to let main loop run a new cycle
	tinyISR_setflag(true);
	
	// Timer counter incrementation
	tinyTime_counter_increment();
     b28:	0e 94 b7 08 	call	0x116e	; 0x116e <tinyTime_counter_increment>

	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
     b2c:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
}
     b30:	ff 91       	pop	r31
     b32:	ef 91       	pop	r30
     b34:	cf 91       	pop	r28
     b36:	bf 91       	pop	r27
     b38:	af 91       	pop	r26
     b3a:	9f 91       	pop	r25
     b3c:	8f 91       	pop	r24
     b3e:	7f 91       	pop	r23
     b40:	6f 91       	pop	r22
     b42:	5f 91       	pop	r21
     b44:	4f 91       	pop	r20
     b46:	3f 91       	pop	r19
     b48:	2f 91       	pop	r18
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	0f 90       	pop	r0
     b50:	1f 90       	pop	r1
     b52:	18 95       	reti

00000b54 <tinyISR_setflag>:
static _Bool tinyISR_interrupt_flag = false;


void tinyISR_setflag(_Bool new_flag_val)
{
	tinyISR_interrupt_flag = new_flag_val;
     b54:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <tinyISR_interrupt_flag>
     b58:	08 95       	ret

00000b5a <tinyISR_getflag>:
}

_Bool tinyISR_getflag(void)
{
	return tinyISR_interrupt_flag;
}
     b5a:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <tinyISR_interrupt_flag>
     b5e:	08 95       	ret

00000b60 <tinyLED_SPIWriteByte>:
Function used to send a byte over SPI, which in turn gets
translated to the bit-sequence required by the LEDs over the CCL.
*/
static void tinyLED_SPIWriteByte(uint8_t byte)
{
	SPI0.INTFLAGS = SPI0_INTFLAGS; // clear the write collision flag to allow writing
     b60:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
     b64:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
	TCA0.SINGLE.CNT = 0; // reset TCA counter register to ensure the first rising edge of the PWM is predictable
     b68:	e0 e0       	ldi	r30, 0x00	; 0
     b6a:	fa e0       	ldi	r31, 0x0A	; 10
     b6c:	10 a2       	std	Z+32, r1	; 0x20
     b6e:	11 a2       	std	Z+33, r1	; 0x21
	
	// start TCA
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 1 << TCA_SPLIT_ENABLE_bp;
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	90 83       	st	Z, r25
	SPI0_DATA = byte;
     b74:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>

	while((SPI0.INTFLAGS & SPI_RXCIE_bm) == 0){} // wait for transfer to complete
     b78:	e0 e2       	ldi	r30, 0x20	; 32
     b7a:	f8 e0       	ldi	r31, 0x08	; 8
     b7c:	83 81       	ldd	r24, Z+3	; 0x03
     b7e:	88 23       	and	r24, r24
     b80:	ec f7       	brge	.-6      	; 0xb7c <tinyLED_SPIWriteByte+0x1c>
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
     b82:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     b86:	08 95       	ret

00000b88 <tinyLED_set_color>:
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color_mode(uint8_t LED_id, enum Colors color, enum ColorModes mode)
{
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_colors[LED_id] = setting;
     b88:	e8 2f       	mov	r30, r24
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	ee 59       	subi	r30, 0x9E	; 158
     b92:	f7 4c       	sbci	r31, 0xC7	; 199
     b94:	60 83       	st	Z, r22
     b96:	11 82       	std	Z+1, r1	; 0x01
     b98:	08 95       	ret

00000b9a <tinyLED_get_color>:
	tinyLED_set_color_mode(LED_id, color, STABLE);
}

enum Colors tinyLED_get_color(uint8_t LED_id)
{
	return tinyLED_colors[LED_id].color;
     b9a:	e8 2f       	mov	r30, r24
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	ee 0f       	add	r30, r30
     ba0:	ff 1f       	adc	r31, r31
     ba2:	ee 59       	subi	r30, 0x9E	; 158
     ba4:	f7 4c       	sbci	r31, 0xC7	; 199
}
     ba6:	80 81       	ld	r24, Z
     ba8:	08 95       	ret

00000baa <tinyLED_set_color_mode>:
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color_mode(uint8_t LED_id, enum Colors color, enum ColorModes mode)
{
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_colors[LED_id] = setting;
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	fc 01       	movw	r30, r24
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	ee 59       	subi	r30, 0x9E	; 158
     bb4:	f7 4c       	sbci	r31, 0xC7	; 199
     bb6:	60 83       	st	Z, r22
     bb8:	41 83       	std	Z+1, r20	; 0x01
	if (mode == FLASH_ONCE)
     bba:	44 30       	cpi	r20, 0x04	; 4
     bbc:	29 f4       	brne	.+10     	; 0xbc8 <tinyLED_set_color_mode+0x1e>
	{
		tinyLED_flash_once_time[LED_id] = 1000*FLASH_TIME;
     bbe:	fc 01       	movw	r30, r24
     bc0:	e6 5a       	subi	r30, 0xA6	; 166
     bc2:	f7 4c       	sbci	r31, 0xC7	; 199
     bc4:	2a e0       	ldi	r18, 0x0A	; 10
     bc6:	20 83       	st	Z, r18
     bc8:	08 95       	ret

00000bca <tinyLED_RGB_Color_Compare>:
	}
	return rgb_color;
			
};

_Bool tinyLED_RGB_Color_Compare(struct RGB_Color* a, struct RGB_Color* b){
     bca:	dc 01       	movw	r26, r24
     bcc:	fb 01       	movw	r30, r22
	for (int i=0; i<NUMBER_OF_LEDS; i++)
	{
		if(!(a[i].red==b[i].red && a[i].green==b[i].green && a[i].blue==b[i].blue)){
     bce:	9c 91       	ld	r25, X
     bd0:	80 81       	ld	r24, Z
     bd2:	98 13       	cpse	r25, r24
     bd4:	20 c0       	rjmp	.+64     	; 0xc16 <tinyLED_RGB_Color_Compare+0x4c>
     bd6:	11 96       	adiw	r26, 0x01	; 1
     bd8:	9c 91       	ld	r25, X
     bda:	11 97       	sbiw	r26, 0x01	; 1
     bdc:	81 81       	ldd	r24, Z+1	; 0x01
     bde:	98 13       	cpse	r25, r24
     be0:	1c c0       	rjmp	.+56     	; 0xc1a <tinyLED_RGB_Color_Compare+0x50>
     be2:	12 96       	adiw	r26, 0x02	; 2
     be4:	9c 91       	ld	r25, X
     be6:	12 97       	sbiw	r26, 0x02	; 2
     be8:	82 81       	ldd	r24, Z+2	; 0x02
     bea:	98 13       	cpse	r25, r24
     bec:	18 c0       	rjmp	.+48     	; 0xc1e <tinyLED_RGB_Color_Compare+0x54>
     bee:	13 96       	adiw	r26, 0x03	; 3
     bf0:	9c 91       	ld	r25, X
     bf2:	13 97       	sbiw	r26, 0x03	; 3
     bf4:	83 81       	ldd	r24, Z+3	; 0x03
     bf6:	98 13       	cpse	r25, r24
     bf8:	14 c0       	rjmp	.+40     	; 0xc22 <tinyLED_RGB_Color_Compare+0x58>
     bfa:	14 96       	adiw	r26, 0x04	; 4
     bfc:	9c 91       	ld	r25, X
     bfe:	14 97       	sbiw	r26, 0x04	; 4
     c00:	84 81       	ldd	r24, Z+4	; 0x04
     c02:	98 13       	cpse	r25, r24
     c04:	10 c0       	rjmp	.+32     	; 0xc26 <tinyLED_RGB_Color_Compare+0x5c>
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	15 96       	adiw	r26, 0x05	; 5
     c0a:	2c 91       	ld	r18, X
     c0c:	95 81       	ldd	r25, Z+5	; 0x05
     c0e:	29 17       	cp	r18, r25
     c10:	59 f0       	breq	.+22     	; 0xc28 <tinyLED_RGB_Color_Compare+0x5e>
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	08 95       	ret
			return false;
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	08 95       	ret
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	08 95       	ret
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	08 95       	ret
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	08 95       	ret
     c26:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
     c28:	08 95       	ret

00000c2a <tinyLED_update>:
/*
function to write the current LED-array on to the LEDs and
effectively update the values stored in the LEDs to the values stored in the MCU.
*/
void tinyLED_update(void)
{
     c2a:	2f 92       	push	r2
     c2c:	3f 92       	push	r3
     c2e:	4f 92       	push	r4
     c30:	5f 92       	push	r5
     c32:	6f 92       	push	r6
     c34:	7f 92       	push	r7
     c36:	8f 92       	push	r8
     c38:	9f 92       	push	r9
     c3a:	af 92       	push	r10
     c3c:	bf 92       	push	r11
     c3e:	cf 92       	push	r12
     c40:	df 92       	push	r13
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	6e 97       	sbiw	r28, 0x1e	; 30
     c54:	cd bf       	out	0x3d, r28	; 61
     c56:	de bf       	out	0x3e, r29	; 62
			
	uint32_t now = tinyTime_now();
     c58:	0e 94 cb 08 	call	0x1196	; 0x1196 <tinyTime_now>
     c5c:	6b 01       	movw	r12, r22
     c5e:	7c 01       	movw	r14, r24
	
	// This is a sin curve, but between 0 and 1 instead of -1 and 1
	double sinValue = 1+sin((double)now/(100*M_PI/SWING_RATE))/2;
     c60:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     c64:	22 ed       	ldi	r18, 0xD2	; 210
     c66:	33 e5       	ldi	r19, 0x53	; 83
     c68:	4b ef       	ldi	r20, 0xFB	; 251
     c6a:	51 e4       	ldi	r21, 0x41	; 65
     c6c:	0e 94 46 09 	call	0x128c	; 0x128c <__divsf3>
     c70:	0e 94 01 0c 	call	0x1802	; 0x1802 <sin>
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	5f e3       	ldi	r21, 0x3F	; 63
     c7c:	0e 94 94 0b 	call	0x1728	; 0x1728 <__mulsf3>
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e8       	ldi	r20, 0x80	; 128
     c86:	5f e3       	ldi	r21, 0x3F	; 63
     c88:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__addsf3>
     c8c:	69 87       	std	Y+9, r22	; 0x09
     c8e:	7a 87       	std	Y+10, r23	; 0x0a
     c90:	8b 87       	std	Y+11, r24	; 0x0b
     c92:	9c 87       	std	Y+12, r25	; 0x0c
	
	// If FLASH_RATE is one, then that means that the left side of the "<" will just count from 0 to 1000, and flash_on will be true for half of the time
	_Bool flash_on = now%(uint32_t)(1000/FLASH_RATE)  <   500/FLASH_RATE;
     c94:	c7 01       	movw	r24, r14
     c96:	b6 01       	movw	r22, r12
     c98:	22 e3       	ldi	r18, 0x32	; 50
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__udivmodsi4>
     ca4:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	48 ec       	ldi	r20, 0xC8	; 200
     cae:	51 e4       	ldi	r21, 0x41	; 65
     cb0:	0e 94 41 09 	call	0x1282	; 0x1282 <__cmpsf2>
     cb4:	88 1f       	adc	r24, r24
     cb6:	88 27       	eor	r24, r24
     cb8:	88 1f       	adc	r24, r24
     cba:	8f 83       	std	Y+7, r24	; 0x07
	
	// PING_RATE is usually small, so the left side counts to some large number. Since flash_time usually is also quite small,
	// the left side will usually be larger than the right
	_Bool ping_on =  now%(uint32_t)(1000/PING_RATE)   <   1000*FLASH_TIME;
     cbc:	c7 01       	movw	r24, r14
     cbe:	b6 01       	movw	r22, r12
     cc0:	24 ef       	ldi	r18, 0xF4	; 244
     cc2:	31 e0       	ldi	r19, 0x01	; 1
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__udivmodsi4>
     ccc:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e2       	ldi	r20, 0x20	; 32
     cd6:	51 e4       	ldi	r21, 0x41	; 65
     cd8:	0e 94 41 09 	call	0x1282	; 0x1282 <__cmpsf2>
     cdc:	88 1f       	adc	r24, r24
     cde:	88 27       	eor	r24, r24
     ce0:	88 1f       	adc	r24, r24
     ce2:	02 e6       	ldi	r16, 0x62	; 98
     ce4:	18 e3       	ldi	r17, 0x38	; 56
     ce6:	9e 01       	movw	r18, r28
     ce8:	2f 5f       	subi	r18, 0xFF	; 255
     cea:	3f 4f       	sbci	r19, 0xFF	; 255
     cec:	0f 2e       	mov	r0, r31
     cee:	fa e5       	ldi	r31, 0x5A	; 90
     cf0:	4f 2e       	mov	r4, r31
     cf2:	f8 e3       	ldi	r31, 0x38	; 56
     cf4:	5f 2e       	mov	r5, r31
     cf6:	f0 2d       	mov	r31, r0
     cf8:	0f 2e       	mov	r0, r31
     cfa:	f6 e6       	ldi	r31, 0x66	; 102
     cfc:	6f 2e       	mov	r6, r31
     cfe:	f8 e3       	ldi	r31, 0x38	; 56
     d00:	7f 2e       	mov	r7, r31
     d02:	f0 2d       	mov	r31, r0
     d04:	19 01       	movw	r2, r18
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
				break;
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     d06:	88 2e       	mov	r8, r24
     d08:	91 2c       	mov	r9, r1
     d0a:	a1 2c       	mov	r10, r1
     d0c:	b1 2c       	mov	r11, r1
     d0e:	2d 87       	std	Y+13, r18	; 0x0d
     d10:	3e 87       	std	Y+14, r19	; 0x0e
     d12:	df 80       	ldd	r13, Y+7	; 0x07
     d14:	f8 01       	movw	r30, r16
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
}

static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
     d16:	80 81       	ld	r24, Z
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	a1 f0       	breq	.+40     	; 0xd44 <tinyLED_update+0x11a>
     d1c:	18 f4       	brcc	.+6      	; 0xd24 <tinyLED_update+0xfa>
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	31 f0       	breq	.+12     	; 0xd2e <tinyLED_update+0x104>
     d22:	21 c0       	rjmp	.+66     	; 0xd66 <tinyLED_update+0x13c>
     d24:	83 30       	cpi	r24, 0x03	; 3
     d26:	39 f0       	breq	.+14     	; 0xd36 <tinyLED_update+0x10c>
     d28:	84 30       	cpi	r24, 0x04	; 4
     d2a:	99 f0       	breq	.+38     	; 0xd52 <tinyLED_update+0x128>
     d2c:	1c c0       	rjmp	.+56     	; 0xd66 <tinyLED_update+0x13c>
	{
		case OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
			break;
		case RED:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 0, 0};
     d2e:	f1 2c       	mov	r15, r1
     d30:	e1 2c       	mov	r14, r1
     d32:	69 e1       	ldi	r22, 0x19	; 25
     d34:	1b c0       	rjmp	.+54     	; 0xd6c <tinyLED_update+0x142>
			break;
		case GREEN:
			rgb_color = (struct RGB_Color){0, 255*LED_BRIGHTNESS, 0};
     d36:	f1 2c       	mov	r15, r1
     d38:	0f 2e       	mov	r0, r31
     d3a:	f9 e1       	ldi	r31, 0x19	; 25
     d3c:	ef 2e       	mov	r14, r31
     d3e:	f0 2d       	mov	r31, r0
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	14 c0       	rjmp	.+40     	; 0xd6c <tinyLED_update+0x142>
			break;
		case BLUE:
			rgb_color = (struct RGB_Color){0, 0, 255*LED_BRIGHTNESS};
     d44:	0f 2e       	mov	r0, r31
     d46:	f9 e1       	ldi	r31, 0x19	; 25
     d48:	ff 2e       	mov	r15, r31
     d4a:	f0 2d       	mov	r31, r0
     d4c:	e1 2c       	mov	r14, r1
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <tinyLED_update+0x142>
			// Should the /3 be there? This requires testing.
			// After testing, findings were that at 0.1 brightness, one would see the three LEDs instead of one white led
			// We try with /2 instead.
			// We find that the best results come from not dividing by anything. At leasts in the lower brightness settings, and that
			// is where we suspect it will be most of the time. When we divide, the LEDs are so weak, that they appear as three lights instead of one.
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS};
     d52:	0f 2e       	mov	r0, r31
     d54:	f9 e1       	ldi	r31, 0x19	; 25
     d56:	ff 2e       	mov	r15, r31
     d58:	f0 2d       	mov	r31, r0
     d5a:	0f 2e       	mov	r0, r31
     d5c:	f9 e1       	ldi	r31, 0x19	; 25
     d5e:	ef 2e       	mov	r14, r31
     d60:	f0 2d       	mov	r31, r0
     d62:	69 e1       	ldi	r22, 0x19	; 25
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <tinyLED_update+0x142>
static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
	{
		case OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
     d66:	f1 2c       	mov	r15, r1
     d68:	e1 2c       	mov	r14, r1
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	2f 82       	std	Y+7, r2	; 0x07
     d6e:	38 86       	std	Y+8, r3	; 0x08
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
	{		
		// Convert enum to RGB_Color
		rgb_colors[i] = tinyLED_enum_to_RGB_Color(tinyLED_colors[i].color);
     d70:	d1 01       	movw	r26, r2
     d72:	6c 93       	st	X, r22
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	ec 92       	st	X, r14
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	12 96       	adiw	r26, 0x02	; 2
     d7c:	fc 92       	st	X, r15
			
		// Adjust colors according to mode
		switch(tinyLED_colors[i].mode)
     d7e:	81 81       	ldd	r24, Z+1	; 0x01
     d80:	82 30       	cpi	r24, 0x02	; 2
     d82:	d1 f0       	breq	.+52     	; 0xdb8 <tinyLED_update+0x18e>
     d84:	18 f4       	brcc	.+6      	; 0xd8c <tinyLED_update+0x162>
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	41 f0       	breq	.+16     	; 0xd9a <tinyLED_update+0x170>
     d8a:	cd c0       	rjmp	.+410    	; 0xf26 <tinyLED_update+0x2fc>
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	09 f4       	brne	.+2      	; 0xd92 <tinyLED_update+0x168>
     d90:	44 c0       	rjmp	.+136    	; 0xe1a <tinyLED_update+0x1f0>
     d92:	84 30       	cpi	r24, 0x04	; 4
     d94:	09 f4       	brne	.+2      	; 0xd98 <tinyLED_update+0x16e>
     d96:	bf c0       	rjmp	.+382    	; 0xf16 <tinyLED_update+0x2ec>
     d98:	c6 c0       	rjmp	.+396    	; 0xf26 <tinyLED_update+0x2fc>
		{
			case STABLE:
				break;
			case FLASH:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*flash_on, rgb_colors[i].green*flash_on, rgb_colors[i].blue*flash_on};
     d9a:	d6 9e       	mul	r13, r22
     d9c:	60 2d       	mov	r22, r0
     d9e:	11 24       	eor	r1, r1
     da0:	ef 81       	ldd	r30, Y+7	; 0x07
     da2:	f8 85       	ldd	r31, Y+8	; 0x08
     da4:	60 83       	st	Z, r22
     da6:	de 9c       	mul	r13, r14
     da8:	e0 2c       	mov	r14, r0
     daa:	11 24       	eor	r1, r1
     dac:	e1 82       	std	Z+1, r14	; 0x01
     dae:	df 9c       	mul	r13, r15
     db0:	f0 2c       	mov	r15, r0
     db2:	11 24       	eor	r1, r1
     db4:	f2 82       	std	Z+2, r15	; 0x02
				break;
     db6:	b7 c0       	rjmp	.+366    	; 0xf26 <tinyLED_update+0x2fc>
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatsisf>
     dc2:	29 85       	ldd	r18, Y+9	; 0x09
     dc4:	3a 85       	ldd	r19, Y+10	; 0x0a
     dc6:	4b 85       	ldd	r20, Y+11	; 0x0b
     dc8:	5c 85       	ldd	r21, Y+12	; 0x0c
     dca:	0e 94 94 0b 	call	0x1728	; 0x1728 <__mulsf3>
     dce:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__fixunssfsi>
     dd2:	d1 01       	movw	r26, r2
     dd4:	6c 93       	st	X, r22
     dd6:	6e 2d       	mov	r22, r14
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatsisf>
     de2:	29 85       	ldd	r18, Y+9	; 0x09
     de4:	3a 85       	ldd	r19, Y+10	; 0x0a
     de6:	4b 85       	ldd	r20, Y+11	; 0x0b
     de8:	5c 85       	ldd	r21, Y+12	; 0x0c
     dea:	0e 94 94 0b 	call	0x1728	; 0x1728 <__mulsf3>
     dee:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__fixunssfsi>
     df2:	f1 01       	movw	r30, r2
     df4:	61 83       	std	Z+1, r22	; 0x01
     df6:	6f 2d       	mov	r22, r15
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatsisf>
     e02:	29 85       	ldd	r18, Y+9	; 0x09
     e04:	3a 85       	ldd	r19, Y+10	; 0x0a
     e06:	4b 85       	ldd	r20, Y+11	; 0x0b
     e08:	5c 85       	ldd	r21, Y+12	; 0x0c
     e0a:	0e 94 94 0b 	call	0x1728	; 0x1728 <__mulsf3>
     e0e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__fixunssfsi>
     e12:	d1 01       	movw	r26, r2
     e14:	12 96       	adiw	r26, 0x02	; 2
     e16:	6c 93       	st	X, r22
				break;
     e18:	86 c0       	rjmp	.+268    	; 0xf26 <tinyLED_update+0x2fc>
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     e24:	9b 01       	movw	r18, r22
     e26:	ac 01       	movw	r20, r24
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	80 e8       	ldi	r24, 0x80	; 128
     e2e:	9f e3       	ldi	r25, 0x3F	; 63
     e30:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <fmin>
     e34:	6b 8b       	std	Y+19, r22	; 0x13
     e36:	7c 8b       	std	Y+20, r23	; 0x14
     e38:	8d 8b       	std	Y+21, r24	; 0x15
     e3a:	9e 8b       	std	Y+22, r25	; 0x16
     e3c:	c5 01       	movw	r24, r10
     e3e:	b4 01       	movw	r22, r8
     e40:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatsisf>
     e44:	6f 87       	std	Y+15, r22	; 0x0f
     e46:	78 8b       	std	Y+16, r23	; 0x10
     e48:	89 8b       	std	Y+17, r24	; 0x11
     e4a:	9a 8b       	std	Y+18, r25	; 0x12
     e4c:	6e 2d       	mov	r22, r14
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     e58:	9b 01       	movw	r18, r22
     e5a:	ac 01       	movw	r20, r24
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	80 e8       	ldi	r24, 0x80	; 128
     e62:	9f e3       	ldi	r25, 0x3F	; 63
     e64:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <fmin>
     e68:	6f 8b       	std	Y+23, r22	; 0x17
     e6a:	78 8f       	std	Y+24, r23	; 0x18
     e6c:	89 8f       	std	Y+25, r24	; 0x19
     e6e:	9a 8f       	std	Y+26, r25	; 0x1a
     e70:	6f 2d       	mov	r22, r15
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     e7c:	9b 01       	movw	r18, r22
     e7e:	ac 01       	movw	r20, r24
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	80 e8       	ldi	r24, 0x80	; 128
     e86:	9f e3       	ldi	r25, 0x3F	; 63
     e88:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <fmin>
     e8c:	6b 8f       	std	Y+27, r22	; 0x1b
     e8e:	7c 8f       	std	Y+28, r23	; 0x1c
     e90:	8d 8f       	std	Y+29, r24	; 0x1d
     e92:	9e 8f       	std	Y+30, r25	; 0x1e
     e94:	23 e3       	ldi	r18, 0x33	; 51
     e96:	33 e3       	ldi	r19, 0x33	; 51
     e98:	43 ea       	ldi	r20, 0xA3	; 163
     e9a:	50 e4       	ldi	r21, 0x40	; 64
     e9c:	6b 89       	ldd	r22, Y+19	; 0x13
     e9e:	7c 89       	ldd	r23, Y+20	; 0x14
     ea0:	8d 89       	ldd	r24, Y+21	; 0x15
     ea2:	9e 89       	ldd	r25, Y+22	; 0x16
     ea4:	0e 94 94 0b 	call	0x1728	; 0x1728 <__mulsf3>
     ea8:	2f 85       	ldd	r18, Y+15	; 0x0f
     eaa:	38 89       	ldd	r19, Y+16	; 0x10
     eac:	49 89       	ldd	r20, Y+17	; 0x11
     eae:	5a 89       	ldd	r21, Y+18	; 0x12
     eb0:	0e 94 94 0b 	call	0x1728	; 0x1728 <__mulsf3>
     eb4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__fixunssfsi>
     eb8:	ef 81       	ldd	r30, Y+7	; 0x07
     eba:	f8 85       	ldd	r31, Y+8	; 0x08
     ebc:	60 83       	st	Z, r22
     ebe:	23 e3       	ldi	r18, 0x33	; 51
     ec0:	33 e3       	ldi	r19, 0x33	; 51
     ec2:	43 ea       	ldi	r20, 0xA3	; 163
     ec4:	50 e4       	ldi	r21, 0x40	; 64
     ec6:	6f 89       	ldd	r22, Y+23	; 0x17
     ec8:	78 8d       	ldd	r23, Y+24	; 0x18
     eca:	89 8d       	ldd	r24, Y+25	; 0x19
     ecc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ece:	0e 94 94 0b 	call	0x1728	; 0x1728 <__mulsf3>
     ed2:	2f 85       	ldd	r18, Y+15	; 0x0f
     ed4:	38 89       	ldd	r19, Y+16	; 0x10
     ed6:	49 89       	ldd	r20, Y+17	; 0x11
     ed8:	5a 89       	ldd	r21, Y+18	; 0x12
     eda:	0e 94 94 0b 	call	0x1728	; 0x1728 <__mulsf3>
     ede:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__fixunssfsi>
     ee2:	af 81       	ldd	r26, Y+7	; 0x07
     ee4:	b8 85       	ldd	r27, Y+8	; 0x08
     ee6:	11 96       	adiw	r26, 0x01	; 1
     ee8:	6c 93       	st	X, r22
     eea:	23 e3       	ldi	r18, 0x33	; 51
     eec:	33 e3       	ldi	r19, 0x33	; 51
     eee:	43 ea       	ldi	r20, 0xA3	; 163
     ef0:	50 e4       	ldi	r21, 0x40	; 64
     ef2:	6b 8d       	ldd	r22, Y+27	; 0x1b
     ef4:	7c 8d       	ldd	r23, Y+28	; 0x1c
     ef6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ef8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     efa:	0e 94 94 0b 	call	0x1728	; 0x1728 <__mulsf3>
     efe:	2f 85       	ldd	r18, Y+15	; 0x0f
     f00:	38 89       	ldd	r19, Y+16	; 0x10
     f02:	49 89       	ldd	r20, Y+17	; 0x11
     f04:	5a 89       	ldd	r21, Y+18	; 0x12
     f06:	0e 94 94 0b 	call	0x1728	; 0x1728 <__mulsf3>
     f0a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__fixunssfsi>
     f0e:	ef 81       	ldd	r30, Y+7	; 0x07
     f10:	f8 85       	ldd	r31, Y+8	; 0x08
     f12:	62 83       	std	Z+2, r22	; 0x02
				break;
     f14:	08 c0       	rjmp	.+16     	; 0xf26 <tinyLED_update+0x2fc>
			case FLASH_ONCE:
				if(tinyLED_flash_once_time[i]>0){
     f16:	d2 01       	movw	r26, r4
     f18:	8c 91       	ld	r24, X
     f1a:	88 23       	and	r24, r24
     f1c:	19 f0       	breq	.+6      	; 0xf24 <tinyLED_update+0x2fa>
					rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red, rgb_colors[i].green, rgb_colors[i].blue};
					tinyLED_flash_once_time[i]--;
     f1e:	81 50       	subi	r24, 0x01	; 1
     f20:	8c 93       	st	X, r24
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <tinyLED_update+0x2fc>
				}
				else{
					tinyLED_colors[i].color = OFF;
     f24:	10 82       	st	Z, r1
     f26:	0e 5f       	subi	r16, 0xFE	; 254
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	b3 e0       	ldi	r27, 0x03	; 3
     f2c:	2b 0e       	add	r2, r27
     f2e:	31 1c       	adc	r3, r1
     f30:	ef ef       	ldi	r30, 0xFF	; 255
     f32:	4e 1a       	sub	r4, r30
     f34:	5e 0a       	sbc	r5, r30
	
	// This is where we store all the actual color values we want to send to the LED
	struct RGB_Color rgb_colors[NUMBER_OF_LEDS];
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
     f36:	06 15       	cp	r16, r6
     f38:	17 05       	cpc	r17, r7
     f3a:	09 f0       	breq	.+2      	; 0xf3e <tinyLED_update+0x314>
     f3c:	eb ce       	rjmp	.-554    	; 0xd14 <tinyLED_update+0xea>
     f3e:	cd 84       	ldd	r12, Y+13	; 0x0d
     f40:	de 84       	ldd	r13, Y+14	; 0x0e
				break;
		}
	}
	
	// We only write to the LEDs if there is something to change. (In SWING mode, we update the LEDs every cycle)
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
     f42:	6c e5       	ldi	r22, 0x5C	; 92
     f44:	78 e3       	ldi	r23, 0x38	; 56
     f46:	ce 01       	movw	r24, r28
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	0e 94 e5 05 	call	0xbca	; 0xbca <tinyLED_RGB_Color_Compare>
     f4e:	81 11       	cpse	r24, r1
     f50:	2f c0       	rjmp	.+94     	; 0xfb0 <tinyLED_update+0x386>
     f52:	0c e5       	ldi	r16, 0x5C	; 92
     f54:	18 e3       	ldi	r17, 0x38	; 56
     f56:	7e 01       	movw	r14, r28
     f58:	f7 e0       	ldi	r31, 0x07	; 7
     f5a:	ef 0e       	add	r14, r31
     f5c:	f1 1c       	adc	r15, r1
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
		{
			// Write to LEDs
			//For some reason, the data-bus to the LEDs is serialized as GRB
			//which means the 24-bit data-bus will look like [Green[0:7], Red[0:7], Blue[0:7]]
			tinyLED_SPIWriteByte(rgb_colors[i].green);
     f5e:	d6 01       	movw	r26, r12
     f60:	11 96       	adiw	r26, 0x01	; 1
     f62:	8c 91       	ld	r24, X
     f64:	0e 94 b0 05 	call	0xb60	; 0xb60 <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].red);
     f68:	f6 01       	movw	r30, r12
     f6a:	80 81       	ld	r24, Z
     f6c:	0e 94 b0 05 	call	0xb60	; 0xb60 <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
     f70:	d6 01       	movw	r26, r12
     f72:	12 96       	adiw	r26, 0x02	; 2
     f74:	8c 91       	ld	r24, X
     f76:	0e 94 b0 05 	call	0xb60	; 0xb60 <tinyLED_SPIWriteByte>
			tinyLED_old_colors[i] = rgb_colors[i];
     f7a:	f6 01       	movw	r30, r12
     f7c:	81 91       	ld	r24, Z+
     f7e:	91 91       	ld	r25, Z+
     f80:	a1 91       	ld	r26, Z+
     f82:	6f 01       	movw	r12, r30
     f84:	f8 01       	movw	r30, r16
     f86:	81 93       	st	Z+, r24
     f88:	91 93       	st	Z+, r25
     f8a:	a1 93       	st	Z+, r26
     f8c:	8f 01       	movw	r16, r30
		}
	}
	
	// We only write to the LEDs if there is something to change. (In SWING mode, we update the LEDs every cycle)
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
     f8e:	ce 14       	cp	r12, r14
     f90:	df 04       	cpc	r13, r15
     f92:	29 f7       	brne	.-54     	; 0xf5e <tinyLED_update+0x334>
			tinyLED_SPIWriteByte(rgb_colors[i].green);
			tinyLED_SPIWriteByte(rgb_colors[i].red);
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
			tinyLED_old_colors[i] = rgb_colors[i];
	}
		tinyDebugger_send_uint8("LED1 color", tinyLED_colors[0].color);
     f94:	02 e6       	ldi	r16, 0x62	; 98
     f96:	18 e3       	ldi	r17, 0x38	; 56
     f98:	d8 01       	movw	r26, r16
     f9a:	6c 91       	ld	r22, X
     f9c:	8a e1       	ldi	r24, 0x1A	; 26
     f9e:	94 ea       	ldi	r25, 0xA4	; 164
     fa0:	0e 94 4b 04 	call	0x896	; 0x896 <tinyDebugger_send_uint8>
		tinyDebugger_send_uint8("LED2 color", tinyLED_colors[1].color);
     fa4:	f8 01       	movw	r30, r16
     fa6:	62 81       	ldd	r22, Z+2	; 0x02
     fa8:	85 e2       	ldi	r24, 0x25	; 37
     faa:	94 ea       	ldi	r25, 0xA4	; 164
     fac:	0e 94 4b 04 	call	0x896	; 0x896 <tinyDebugger_send_uint8>
	}
}
     fb0:	6e 96       	adiw	r28, 0x1e	; 30
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	ff 90       	pop	r15
     fc0:	ef 90       	pop	r14
     fc2:	df 90       	pop	r13
     fc4:	cf 90       	pop	r12
     fc6:	bf 90       	pop	r11
     fc8:	af 90       	pop	r10
     fca:	9f 90       	pop	r9
     fcc:	8f 90       	pop	r8
     fce:	7f 90       	pop	r7
     fd0:	6f 90       	pop	r6
     fd2:	5f 90       	pop	r5
     fd4:	4f 90       	pop	r4
     fd6:	3f 90       	pop	r3
     fd8:	2f 90       	pop	r2
     fda:	08 95       	ret

00000fdc <tinyPotential_update>:

/*
Update the potential
*/
void tinyPotential_update()
{
     fdc:	cf 92       	push	r12
     fde:	df 92       	push	r13
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
Function to decay the potential towards 0
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
     fe4:	0e 94 cb 08 	call	0x1196	; 0x1196 <tinyTime_now>
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
     fe8:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <previous_update_time>
     fec:	68 1b       	sub	r22, r24
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	48 ec       	ldi	r20, 0xC8	; 200
     ffe:	52 e4       	ldi	r21, 0x42	; 66
    1000:	0e 94 46 09 	call	0x128c	; 0x128c <__divsf3>
    1004:	90 58       	subi	r25, 0x80	; 128
    1006:	0e 94 c0 09 	call	0x1380	; 0x1380 <exp>
    100a:	20 91 4a 38 	lds	r18, 0x384A	; 0x80384a <tinyPotential_potential>
    100e:	30 91 4b 38 	lds	r19, 0x384B	; 0x80384b <tinyPotential_potential+0x1>
    1012:	40 91 4c 38 	lds	r20, 0x384C	; 0x80384c <tinyPotential_potential+0x2>
    1016:	50 91 4d 38 	lds	r21, 0x384D	; 0x80384d <tinyPotential_potential+0x3>
    101a:	0e 94 94 0b 	call	0x1728	; 0x1728 <__mulsf3>
    101e:	6b 01       	movw	r12, r22
    1020:	7c 01       	movw	r14, r24
	if(fabs(tinyPotential_potential)<0.1){
    1022:	9f 77       	andi	r25, 0x7F	; 127
    1024:	2d ec       	ldi	r18, 0xCD	; 205
    1026:	3c ec       	ldi	r19, 0xCC	; 204
    1028:	4c ec       	ldi	r20, 0xCC	; 204
    102a:	5d e3       	ldi	r21, 0x3D	; 61
    102c:	0e 94 41 09 	call	0x1282	; 0x1282 <__cmpsf2>
    1030:	88 23       	and	r24, r24
    1032:	4c f0       	brlt	.+18     	; 0x1046 <tinyPotential_update+0x6a>
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    1034:	c0 92 4a 38 	sts	0x384A, r12	; 0x80384a <tinyPotential_potential>
    1038:	d0 92 4b 38 	sts	0x384B, r13	; 0x80384b <tinyPotential_potential+0x1>
    103c:	e0 92 4c 38 	sts	0x384C, r14	; 0x80384c <tinyPotential_potential+0x2>
    1040:	f0 92 4d 38 	sts	0x384D, r15	; 0x80384d <tinyPotential_potential+0x3>
    1044:	08 c0       	rjmp	.+16     	; 0x1056 <tinyPotential_update+0x7a>
	if(fabs(tinyPotential_potential)<0.1){
		tinyPotential_potential=0;
    1046:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <tinyPotential_potential>
    104a:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <tinyPotential_potential+0x1>
    104e:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <tinyPotential_potential+0x2>
    1052:	10 92 4d 38 	sts	0x384D, r1	; 0x80384d <tinyPotential_potential+0x3>
	}
	previous_update_time = tinyTime_now();
    1056:	0e 94 cb 08 	call	0x1196	; 0x1196 <tinyTime_now>
    105a:	60 93 46 38 	sts	0x3846, r22	; 0x803846 <previous_update_time>
    105e:	70 93 47 38 	sts	0x3847, r23	; 0x803847 <previous_update_time+0x1>
    1062:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <previous_update_time+0x2>
    1066:	90 93 49 38 	sts	0x3849, r25	; 0x803849 <previous_update_time+0x3>
void tinyPotential_update()
{
	//Some of the potential in the neuron has decayed away
	tinyPotential_decay();
	// Update potential with values from Dendrites
	tinyPotential_potential = tinyDendrite_update_potential(tinyPotential_potential);
    106a:	60 91 4a 38 	lds	r22, 0x384A	; 0x80384a <tinyPotential_potential>
    106e:	70 91 4b 38 	lds	r23, 0x384B	; 0x80384b <tinyPotential_potential+0x1>
    1072:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <tinyPotential_potential+0x2>
    1076:	90 91 4d 38 	lds	r25, 0x384D	; 0x80384d <tinyPotential_potential+0x3>
    107a:	0e 94 68 05 	call	0xad0	; 0xad0 <tinyDendrite_update_potential>
    107e:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <tinyPotential_potential>
    1082:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <tinyPotential_potential+0x1>
    1086:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <tinyPotential_potential+0x2>
    108a:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <tinyPotential_potential+0x3>
	
	// Update potential from button press
	tinyPotential_potential = tinyButton_update_potential(tinyPotential_potential);
    108e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <tinyButton_update_potential>
    1092:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <tinyPotential_potential>
    1096:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <tinyPotential_potential+0x1>
    109a:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <tinyPotential_potential+0x2>
    109e:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <tinyPotential_potential+0x3>
	
	// Update potential with values from spontaneous pulse.
	tinyPotential_potential = tinyPulse_update_potential(tinyPotential_potential);
    10a2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <tinyPulse_update_potential>
    10a6:	ab 01       	movw	r20, r22
    10a8:	bc 01       	movw	r22, r24
    10aa:	40 93 4a 38 	sts	0x384A, r20	; 0x80384a <tinyPotential_potential>
    10ae:	50 93 4b 38 	sts	0x384B, r21	; 0x80384b <tinyPotential_potential+0x1>
    10b2:	60 93 4c 38 	sts	0x384C, r22	; 0x80384c <tinyPotential_potential+0x2>
    10b6:	70 93 4d 38 	sts	0x384D, r23	; 0x80384d <tinyPotential_potential+0x3>
	
	tinyDebugger_send_double("Potential", tinyPotential_potential);
    10ba:	80 e3       	ldi	r24, 0x30	; 48
    10bc:	94 ea       	ldi	r25, 0xA4	; 164
    10be:	0e 94 60 04 	call	0x8c0	; 0x8c0 <tinyDebugger_send_double>
	
	
	// Let the axon affect the potential
	// This is also where we decide whether or not the axon should fire
	tinyPotential_potential = tinyAxon_update_potential(tinyPotential_potential);
    10c2:	60 91 4a 38 	lds	r22, 0x384A	; 0x80384a <tinyPotential_potential>
    10c6:	70 91 4b 38 	lds	r23, 0x384B	; 0x80384b <tinyPotential_potential+0x1>
    10ca:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <tinyPotential_potential+0x2>
    10ce:	90 91 4d 38 	lds	r25, 0x384D	; 0x80384d <tinyPotential_potential+0x3>
    10d2:	0e 94 ef 02 	call	0x5de	; 0x5de <tinyAxon_update_potential>
    10d6:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <tinyPotential_potential>
    10da:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <tinyPotential_potential+0x1>
    10de:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <tinyPotential_potential+0x2>
    10e2:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <tinyPotential_potential+0x3>
}
    10e6:	ff 90       	pop	r15
    10e8:	ef 90       	pop	r14
    10ea:	df 90       	pop	r13
    10ec:	cf 90       	pop	r12
    10ee:	08 95       	ret

000010f0 <tinyPulse_toggle_pulse_mode>:
uint32_t time_of_last_pulse = 0;
uint16_t time_since_last_pulse = 0;
uint16_t ideal_time_between_pulses = 1000/PULSEMODE_FREQUENCY;

void tinyPulse_toggle_pulse_mode(){
	pulse_mode = !pulse_mode;
    10f0:	90 91 54 38 	lds	r25, 0x3854	; 0x803854 <pulse_mode>
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	89 27       	eor	r24, r25
    10f8:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <pulse_mode>
    10fc:	08 95       	ret

000010fe <tinyPulse_update_potential>:
}

double tinyPulse_update_potential(double potential){
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14
    1104:	ff 92       	push	r15
    1106:	6b 01       	movw	r12, r22
    1108:	7c 01       	movw	r14, r24
	if(pulse_mode){
    110a:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <pulse_mode>
    110e:	88 23       	and	r24, r24
    1110:	39 f1       	breq	.+78     	; 0x1160 <tinyPulse_update_potential+0x62>
		
		time_since_last_pulse = tinyTime_now() - time_of_last_pulse;
    1112:	0e 94 cb 08 	call	0x1196	; 0x1196 <tinyTime_now>
    1116:	20 91 50 38 	lds	r18, 0x3850	; 0x803850 <time_of_last_pulse>
    111a:	30 91 51 38 	lds	r19, 0x3851	; 0x803851 <time_of_last_pulse+0x1>
    111e:	62 1b       	sub	r22, r18
    1120:	73 0b       	sbc	r23, r19
    1122:	60 93 4e 38 	sts	0x384E, r22	; 0x80384e <time_since_last_pulse>
    1126:	70 93 4f 38 	sts	0x384F, r23	; 0x80384f <time_since_last_pulse+0x1>
		
		if(time_since_last_pulse >= ideal_time_between_pulses){
    112a:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <ideal_time_between_pulses>
    112e:	90 91 15 38 	lds	r25, 0x3815	; 0x803815 <ideal_time_between_pulses+0x1>
    1132:	68 17       	cp	r22, r24
    1134:	79 07       	cpc	r23, r25
    1136:	a0 f0       	brcs	.+40     	; 0x1160 <tinyPulse_update_potential+0x62>
			// This isn't actually a button press. You could have a separate variable for this, but it seems unnecessary.
			potential += BUTTON_PRESS_REACTION;
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	48 ec       	ldi	r20, 0xC8	; 200
    113e:	51 e4       	ldi	r21, 0x41	; 65
    1140:	c7 01       	movw	r24, r14
    1142:	b6 01       	movw	r22, r12
    1144:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__addsf3>
    1148:	6b 01       	movw	r12, r22
    114a:	7c 01       	movw	r14, r24
			time_of_last_pulse = tinyTime_now();			
    114c:	0e 94 cb 08 	call	0x1196	; 0x1196 <tinyTime_now>
    1150:	60 93 50 38 	sts	0x3850, r22	; 0x803850 <time_of_last_pulse>
    1154:	70 93 51 38 	sts	0x3851, r23	; 0x803851 <time_of_last_pulse+0x1>
    1158:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <time_of_last_pulse+0x2>
    115c:	90 93 53 38 	sts	0x3853, r25	; 0x803853 <time_of_last_pulse+0x3>
		}
	}
	return potential;
}
    1160:	c7 01       	movw	r24, r14
    1162:	b6 01       	movw	r22, r12
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	08 95       	ret

0000116e <tinyTime_counter_increment>:
If the Interrupt Service Routine is clocked by a crystal oscillator
it gives a very precise timer-counter.
*/
void tinyTime_counter_increment(void)
{
	time_counter++;
    116e:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <time_counter>
    1172:	90 91 56 38 	lds	r25, 0x3856	; 0x803856 <time_counter+0x1>
    1176:	a0 91 57 38 	lds	r26, 0x3857	; 0x803857 <time_counter+0x2>
    117a:	b0 91 58 38 	lds	r27, 0x3858	; 0x803858 <time_counter+0x3>
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	a1 1d       	adc	r26, r1
    1182:	b1 1d       	adc	r27, r1
    1184:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <time_counter>
    1188:	90 93 56 38 	sts	0x3856, r25	; 0x803856 <time_counter+0x1>
    118c:	a0 93 57 38 	sts	0x3857, r26	; 0x803857 <time_counter+0x2>
    1190:	b0 93 58 38 	sts	0x3858, r27	; 0x803858 <time_counter+0x3>
    1194:	08 95       	ret

00001196 <tinyTime_now>:
/*
This function is callable by external libraries to give them the counted time so far.
*/
uint32_t tinyTime_now(void)
{
	return time_counter;
    1196:	60 91 55 38 	lds	r22, 0x3855	; 0x803855 <time_counter>
    119a:	70 91 56 38 	lds	r23, 0x3856	; 0x803856 <time_counter+0x1>
    119e:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <time_counter+0x2>
    11a2:	90 91 58 38 	lds	r25, 0x3858	; 0x803858 <time_counter+0x3>
    11a6:	08 95       	ret

000011a8 <__subsf3>:
    11a8:	50 58       	subi	r21, 0x80	; 128

000011aa <__addsf3>:
    11aa:	bb 27       	eor	r27, r27
    11ac:	aa 27       	eor	r26, r26
    11ae:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__addsf3x>
    11b2:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__fp_round>
    11b6:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__fp_pscA>
    11ba:	38 f0       	brcs	.+14     	; 0x11ca <__addsf3+0x20>
    11bc:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__fp_pscB>
    11c0:	20 f0       	brcs	.+8      	; 0x11ca <__addsf3+0x20>
    11c2:	39 f4       	brne	.+14     	; 0x11d2 <__addsf3+0x28>
    11c4:	9f 3f       	cpi	r25, 0xFF	; 255
    11c6:	19 f4       	brne	.+6      	; 0x11ce <__addsf3+0x24>
    11c8:	26 f4       	brtc	.+8      	; 0x11d2 <__addsf3+0x28>
    11ca:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__fp_nan>
    11ce:	0e f4       	brtc	.+2      	; 0x11d2 <__addsf3+0x28>
    11d0:	e0 95       	com	r30
    11d2:	e7 fb       	bst	r30, 7
    11d4:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_inf>

000011d8 <__addsf3x>:
    11d8:	e9 2f       	mov	r30, r25
    11da:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_split3>
    11de:	58 f3       	brcs	.-42     	; 0x11b6 <__addsf3+0xc>
    11e0:	ba 17       	cp	r27, r26
    11e2:	62 07       	cpc	r22, r18
    11e4:	73 07       	cpc	r23, r19
    11e6:	84 07       	cpc	r24, r20
    11e8:	95 07       	cpc	r25, r21
    11ea:	20 f0       	brcs	.+8      	; 0x11f4 <__addsf3x+0x1c>
    11ec:	79 f4       	brne	.+30     	; 0x120c <__addsf3x+0x34>
    11ee:	a6 f5       	brtc	.+104    	; 0x1258 <__addsf3x+0x80>
    11f0:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_zero>
    11f4:	0e f4       	brtc	.+2      	; 0x11f8 <__addsf3x+0x20>
    11f6:	e0 95       	com	r30
    11f8:	0b 2e       	mov	r0, r27
    11fa:	ba 2f       	mov	r27, r26
    11fc:	a0 2d       	mov	r26, r0
    11fe:	0b 01       	movw	r0, r22
    1200:	b9 01       	movw	r22, r18
    1202:	90 01       	movw	r18, r0
    1204:	0c 01       	movw	r0, r24
    1206:	ca 01       	movw	r24, r20
    1208:	a0 01       	movw	r20, r0
    120a:	11 24       	eor	r1, r1
    120c:	ff 27       	eor	r31, r31
    120e:	59 1b       	sub	r21, r25
    1210:	99 f0       	breq	.+38     	; 0x1238 <__addsf3x+0x60>
    1212:	59 3f       	cpi	r21, 0xF9	; 249
    1214:	50 f4       	brcc	.+20     	; 0x122a <__addsf3x+0x52>
    1216:	50 3e       	cpi	r21, 0xE0	; 224
    1218:	68 f1       	brcs	.+90     	; 0x1274 <__addsf3x+0x9c>
    121a:	1a 16       	cp	r1, r26
    121c:	f0 40       	sbci	r31, 0x00	; 0
    121e:	a2 2f       	mov	r26, r18
    1220:	23 2f       	mov	r18, r19
    1222:	34 2f       	mov	r19, r20
    1224:	44 27       	eor	r20, r20
    1226:	58 5f       	subi	r21, 0xF8	; 248
    1228:	f3 cf       	rjmp	.-26     	; 0x1210 <__addsf3x+0x38>
    122a:	46 95       	lsr	r20
    122c:	37 95       	ror	r19
    122e:	27 95       	ror	r18
    1230:	a7 95       	ror	r26
    1232:	f0 40       	sbci	r31, 0x00	; 0
    1234:	53 95       	inc	r21
    1236:	c9 f7       	brne	.-14     	; 0x122a <__addsf3x+0x52>
    1238:	7e f4       	brtc	.+30     	; 0x1258 <__addsf3x+0x80>
    123a:	1f 16       	cp	r1, r31
    123c:	ba 0b       	sbc	r27, r26
    123e:	62 0b       	sbc	r22, r18
    1240:	73 0b       	sbc	r23, r19
    1242:	84 0b       	sbc	r24, r20
    1244:	ba f0       	brmi	.+46     	; 0x1274 <__addsf3x+0x9c>
    1246:	91 50       	subi	r25, 0x01	; 1
    1248:	a1 f0       	breq	.+40     	; 0x1272 <__addsf3x+0x9a>
    124a:	ff 0f       	add	r31, r31
    124c:	bb 1f       	adc	r27, r27
    124e:	66 1f       	adc	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	88 1f       	adc	r24, r24
    1254:	c2 f7       	brpl	.-16     	; 0x1246 <__addsf3x+0x6e>
    1256:	0e c0       	rjmp	.+28     	; 0x1274 <__addsf3x+0x9c>
    1258:	ba 0f       	add	r27, r26
    125a:	62 1f       	adc	r22, r18
    125c:	73 1f       	adc	r23, r19
    125e:	84 1f       	adc	r24, r20
    1260:	48 f4       	brcc	.+18     	; 0x1274 <__addsf3x+0x9c>
    1262:	87 95       	ror	r24
    1264:	77 95       	ror	r23
    1266:	67 95       	ror	r22
    1268:	b7 95       	ror	r27
    126a:	f7 95       	ror	r31
    126c:	9e 3f       	cpi	r25, 0xFE	; 254
    126e:	08 f0       	brcs	.+2      	; 0x1272 <__addsf3x+0x9a>
    1270:	b0 cf       	rjmp	.-160    	; 0x11d2 <__addsf3+0x28>
    1272:	93 95       	inc	r25
    1274:	88 0f       	add	r24, r24
    1276:	08 f0       	brcs	.+2      	; 0x127a <__addsf3x+0xa2>
    1278:	99 27       	eor	r25, r25
    127a:	ee 0f       	add	r30, r30
    127c:	97 95       	ror	r25
    127e:	87 95       	ror	r24
    1280:	08 95       	ret

00001282 <__cmpsf2>:
    1282:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_cmp>
    1286:	08 f4       	brcc	.+2      	; 0x128a <__cmpsf2+0x8>
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	08 95       	ret

0000128c <__divsf3>:
    128c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__divsf3x>
    1290:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__fp_round>
    1294:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__fp_pscB>
    1298:	58 f0       	brcs	.+22     	; 0x12b0 <__divsf3+0x24>
    129a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__fp_pscA>
    129e:	40 f0       	brcs	.+16     	; 0x12b0 <__divsf3+0x24>
    12a0:	29 f4       	brne	.+10     	; 0x12ac <__divsf3+0x20>
    12a2:	5f 3f       	cpi	r21, 0xFF	; 255
    12a4:	29 f0       	breq	.+10     	; 0x12b0 <__divsf3+0x24>
    12a6:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_inf>
    12aa:	51 11       	cpse	r21, r1
    12ac:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__fp_szero>
    12b0:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__fp_nan>

000012b4 <__divsf3x>:
    12b4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_split3>
    12b8:	68 f3       	brcs	.-38     	; 0x1294 <__divsf3+0x8>

000012ba <__divsf3_pse>:
    12ba:	99 23       	and	r25, r25
    12bc:	b1 f3       	breq	.-20     	; 0x12aa <__divsf3+0x1e>
    12be:	55 23       	and	r21, r21
    12c0:	91 f3       	breq	.-28     	; 0x12a6 <__divsf3+0x1a>
    12c2:	95 1b       	sub	r25, r21
    12c4:	55 0b       	sbc	r21, r21
    12c6:	bb 27       	eor	r27, r27
    12c8:	aa 27       	eor	r26, r26
    12ca:	62 17       	cp	r22, r18
    12cc:	73 07       	cpc	r23, r19
    12ce:	84 07       	cpc	r24, r20
    12d0:	38 f0       	brcs	.+14     	; 0x12e0 <__divsf3_pse+0x26>
    12d2:	9f 5f       	subi	r25, 0xFF	; 255
    12d4:	5f 4f       	sbci	r21, 0xFF	; 255
    12d6:	22 0f       	add	r18, r18
    12d8:	33 1f       	adc	r19, r19
    12da:	44 1f       	adc	r20, r20
    12dc:	aa 1f       	adc	r26, r26
    12de:	a9 f3       	breq	.-22     	; 0x12ca <__divsf3_pse+0x10>
    12e0:	35 d0       	rcall	.+106    	; 0x134c <__divsf3_pse+0x92>
    12e2:	0e 2e       	mov	r0, r30
    12e4:	3a f0       	brmi	.+14     	; 0x12f4 <__divsf3_pse+0x3a>
    12e6:	e0 e8       	ldi	r30, 0x80	; 128
    12e8:	32 d0       	rcall	.+100    	; 0x134e <__divsf3_pse+0x94>
    12ea:	91 50       	subi	r25, 0x01	; 1
    12ec:	50 40       	sbci	r21, 0x00	; 0
    12ee:	e6 95       	lsr	r30
    12f0:	00 1c       	adc	r0, r0
    12f2:	ca f7       	brpl	.-14     	; 0x12e6 <__divsf3_pse+0x2c>
    12f4:	2b d0       	rcall	.+86     	; 0x134c <__divsf3_pse+0x92>
    12f6:	fe 2f       	mov	r31, r30
    12f8:	29 d0       	rcall	.+82     	; 0x134c <__divsf3_pse+0x92>
    12fa:	66 0f       	add	r22, r22
    12fc:	77 1f       	adc	r23, r23
    12fe:	88 1f       	adc	r24, r24
    1300:	bb 1f       	adc	r27, r27
    1302:	26 17       	cp	r18, r22
    1304:	37 07       	cpc	r19, r23
    1306:	48 07       	cpc	r20, r24
    1308:	ab 07       	cpc	r26, r27
    130a:	b0 e8       	ldi	r27, 0x80	; 128
    130c:	09 f0       	breq	.+2      	; 0x1310 <__divsf3_pse+0x56>
    130e:	bb 0b       	sbc	r27, r27
    1310:	80 2d       	mov	r24, r0
    1312:	bf 01       	movw	r22, r30
    1314:	ff 27       	eor	r31, r31
    1316:	93 58       	subi	r25, 0x83	; 131
    1318:	5f 4f       	sbci	r21, 0xFF	; 255
    131a:	3a f0       	brmi	.+14     	; 0x132a <__divsf3_pse+0x70>
    131c:	9e 3f       	cpi	r25, 0xFE	; 254
    131e:	51 05       	cpc	r21, r1
    1320:	78 f0       	brcs	.+30     	; 0x1340 <__divsf3_pse+0x86>
    1322:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_inf>
    1326:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__fp_szero>
    132a:	5f 3f       	cpi	r21, 0xFF	; 255
    132c:	e4 f3       	brlt	.-8      	; 0x1326 <__divsf3_pse+0x6c>
    132e:	98 3e       	cpi	r25, 0xE8	; 232
    1330:	d4 f3       	brlt	.-12     	; 0x1326 <__divsf3_pse+0x6c>
    1332:	86 95       	lsr	r24
    1334:	77 95       	ror	r23
    1336:	67 95       	ror	r22
    1338:	b7 95       	ror	r27
    133a:	f7 95       	ror	r31
    133c:	9f 5f       	subi	r25, 0xFF	; 255
    133e:	c9 f7       	brne	.-14     	; 0x1332 <__divsf3_pse+0x78>
    1340:	88 0f       	add	r24, r24
    1342:	91 1d       	adc	r25, r1
    1344:	96 95       	lsr	r25
    1346:	87 95       	ror	r24
    1348:	97 f9       	bld	r25, 7
    134a:	08 95       	ret
    134c:	e1 e0       	ldi	r30, 0x01	; 1
    134e:	66 0f       	add	r22, r22
    1350:	77 1f       	adc	r23, r23
    1352:	88 1f       	adc	r24, r24
    1354:	bb 1f       	adc	r27, r27
    1356:	62 17       	cp	r22, r18
    1358:	73 07       	cpc	r23, r19
    135a:	84 07       	cpc	r24, r20
    135c:	ba 07       	cpc	r27, r26
    135e:	20 f0       	brcs	.+8      	; 0x1368 <__divsf3_pse+0xae>
    1360:	62 1b       	sub	r22, r18
    1362:	73 0b       	sbc	r23, r19
    1364:	84 0b       	sbc	r24, r20
    1366:	ba 0b       	sbc	r27, r26
    1368:	ee 1f       	adc	r30, r30
    136a:	88 f7       	brcc	.-30     	; 0x134e <__divsf3_pse+0x94>
    136c:	e0 95       	com	r30
    136e:	08 95       	ret
    1370:	29 f4       	brne	.+10     	; 0x137c <__divsf3_pse+0xc2>
    1372:	16 f0       	brts	.+4      	; 0x1378 <__divsf3_pse+0xbe>
    1374:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_inf>
    1378:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_zero>
    137c:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__fp_nan>

00001380 <exp>:
    1380:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__fp_splitA>
    1384:	a8 f3       	brcs	.-22     	; 0x1370 <__divsf3_pse+0xb6>
    1386:	96 38       	cpi	r25, 0x86	; 134
    1388:	a0 f7       	brcc	.-24     	; 0x1372 <__divsf3_pse+0xb8>
    138a:	07 f8       	bld	r0, 7
    138c:	0f 92       	push	r0
    138e:	e8 94       	clt
    1390:	2b e3       	ldi	r18, 0x3B	; 59
    1392:	3a ea       	ldi	r19, 0xAA	; 170
    1394:	48 eb       	ldi	r20, 0xB8	; 184
    1396:	5f e7       	ldi	r21, 0x7F	; 127
    1398:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3_pse>
    139c:	0f 92       	push	r0
    139e:	0f 92       	push	r0
    13a0:	0f 92       	push	r0
    13a2:	4d b7       	in	r20, 0x3d	; 61
    13a4:	5e b7       	in	r21, 0x3e	; 62
    13a6:	0f 92       	push	r0
    13a8:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <modf>
    13ac:	ec e7       	ldi	r30, 0x7C	; 124
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__fp_powser>
    13b4:	4f 91       	pop	r20
    13b6:	5f 91       	pop	r21
    13b8:	ef 91       	pop	r30
    13ba:	ff 91       	pop	r31
    13bc:	e5 95       	asr	r30
    13be:	ee 1f       	adc	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	49 f0       	breq	.+18     	; 0x13d6 <exp+0x56>
    13c4:	fe 57       	subi	r31, 0x7E	; 126
    13c6:	e0 68       	ori	r30, 0x80	; 128
    13c8:	44 27       	eor	r20, r20
    13ca:	ee 0f       	add	r30, r30
    13cc:	44 1f       	adc	r20, r20
    13ce:	fa 95       	dec	r31
    13d0:	e1 f7       	brne	.-8      	; 0x13ca <exp+0x4a>
    13d2:	41 95       	neg	r20
    13d4:	55 0b       	sbc	r21, r21
    13d6:	0e 94 2a 0b 	call	0x1654	; 0x1654 <ldexp>
    13da:	0f 90       	pop	r0
    13dc:	07 fe       	sbrs	r0, 7
    13de:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <inverse>
    13e2:	08 95       	ret

000013e4 <__fixunssfsi>:
    13e4:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__fp_splitA>
    13e8:	88 f0       	brcs	.+34     	; 0x140c <__fixunssfsi+0x28>
    13ea:	9f 57       	subi	r25, 0x7F	; 127
    13ec:	98 f0       	brcs	.+38     	; 0x1414 <__fixunssfsi+0x30>
    13ee:	b9 2f       	mov	r27, r25
    13f0:	99 27       	eor	r25, r25
    13f2:	b7 51       	subi	r27, 0x17	; 23
    13f4:	b0 f0       	brcs	.+44     	; 0x1422 <__fixunssfsi+0x3e>
    13f6:	e1 f0       	breq	.+56     	; 0x1430 <__fixunssfsi+0x4c>
    13f8:	66 0f       	add	r22, r22
    13fa:	77 1f       	adc	r23, r23
    13fc:	88 1f       	adc	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	1a f0       	brmi	.+6      	; 0x1408 <__fixunssfsi+0x24>
    1402:	ba 95       	dec	r27
    1404:	c9 f7       	brne	.-14     	; 0x13f8 <__fixunssfsi+0x14>
    1406:	14 c0       	rjmp	.+40     	; 0x1430 <__fixunssfsi+0x4c>
    1408:	b1 30       	cpi	r27, 0x01	; 1
    140a:	91 f0       	breq	.+36     	; 0x1430 <__fixunssfsi+0x4c>
    140c:	0e 94 12 0b 	call	0x1624	; 0x1624 <__fp_zero>
    1410:	b1 e0       	ldi	r27, 0x01	; 1
    1412:	08 95       	ret
    1414:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_zero>
    1418:	67 2f       	mov	r22, r23
    141a:	78 2f       	mov	r23, r24
    141c:	88 27       	eor	r24, r24
    141e:	b8 5f       	subi	r27, 0xF8	; 248
    1420:	39 f0       	breq	.+14     	; 0x1430 <__fixunssfsi+0x4c>
    1422:	b9 3f       	cpi	r27, 0xF9	; 249
    1424:	cc f3       	brlt	.-14     	; 0x1418 <__fixunssfsi+0x34>
    1426:	86 95       	lsr	r24
    1428:	77 95       	ror	r23
    142a:	67 95       	ror	r22
    142c:	b3 95       	inc	r27
    142e:	d9 f7       	brne	.-10     	; 0x1426 <__fixunssfsi+0x42>
    1430:	3e f4       	brtc	.+14     	; 0x1440 <__fixunssfsi+0x5c>
    1432:	90 95       	com	r25
    1434:	80 95       	com	r24
    1436:	70 95       	com	r23
    1438:	61 95       	neg	r22
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	8f 4f       	sbci	r24, 0xFF	; 255
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	08 95       	ret

00001442 <__floatunsisf>:
    1442:	e8 94       	clt
    1444:	09 c0       	rjmp	.+18     	; 0x1458 <__floatsisf+0x12>

00001446 <__floatsisf>:
    1446:	97 fb       	bst	r25, 7
    1448:	3e f4       	brtc	.+14     	; 0x1458 <__floatsisf+0x12>
    144a:	90 95       	com	r25
    144c:	80 95       	com	r24
    144e:	70 95       	com	r23
    1450:	61 95       	neg	r22
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	8f 4f       	sbci	r24, 0xFF	; 255
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	99 23       	and	r25, r25
    145a:	a9 f0       	breq	.+42     	; 0x1486 <__floatsisf+0x40>
    145c:	f9 2f       	mov	r31, r25
    145e:	96 e9       	ldi	r25, 0x96	; 150
    1460:	bb 27       	eor	r27, r27
    1462:	93 95       	inc	r25
    1464:	f6 95       	lsr	r31
    1466:	87 95       	ror	r24
    1468:	77 95       	ror	r23
    146a:	67 95       	ror	r22
    146c:	b7 95       	ror	r27
    146e:	f1 11       	cpse	r31, r1
    1470:	f8 cf       	rjmp	.-16     	; 0x1462 <__floatsisf+0x1c>
    1472:	fa f4       	brpl	.+62     	; 0x14b2 <__floatsisf+0x6c>
    1474:	bb 0f       	add	r27, r27
    1476:	11 f4       	brne	.+4      	; 0x147c <__floatsisf+0x36>
    1478:	60 ff       	sbrs	r22, 0
    147a:	1b c0       	rjmp	.+54     	; 0x14b2 <__floatsisf+0x6c>
    147c:	6f 5f       	subi	r22, 0xFF	; 255
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	8f 4f       	sbci	r24, 0xFF	; 255
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	16 c0       	rjmp	.+44     	; 0x14b2 <__floatsisf+0x6c>
    1486:	88 23       	and	r24, r24
    1488:	11 f0       	breq	.+4      	; 0x148e <__floatsisf+0x48>
    148a:	96 e9       	ldi	r25, 0x96	; 150
    148c:	11 c0       	rjmp	.+34     	; 0x14b0 <__floatsisf+0x6a>
    148e:	77 23       	and	r23, r23
    1490:	21 f0       	breq	.+8      	; 0x149a <__floatsisf+0x54>
    1492:	9e e8       	ldi	r25, 0x8E	; 142
    1494:	87 2f       	mov	r24, r23
    1496:	76 2f       	mov	r23, r22
    1498:	05 c0       	rjmp	.+10     	; 0x14a4 <__floatsisf+0x5e>
    149a:	66 23       	and	r22, r22
    149c:	71 f0       	breq	.+28     	; 0x14ba <__floatsisf+0x74>
    149e:	96 e8       	ldi	r25, 0x86	; 134
    14a0:	86 2f       	mov	r24, r22
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	2a f0       	brmi	.+10     	; 0x14b2 <__floatsisf+0x6c>
    14a8:	9a 95       	dec	r25
    14aa:	66 0f       	add	r22, r22
    14ac:	77 1f       	adc	r23, r23
    14ae:	88 1f       	adc	r24, r24
    14b0:	da f7       	brpl	.-10     	; 0x14a8 <__floatsisf+0x62>
    14b2:	88 0f       	add	r24, r24
    14b4:	96 95       	lsr	r25
    14b6:	87 95       	ror	r24
    14b8:	97 f9       	bld	r25, 7
    14ba:	08 95       	ret

000014bc <fmin>:
    14bc:	99 0f       	add	r25, r25
    14be:	bb 0b       	sbc	r27, r27
    14c0:	55 0f       	add	r21, r21
    14c2:	aa 0b       	sbc	r26, r26
    14c4:	e0 e8       	ldi	r30, 0x80	; 128
    14c6:	fe ef       	ldi	r31, 0xFE	; 254
    14c8:	16 16       	cp	r1, r22
    14ca:	17 06       	cpc	r1, r23
    14cc:	e8 07       	cpc	r30, r24
    14ce:	f9 07       	cpc	r31, r25
    14d0:	70 f0       	brcs	.+28     	; 0x14ee <fmin+0x32>
    14d2:	12 16       	cp	r1, r18
    14d4:	13 06       	cpc	r1, r19
    14d6:	e4 07       	cpc	r30, r20
    14d8:	f5 07       	cpc	r31, r21
    14da:	60 f0       	brcs	.+24     	; 0x14f4 <fmin+0x38>
    14dc:	ba 17       	cp	r27, r26
    14de:	54 f0       	brlt	.+20     	; 0x14f4 <fmin+0x38>
    14e0:	31 f4       	brne	.+12     	; 0x14ee <fmin+0x32>
    14e2:	26 17       	cp	r18, r22
    14e4:	37 07       	cpc	r19, r23
    14e6:	48 07       	cpc	r20, r24
    14e8:	59 07       	cpc	r21, r25
    14ea:	a7 95       	ror	r26
    14ec:	1b f4       	brvc	.+6      	; 0x14f4 <fmin+0x38>
    14ee:	b9 01       	movw	r22, r18
    14f0:	ca 01       	movw	r24, r20
    14f2:	ba 2f       	mov	r27, r26
    14f4:	b6 95       	lsr	r27
    14f6:	97 95       	ror	r25
    14f8:	08 95       	ret

000014fa <__fp_cmp>:
    14fa:	99 0f       	add	r25, r25
    14fc:	00 08       	sbc	r0, r0
    14fe:	55 0f       	add	r21, r21
    1500:	aa 0b       	sbc	r26, r26
    1502:	e0 e8       	ldi	r30, 0x80	; 128
    1504:	fe ef       	ldi	r31, 0xFE	; 254
    1506:	16 16       	cp	r1, r22
    1508:	17 06       	cpc	r1, r23
    150a:	e8 07       	cpc	r30, r24
    150c:	f9 07       	cpc	r31, r25
    150e:	c0 f0       	brcs	.+48     	; 0x1540 <__fp_cmp+0x46>
    1510:	12 16       	cp	r1, r18
    1512:	13 06       	cpc	r1, r19
    1514:	e4 07       	cpc	r30, r20
    1516:	f5 07       	cpc	r31, r21
    1518:	98 f0       	brcs	.+38     	; 0x1540 <__fp_cmp+0x46>
    151a:	62 1b       	sub	r22, r18
    151c:	73 0b       	sbc	r23, r19
    151e:	84 0b       	sbc	r24, r20
    1520:	95 0b       	sbc	r25, r21
    1522:	39 f4       	brne	.+14     	; 0x1532 <__fp_cmp+0x38>
    1524:	0a 26       	eor	r0, r26
    1526:	61 f0       	breq	.+24     	; 0x1540 <__fp_cmp+0x46>
    1528:	23 2b       	or	r18, r19
    152a:	24 2b       	or	r18, r20
    152c:	25 2b       	or	r18, r21
    152e:	21 f4       	brne	.+8      	; 0x1538 <__fp_cmp+0x3e>
    1530:	08 95       	ret
    1532:	0a 26       	eor	r0, r26
    1534:	09 f4       	brne	.+2      	; 0x1538 <__fp_cmp+0x3e>
    1536:	a1 40       	sbci	r26, 0x01	; 1
    1538:	a6 95       	lsr	r26
    153a:	8f ef       	ldi	r24, 0xFF	; 255
    153c:	81 1d       	adc	r24, r1
    153e:	81 1d       	adc	r24, r1
    1540:	08 95       	ret

00001542 <__fp_inf>:
    1542:	97 f9       	bld	r25, 7
    1544:	9f 67       	ori	r25, 0x7F	; 127
    1546:	80 e8       	ldi	r24, 0x80	; 128
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	08 95       	ret

0000154e <__fp_nan>:
    154e:	9f ef       	ldi	r25, 0xFF	; 255
    1550:	80 ec       	ldi	r24, 0xC0	; 192
    1552:	08 95       	ret

00001554 <__fp_powser>:
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	1f 93       	push	r17
    155a:	0f 93       	push	r16
    155c:	ff 92       	push	r15
    155e:	ef 92       	push	r14
    1560:	df 92       	push	r13
    1562:	7b 01       	movw	r14, r22
    1564:	8c 01       	movw	r16, r24
    1566:	68 94       	set
    1568:	06 c0       	rjmp	.+12     	; 0x1576 <__fp_powser+0x22>
    156a:	da 2e       	mov	r13, r26
    156c:	ef 01       	movw	r28, r30
    156e:	0e 94 a7 0b 	call	0x174e	; 0x174e <__mulsf3x>
    1572:	fe 01       	movw	r30, r28
    1574:	e8 94       	clt
    1576:	a5 91       	lpm	r26, Z+
    1578:	25 91       	lpm	r18, Z+
    157a:	35 91       	lpm	r19, Z+
    157c:	45 91       	lpm	r20, Z+
    157e:	55 91       	lpm	r21, Z+
    1580:	a6 f3       	brts	.-24     	; 0x156a <__fp_powser+0x16>
    1582:	ef 01       	movw	r28, r30
    1584:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__addsf3x>
    1588:	fe 01       	movw	r30, r28
    158a:	97 01       	movw	r18, r14
    158c:	a8 01       	movw	r20, r16
    158e:	da 94       	dec	r13
    1590:	69 f7       	brne	.-38     	; 0x156c <__fp_powser+0x18>
    1592:	df 90       	pop	r13
    1594:	ef 90       	pop	r14
    1596:	ff 90       	pop	r15
    1598:	0f 91       	pop	r16
    159a:	1f 91       	pop	r17
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <__fp_pscA>:
    15a2:	00 24       	eor	r0, r0
    15a4:	0a 94       	dec	r0
    15a6:	16 16       	cp	r1, r22
    15a8:	17 06       	cpc	r1, r23
    15aa:	18 06       	cpc	r1, r24
    15ac:	09 06       	cpc	r0, r25
    15ae:	08 95       	ret

000015b0 <__fp_pscB>:
    15b0:	00 24       	eor	r0, r0
    15b2:	0a 94       	dec	r0
    15b4:	12 16       	cp	r1, r18
    15b6:	13 06       	cpc	r1, r19
    15b8:	14 06       	cpc	r1, r20
    15ba:	05 06       	cpc	r0, r21
    15bc:	08 95       	ret

000015be <__fp_round>:
    15be:	09 2e       	mov	r0, r25
    15c0:	03 94       	inc	r0
    15c2:	00 0c       	add	r0, r0
    15c4:	11 f4       	brne	.+4      	; 0x15ca <__fp_round+0xc>
    15c6:	88 23       	and	r24, r24
    15c8:	52 f0       	brmi	.+20     	; 0x15de <__fp_round+0x20>
    15ca:	bb 0f       	add	r27, r27
    15cc:	40 f4       	brcc	.+16     	; 0x15de <__fp_round+0x20>
    15ce:	bf 2b       	or	r27, r31
    15d0:	11 f4       	brne	.+4      	; 0x15d6 <__fp_round+0x18>
    15d2:	60 ff       	sbrs	r22, 0
    15d4:	04 c0       	rjmp	.+8      	; 0x15de <__fp_round+0x20>
    15d6:	6f 5f       	subi	r22, 0xFF	; 255
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	8f 4f       	sbci	r24, 0xFF	; 255
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	08 95       	ret

000015e0 <__fp_split3>:
    15e0:	57 fd       	sbrc	r21, 7
    15e2:	90 58       	subi	r25, 0x80	; 128
    15e4:	44 0f       	add	r20, r20
    15e6:	55 1f       	adc	r21, r21
    15e8:	59 f0       	breq	.+22     	; 0x1600 <__fp_splitA+0x10>
    15ea:	5f 3f       	cpi	r21, 0xFF	; 255
    15ec:	71 f0       	breq	.+28     	; 0x160a <__fp_splitA+0x1a>
    15ee:	47 95       	ror	r20

000015f0 <__fp_splitA>:
    15f0:	88 0f       	add	r24, r24
    15f2:	97 fb       	bst	r25, 7
    15f4:	99 1f       	adc	r25, r25
    15f6:	61 f0       	breq	.+24     	; 0x1610 <__fp_splitA+0x20>
    15f8:	9f 3f       	cpi	r25, 0xFF	; 255
    15fa:	79 f0       	breq	.+30     	; 0x161a <__fp_splitA+0x2a>
    15fc:	87 95       	ror	r24
    15fe:	08 95       	ret
    1600:	12 16       	cp	r1, r18
    1602:	13 06       	cpc	r1, r19
    1604:	14 06       	cpc	r1, r20
    1606:	55 1f       	adc	r21, r21
    1608:	f2 cf       	rjmp	.-28     	; 0x15ee <__fp_split3+0xe>
    160a:	46 95       	lsr	r20
    160c:	f1 df       	rcall	.-30     	; 0x15f0 <__fp_splitA>
    160e:	08 c0       	rjmp	.+16     	; 0x1620 <__fp_splitA+0x30>
    1610:	16 16       	cp	r1, r22
    1612:	17 06       	cpc	r1, r23
    1614:	18 06       	cpc	r1, r24
    1616:	99 1f       	adc	r25, r25
    1618:	f1 cf       	rjmp	.-30     	; 0x15fc <__fp_splitA+0xc>
    161a:	86 95       	lsr	r24
    161c:	71 05       	cpc	r23, r1
    161e:	61 05       	cpc	r22, r1
    1620:	08 94       	sec
    1622:	08 95       	ret

00001624 <__fp_zero>:
    1624:	e8 94       	clt

00001626 <__fp_szero>:
    1626:	bb 27       	eor	r27, r27
    1628:	66 27       	eor	r22, r22
    162a:	77 27       	eor	r23, r23
    162c:	cb 01       	movw	r24, r22
    162e:	97 f9       	bld	r25, 7
    1630:	08 95       	ret

00001632 <__gesf2>:
    1632:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_cmp>
    1636:	08 f4       	brcc	.+2      	; 0x163a <__gesf2+0x8>
    1638:	8f ef       	ldi	r24, 0xFF	; 255
    163a:	08 95       	ret

0000163c <inverse>:
    163c:	9b 01       	movw	r18, r22
    163e:	ac 01       	movw	r20, r24
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	80 e8       	ldi	r24, 0x80	; 128
    1646:	9f e3       	ldi	r25, 0x3F	; 63
    1648:	0c 94 46 09 	jmp	0x128c	; 0x128c <__divsf3>
    164c:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_inf>
    1650:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__fp_mpack>

00001654 <ldexp>:
    1654:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__fp_splitA>
    1658:	d8 f3       	brcs	.-10     	; 0x1650 <inverse+0x14>
    165a:	99 23       	and	r25, r25
    165c:	c9 f3       	breq	.-14     	; 0x1650 <inverse+0x14>
    165e:	94 0f       	add	r25, r20
    1660:	51 1d       	adc	r21, r1
    1662:	a3 f3       	brvs	.-24     	; 0x164c <inverse+0x10>
    1664:	91 50       	subi	r25, 0x01	; 1
    1666:	50 40       	sbci	r21, 0x00	; 0
    1668:	94 f0       	brlt	.+36     	; 0x168e <ldexp+0x3a>
    166a:	59 f0       	breq	.+22     	; 0x1682 <ldexp+0x2e>
    166c:	88 23       	and	r24, r24
    166e:	32 f0       	brmi	.+12     	; 0x167c <ldexp+0x28>
    1670:	66 0f       	add	r22, r22
    1672:	77 1f       	adc	r23, r23
    1674:	88 1f       	adc	r24, r24
    1676:	91 50       	subi	r25, 0x01	; 1
    1678:	50 40       	sbci	r21, 0x00	; 0
    167a:	c1 f7       	brne	.-16     	; 0x166c <ldexp+0x18>
    167c:	9e 3f       	cpi	r25, 0xFE	; 254
    167e:	51 05       	cpc	r21, r1
    1680:	2c f7       	brge	.-54     	; 0x164c <inverse+0x10>
    1682:	88 0f       	add	r24, r24
    1684:	91 1d       	adc	r25, r1
    1686:	96 95       	lsr	r25
    1688:	87 95       	ror	r24
    168a:	97 f9       	bld	r25, 7
    168c:	08 95       	ret
    168e:	5f 3f       	cpi	r21, 0xFF	; 255
    1690:	ac f0       	brlt	.+42     	; 0x16bc <ldexp+0x68>
    1692:	98 3e       	cpi	r25, 0xE8	; 232
    1694:	9c f0       	brlt	.+38     	; 0x16bc <ldexp+0x68>
    1696:	bb 27       	eor	r27, r27
    1698:	86 95       	lsr	r24
    169a:	77 95       	ror	r23
    169c:	67 95       	ror	r22
    169e:	b7 95       	ror	r27
    16a0:	08 f4       	brcc	.+2      	; 0x16a4 <ldexp+0x50>
    16a2:	b1 60       	ori	r27, 0x01	; 1
    16a4:	93 95       	inc	r25
    16a6:	c1 f7       	brne	.-16     	; 0x1698 <ldexp+0x44>
    16a8:	bb 0f       	add	r27, r27
    16aa:	58 f7       	brcc	.-42     	; 0x1682 <ldexp+0x2e>
    16ac:	11 f4       	brne	.+4      	; 0x16b2 <ldexp+0x5e>
    16ae:	60 ff       	sbrs	r22, 0
    16b0:	e8 cf       	rjmp	.-48     	; 0x1682 <ldexp+0x2e>
    16b2:	6f 5f       	subi	r22, 0xFF	; 255
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	8f 4f       	sbci	r24, 0xFF	; 255
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	e3 cf       	rjmp	.-58     	; 0x1682 <ldexp+0x2e>
    16bc:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__fp_szero>

000016c0 <modf>:
    16c0:	fa 01       	movw	r30, r20
    16c2:	dc 01       	movw	r26, r24
    16c4:	aa 0f       	add	r26, r26
    16c6:	bb 1f       	adc	r27, r27
    16c8:	9b 01       	movw	r18, r22
    16ca:	ac 01       	movw	r20, r24
    16cc:	bf 57       	subi	r27, 0x7F	; 127
    16ce:	28 f4       	brcc	.+10     	; 0x16da <modf+0x1a>
    16d0:	22 27       	eor	r18, r18
    16d2:	33 27       	eor	r19, r19
    16d4:	44 27       	eor	r20, r20
    16d6:	50 78       	andi	r21, 0x80	; 128
    16d8:	20 c0       	rjmp	.+64     	; 0x171a <modf+0x5a>
    16da:	b7 51       	subi	r27, 0x17	; 23
    16dc:	90 f4       	brcc	.+36     	; 0x1702 <modf+0x42>
    16de:	ab 2f       	mov	r26, r27
    16e0:	00 24       	eor	r0, r0
    16e2:	46 95       	lsr	r20
    16e4:	37 95       	ror	r19
    16e6:	27 95       	ror	r18
    16e8:	01 1c       	adc	r0, r1
    16ea:	a3 95       	inc	r26
    16ec:	d2 f3       	brmi	.-12     	; 0x16e2 <modf+0x22>
    16ee:	00 20       	and	r0, r0
    16f0:	71 f0       	breq	.+28     	; 0x170e <modf+0x4e>
    16f2:	22 0f       	add	r18, r18
    16f4:	33 1f       	adc	r19, r19
    16f6:	44 1f       	adc	r20, r20
    16f8:	b3 95       	inc	r27
    16fa:	da f3       	brmi	.-10     	; 0x16f2 <modf+0x32>
    16fc:	0e d0       	rcall	.+28     	; 0x171a <modf+0x5a>
    16fe:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__subsf3>
    1702:	61 30       	cpi	r22, 0x01	; 1
    1704:	71 05       	cpc	r23, r1
    1706:	a0 e8       	ldi	r26, 0x80	; 128
    1708:	8a 07       	cpc	r24, r26
    170a:	b9 46       	sbci	r27, 0x69	; 105
    170c:	30 f4       	brcc	.+12     	; 0x171a <modf+0x5a>
    170e:	9b 01       	movw	r18, r22
    1710:	ac 01       	movw	r20, r24
    1712:	66 27       	eor	r22, r22
    1714:	77 27       	eor	r23, r23
    1716:	88 27       	eor	r24, r24
    1718:	90 78       	andi	r25, 0x80	; 128
    171a:	30 96       	adiw	r30, 0x00	; 0
    171c:	21 f0       	breq	.+8      	; 0x1726 <modf+0x66>
    171e:	20 83       	st	Z, r18
    1720:	31 83       	std	Z+1, r19	; 0x01
    1722:	42 83       	std	Z+2, r20	; 0x02
    1724:	53 83       	std	Z+3, r21	; 0x03
    1726:	08 95       	ret

00001728 <__mulsf3>:
    1728:	0e 94 a7 0b 	call	0x174e	; 0x174e <__mulsf3x>
    172c:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__fp_round>
    1730:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__fp_pscA>
    1734:	38 f0       	brcs	.+14     	; 0x1744 <__mulsf3+0x1c>
    1736:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__fp_pscB>
    173a:	20 f0       	brcs	.+8      	; 0x1744 <__mulsf3+0x1c>
    173c:	95 23       	and	r25, r21
    173e:	11 f0       	breq	.+4      	; 0x1744 <__mulsf3+0x1c>
    1740:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_inf>
    1744:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__fp_nan>
    1748:	11 24       	eor	r1, r1
    174a:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__fp_szero>

0000174e <__mulsf3x>:
    174e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_split3>
    1752:	70 f3       	brcs	.-36     	; 0x1730 <__mulsf3+0x8>

00001754 <__mulsf3_pse>:
    1754:	95 9f       	mul	r25, r21
    1756:	c1 f3       	breq	.-16     	; 0x1748 <__mulsf3+0x20>
    1758:	95 0f       	add	r25, r21
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	55 1f       	adc	r21, r21
    175e:	62 9f       	mul	r22, r18
    1760:	f0 01       	movw	r30, r0
    1762:	72 9f       	mul	r23, r18
    1764:	bb 27       	eor	r27, r27
    1766:	f0 0d       	add	r31, r0
    1768:	b1 1d       	adc	r27, r1
    176a:	63 9f       	mul	r22, r19
    176c:	aa 27       	eor	r26, r26
    176e:	f0 0d       	add	r31, r0
    1770:	b1 1d       	adc	r27, r1
    1772:	aa 1f       	adc	r26, r26
    1774:	64 9f       	mul	r22, r20
    1776:	66 27       	eor	r22, r22
    1778:	b0 0d       	add	r27, r0
    177a:	a1 1d       	adc	r26, r1
    177c:	66 1f       	adc	r22, r22
    177e:	82 9f       	mul	r24, r18
    1780:	22 27       	eor	r18, r18
    1782:	b0 0d       	add	r27, r0
    1784:	a1 1d       	adc	r26, r1
    1786:	62 1f       	adc	r22, r18
    1788:	73 9f       	mul	r23, r19
    178a:	b0 0d       	add	r27, r0
    178c:	a1 1d       	adc	r26, r1
    178e:	62 1f       	adc	r22, r18
    1790:	83 9f       	mul	r24, r19
    1792:	a0 0d       	add	r26, r0
    1794:	61 1d       	adc	r22, r1
    1796:	22 1f       	adc	r18, r18
    1798:	74 9f       	mul	r23, r20
    179a:	33 27       	eor	r19, r19
    179c:	a0 0d       	add	r26, r0
    179e:	61 1d       	adc	r22, r1
    17a0:	23 1f       	adc	r18, r19
    17a2:	84 9f       	mul	r24, r20
    17a4:	60 0d       	add	r22, r0
    17a6:	21 1d       	adc	r18, r1
    17a8:	82 2f       	mov	r24, r18
    17aa:	76 2f       	mov	r23, r22
    17ac:	6a 2f       	mov	r22, r26
    17ae:	11 24       	eor	r1, r1
    17b0:	9f 57       	subi	r25, 0x7F	; 127
    17b2:	50 40       	sbci	r21, 0x00	; 0
    17b4:	9a f0       	brmi	.+38     	; 0x17dc <__mulsf3_pse+0x88>
    17b6:	f1 f0       	breq	.+60     	; 0x17f4 <__mulsf3_pse+0xa0>
    17b8:	88 23       	and	r24, r24
    17ba:	4a f0       	brmi	.+18     	; 0x17ce <__mulsf3_pse+0x7a>
    17bc:	ee 0f       	add	r30, r30
    17be:	ff 1f       	adc	r31, r31
    17c0:	bb 1f       	adc	r27, r27
    17c2:	66 1f       	adc	r22, r22
    17c4:	77 1f       	adc	r23, r23
    17c6:	88 1f       	adc	r24, r24
    17c8:	91 50       	subi	r25, 0x01	; 1
    17ca:	50 40       	sbci	r21, 0x00	; 0
    17cc:	a9 f7       	brne	.-22     	; 0x17b8 <__mulsf3_pse+0x64>
    17ce:	9e 3f       	cpi	r25, 0xFE	; 254
    17d0:	51 05       	cpc	r21, r1
    17d2:	80 f0       	brcs	.+32     	; 0x17f4 <__mulsf3_pse+0xa0>
    17d4:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_inf>
    17d8:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__fp_szero>
    17dc:	5f 3f       	cpi	r21, 0xFF	; 255
    17de:	e4 f3       	brlt	.-8      	; 0x17d8 <__mulsf3_pse+0x84>
    17e0:	98 3e       	cpi	r25, 0xE8	; 232
    17e2:	d4 f3       	brlt	.-12     	; 0x17d8 <__mulsf3_pse+0x84>
    17e4:	86 95       	lsr	r24
    17e6:	77 95       	ror	r23
    17e8:	67 95       	ror	r22
    17ea:	b7 95       	ror	r27
    17ec:	f7 95       	ror	r31
    17ee:	e7 95       	ror	r30
    17f0:	9f 5f       	subi	r25, 0xFF	; 255
    17f2:	c1 f7       	brne	.-16     	; 0x17e4 <__mulsf3_pse+0x90>
    17f4:	fe 2b       	or	r31, r30
    17f6:	88 0f       	add	r24, r24
    17f8:	91 1d       	adc	r25, r1
    17fa:	96 95       	lsr	r25
    17fc:	87 95       	ror	r24
    17fe:	97 f9       	bld	r25, 7
    1800:	08 95       	ret

00001802 <sin>:
    1802:	9f 93       	push	r25
    1804:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fp_rempio2>
    1808:	0f 90       	pop	r0
    180a:	07 fc       	sbrc	r0, 7
    180c:	ee 5f       	subi	r30, 0xFE	; 254
    180e:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <__fp_sinus>

00001812 <__fp_mpack>:
    1812:	9f 3f       	cpi	r25, 0xFF	; 255
    1814:	31 f0       	breq	.+12     	; 0x1822 <__fp_mpack_finite+0xc>

00001816 <__fp_mpack_finite>:
    1816:	91 50       	subi	r25, 0x01	; 1
    1818:	20 f4       	brcc	.+8      	; 0x1822 <__fp_mpack_finite+0xc>
    181a:	87 95       	ror	r24
    181c:	77 95       	ror	r23
    181e:	67 95       	ror	r22
    1820:	b7 95       	ror	r27
    1822:	88 0f       	add	r24, r24
    1824:	91 1d       	adc	r25, r1
    1826:	96 95       	lsr	r25
    1828:	87 95       	ror	r24
    182a:	97 f9       	bld	r25, 7
    182c:	08 95       	ret
    182e:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__fp_nan>

00001832 <__fp_rempio2>:
    1832:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__fp_splitA>
    1836:	d8 f3       	brcs	.-10     	; 0x182e <__fp_mpack_finite+0x18>
    1838:	e8 94       	clt
    183a:	e0 e0       	ldi	r30, 0x00	; 0
    183c:	bb 27       	eor	r27, r27
    183e:	9f 57       	subi	r25, 0x7F	; 127
    1840:	f0 f0       	brcs	.+60     	; 0x187e <__fp_rempio2+0x4c>
    1842:	2a ed       	ldi	r18, 0xDA	; 218
    1844:	3f e0       	ldi	r19, 0x0F	; 15
    1846:	49 ec       	ldi	r20, 0xC9	; 201
    1848:	06 c0       	rjmp	.+12     	; 0x1856 <__fp_rempio2+0x24>
    184a:	ee 0f       	add	r30, r30
    184c:	bb 0f       	add	r27, r27
    184e:	66 1f       	adc	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	88 1f       	adc	r24, r24
    1854:	28 f0       	brcs	.+10     	; 0x1860 <__fp_rempio2+0x2e>
    1856:	b2 3a       	cpi	r27, 0xA2	; 162
    1858:	62 07       	cpc	r22, r18
    185a:	73 07       	cpc	r23, r19
    185c:	84 07       	cpc	r24, r20
    185e:	28 f0       	brcs	.+10     	; 0x186a <__fp_rempio2+0x38>
    1860:	b2 5a       	subi	r27, 0xA2	; 162
    1862:	62 0b       	sbc	r22, r18
    1864:	73 0b       	sbc	r23, r19
    1866:	84 0b       	sbc	r24, r20
    1868:	e3 95       	inc	r30
    186a:	9a 95       	dec	r25
    186c:	72 f7       	brpl	.-36     	; 0x184a <__fp_rempio2+0x18>
    186e:	80 38       	cpi	r24, 0x80	; 128
    1870:	30 f4       	brcc	.+12     	; 0x187e <__fp_rempio2+0x4c>
    1872:	9a 95       	dec	r25
    1874:	bb 0f       	add	r27, r27
    1876:	66 1f       	adc	r22, r22
    1878:	77 1f       	adc	r23, r23
    187a:	88 1f       	adc	r24, r24
    187c:	d2 f7       	brpl	.-12     	; 0x1872 <__fp_rempio2+0x40>
    187e:	90 48       	sbci	r25, 0x80	; 128
    1880:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__fp_mpack_finite>

00001884 <__fp_sinus>:
    1884:	ef 93       	push	r30
    1886:	e0 ff       	sbrs	r30, 0
    1888:	07 c0       	rjmp	.+14     	; 0x1898 <__fp_sinus+0x14>
    188a:	a2 ea       	ldi	r26, 0xA2	; 162
    188c:	2a ed       	ldi	r18, 0xDA	; 218
    188e:	3f e0       	ldi	r19, 0x0F	; 15
    1890:	49 ec       	ldi	r20, 0xC9	; 201
    1892:	5f eb       	ldi	r21, 0xBF	; 191
    1894:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__addsf3x>
    1898:	0e 94 df 0a 	call	0x15be	; 0x15be <__fp_round>
    189c:	0f 90       	pop	r0
    189e:	03 94       	inc	r0
    18a0:	01 fc       	sbrc	r0, 1
    18a2:	90 58       	subi	r25, 0x80	; 128
    18a4:	e4 ea       	ldi	r30, 0xA4	; 164
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__fp_powsodd>

000018ac <__fp_powsodd>:
    18ac:	9f 93       	push	r25
    18ae:	8f 93       	push	r24
    18b0:	7f 93       	push	r23
    18b2:	6f 93       	push	r22
    18b4:	ff 93       	push	r31
    18b6:	ef 93       	push	r30
    18b8:	9b 01       	movw	r18, r22
    18ba:	ac 01       	movw	r20, r24
    18bc:	0e 94 94 0b 	call	0x1728	; 0x1728 <__mulsf3>
    18c0:	ef 91       	pop	r30
    18c2:	ff 91       	pop	r31
    18c4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__fp_powser>
    18c8:	2f 91       	pop	r18
    18ca:	3f 91       	pop	r19
    18cc:	4f 91       	pop	r20
    18ce:	5f 91       	pop	r21
    18d0:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__mulsf3>

000018d4 <__udivmodsi4>:
    18d4:	a1 e2       	ldi	r26, 0x21	; 33
    18d6:	1a 2e       	mov	r1, r26
    18d8:	aa 1b       	sub	r26, r26
    18da:	bb 1b       	sub	r27, r27
    18dc:	fd 01       	movw	r30, r26
    18de:	0d c0       	rjmp	.+26     	; 0x18fa <__udivmodsi4_ep>

000018e0 <__udivmodsi4_loop>:
    18e0:	aa 1f       	adc	r26, r26
    18e2:	bb 1f       	adc	r27, r27
    18e4:	ee 1f       	adc	r30, r30
    18e6:	ff 1f       	adc	r31, r31
    18e8:	a2 17       	cp	r26, r18
    18ea:	b3 07       	cpc	r27, r19
    18ec:	e4 07       	cpc	r30, r20
    18ee:	f5 07       	cpc	r31, r21
    18f0:	20 f0       	brcs	.+8      	; 0x18fa <__udivmodsi4_ep>
    18f2:	a2 1b       	sub	r26, r18
    18f4:	b3 0b       	sbc	r27, r19
    18f6:	e4 0b       	sbc	r30, r20
    18f8:	f5 0b       	sbc	r31, r21

000018fa <__udivmodsi4_ep>:
    18fa:	66 1f       	adc	r22, r22
    18fc:	77 1f       	adc	r23, r23
    18fe:	88 1f       	adc	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	1a 94       	dec	r1
    1904:	69 f7       	brne	.-38     	; 0x18e0 <__udivmodsi4_loop>
    1906:	60 95       	com	r22
    1908:	70 95       	com	r23
    190a:	80 95       	com	r24
    190c:	90 95       	com	r25
    190e:	9b 01       	movw	r18, r22
    1910:	ac 01       	movw	r20, r24
    1912:	bd 01       	movw	r22, r26
    1914:	cf 01       	movw	r24, r30
    1916:	08 95       	ret

00001918 <dtostrf>:
    1918:	ef 92       	push	r14
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	e8 01       	movw	r28, r16
    1924:	47 fd       	sbrc	r20, 7
    1926:	02 c0       	rjmp	.+4      	; 0x192c <dtostrf+0x14>
    1928:	34 e0       	ldi	r19, 0x04	; 4
    192a:	01 c0       	rjmp	.+2      	; 0x192e <dtostrf+0x16>
    192c:	34 e1       	ldi	r19, 0x14	; 20
    192e:	04 2e       	mov	r0, r20
    1930:	00 0c       	add	r0, r0
    1932:	55 0b       	sbc	r21, r21
    1934:	57 ff       	sbrs	r21, 7
    1936:	03 c0       	rjmp	.+6      	; 0x193e <dtostrf+0x26>
    1938:	51 95       	neg	r21
    193a:	41 95       	neg	r20
    193c:	51 09       	sbc	r21, r1
    193e:	e3 2e       	mov	r14, r19
    1940:	02 2f       	mov	r16, r18
    1942:	24 2f       	mov	r18, r20
    1944:	ae 01       	movw	r20, r28
    1946:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <dtoa_prf>
    194a:	ce 01       	movw	r24, r28
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	ef 90       	pop	r14
    1956:	08 95       	ret

00001958 <printf>:
    1958:	a0 e0       	ldi	r26, 0x00	; 0
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e2 eb       	ldi	r30, 0xB2	; 178
    195e:	fc e0       	ldi	r31, 0x0C	; 12
    1960:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__prologue_saves__+0x20>
    1964:	ae 01       	movw	r20, r28
    1966:	4b 5f       	subi	r20, 0xFB	; 251
    1968:	5f 4f       	sbci	r21, 0xFF	; 255
    196a:	fa 01       	movw	r30, r20
    196c:	61 91       	ld	r22, Z+
    196e:	71 91       	ld	r23, Z+
    1970:	af 01       	movw	r20, r30
    1972:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <__iob+0x2>
    1976:	90 91 69 38 	lds	r25, 0x3869	; 0x803869 <__iob+0x3>
    197a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <vfprintf>
    197e:	e2 e0       	ldi	r30, 0x02	; 2
    1980:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__epilogue_restores__+0x20>

00001984 <puts>:
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	e0 91 68 38 	lds	r30, 0x3868	; 0x803868 <__iob+0x2>
    1990:	f0 91 69 38 	lds	r31, 0x3869	; 0x803869 <__iob+0x3>
    1994:	23 81       	ldd	r18, Z+3	; 0x03
    1996:	21 ff       	sbrs	r18, 1
    1998:	1b c0       	rjmp	.+54     	; 0x19d0 <puts+0x4c>
    199a:	8c 01       	movw	r16, r24
    199c:	d0 e0       	ldi	r29, 0x00	; 0
    199e:	c0 e0       	ldi	r28, 0x00	; 0
    19a0:	f8 01       	movw	r30, r16
    19a2:	81 91       	ld	r24, Z+
    19a4:	8f 01       	movw	r16, r30
    19a6:	60 91 68 38 	lds	r22, 0x3868	; 0x803868 <__iob+0x2>
    19aa:	70 91 69 38 	lds	r23, 0x3869	; 0x803869 <__iob+0x3>
    19ae:	db 01       	movw	r26, r22
    19b0:	18 96       	adiw	r26, 0x08	; 8
    19b2:	ed 91       	ld	r30, X+
    19b4:	fc 91       	ld	r31, X
    19b6:	19 97       	sbiw	r26, 0x09	; 9
    19b8:	88 23       	and	r24, r24
    19ba:	31 f0       	breq	.+12     	; 0x19c8 <puts+0x44>
    19bc:	09 95       	icall
    19be:	89 2b       	or	r24, r25
    19c0:	79 f3       	breq	.-34     	; 0x19a0 <puts+0x1c>
    19c2:	df ef       	ldi	r29, 0xFF	; 255
    19c4:	cf ef       	ldi	r28, 0xFF	; 255
    19c6:	ec cf       	rjmp	.-40     	; 0x19a0 <puts+0x1c>
    19c8:	8a e0       	ldi	r24, 0x0A	; 10
    19ca:	09 95       	icall
    19cc:	89 2b       	or	r24, r25
    19ce:	19 f0       	breq	.+6      	; 0x19d6 <puts+0x52>
    19d0:	8f ef       	ldi	r24, 0xFF	; 255
    19d2:	9f ef       	ldi	r25, 0xFF	; 255
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <puts+0x56>
    19d6:	8d 2f       	mov	r24, r29
    19d8:	9c 2f       	mov	r25, r28
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	08 95       	ret

000019e4 <vfprintf>:
    19e4:	ab e0       	ldi	r26, 0x0B	; 11
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e8 ef       	ldi	r30, 0xF8	; 248
    19ea:	fc e0       	ldi	r31, 0x0C	; 12
    19ec:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__>
    19f0:	6c 01       	movw	r12, r24
    19f2:	7b 01       	movw	r14, r22
    19f4:	8a 01       	movw	r16, r20
    19f6:	fc 01       	movw	r30, r24
    19f8:	16 82       	std	Z+6, r1	; 0x06
    19fa:	17 82       	std	Z+7, r1	; 0x07
    19fc:	83 81       	ldd	r24, Z+3	; 0x03
    19fe:	81 ff       	sbrs	r24, 1
    1a00:	cc c1       	rjmp	.+920    	; 0x1d9a <vfprintf+0x3b6>
    1a02:	ce 01       	movw	r24, r28
    1a04:	01 96       	adiw	r24, 0x01	; 1
    1a06:	3c 01       	movw	r6, r24
    1a08:	f6 01       	movw	r30, r12
    1a0a:	93 81       	ldd	r25, Z+3	; 0x03
    1a0c:	f7 01       	movw	r30, r14
    1a0e:	93 fd       	sbrc	r25, 3
    1a10:	85 91       	lpm	r24, Z+
    1a12:	93 ff       	sbrs	r25, 3
    1a14:	81 91       	ld	r24, Z+
    1a16:	7f 01       	movw	r14, r30
    1a18:	88 23       	and	r24, r24
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <vfprintf+0x3a>
    1a1c:	ba c1       	rjmp	.+884    	; 0x1d92 <vfprintf+0x3ae>
    1a1e:	85 32       	cpi	r24, 0x25	; 37
    1a20:	39 f4       	brne	.+14     	; 0x1a30 <vfprintf+0x4c>
    1a22:	93 fd       	sbrc	r25, 3
    1a24:	85 91       	lpm	r24, Z+
    1a26:	93 ff       	sbrs	r25, 3
    1a28:	81 91       	ld	r24, Z+
    1a2a:	7f 01       	movw	r14, r30
    1a2c:	85 32       	cpi	r24, 0x25	; 37
    1a2e:	29 f4       	brne	.+10     	; 0x1a3a <vfprintf+0x56>
    1a30:	b6 01       	movw	r22, r12
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	0e 94 1b 11 	call	0x2236	; 0x2236 <fputc>
    1a38:	e7 cf       	rjmp	.-50     	; 0x1a08 <vfprintf+0x24>
    1a3a:	91 2c       	mov	r9, r1
    1a3c:	21 2c       	mov	r2, r1
    1a3e:	31 2c       	mov	r3, r1
    1a40:	ff e1       	ldi	r31, 0x1F	; 31
    1a42:	f3 15       	cp	r31, r3
    1a44:	d8 f0       	brcs	.+54     	; 0x1a7c <vfprintf+0x98>
    1a46:	8b 32       	cpi	r24, 0x2B	; 43
    1a48:	79 f0       	breq	.+30     	; 0x1a68 <vfprintf+0x84>
    1a4a:	38 f4       	brcc	.+14     	; 0x1a5a <vfprintf+0x76>
    1a4c:	80 32       	cpi	r24, 0x20	; 32
    1a4e:	79 f0       	breq	.+30     	; 0x1a6e <vfprintf+0x8a>
    1a50:	83 32       	cpi	r24, 0x23	; 35
    1a52:	a1 f4       	brne	.+40     	; 0x1a7c <vfprintf+0x98>
    1a54:	23 2d       	mov	r18, r3
    1a56:	20 61       	ori	r18, 0x10	; 16
    1a58:	1d c0       	rjmp	.+58     	; 0x1a94 <vfprintf+0xb0>
    1a5a:	8d 32       	cpi	r24, 0x2D	; 45
    1a5c:	61 f0       	breq	.+24     	; 0x1a76 <vfprintf+0x92>
    1a5e:	80 33       	cpi	r24, 0x30	; 48
    1a60:	69 f4       	brne	.+26     	; 0x1a7c <vfprintf+0x98>
    1a62:	23 2d       	mov	r18, r3
    1a64:	21 60       	ori	r18, 0x01	; 1
    1a66:	16 c0       	rjmp	.+44     	; 0x1a94 <vfprintf+0xb0>
    1a68:	83 2d       	mov	r24, r3
    1a6a:	82 60       	ori	r24, 0x02	; 2
    1a6c:	38 2e       	mov	r3, r24
    1a6e:	e3 2d       	mov	r30, r3
    1a70:	e4 60       	ori	r30, 0x04	; 4
    1a72:	3e 2e       	mov	r3, r30
    1a74:	2a c0       	rjmp	.+84     	; 0x1aca <vfprintf+0xe6>
    1a76:	f3 2d       	mov	r31, r3
    1a78:	f8 60       	ori	r31, 0x08	; 8
    1a7a:	1d c0       	rjmp	.+58     	; 0x1ab6 <vfprintf+0xd2>
    1a7c:	37 fc       	sbrc	r3, 7
    1a7e:	2d c0       	rjmp	.+90     	; 0x1ada <vfprintf+0xf6>
    1a80:	20 ed       	ldi	r18, 0xD0	; 208
    1a82:	28 0f       	add	r18, r24
    1a84:	2a 30       	cpi	r18, 0x0A	; 10
    1a86:	40 f0       	brcs	.+16     	; 0x1a98 <vfprintf+0xb4>
    1a88:	8e 32       	cpi	r24, 0x2E	; 46
    1a8a:	b9 f4       	brne	.+46     	; 0x1aba <vfprintf+0xd6>
    1a8c:	36 fc       	sbrc	r3, 6
    1a8e:	81 c1       	rjmp	.+770    	; 0x1d92 <vfprintf+0x3ae>
    1a90:	23 2d       	mov	r18, r3
    1a92:	20 64       	ori	r18, 0x40	; 64
    1a94:	32 2e       	mov	r3, r18
    1a96:	19 c0       	rjmp	.+50     	; 0x1aca <vfprintf+0xe6>
    1a98:	36 fe       	sbrs	r3, 6
    1a9a:	06 c0       	rjmp	.+12     	; 0x1aa8 <vfprintf+0xc4>
    1a9c:	8a e0       	ldi	r24, 0x0A	; 10
    1a9e:	98 9e       	mul	r9, r24
    1aa0:	20 0d       	add	r18, r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	92 2e       	mov	r9, r18
    1aa6:	11 c0       	rjmp	.+34     	; 0x1aca <vfprintf+0xe6>
    1aa8:	ea e0       	ldi	r30, 0x0A	; 10
    1aaa:	2e 9e       	mul	r2, r30
    1aac:	20 0d       	add	r18, r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	22 2e       	mov	r2, r18
    1ab2:	f3 2d       	mov	r31, r3
    1ab4:	f0 62       	ori	r31, 0x20	; 32
    1ab6:	3f 2e       	mov	r3, r31
    1ab8:	08 c0       	rjmp	.+16     	; 0x1aca <vfprintf+0xe6>
    1aba:	8c 36       	cpi	r24, 0x6C	; 108
    1abc:	21 f4       	brne	.+8      	; 0x1ac6 <vfprintf+0xe2>
    1abe:	83 2d       	mov	r24, r3
    1ac0:	80 68       	ori	r24, 0x80	; 128
    1ac2:	38 2e       	mov	r3, r24
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <vfprintf+0xe6>
    1ac6:	88 36       	cpi	r24, 0x68	; 104
    1ac8:	41 f4       	brne	.+16     	; 0x1ada <vfprintf+0xf6>
    1aca:	f7 01       	movw	r30, r14
    1acc:	93 fd       	sbrc	r25, 3
    1ace:	85 91       	lpm	r24, Z+
    1ad0:	93 ff       	sbrs	r25, 3
    1ad2:	81 91       	ld	r24, Z+
    1ad4:	7f 01       	movw	r14, r30
    1ad6:	81 11       	cpse	r24, r1
    1ad8:	b3 cf       	rjmp	.-154    	; 0x1a40 <vfprintf+0x5c>
    1ada:	98 2f       	mov	r25, r24
    1adc:	9f 7d       	andi	r25, 0xDF	; 223
    1ade:	95 54       	subi	r25, 0x45	; 69
    1ae0:	93 30       	cpi	r25, 0x03	; 3
    1ae2:	28 f4       	brcc	.+10     	; 0x1aee <vfprintf+0x10a>
    1ae4:	0c 5f       	subi	r16, 0xFC	; 252
    1ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae8:	9f e3       	ldi	r25, 0x3F	; 63
    1aea:	99 83       	std	Y+1, r25	; 0x01
    1aec:	0d c0       	rjmp	.+26     	; 0x1b08 <vfprintf+0x124>
    1aee:	83 36       	cpi	r24, 0x63	; 99
    1af0:	31 f0       	breq	.+12     	; 0x1afe <vfprintf+0x11a>
    1af2:	83 37       	cpi	r24, 0x73	; 115
    1af4:	71 f0       	breq	.+28     	; 0x1b12 <vfprintf+0x12e>
    1af6:	83 35       	cpi	r24, 0x53	; 83
    1af8:	09 f0       	breq	.+2      	; 0x1afc <vfprintf+0x118>
    1afa:	59 c0       	rjmp	.+178    	; 0x1bae <vfprintf+0x1ca>
    1afc:	21 c0       	rjmp	.+66     	; 0x1b40 <vfprintf+0x15c>
    1afe:	f8 01       	movw	r30, r16
    1b00:	80 81       	ld	r24, Z
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	0e 5f       	subi	r16, 0xFE	; 254
    1b06:	1f 4f       	sbci	r17, 0xFF	; 255
    1b08:	88 24       	eor	r8, r8
    1b0a:	83 94       	inc	r8
    1b0c:	91 2c       	mov	r9, r1
    1b0e:	53 01       	movw	r10, r6
    1b10:	13 c0       	rjmp	.+38     	; 0x1b38 <vfprintf+0x154>
    1b12:	28 01       	movw	r4, r16
    1b14:	f2 e0       	ldi	r31, 0x02	; 2
    1b16:	4f 0e       	add	r4, r31
    1b18:	51 1c       	adc	r5, r1
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	a0 80       	ld	r10, Z
    1b1e:	b1 80       	ldd	r11, Z+1	; 0x01
    1b20:	36 fe       	sbrs	r3, 6
    1b22:	03 c0       	rjmp	.+6      	; 0x1b2a <vfprintf+0x146>
    1b24:	69 2d       	mov	r22, r9
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <vfprintf+0x14a>
    1b2a:	6f ef       	ldi	r22, 0xFF	; 255
    1b2c:	7f ef       	ldi	r23, 0xFF	; 255
    1b2e:	c5 01       	movw	r24, r10
    1b30:	0e 94 10 11 	call	0x2220	; 0x2220 <strnlen>
    1b34:	4c 01       	movw	r8, r24
    1b36:	82 01       	movw	r16, r4
    1b38:	f3 2d       	mov	r31, r3
    1b3a:	ff 77       	andi	r31, 0x7F	; 127
    1b3c:	3f 2e       	mov	r3, r31
    1b3e:	16 c0       	rjmp	.+44     	; 0x1b6c <vfprintf+0x188>
    1b40:	28 01       	movw	r4, r16
    1b42:	22 e0       	ldi	r18, 0x02	; 2
    1b44:	42 0e       	add	r4, r18
    1b46:	51 1c       	adc	r5, r1
    1b48:	f8 01       	movw	r30, r16
    1b4a:	a0 80       	ld	r10, Z
    1b4c:	b1 80       	ldd	r11, Z+1	; 0x01
    1b4e:	36 fe       	sbrs	r3, 6
    1b50:	03 c0       	rjmp	.+6      	; 0x1b58 <vfprintf+0x174>
    1b52:	69 2d       	mov	r22, r9
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <vfprintf+0x178>
    1b58:	6f ef       	ldi	r22, 0xFF	; 255
    1b5a:	7f ef       	ldi	r23, 0xFF	; 255
    1b5c:	c5 01       	movw	r24, r10
    1b5e:	0e 94 05 11 	call	0x220a	; 0x220a <strnlen_P>
    1b62:	4c 01       	movw	r8, r24
    1b64:	f3 2d       	mov	r31, r3
    1b66:	f0 68       	ori	r31, 0x80	; 128
    1b68:	3f 2e       	mov	r3, r31
    1b6a:	82 01       	movw	r16, r4
    1b6c:	33 fc       	sbrc	r3, 3
    1b6e:	1b c0       	rjmp	.+54     	; 0x1ba6 <vfprintf+0x1c2>
    1b70:	82 2d       	mov	r24, r2
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	88 16       	cp	r8, r24
    1b76:	99 06       	cpc	r9, r25
    1b78:	b0 f4       	brcc	.+44     	; 0x1ba6 <vfprintf+0x1c2>
    1b7a:	b6 01       	movw	r22, r12
    1b7c:	80 e2       	ldi	r24, 0x20	; 32
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 94 1b 11 	call	0x2236	; 0x2236 <fputc>
    1b84:	2a 94       	dec	r2
    1b86:	f4 cf       	rjmp	.-24     	; 0x1b70 <vfprintf+0x18c>
    1b88:	f5 01       	movw	r30, r10
    1b8a:	37 fc       	sbrc	r3, 7
    1b8c:	85 91       	lpm	r24, Z+
    1b8e:	37 fe       	sbrs	r3, 7
    1b90:	81 91       	ld	r24, Z+
    1b92:	5f 01       	movw	r10, r30
    1b94:	b6 01       	movw	r22, r12
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	0e 94 1b 11 	call	0x2236	; 0x2236 <fputc>
    1b9c:	21 10       	cpse	r2, r1
    1b9e:	2a 94       	dec	r2
    1ba0:	21 e0       	ldi	r18, 0x01	; 1
    1ba2:	82 1a       	sub	r8, r18
    1ba4:	91 08       	sbc	r9, r1
    1ba6:	81 14       	cp	r8, r1
    1ba8:	91 04       	cpc	r9, r1
    1baa:	71 f7       	brne	.-36     	; 0x1b88 <vfprintf+0x1a4>
    1bac:	e8 c0       	rjmp	.+464    	; 0x1d7e <vfprintf+0x39a>
    1bae:	84 36       	cpi	r24, 0x64	; 100
    1bb0:	11 f0       	breq	.+4      	; 0x1bb6 <vfprintf+0x1d2>
    1bb2:	89 36       	cpi	r24, 0x69	; 105
    1bb4:	41 f5       	brne	.+80     	; 0x1c06 <vfprintf+0x222>
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	37 fe       	sbrs	r3, 7
    1bba:	07 c0       	rjmp	.+14     	; 0x1bca <vfprintf+0x1e6>
    1bbc:	60 81       	ld	r22, Z
    1bbe:	71 81       	ldd	r23, Z+1	; 0x01
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	93 81       	ldd	r25, Z+3	; 0x03
    1bc4:	0c 5f       	subi	r16, 0xFC	; 252
    1bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc8:	08 c0       	rjmp	.+16     	; 0x1bda <vfprintf+0x1f6>
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	07 2e       	mov	r0, r23
    1bd0:	00 0c       	add	r0, r0
    1bd2:	88 0b       	sbc	r24, r24
    1bd4:	99 0b       	sbc	r25, r25
    1bd6:	0e 5f       	subi	r16, 0xFE	; 254
    1bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bda:	f3 2d       	mov	r31, r3
    1bdc:	ff 76       	andi	r31, 0x6F	; 111
    1bde:	3f 2e       	mov	r3, r31
    1be0:	97 ff       	sbrs	r25, 7
    1be2:	09 c0       	rjmp	.+18     	; 0x1bf6 <vfprintf+0x212>
    1be4:	90 95       	com	r25
    1be6:	80 95       	com	r24
    1be8:	70 95       	com	r23
    1bea:	61 95       	neg	r22
    1bec:	7f 4f       	sbci	r23, 0xFF	; 255
    1bee:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf2:	f0 68       	ori	r31, 0x80	; 128
    1bf4:	3f 2e       	mov	r3, r31
    1bf6:	2a e0       	ldi	r18, 0x0A	; 10
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	a3 01       	movw	r20, r6
    1bfc:	0e 94 57 11 	call	0x22ae	; 0x22ae <__ultoa_invert>
    1c00:	88 2e       	mov	r8, r24
    1c02:	86 18       	sub	r8, r6
    1c04:	45 c0       	rjmp	.+138    	; 0x1c90 <vfprintf+0x2ac>
    1c06:	85 37       	cpi	r24, 0x75	; 117
    1c08:	31 f4       	brne	.+12     	; 0x1c16 <vfprintf+0x232>
    1c0a:	23 2d       	mov	r18, r3
    1c0c:	2f 7e       	andi	r18, 0xEF	; 239
    1c0e:	b2 2e       	mov	r11, r18
    1c10:	2a e0       	ldi	r18, 0x0A	; 10
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	25 c0       	rjmp	.+74     	; 0x1c60 <vfprintf+0x27c>
    1c16:	93 2d       	mov	r25, r3
    1c18:	99 7f       	andi	r25, 0xF9	; 249
    1c1a:	b9 2e       	mov	r11, r25
    1c1c:	8f 36       	cpi	r24, 0x6F	; 111
    1c1e:	c1 f0       	breq	.+48     	; 0x1c50 <vfprintf+0x26c>
    1c20:	18 f4       	brcc	.+6      	; 0x1c28 <vfprintf+0x244>
    1c22:	88 35       	cpi	r24, 0x58	; 88
    1c24:	79 f0       	breq	.+30     	; 0x1c44 <vfprintf+0x260>
    1c26:	b5 c0       	rjmp	.+362    	; 0x1d92 <vfprintf+0x3ae>
    1c28:	80 37       	cpi	r24, 0x70	; 112
    1c2a:	19 f0       	breq	.+6      	; 0x1c32 <vfprintf+0x24e>
    1c2c:	88 37       	cpi	r24, 0x78	; 120
    1c2e:	21 f0       	breq	.+8      	; 0x1c38 <vfprintf+0x254>
    1c30:	b0 c0       	rjmp	.+352    	; 0x1d92 <vfprintf+0x3ae>
    1c32:	e9 2f       	mov	r30, r25
    1c34:	e0 61       	ori	r30, 0x10	; 16
    1c36:	be 2e       	mov	r11, r30
    1c38:	b4 fe       	sbrs	r11, 4
    1c3a:	0d c0       	rjmp	.+26     	; 0x1c56 <vfprintf+0x272>
    1c3c:	fb 2d       	mov	r31, r11
    1c3e:	f4 60       	ori	r31, 0x04	; 4
    1c40:	bf 2e       	mov	r11, r31
    1c42:	09 c0       	rjmp	.+18     	; 0x1c56 <vfprintf+0x272>
    1c44:	34 fe       	sbrs	r3, 4
    1c46:	0a c0       	rjmp	.+20     	; 0x1c5c <vfprintf+0x278>
    1c48:	29 2f       	mov	r18, r25
    1c4a:	26 60       	ori	r18, 0x06	; 6
    1c4c:	b2 2e       	mov	r11, r18
    1c4e:	06 c0       	rjmp	.+12     	; 0x1c5c <vfprintf+0x278>
    1c50:	28 e0       	ldi	r18, 0x08	; 8
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	05 c0       	rjmp	.+10     	; 0x1c60 <vfprintf+0x27c>
    1c56:	20 e1       	ldi	r18, 0x10	; 16
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <vfprintf+0x27c>
    1c5c:	20 e1       	ldi	r18, 0x10	; 16
    1c5e:	32 e0       	ldi	r19, 0x02	; 2
    1c60:	f8 01       	movw	r30, r16
    1c62:	b7 fe       	sbrs	r11, 7
    1c64:	07 c0       	rjmp	.+14     	; 0x1c74 <vfprintf+0x290>
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	0c 5f       	subi	r16, 0xFC	; 252
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	06 c0       	rjmp	.+12     	; 0x1c80 <vfprintf+0x29c>
    1c74:	60 81       	ld	r22, Z
    1c76:	71 81       	ldd	r23, Z+1	; 0x01
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	0e 5f       	subi	r16, 0xFE	; 254
    1c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c80:	a3 01       	movw	r20, r6
    1c82:	0e 94 57 11 	call	0x22ae	; 0x22ae <__ultoa_invert>
    1c86:	88 2e       	mov	r8, r24
    1c88:	86 18       	sub	r8, r6
    1c8a:	fb 2d       	mov	r31, r11
    1c8c:	ff 77       	andi	r31, 0x7F	; 127
    1c8e:	3f 2e       	mov	r3, r31
    1c90:	36 fe       	sbrs	r3, 6
    1c92:	0d c0       	rjmp	.+26     	; 0x1cae <vfprintf+0x2ca>
    1c94:	23 2d       	mov	r18, r3
    1c96:	2e 7f       	andi	r18, 0xFE	; 254
    1c98:	a2 2e       	mov	r10, r18
    1c9a:	89 14       	cp	r8, r9
    1c9c:	58 f4       	brcc	.+22     	; 0x1cb4 <vfprintf+0x2d0>
    1c9e:	34 fe       	sbrs	r3, 4
    1ca0:	0b c0       	rjmp	.+22     	; 0x1cb8 <vfprintf+0x2d4>
    1ca2:	32 fc       	sbrc	r3, 2
    1ca4:	09 c0       	rjmp	.+18     	; 0x1cb8 <vfprintf+0x2d4>
    1ca6:	83 2d       	mov	r24, r3
    1ca8:	8e 7e       	andi	r24, 0xEE	; 238
    1caa:	a8 2e       	mov	r10, r24
    1cac:	05 c0       	rjmp	.+10     	; 0x1cb8 <vfprintf+0x2d4>
    1cae:	b8 2c       	mov	r11, r8
    1cb0:	a3 2c       	mov	r10, r3
    1cb2:	03 c0       	rjmp	.+6      	; 0x1cba <vfprintf+0x2d6>
    1cb4:	b8 2c       	mov	r11, r8
    1cb6:	01 c0       	rjmp	.+2      	; 0x1cba <vfprintf+0x2d6>
    1cb8:	b9 2c       	mov	r11, r9
    1cba:	a4 fe       	sbrs	r10, 4
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <vfprintf+0x2f8>
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e8 0d       	add	r30, r8
    1cc2:	f1 1d       	adc	r31, r1
    1cc4:	80 81       	ld	r24, Z
    1cc6:	80 33       	cpi	r24, 0x30	; 48
    1cc8:	21 f4       	brne	.+8      	; 0x1cd2 <vfprintf+0x2ee>
    1cca:	9a 2d       	mov	r25, r10
    1ccc:	99 7e       	andi	r25, 0xE9	; 233
    1cce:	a9 2e       	mov	r10, r25
    1cd0:	09 c0       	rjmp	.+18     	; 0x1ce4 <vfprintf+0x300>
    1cd2:	a2 fe       	sbrs	r10, 2
    1cd4:	06 c0       	rjmp	.+12     	; 0x1ce2 <vfprintf+0x2fe>
    1cd6:	b3 94       	inc	r11
    1cd8:	b3 94       	inc	r11
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <vfprintf+0x300>
    1cdc:	8a 2d       	mov	r24, r10
    1cde:	86 78       	andi	r24, 0x86	; 134
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <vfprintf+0x300>
    1ce2:	b3 94       	inc	r11
    1ce4:	a3 fc       	sbrc	r10, 3
    1ce6:	11 c0       	rjmp	.+34     	; 0x1d0a <vfprintf+0x326>
    1ce8:	a0 fe       	sbrs	r10, 0
    1cea:	06 c0       	rjmp	.+12     	; 0x1cf8 <vfprintf+0x314>
    1cec:	b2 14       	cp	r11, r2
    1cee:	88 f4       	brcc	.+34     	; 0x1d12 <vfprintf+0x32e>
    1cf0:	28 0c       	add	r2, r8
    1cf2:	92 2c       	mov	r9, r2
    1cf4:	9b 18       	sub	r9, r11
    1cf6:	0e c0       	rjmp	.+28     	; 0x1d14 <vfprintf+0x330>
    1cf8:	b2 14       	cp	r11, r2
    1cfa:	60 f4       	brcc	.+24     	; 0x1d14 <vfprintf+0x330>
    1cfc:	b6 01       	movw	r22, r12
    1cfe:	80 e2       	ldi	r24, 0x20	; 32
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	0e 94 1b 11 	call	0x2236	; 0x2236 <fputc>
    1d06:	b3 94       	inc	r11
    1d08:	f7 cf       	rjmp	.-18     	; 0x1cf8 <vfprintf+0x314>
    1d0a:	b2 14       	cp	r11, r2
    1d0c:	18 f4       	brcc	.+6      	; 0x1d14 <vfprintf+0x330>
    1d0e:	2b 18       	sub	r2, r11
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <vfprintf+0x332>
    1d12:	98 2c       	mov	r9, r8
    1d14:	21 2c       	mov	r2, r1
    1d16:	a4 fe       	sbrs	r10, 4
    1d18:	10 c0       	rjmp	.+32     	; 0x1d3a <vfprintf+0x356>
    1d1a:	b6 01       	movw	r22, r12
    1d1c:	80 e3       	ldi	r24, 0x30	; 48
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	0e 94 1b 11 	call	0x2236	; 0x2236 <fputc>
    1d24:	a2 fe       	sbrs	r10, 2
    1d26:	17 c0       	rjmp	.+46     	; 0x1d56 <vfprintf+0x372>
    1d28:	a1 fc       	sbrc	r10, 1
    1d2a:	03 c0       	rjmp	.+6      	; 0x1d32 <vfprintf+0x34e>
    1d2c:	88 e7       	ldi	r24, 0x78	; 120
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <vfprintf+0x352>
    1d32:	88 e5       	ldi	r24, 0x58	; 88
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	b6 01       	movw	r22, r12
    1d38:	0c c0       	rjmp	.+24     	; 0x1d52 <vfprintf+0x36e>
    1d3a:	8a 2d       	mov	r24, r10
    1d3c:	86 78       	andi	r24, 0x86	; 134
    1d3e:	59 f0       	breq	.+22     	; 0x1d56 <vfprintf+0x372>
    1d40:	a1 fe       	sbrs	r10, 1
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <vfprintf+0x364>
    1d44:	8b e2       	ldi	r24, 0x2B	; 43
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <vfprintf+0x366>
    1d48:	80 e2       	ldi	r24, 0x20	; 32
    1d4a:	a7 fc       	sbrc	r10, 7
    1d4c:	8d e2       	ldi	r24, 0x2D	; 45
    1d4e:	b6 01       	movw	r22, r12
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 1b 11 	call	0x2236	; 0x2236 <fputc>
    1d56:	89 14       	cp	r8, r9
    1d58:	38 f4       	brcc	.+14     	; 0x1d68 <vfprintf+0x384>
    1d5a:	b6 01       	movw	r22, r12
    1d5c:	80 e3       	ldi	r24, 0x30	; 48
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	0e 94 1b 11 	call	0x2236	; 0x2236 <fputc>
    1d64:	9a 94       	dec	r9
    1d66:	f7 cf       	rjmp	.-18     	; 0x1d56 <vfprintf+0x372>
    1d68:	8a 94       	dec	r8
    1d6a:	f3 01       	movw	r30, r6
    1d6c:	e8 0d       	add	r30, r8
    1d6e:	f1 1d       	adc	r31, r1
    1d70:	80 81       	ld	r24, Z
    1d72:	b6 01       	movw	r22, r12
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	0e 94 1b 11 	call	0x2236	; 0x2236 <fputc>
    1d7a:	81 10       	cpse	r8, r1
    1d7c:	f5 cf       	rjmp	.-22     	; 0x1d68 <vfprintf+0x384>
    1d7e:	22 20       	and	r2, r2
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <vfprintf+0x3a0>
    1d82:	42 ce       	rjmp	.-892    	; 0x1a08 <vfprintf+0x24>
    1d84:	b6 01       	movw	r22, r12
    1d86:	80 e2       	ldi	r24, 0x20	; 32
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 1b 11 	call	0x2236	; 0x2236 <fputc>
    1d8e:	2a 94       	dec	r2
    1d90:	f6 cf       	rjmp	.-20     	; 0x1d7e <vfprintf+0x39a>
    1d92:	f6 01       	movw	r30, r12
    1d94:	86 81       	ldd	r24, Z+6	; 0x06
    1d96:	97 81       	ldd	r25, Z+7	; 0x07
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <vfprintf+0x3ba>
    1d9a:	8f ef       	ldi	r24, 0xFF	; 255
    1d9c:	9f ef       	ldi	r25, 0xFF	; 255
    1d9e:	2b 96       	adiw	r28, 0x0b	; 11
    1da0:	e2 e1       	ldi	r30, 0x12	; 18
    1da2:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__epilogue_restores__>

00001da6 <dtoa_prf>:
    1da6:	a9 e0       	ldi	r26, 0x09	; 9
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e9 ed       	ldi	r30, 0xD9	; 217
    1dac:	fe e0       	ldi	r31, 0x0E	; 14
    1dae:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__prologue_saves__+0xc>
    1db2:	6a 01       	movw	r12, r20
    1db4:	12 2f       	mov	r17, r18
    1db6:	b0 2e       	mov	r11, r16
    1db8:	2b e3       	ldi	r18, 0x3B	; 59
    1dba:	20 17       	cp	r18, r16
    1dbc:	20 f0       	brcs	.+8      	; 0x1dc6 <dtoa_prf+0x20>
    1dbe:	ff 24       	eor	r15, r15
    1dc0:	f3 94       	inc	r15
    1dc2:	f0 0e       	add	r15, r16
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <dtoa_prf+0x24>
    1dc6:	2c e3       	ldi	r18, 0x3C	; 60
    1dc8:	f2 2e       	mov	r15, r18
    1dca:	0f 2d       	mov	r16, r15
    1dcc:	27 e0       	ldi	r18, 0x07	; 7
    1dce:	ae 01       	movw	r20, r28
    1dd0:	4f 5f       	subi	r20, 0xFF	; 255
    1dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd4:	0e 94 2d 10 	call	0x205a	; 0x205a <__ftoa_engine>
    1dd8:	bc 01       	movw	r22, r24
    1dda:	49 81       	ldd	r20, Y+1	; 0x01
    1ddc:	84 2f       	mov	r24, r20
    1dde:	89 70       	andi	r24, 0x09	; 9
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	31 f0       	breq	.+12     	; 0x1df0 <dtoa_prf+0x4a>
    1de4:	e1 fc       	sbrc	r14, 1
    1de6:	06 c0       	rjmp	.+12     	; 0x1df4 <dtoa_prf+0x4e>
    1de8:	e0 fe       	sbrs	r14, 0
    1dea:	06 c0       	rjmp	.+12     	; 0x1df8 <dtoa_prf+0x52>
    1dec:	90 e2       	ldi	r25, 0x20	; 32
    1dee:	05 c0       	rjmp	.+10     	; 0x1dfa <dtoa_prf+0x54>
    1df0:	9d e2       	ldi	r25, 0x2D	; 45
    1df2:	03 c0       	rjmp	.+6      	; 0x1dfa <dtoa_prf+0x54>
    1df4:	9b e2       	ldi	r25, 0x2B	; 43
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <dtoa_prf+0x54>
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	5e 2d       	mov	r21, r14
    1dfc:	50 71       	andi	r21, 0x10	; 16
    1dfe:	43 ff       	sbrs	r20, 3
    1e00:	3c c0       	rjmp	.+120    	; 0x1e7a <dtoa_prf+0xd4>
    1e02:	91 11       	cpse	r25, r1
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <dtoa_prf+0x64>
    1e06:	83 e0       	ldi	r24, 0x03	; 3
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <dtoa_prf+0x66>
    1e0a:	84 e0       	ldi	r24, 0x04	; 4
    1e0c:	81 17       	cp	r24, r17
    1e0e:	18 f4       	brcc	.+6      	; 0x1e16 <dtoa_prf+0x70>
    1e10:	21 2f       	mov	r18, r17
    1e12:	28 1b       	sub	r18, r24
    1e14:	01 c0       	rjmp	.+2      	; 0x1e18 <dtoa_prf+0x72>
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	51 11       	cpse	r21, r1
    1e1a:	0b c0       	rjmp	.+22     	; 0x1e32 <dtoa_prf+0x8c>
    1e1c:	f6 01       	movw	r30, r12
    1e1e:	82 2f       	mov	r24, r18
    1e20:	30 e2       	ldi	r19, 0x20	; 32
    1e22:	88 23       	and	r24, r24
    1e24:	19 f0       	breq	.+6      	; 0x1e2c <dtoa_prf+0x86>
    1e26:	31 93       	st	Z+, r19
    1e28:	81 50       	subi	r24, 0x01	; 1
    1e2a:	fb cf       	rjmp	.-10     	; 0x1e22 <dtoa_prf+0x7c>
    1e2c:	c2 0e       	add	r12, r18
    1e2e:	d1 1c       	adc	r13, r1
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	99 23       	and	r25, r25
    1e34:	29 f0       	breq	.+10     	; 0x1e40 <dtoa_prf+0x9a>
    1e36:	d6 01       	movw	r26, r12
    1e38:	9c 93       	st	X, r25
    1e3a:	f6 01       	movw	r30, r12
    1e3c:	31 96       	adiw	r30, 0x01	; 1
    1e3e:	6f 01       	movw	r12, r30
    1e40:	c6 01       	movw	r24, r12
    1e42:	03 96       	adiw	r24, 0x03	; 3
    1e44:	e2 fe       	sbrs	r14, 2
    1e46:	0a c0       	rjmp	.+20     	; 0x1e5c <dtoa_prf+0xb6>
    1e48:	3e e4       	ldi	r19, 0x4E	; 78
    1e4a:	d6 01       	movw	r26, r12
    1e4c:	3c 93       	st	X, r19
    1e4e:	41 e4       	ldi	r20, 0x41	; 65
    1e50:	11 96       	adiw	r26, 0x01	; 1
    1e52:	4c 93       	st	X, r20
    1e54:	11 97       	sbiw	r26, 0x01	; 1
    1e56:	12 96       	adiw	r26, 0x02	; 2
    1e58:	3c 93       	st	X, r19
    1e5a:	06 c0       	rjmp	.+12     	; 0x1e68 <dtoa_prf+0xc2>
    1e5c:	3e e6       	ldi	r19, 0x6E	; 110
    1e5e:	f6 01       	movw	r30, r12
    1e60:	30 83       	st	Z, r19
    1e62:	41 e6       	ldi	r20, 0x61	; 97
    1e64:	41 83       	std	Z+1, r20	; 0x01
    1e66:	32 83       	std	Z+2, r19	; 0x02
    1e68:	fc 01       	movw	r30, r24
    1e6a:	32 2f       	mov	r19, r18
    1e6c:	40 e2       	ldi	r20, 0x20	; 32
    1e6e:	33 23       	and	r19, r19
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <dtoa_prf+0xce>
    1e72:	42 c0       	rjmp	.+132    	; 0x1ef8 <dtoa_prf+0x152>
    1e74:	41 93       	st	Z+, r20
    1e76:	31 50       	subi	r19, 0x01	; 1
    1e78:	fa cf       	rjmp	.-12     	; 0x1e6e <dtoa_prf+0xc8>
    1e7a:	42 ff       	sbrs	r20, 2
    1e7c:	44 c0       	rjmp	.+136    	; 0x1f06 <dtoa_prf+0x160>
    1e7e:	91 11       	cpse	r25, r1
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <dtoa_prf+0xe0>
    1e82:	83 e0       	ldi	r24, 0x03	; 3
    1e84:	01 c0       	rjmp	.+2      	; 0x1e88 <dtoa_prf+0xe2>
    1e86:	84 e0       	ldi	r24, 0x04	; 4
    1e88:	81 17       	cp	r24, r17
    1e8a:	18 f4       	brcc	.+6      	; 0x1e92 <dtoa_prf+0xec>
    1e8c:	21 2f       	mov	r18, r17
    1e8e:	28 1b       	sub	r18, r24
    1e90:	01 c0       	rjmp	.+2      	; 0x1e94 <dtoa_prf+0xee>
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	51 11       	cpse	r21, r1
    1e96:	0b c0       	rjmp	.+22     	; 0x1eae <dtoa_prf+0x108>
    1e98:	f6 01       	movw	r30, r12
    1e9a:	82 2f       	mov	r24, r18
    1e9c:	30 e2       	ldi	r19, 0x20	; 32
    1e9e:	88 23       	and	r24, r24
    1ea0:	19 f0       	breq	.+6      	; 0x1ea8 <dtoa_prf+0x102>
    1ea2:	31 93       	st	Z+, r19
    1ea4:	81 50       	subi	r24, 0x01	; 1
    1ea6:	fb cf       	rjmp	.-10     	; 0x1e9e <dtoa_prf+0xf8>
    1ea8:	c2 0e       	add	r12, r18
    1eaa:	d1 1c       	adc	r13, r1
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	99 23       	and	r25, r25
    1eb0:	29 f0       	breq	.+10     	; 0x1ebc <dtoa_prf+0x116>
    1eb2:	d6 01       	movw	r26, r12
    1eb4:	9c 93       	st	X, r25
    1eb6:	f6 01       	movw	r30, r12
    1eb8:	31 96       	adiw	r30, 0x01	; 1
    1eba:	6f 01       	movw	r12, r30
    1ebc:	c6 01       	movw	r24, r12
    1ebe:	03 96       	adiw	r24, 0x03	; 3
    1ec0:	e2 fe       	sbrs	r14, 2
    1ec2:	0b c0       	rjmp	.+22     	; 0x1eda <dtoa_prf+0x134>
    1ec4:	39 e4       	ldi	r19, 0x49	; 73
    1ec6:	d6 01       	movw	r26, r12
    1ec8:	3c 93       	st	X, r19
    1eca:	3e e4       	ldi	r19, 0x4E	; 78
    1ecc:	11 96       	adiw	r26, 0x01	; 1
    1ece:	3c 93       	st	X, r19
    1ed0:	11 97       	sbiw	r26, 0x01	; 1
    1ed2:	36 e4       	ldi	r19, 0x46	; 70
    1ed4:	12 96       	adiw	r26, 0x02	; 2
    1ed6:	3c 93       	st	X, r19
    1ed8:	07 c0       	rjmp	.+14     	; 0x1ee8 <dtoa_prf+0x142>
    1eda:	39 e6       	ldi	r19, 0x69	; 105
    1edc:	f6 01       	movw	r30, r12
    1ede:	30 83       	st	Z, r19
    1ee0:	3e e6       	ldi	r19, 0x6E	; 110
    1ee2:	31 83       	std	Z+1, r19	; 0x01
    1ee4:	36 e6       	ldi	r19, 0x66	; 102
    1ee6:	32 83       	std	Z+2, r19	; 0x02
    1ee8:	fc 01       	movw	r30, r24
    1eea:	32 2f       	mov	r19, r18
    1eec:	40 e2       	ldi	r20, 0x20	; 32
    1eee:	33 23       	and	r19, r19
    1ef0:	19 f0       	breq	.+6      	; 0x1ef8 <dtoa_prf+0x152>
    1ef2:	41 93       	st	Z+, r20
    1ef4:	31 50       	subi	r19, 0x01	; 1
    1ef6:	fb cf       	rjmp	.-10     	; 0x1eee <dtoa_prf+0x148>
    1ef8:	fc 01       	movw	r30, r24
    1efa:	e2 0f       	add	r30, r18
    1efc:	f1 1d       	adc	r31, r1
    1efe:	10 82       	st	Z, r1
    1f00:	8e ef       	ldi	r24, 0xFE	; 254
    1f02:	9f ef       	ldi	r25, 0xFF	; 255
    1f04:	a6 c0       	rjmp	.+332    	; 0x2052 <dtoa_prf+0x2ac>
    1f06:	21 e0       	ldi	r18, 0x01	; 1
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	91 11       	cpse	r25, r1
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <dtoa_prf+0x16c>
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	16 16       	cp	r1, r22
    1f14:	17 06       	cpc	r1, r23
    1f16:	1c f4       	brge	.+6      	; 0x1f1e <dtoa_prf+0x178>
    1f18:	fb 01       	movw	r30, r22
    1f1a:	31 96       	adiw	r30, 0x01	; 1
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <dtoa_prf+0x17c>
    1f1e:	e1 e0       	ldi	r30, 0x01	; 1
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	2e 0f       	add	r18, r30
    1f24:	3f 1f       	adc	r19, r31
    1f26:	bb 20       	and	r11, r11
    1f28:	21 f0       	breq	.+8      	; 0x1f32 <dtoa_prf+0x18c>
    1f2a:	eb 2d       	mov	r30, r11
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	31 96       	adiw	r30, 0x01	; 1
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <dtoa_prf+0x190>
    1f32:	e0 e0       	ldi	r30, 0x00	; 0
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	2e 0f       	add	r18, r30
    1f38:	3f 1f       	adc	r19, r31
    1f3a:	e1 2f       	mov	r30, r17
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	2e 17       	cp	r18, r30
    1f40:	3f 07       	cpc	r19, r31
    1f42:	1c f4       	brge	.+6      	; 0x1f4a <dtoa_prf+0x1a4>
    1f44:	12 1b       	sub	r17, r18
    1f46:	21 2f       	mov	r18, r17
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <dtoa_prf+0x1a6>
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	8e 2d       	mov	r24, r14
    1f4e:	88 71       	andi	r24, 0x18	; 24
    1f50:	59 f4       	brne	.+22     	; 0x1f68 <dtoa_prf+0x1c2>
    1f52:	f6 01       	movw	r30, r12
    1f54:	82 2f       	mov	r24, r18
    1f56:	30 e2       	ldi	r19, 0x20	; 32
    1f58:	88 23       	and	r24, r24
    1f5a:	19 f0       	breq	.+6      	; 0x1f62 <dtoa_prf+0x1bc>
    1f5c:	31 93       	st	Z+, r19
    1f5e:	81 50       	subi	r24, 0x01	; 1
    1f60:	fb cf       	rjmp	.-10     	; 0x1f58 <dtoa_prf+0x1b2>
    1f62:	c2 0e       	add	r12, r18
    1f64:	d1 1c       	adc	r13, r1
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	99 23       	and	r25, r25
    1f6a:	29 f0       	breq	.+10     	; 0x1f76 <dtoa_prf+0x1d0>
    1f6c:	d6 01       	movw	r26, r12
    1f6e:	9c 93       	st	X, r25
    1f70:	f6 01       	movw	r30, r12
    1f72:	31 96       	adiw	r30, 0x01	; 1
    1f74:	6f 01       	movw	r12, r30
    1f76:	51 11       	cpse	r21, r1
    1f78:	0b c0       	rjmp	.+22     	; 0x1f90 <dtoa_prf+0x1ea>
    1f7a:	f6 01       	movw	r30, r12
    1f7c:	82 2f       	mov	r24, r18
    1f7e:	90 e3       	ldi	r25, 0x30	; 48
    1f80:	88 23       	and	r24, r24
    1f82:	19 f0       	breq	.+6      	; 0x1f8a <dtoa_prf+0x1e4>
    1f84:	91 93       	st	Z+, r25
    1f86:	81 50       	subi	r24, 0x01	; 1
    1f88:	fb cf       	rjmp	.-10     	; 0x1f80 <dtoa_prf+0x1da>
    1f8a:	c2 0e       	add	r12, r18
    1f8c:	d1 1c       	adc	r13, r1
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	0f 2d       	mov	r16, r15
    1f92:	06 0f       	add	r16, r22
    1f94:	9a 81       	ldd	r25, Y+2	; 0x02
    1f96:	34 2f       	mov	r19, r20
    1f98:	30 71       	andi	r19, 0x10	; 16
    1f9a:	44 ff       	sbrs	r20, 4
    1f9c:	03 c0       	rjmp	.+6      	; 0x1fa4 <dtoa_prf+0x1fe>
    1f9e:	91 33       	cpi	r25, 0x31	; 49
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <dtoa_prf+0x1fe>
    1fa2:	01 50       	subi	r16, 0x01	; 1
    1fa4:	10 16       	cp	r1, r16
    1fa6:	24 f4       	brge	.+8      	; 0x1fb0 <dtoa_prf+0x20a>
    1fa8:	09 30       	cpi	r16, 0x09	; 9
    1faa:	18 f0       	brcs	.+6      	; 0x1fb2 <dtoa_prf+0x20c>
    1fac:	08 e0       	ldi	r16, 0x08	; 8
    1fae:	01 c0       	rjmp	.+2      	; 0x1fb2 <dtoa_prf+0x20c>
    1fb0:	01 e0       	ldi	r16, 0x01	; 1
    1fb2:	ab 01       	movw	r20, r22
    1fb4:	77 ff       	sbrs	r23, 7
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <dtoa_prf+0x216>
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	fb 01       	movw	r30, r22
    1fbe:	e4 1b       	sub	r30, r20
    1fc0:	f5 0b       	sbc	r31, r21
    1fc2:	a1 e0       	ldi	r26, 0x01	; 1
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	ac 0f       	add	r26, r28
    1fc8:	bd 1f       	adc	r27, r29
    1fca:	ea 0f       	add	r30, r26
    1fcc:	fb 1f       	adc	r31, r27
    1fce:	8e e2       	ldi	r24, 0x2E	; 46
    1fd0:	a8 2e       	mov	r10, r24
    1fd2:	4b 01       	movw	r8, r22
    1fd4:	80 1a       	sub	r8, r16
    1fd6:	91 08       	sbc	r9, r1
    1fd8:	0b 2d       	mov	r16, r11
    1fda:	10 e0       	ldi	r17, 0x00	; 0
    1fdc:	11 95       	neg	r17
    1fde:	01 95       	neg	r16
    1fe0:	11 09       	sbc	r17, r1
    1fe2:	4f 3f       	cpi	r20, 0xFF	; 255
    1fe4:	bf ef       	ldi	r27, 0xFF	; 255
    1fe6:	5b 07       	cpc	r21, r27
    1fe8:	21 f4       	brne	.+8      	; 0x1ff2 <dtoa_prf+0x24c>
    1fea:	d6 01       	movw	r26, r12
    1fec:	ac 92       	st	X, r10
    1fee:	11 96       	adiw	r26, 0x01	; 1
    1ff0:	6d 01       	movw	r12, r26
    1ff2:	64 17       	cp	r22, r20
    1ff4:	75 07       	cpc	r23, r21
    1ff6:	2c f0       	brlt	.+10     	; 0x2002 <dtoa_prf+0x25c>
    1ff8:	84 16       	cp	r8, r20
    1ffa:	95 06       	cpc	r9, r21
    1ffc:	14 f4       	brge	.+4      	; 0x2002 <dtoa_prf+0x25c>
    1ffe:	81 81       	ldd	r24, Z+1	; 0x01
    2000:	01 c0       	rjmp	.+2      	; 0x2004 <dtoa_prf+0x25e>
    2002:	80 e3       	ldi	r24, 0x30	; 48
    2004:	41 50       	subi	r20, 0x01	; 1
    2006:	51 09       	sbc	r21, r1
    2008:	31 96       	adiw	r30, 0x01	; 1
    200a:	d6 01       	movw	r26, r12
    200c:	11 96       	adiw	r26, 0x01	; 1
    200e:	7d 01       	movw	r14, r26
    2010:	40 17       	cp	r20, r16
    2012:	51 07       	cpc	r21, r17
    2014:	24 f0       	brlt	.+8      	; 0x201e <dtoa_prf+0x278>
    2016:	d6 01       	movw	r26, r12
    2018:	8c 93       	st	X, r24
    201a:	67 01       	movw	r12, r14
    201c:	e2 cf       	rjmp	.-60     	; 0x1fe2 <dtoa_prf+0x23c>
    201e:	64 17       	cp	r22, r20
    2020:	75 07       	cpc	r23, r21
    2022:	39 f4       	brne	.+14     	; 0x2032 <dtoa_prf+0x28c>
    2024:	96 33       	cpi	r25, 0x36	; 54
    2026:	20 f4       	brcc	.+8      	; 0x2030 <dtoa_prf+0x28a>
    2028:	95 33       	cpi	r25, 0x35	; 53
    202a:	19 f4       	brne	.+6      	; 0x2032 <dtoa_prf+0x28c>
    202c:	31 11       	cpse	r19, r1
    202e:	01 c0       	rjmp	.+2      	; 0x2032 <dtoa_prf+0x28c>
    2030:	81 e3       	ldi	r24, 0x31	; 49
    2032:	f6 01       	movw	r30, r12
    2034:	80 83       	st	Z, r24
    2036:	f7 01       	movw	r30, r14
    2038:	82 2f       	mov	r24, r18
    203a:	90 e2       	ldi	r25, 0x20	; 32
    203c:	88 23       	and	r24, r24
    203e:	19 f0       	breq	.+6      	; 0x2046 <dtoa_prf+0x2a0>
    2040:	91 93       	st	Z+, r25
    2042:	81 50       	subi	r24, 0x01	; 1
    2044:	fb cf       	rjmp	.-10     	; 0x203c <dtoa_prf+0x296>
    2046:	f7 01       	movw	r30, r14
    2048:	e2 0f       	add	r30, r18
    204a:	f1 1d       	adc	r31, r1
    204c:	10 82       	st	Z, r1
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	29 96       	adiw	r28, 0x09	; 9
    2054:	ec e0       	ldi	r30, 0x0C	; 12
    2056:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__epilogue_restores__+0xc>

0000205a <__ftoa_engine>:
    205a:	28 30       	cpi	r18, 0x08	; 8
    205c:	08 f0       	brcs	.+2      	; 0x2060 <__ftoa_engine+0x6>
    205e:	27 e0       	ldi	r18, 0x07	; 7
    2060:	33 27       	eor	r19, r19
    2062:	da 01       	movw	r26, r20
    2064:	99 0f       	add	r25, r25
    2066:	31 1d       	adc	r19, r1
    2068:	87 fd       	sbrc	r24, 7
    206a:	91 60       	ori	r25, 0x01	; 1
    206c:	00 96       	adiw	r24, 0x00	; 0
    206e:	61 05       	cpc	r22, r1
    2070:	71 05       	cpc	r23, r1
    2072:	39 f4       	brne	.+14     	; 0x2082 <__ftoa_engine+0x28>
    2074:	32 60       	ori	r19, 0x02	; 2
    2076:	2e 5f       	subi	r18, 0xFE	; 254
    2078:	3d 93       	st	X+, r19
    207a:	30 e3       	ldi	r19, 0x30	; 48
    207c:	2a 95       	dec	r18
    207e:	e1 f7       	brne	.-8      	; 0x2078 <__ftoa_engine+0x1e>
    2080:	08 95       	ret
    2082:	9f 3f       	cpi	r25, 0xFF	; 255
    2084:	30 f0       	brcs	.+12     	; 0x2092 <__ftoa_engine+0x38>
    2086:	80 38       	cpi	r24, 0x80	; 128
    2088:	71 05       	cpc	r23, r1
    208a:	61 05       	cpc	r22, r1
    208c:	09 f0       	breq	.+2      	; 0x2090 <__ftoa_engine+0x36>
    208e:	3c 5f       	subi	r19, 0xFC	; 252
    2090:	3c 5f       	subi	r19, 0xFC	; 252
    2092:	3d 93       	st	X+, r19
    2094:	91 30       	cpi	r25, 0x01	; 1
    2096:	08 f0       	brcs	.+2      	; 0x209a <__ftoa_engine+0x40>
    2098:	80 68       	ori	r24, 0x80	; 128
    209a:	91 1d       	adc	r25, r1
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	1f 93       	push	r17
    20a2:	0f 93       	push	r16
    20a4:	ff 92       	push	r15
    20a6:	ef 92       	push	r14
    20a8:	19 2f       	mov	r17, r25
    20aa:	98 7f       	andi	r25, 0xF8	; 248
    20ac:	96 95       	lsr	r25
    20ae:	e9 2f       	mov	r30, r25
    20b0:	96 95       	lsr	r25
    20b2:	96 95       	lsr	r25
    20b4:	e9 0f       	add	r30, r25
    20b6:	ff 27       	eor	r31, r31
    20b8:	e4 5e       	subi	r30, 0xE4	; 228
    20ba:	fe 4f       	sbci	r31, 0xFE	; 254
    20bc:	99 27       	eor	r25, r25
    20be:	33 27       	eor	r19, r19
    20c0:	ee 24       	eor	r14, r14
    20c2:	ff 24       	eor	r15, r15
    20c4:	a7 01       	movw	r20, r14
    20c6:	e7 01       	movw	r28, r14
    20c8:	05 90       	lpm	r0, Z+
    20ca:	08 94       	sec
    20cc:	07 94       	ror	r0
    20ce:	28 f4       	brcc	.+10     	; 0x20da <__ftoa_engine+0x80>
    20d0:	36 0f       	add	r19, r22
    20d2:	e7 1e       	adc	r14, r23
    20d4:	f8 1e       	adc	r15, r24
    20d6:	49 1f       	adc	r20, r25
    20d8:	51 1d       	adc	r21, r1
    20da:	66 0f       	add	r22, r22
    20dc:	77 1f       	adc	r23, r23
    20de:	88 1f       	adc	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	06 94       	lsr	r0
    20e4:	a1 f7       	brne	.-24     	; 0x20ce <__ftoa_engine+0x74>
    20e6:	05 90       	lpm	r0, Z+
    20e8:	07 94       	ror	r0
    20ea:	28 f4       	brcc	.+10     	; 0x20f6 <__ftoa_engine+0x9c>
    20ec:	e7 0e       	add	r14, r23
    20ee:	f8 1e       	adc	r15, r24
    20f0:	49 1f       	adc	r20, r25
    20f2:	56 1f       	adc	r21, r22
    20f4:	c1 1d       	adc	r28, r1
    20f6:	77 0f       	add	r23, r23
    20f8:	88 1f       	adc	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	66 1f       	adc	r22, r22
    20fe:	06 94       	lsr	r0
    2100:	a1 f7       	brne	.-24     	; 0x20ea <__ftoa_engine+0x90>
    2102:	05 90       	lpm	r0, Z+
    2104:	07 94       	ror	r0
    2106:	28 f4       	brcc	.+10     	; 0x2112 <__ftoa_engine+0xb8>
    2108:	f8 0e       	add	r15, r24
    210a:	49 1f       	adc	r20, r25
    210c:	56 1f       	adc	r21, r22
    210e:	c7 1f       	adc	r28, r23
    2110:	d1 1d       	adc	r29, r1
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	66 1f       	adc	r22, r22
    2118:	77 1f       	adc	r23, r23
    211a:	06 94       	lsr	r0
    211c:	a1 f7       	brne	.-24     	; 0x2106 <__ftoa_engine+0xac>
    211e:	05 90       	lpm	r0, Z+
    2120:	07 94       	ror	r0
    2122:	20 f4       	brcc	.+8      	; 0x212c <__ftoa_engine+0xd2>
    2124:	49 0f       	add	r20, r25
    2126:	56 1f       	adc	r21, r22
    2128:	c7 1f       	adc	r28, r23
    212a:	d8 1f       	adc	r29, r24
    212c:	99 0f       	add	r25, r25
    212e:	66 1f       	adc	r22, r22
    2130:	77 1f       	adc	r23, r23
    2132:	88 1f       	adc	r24, r24
    2134:	06 94       	lsr	r0
    2136:	a9 f7       	brne	.-22     	; 0x2122 <__ftoa_engine+0xc8>
    2138:	84 91       	lpm	r24, Z
    213a:	10 95       	com	r17
    213c:	17 70       	andi	r17, 0x07	; 7
    213e:	41 f0       	breq	.+16     	; 0x2150 <__ftoa_engine+0xf6>
    2140:	d6 95       	lsr	r29
    2142:	c7 95       	ror	r28
    2144:	57 95       	ror	r21
    2146:	47 95       	ror	r20
    2148:	f7 94       	ror	r15
    214a:	e7 94       	ror	r14
    214c:	1a 95       	dec	r17
    214e:	c1 f7       	brne	.-16     	; 0x2140 <__ftoa_engine+0xe6>
    2150:	e2 ec       	ldi	r30, 0xC2	; 194
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	68 94       	set
    2156:	15 90       	lpm	r1, Z+
    2158:	15 91       	lpm	r17, Z+
    215a:	35 91       	lpm	r19, Z+
    215c:	65 91       	lpm	r22, Z+
    215e:	95 91       	lpm	r25, Z+
    2160:	05 90       	lpm	r0, Z+
    2162:	7f e2       	ldi	r23, 0x2F	; 47
    2164:	73 95       	inc	r23
    2166:	e1 18       	sub	r14, r1
    2168:	f1 0a       	sbc	r15, r17
    216a:	43 0b       	sbc	r20, r19
    216c:	56 0b       	sbc	r21, r22
    216e:	c9 0b       	sbc	r28, r25
    2170:	d0 09       	sbc	r29, r0
    2172:	c0 f7       	brcc	.-16     	; 0x2164 <__ftoa_engine+0x10a>
    2174:	e1 0c       	add	r14, r1
    2176:	f1 1e       	adc	r15, r17
    2178:	43 1f       	adc	r20, r19
    217a:	56 1f       	adc	r21, r22
    217c:	c9 1f       	adc	r28, r25
    217e:	d0 1d       	adc	r29, r0
    2180:	7e f4       	brtc	.+30     	; 0x21a0 <__ftoa_engine+0x146>
    2182:	70 33       	cpi	r23, 0x30	; 48
    2184:	11 f4       	brne	.+4      	; 0x218a <__ftoa_engine+0x130>
    2186:	8a 95       	dec	r24
    2188:	e6 cf       	rjmp	.-52     	; 0x2156 <__ftoa_engine+0xfc>
    218a:	e8 94       	clt
    218c:	01 50       	subi	r16, 0x01	; 1
    218e:	30 f0       	brcs	.+12     	; 0x219c <__ftoa_engine+0x142>
    2190:	08 0f       	add	r16, r24
    2192:	0a f4       	brpl	.+2      	; 0x2196 <__ftoa_engine+0x13c>
    2194:	00 27       	eor	r16, r16
    2196:	02 17       	cp	r16, r18
    2198:	08 f4       	brcc	.+2      	; 0x219c <__ftoa_engine+0x142>
    219a:	20 2f       	mov	r18, r16
    219c:	23 95       	inc	r18
    219e:	02 2f       	mov	r16, r18
    21a0:	7a 33       	cpi	r23, 0x3A	; 58
    21a2:	28 f0       	brcs	.+10     	; 0x21ae <__ftoa_engine+0x154>
    21a4:	79 e3       	ldi	r23, 0x39	; 57
    21a6:	7d 93       	st	X+, r23
    21a8:	2a 95       	dec	r18
    21aa:	e9 f7       	brne	.-6      	; 0x21a6 <__ftoa_engine+0x14c>
    21ac:	10 c0       	rjmp	.+32     	; 0x21ce <__ftoa_engine+0x174>
    21ae:	7d 93       	st	X+, r23
    21b0:	2a 95       	dec	r18
    21b2:	89 f6       	brne	.-94     	; 0x2156 <__ftoa_engine+0xfc>
    21b4:	06 94       	lsr	r0
    21b6:	97 95       	ror	r25
    21b8:	67 95       	ror	r22
    21ba:	37 95       	ror	r19
    21bc:	17 95       	ror	r17
    21be:	17 94       	ror	r1
    21c0:	e1 18       	sub	r14, r1
    21c2:	f1 0a       	sbc	r15, r17
    21c4:	43 0b       	sbc	r20, r19
    21c6:	56 0b       	sbc	r21, r22
    21c8:	c9 0b       	sbc	r28, r25
    21ca:	d0 09       	sbc	r29, r0
    21cc:	98 f0       	brcs	.+38     	; 0x21f4 <__ftoa_engine+0x19a>
    21ce:	23 95       	inc	r18
    21d0:	7e 91       	ld	r23, -X
    21d2:	73 95       	inc	r23
    21d4:	7a 33       	cpi	r23, 0x3A	; 58
    21d6:	08 f0       	brcs	.+2      	; 0x21da <__ftoa_engine+0x180>
    21d8:	70 e3       	ldi	r23, 0x30	; 48
    21da:	7c 93       	st	X, r23
    21dc:	20 13       	cpse	r18, r16
    21de:	b8 f7       	brcc	.-18     	; 0x21ce <__ftoa_engine+0x174>
    21e0:	7e 91       	ld	r23, -X
    21e2:	70 61       	ori	r23, 0x10	; 16
    21e4:	7d 93       	st	X+, r23
    21e6:	30 f0       	brcs	.+12     	; 0x21f4 <__ftoa_engine+0x19a>
    21e8:	83 95       	inc	r24
    21ea:	71 e3       	ldi	r23, 0x31	; 49
    21ec:	7d 93       	st	X+, r23
    21ee:	70 e3       	ldi	r23, 0x30	; 48
    21f0:	2a 95       	dec	r18
    21f2:	e1 f7       	brne	.-8      	; 0x21ec <__ftoa_engine+0x192>
    21f4:	11 24       	eor	r1, r1
    21f6:	ef 90       	pop	r14
    21f8:	ff 90       	pop	r15
    21fa:	0f 91       	pop	r16
    21fc:	1f 91       	pop	r17
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	99 27       	eor	r25, r25
    2204:	87 fd       	sbrc	r24, 7
    2206:	90 95       	com	r25
    2208:	08 95       	ret

0000220a <strnlen_P>:
    220a:	fc 01       	movw	r30, r24
    220c:	05 90       	lpm	r0, Z+
    220e:	61 50       	subi	r22, 0x01	; 1
    2210:	70 40       	sbci	r23, 0x00	; 0
    2212:	01 10       	cpse	r0, r1
    2214:	d8 f7       	brcc	.-10     	; 0x220c <strnlen_P+0x2>
    2216:	80 95       	com	r24
    2218:	90 95       	com	r25
    221a:	8e 0f       	add	r24, r30
    221c:	9f 1f       	adc	r25, r31
    221e:	08 95       	ret

00002220 <strnlen>:
    2220:	fc 01       	movw	r30, r24
    2222:	61 50       	subi	r22, 0x01	; 1
    2224:	70 40       	sbci	r23, 0x00	; 0
    2226:	01 90       	ld	r0, Z+
    2228:	01 10       	cpse	r0, r1
    222a:	d8 f7       	brcc	.-10     	; 0x2222 <strnlen+0x2>
    222c:	80 95       	com	r24
    222e:	90 95       	com	r25
    2230:	8e 0f       	add	r24, r30
    2232:	9f 1f       	adc	r25, r31
    2234:	08 95       	ret

00002236 <fputc>:
    2236:	0f 93       	push	r16
    2238:	1f 93       	push	r17
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	fb 01       	movw	r30, r22
    2240:	23 81       	ldd	r18, Z+3	; 0x03
    2242:	21 fd       	sbrc	r18, 1
    2244:	03 c0       	rjmp	.+6      	; 0x224c <fputc+0x16>
    2246:	8f ef       	ldi	r24, 0xFF	; 255
    2248:	9f ef       	ldi	r25, 0xFF	; 255
    224a:	2c c0       	rjmp	.+88     	; 0x22a4 <fputc+0x6e>
    224c:	22 ff       	sbrs	r18, 2
    224e:	16 c0       	rjmp	.+44     	; 0x227c <fputc+0x46>
    2250:	46 81       	ldd	r20, Z+6	; 0x06
    2252:	57 81       	ldd	r21, Z+7	; 0x07
    2254:	24 81       	ldd	r18, Z+4	; 0x04
    2256:	35 81       	ldd	r19, Z+5	; 0x05
    2258:	42 17       	cp	r20, r18
    225a:	53 07       	cpc	r21, r19
    225c:	44 f4       	brge	.+16     	; 0x226e <fputc+0x38>
    225e:	a0 81       	ld	r26, Z
    2260:	b1 81       	ldd	r27, Z+1	; 0x01
    2262:	9d 01       	movw	r18, r26
    2264:	2f 5f       	subi	r18, 0xFF	; 255
    2266:	3f 4f       	sbci	r19, 0xFF	; 255
    2268:	20 83       	st	Z, r18
    226a:	31 83       	std	Z+1, r19	; 0x01
    226c:	8c 93       	st	X, r24
    226e:	26 81       	ldd	r18, Z+6	; 0x06
    2270:	37 81       	ldd	r19, Z+7	; 0x07
    2272:	2f 5f       	subi	r18, 0xFF	; 255
    2274:	3f 4f       	sbci	r19, 0xFF	; 255
    2276:	26 83       	std	Z+6, r18	; 0x06
    2278:	37 83       	std	Z+7, r19	; 0x07
    227a:	14 c0       	rjmp	.+40     	; 0x22a4 <fputc+0x6e>
    227c:	8b 01       	movw	r16, r22
    227e:	ec 01       	movw	r28, r24
    2280:	fb 01       	movw	r30, r22
    2282:	00 84       	ldd	r0, Z+8	; 0x08
    2284:	f1 85       	ldd	r31, Z+9	; 0x09
    2286:	e0 2d       	mov	r30, r0
    2288:	09 95       	icall
    228a:	89 2b       	or	r24, r25
    228c:	e1 f6       	brne	.-72     	; 0x2246 <fputc+0x10>
    228e:	d8 01       	movw	r26, r16
    2290:	16 96       	adiw	r26, 0x06	; 6
    2292:	8d 91       	ld	r24, X+
    2294:	9c 91       	ld	r25, X
    2296:	17 97       	sbiw	r26, 0x07	; 7
    2298:	01 96       	adiw	r24, 0x01	; 1
    229a:	16 96       	adiw	r26, 0x06	; 6
    229c:	8d 93       	st	X+, r24
    229e:	9c 93       	st	X, r25
    22a0:	17 97       	sbiw	r26, 0x07	; 7
    22a2:	ce 01       	movw	r24, r28
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	08 95       	ret

000022ae <__ultoa_invert>:
    22ae:	fa 01       	movw	r30, r20
    22b0:	aa 27       	eor	r26, r26
    22b2:	28 30       	cpi	r18, 0x08	; 8
    22b4:	51 f1       	breq	.+84     	; 0x230a <__ultoa_invert+0x5c>
    22b6:	20 31       	cpi	r18, 0x10	; 16
    22b8:	81 f1       	breq	.+96     	; 0x231a <__ultoa_invert+0x6c>
    22ba:	e8 94       	clt
    22bc:	6f 93       	push	r22
    22be:	6e 7f       	andi	r22, 0xFE	; 254
    22c0:	6e 5f       	subi	r22, 0xFE	; 254
    22c2:	7f 4f       	sbci	r23, 0xFF	; 255
    22c4:	8f 4f       	sbci	r24, 0xFF	; 255
    22c6:	9f 4f       	sbci	r25, 0xFF	; 255
    22c8:	af 4f       	sbci	r26, 0xFF	; 255
    22ca:	b1 e0       	ldi	r27, 0x01	; 1
    22cc:	3e d0       	rcall	.+124    	; 0x234a <__ultoa_invert+0x9c>
    22ce:	b4 e0       	ldi	r27, 0x04	; 4
    22d0:	3c d0       	rcall	.+120    	; 0x234a <__ultoa_invert+0x9c>
    22d2:	67 0f       	add	r22, r23
    22d4:	78 1f       	adc	r23, r24
    22d6:	89 1f       	adc	r24, r25
    22d8:	9a 1f       	adc	r25, r26
    22da:	a1 1d       	adc	r26, r1
    22dc:	68 0f       	add	r22, r24
    22de:	79 1f       	adc	r23, r25
    22e0:	8a 1f       	adc	r24, r26
    22e2:	91 1d       	adc	r25, r1
    22e4:	a1 1d       	adc	r26, r1
    22e6:	6a 0f       	add	r22, r26
    22e8:	71 1d       	adc	r23, r1
    22ea:	81 1d       	adc	r24, r1
    22ec:	91 1d       	adc	r25, r1
    22ee:	a1 1d       	adc	r26, r1
    22f0:	20 d0       	rcall	.+64     	; 0x2332 <__ultoa_invert+0x84>
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <__ultoa_invert+0x48>
    22f4:	68 94       	set
    22f6:	3f 91       	pop	r19
    22f8:	2a e0       	ldi	r18, 0x0A	; 10
    22fa:	26 9f       	mul	r18, r22
    22fc:	11 24       	eor	r1, r1
    22fe:	30 19       	sub	r19, r0
    2300:	30 5d       	subi	r19, 0xD0	; 208
    2302:	31 93       	st	Z+, r19
    2304:	de f6       	brtc	.-74     	; 0x22bc <__ultoa_invert+0xe>
    2306:	cf 01       	movw	r24, r30
    2308:	08 95       	ret
    230a:	46 2f       	mov	r20, r22
    230c:	47 70       	andi	r20, 0x07	; 7
    230e:	40 5d       	subi	r20, 0xD0	; 208
    2310:	41 93       	st	Z+, r20
    2312:	b3 e0       	ldi	r27, 0x03	; 3
    2314:	0f d0       	rcall	.+30     	; 0x2334 <__ultoa_invert+0x86>
    2316:	c9 f7       	brne	.-14     	; 0x230a <__ultoa_invert+0x5c>
    2318:	f6 cf       	rjmp	.-20     	; 0x2306 <__ultoa_invert+0x58>
    231a:	46 2f       	mov	r20, r22
    231c:	4f 70       	andi	r20, 0x0F	; 15
    231e:	40 5d       	subi	r20, 0xD0	; 208
    2320:	4a 33       	cpi	r20, 0x3A	; 58
    2322:	18 f0       	brcs	.+6      	; 0x232a <__ultoa_invert+0x7c>
    2324:	49 5d       	subi	r20, 0xD9	; 217
    2326:	31 fd       	sbrc	r19, 1
    2328:	40 52       	subi	r20, 0x20	; 32
    232a:	41 93       	st	Z+, r20
    232c:	02 d0       	rcall	.+4      	; 0x2332 <__ultoa_invert+0x84>
    232e:	a9 f7       	brne	.-22     	; 0x231a <__ultoa_invert+0x6c>
    2330:	ea cf       	rjmp	.-44     	; 0x2306 <__ultoa_invert+0x58>
    2332:	b4 e0       	ldi	r27, 0x04	; 4
    2334:	a6 95       	lsr	r26
    2336:	97 95       	ror	r25
    2338:	87 95       	ror	r24
    233a:	77 95       	ror	r23
    233c:	67 95       	ror	r22
    233e:	ba 95       	dec	r27
    2340:	c9 f7       	brne	.-14     	; 0x2334 <__ultoa_invert+0x86>
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	61 05       	cpc	r22, r1
    2346:	71 05       	cpc	r23, r1
    2348:	08 95       	ret
    234a:	9b 01       	movw	r18, r22
    234c:	ac 01       	movw	r20, r24
    234e:	0a 2e       	mov	r0, r26
    2350:	06 94       	lsr	r0
    2352:	57 95       	ror	r21
    2354:	47 95       	ror	r20
    2356:	37 95       	ror	r19
    2358:	27 95       	ror	r18
    235a:	ba 95       	dec	r27
    235c:	c9 f7       	brne	.-14     	; 0x2350 <__ultoa_invert+0xa2>
    235e:	62 0f       	add	r22, r18
    2360:	73 1f       	adc	r23, r19
    2362:	84 1f       	adc	r24, r20
    2364:	95 1f       	adc	r25, r21
    2366:	a0 1d       	adc	r26, r0
    2368:	08 95       	ret

0000236a <__prologue_saves__>:
    236a:	2f 92       	push	r2
    236c:	3f 92       	push	r3
    236e:	4f 92       	push	r4
    2370:	5f 92       	push	r5
    2372:	6f 92       	push	r6
    2374:	7f 92       	push	r7
    2376:	8f 92       	push	r8
    2378:	9f 92       	push	r9
    237a:	af 92       	push	r10
    237c:	bf 92       	push	r11
    237e:	cf 92       	push	r12
    2380:	df 92       	push	r13
    2382:	ef 92       	push	r14
    2384:	ff 92       	push	r15
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	ca 1b       	sub	r28, r26
    2394:	db 0b       	sbc	r29, r27
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	09 94       	ijmp

0000239c <__epilogue_restores__>:
    239c:	2a 88       	ldd	r2, Y+18	; 0x12
    239e:	39 88       	ldd	r3, Y+17	; 0x11
    23a0:	48 88       	ldd	r4, Y+16	; 0x10
    23a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    23a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    23a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    23a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    23aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    23ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    23ae:	b9 84       	ldd	r11, Y+9	; 0x09
    23b0:	c8 84       	ldd	r12, Y+8	; 0x08
    23b2:	df 80       	ldd	r13, Y+7	; 0x07
    23b4:	ee 80       	ldd	r14, Y+6	; 0x06
    23b6:	fd 80       	ldd	r15, Y+5	; 0x05
    23b8:	0c 81       	ldd	r16, Y+4	; 0x04
    23ba:	1b 81       	ldd	r17, Y+3	; 0x03
    23bc:	aa 81       	ldd	r26, Y+2	; 0x02
    23be:	b9 81       	ldd	r27, Y+1	; 0x01
    23c0:	ce 0f       	add	r28, r30
    23c2:	d1 1d       	adc	r29, r1
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	ed 01       	movw	r28, r26
    23ca:	08 95       	ret

000023cc <_exit>:
    23cc:	f8 94       	cli

000023ce <__stop_program>:
    23ce:	ff cf       	rjmp	.-2      	; 0x23ce <__stop_program>
