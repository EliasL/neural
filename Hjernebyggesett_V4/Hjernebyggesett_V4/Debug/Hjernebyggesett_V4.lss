
Hjernebyggesett_V4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00803800  00002646  000026fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025f2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0000a5f2  000025f2  000026a6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000005a  00803816  00803816  00002710  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000276c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000528  00000000  00000000  000027b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008bf9  00000000  00000000  00002cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003737  00000000  00000000  0000b8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002aa8  00000000  00000000  0000f008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000998  00000000  00000000  00011ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000364f  00000000  00000000  00012448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000199c  00000000  00000000  00015a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003a0  00000000  00000000  00017433  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__vector_6>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	05 a8       	ldd	r0, Z+53	; 0x35
      a6:	4c cd       	rjmp	.-1384   	; 0xfffffb40 <__eeprom_end+0xff7efb40>
      a8:	b2 d4       	rcall	.+2404   	; 0xa0e <tinyDebugger_end_line>
      aa:	4e b9       	out	0x0e, r20	; 14
      ac:	38 36       	cpi	r19, 0x68	; 104
      ae:	a9 02       	muls	r26, r25
      b0:	0c 50       	subi	r16, 0x0C	; 12
      b2:	b9 91       	ld	r27, Y+
      b4:	86 88       	ldd	r8, Z+22	; 0x16
      b6:	08 3c       	cpi	r16, 0xC8	; 200
      b8:	a6 aa       	std	Z+54, r10	; 0x36
      ba:	aa 2a       	or	r10, r26
      bc:	be 00       	.word	0x00be	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240

000000c2 <__trampolines_end>:
      c2:	00 40       	sbci	r16, 0x00	; 0
      c4:	7a 10       	cpse	r7, r10
      c6:	f3 5a       	subi	r31, 0xA3	; 163
      c8:	00 a0       	ldd	r0, Z+32	; 0x20
      ca:	72 4e       	sbci	r23, 0xE2	; 226
      cc:	18 09       	sbc	r17, r8
      ce:	00 10       	cpse	r0, r0
      d0:	a5 d4       	rcall	.+2378   	; 0xa1c <tinyDendrite_read_signals+0x4>
      d2:	e8 00       	.word	0x00e8	; ????
      d4:	00 e8       	ldi	r16, 0x80	; 128
      d6:	76 48       	sbci	r23, 0x86	; 134
      d8:	17 00       	.word	0x0017	; ????
      da:	00 e4       	ldi	r16, 0x40	; 64
      dc:	0b 54       	subi	r16, 0x4B	; 75
      de:	02 00       	.word	0x0002	; ????
      e0:	00 ca       	rjmp	.-3072   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
      e2:	9a 3b       	cpi	r25, 0xBA	; 186
      e4:	00 00       	nop
      e6:	00 e1       	ldi	r16, 0x10	; 16
      e8:	f5 05       	cpc	r31, r5
      ea:	00 00       	nop
      ec:	80 96       	adiw	r24, 0x20	; 32
      ee:	98 00       	.word	0x0098	; ????
      f0:	00 00       	nop
      f2:	40 42       	sbci	r20, 0x20	; 32
      f4:	0f 00       	.word	0x000f	; ????
      f6:	00 00       	nop
      f8:	a0 86       	std	Z+8, r10	; 0x08
      fa:	01 00       	.word	0x0001	; ????
      fc:	00 00       	nop
      fe:	10 27       	eor	r17, r16
     100:	00 00       	nop
     102:	00 00       	nop
     104:	e8 03       	fmulsu	r22, r16
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	64 00       	.word	0x0064	; ????
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	0a 00       	.word	0x000a	; ????
     112:	00 00       	nop
     114:	00 00       	nop
     116:	01 00       	.word	0x0001	; ????
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	2c 76       	andi	r18, 0x6C	; 108
     11e:	d8 88       	ldd	r13, Y+16	; 0x10
     120:	dc 67       	ori	r29, 0x7C	; 124
     122:	4f 08       	sbc	r4, r15
     124:	23 df       	rcall	.-442    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     126:	c1 df       	rcall	.-126    	; 0xaa <__SREG__+0x6b>
     128:	ae 59       	subi	r26, 0x9E	; 158
     12a:	e1 b1       	in	r30, 0x01	; 1
     12c:	b7 96       	adiw	r30, 0x27	; 39
     12e:	e5 e3       	ldi	r30, 0x35	; 53
     130:	e4 53       	subi	r30, 0x34	; 52
     132:	c6 3a       	cpi	r28, 0xA6	; 166
     134:	e6 51       	subi	r30, 0x16	; 22
     136:	99 76       	andi	r25, 0x69	; 105
     138:	96 e8       	ldi	r25, 0x86	; 134
     13a:	e6 c2       	rjmp	.+1484   	; 0x708 <tinyAxon_update_potential+0xe6>
     13c:	84 26       	eor	r8, r20
     13e:	eb 89       	ldd	r30, Y+19	; 0x13
     140:	8c 9b       	sbis	0x11, 4	; 17
     142:	62 ed       	ldi	r22, 0xD2	; 210
     144:	40 7c       	andi	r20, 0xC0	; 192
     146:	6f fc       	.word	0xfc6f	; ????
     148:	ef bc       	out	0x2f, r14	; 47
     14a:	9c 9f       	mul	r25, r28
     14c:	40 f2       	brcs	.-112    	; 0xde <__trampolines_end+0x1c>
     14e:	ba a5       	ldd	r27, Y+42	; 0x2a
     150:	6f a5       	ldd	r22, Y+47	; 0x2f
     152:	f4 90       	lpm	r15, Z
     154:	05 5a       	subi	r16, 0xA5	; 165
     156:	2a f7       	brpl	.-54     	; 0x122 <__trampolines_end+0x60>
     158:	5c 93       	st	X, r21
     15a:	6b 6c       	ori	r22, 0xCB	; 203
     15c:	f9 67       	ori	r31, 0x79	; 121
     15e:	6d c1       	rjmp	.+730    	; 0x43a <DAC_0_initialization+0xe>
     160:	1b fc       	.word	0xfc1b	; ????
     162:	e0 e4       	ldi	r30, 0x40	; 64
     164:	0d 47       	sbci	r16, 0x7D	; 125
     166:	fe f5       	brtc	.+126    	; 0x1e6 <.do_clear_bss_loop>
     168:	20 e6       	ldi	r18, 0x60	; 96
     16a:	b5 00       	.word	0x00b5	; ????
     16c:	d0 ed       	ldi	r29, 0xD0	; 208
     16e:	90 2e       	mov	r9, r16
     170:	03 00       	.word	0x0003	; ????
     172:	94 35       	cpi	r25, 0x54	; 84
     174:	77 05       	cpc	r23, r7
     176:	00 80       	ld	r0, Z
     178:	84 1e       	adc	r8, r20
     17a:	08 00       	.word	0x0008	; ????
     17c:	00 20       	and	r0, r0
     17e:	4e 0a       	sbc	r4, r30
     180:	00 00       	nop
     182:	00 c8       	rjmp	.-4096   	; 0xfffff184 <__eeprom_end+0xff7ef184>
     184:	0c 33       	cpi	r16, 0x3C	; 60
     186:	33 33       	cpi	r19, 0x33	; 51
     188:	33 0f       	add	r19, r19
     18a:	98 6e       	ori	r25, 0xE8	; 232
     18c:	12 83       	std	Z+2, r17	; 0x02
     18e:	11 41       	sbci	r17, 0x11	; 17
     190:	ef 8d       	ldd	r30, Y+31	; 0x1f
     192:	21 14       	cp	r2, r1
     194:	89 3b       	cpi	r24, 0xB9	; 185
     196:	e6 55       	subi	r30, 0x56	; 86
     198:	16 cf       	rjmp	.-468    	; 0xffffffc6 <__eeprom_end+0xff7effc6>
     19a:	fe e6       	ldi	r31, 0x6E	; 110
     19c:	db 18       	sub	r13, r11
     19e:	d1 84       	ldd	r13, Z+9	; 0x09
     1a0:	4b 38       	cpi	r20, 0x8B	; 139
     1a2:	1b f7       	brvc	.-58     	; 0x16a <__trampolines_end+0xa8>
     1a4:	7c 1d       	adc	r23, r12
     1a6:	90 1d       	adc	r25, r0
     1a8:	a4 bb       	out	0x14, r26	; 20
     1aa:	e4 24       	eor	r14, r4
     1ac:	20 32       	cpi	r18, 0x20	; 32
     1ae:	84 72       	andi	r24, 0x24	; 36
     1b0:	5e 22       	and	r5, r30
     1b2:	81 00       	.word	0x0081	; ????
     1b4:	c9 f1       	breq	.+114    	; 0x228 <main+0x28>
     1b6:	24 ec       	ldi	r18, 0xC4	; 196
     1b8:	a1 e5       	ldi	r26, 0x51	; 81
     1ba:	3d 27       	eor	r19, r29

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	df e3       	ldi	r29, 0x3F	; 63
     1c6:	de bf       	out	0x3e, r29	; 62

000001c8 <__do_copy_data>:
     1c8:	18 e3       	ldi	r17, 0x38	; 56
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b8 e3       	ldi	r27, 0x38	; 56
     1ce:	e6 e4       	ldi	r30, 0x46	; 70
     1d0:	f6 e2       	ldi	r31, 0x26	; 38
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
     1d4:	05 90       	lpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	a6 31       	cpi	r26, 0x16	; 22
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>

000001de <__do_clear_bss>:
     1de:	28 e3       	ldi	r18, 0x38	; 56
     1e0:	a6 e1       	ldi	r26, 0x16	; 22
     1e2:	b8 e3       	ldi	r27, 0x38	; 56
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	a0 37       	cpi	r26, 0x70	; 112
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 00 01 	call	0x200	; 0x200 <main>
     1f2:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     1fa:	0e 94 22 02 	call	0x444	; 0x444 <system_init>
     1fe:	08 95       	ret

00000200 <main>:

int main(void)
{	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     200:	0e 94 fd 00 	call	0x1fa	; 0x1fa <atmel_start_init>
	For some reason, instead of the reference voltage being 4.32v, it is 3.3v. 
	A plausible explanation is that the microchip does not up the voltage, so that if the microchip is only ever 
	supplied with 3.3v, it will output 3.3v as the max.
	*/
	
	VREF.CTRLA |= VREF_DAC0REFSEL_4V34_gc;
     204:	e0 ea       	ldi	r30, 0xA0	; 160
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	83 60       	ori	r24, 0x03	; 3
     20c:	80 83       	st	Z, r24
	//tinyTester_test();
	
	while (1)
	{
		// We don't want to update the neuron too often because of various reasons. The tinyISR_getflag is set every ms, and so the loop is only run once every ms.  
		if(tinyISR_getflag())
     20e:	0e 94 57 06 	call	0xcae	; 0xcae <tinyISR_getflag>
     212:	88 23       	and	r24, r24
     214:	e1 f3       	breq	.-8      	; 0x20e <main+0xe>
		{
			tinyCharge_update_charging_mode();
     216:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <tinyCharge_update_charging_mode>
			
			if(tinyCharge_is_connected_to_charger()){
     21a:	0e 94 41 04 	call	0x882	; 0x882 <tinyCharge_is_connected_to_charger>
     21e:	88 23       	and	r24, r24
     220:	b9 f0       	breq	.+46     	; 0x250 <main+0x50>
				// Charge loop
				
				if(tinyCharge_is_fully_charged()){
     222:	0e 94 44 04 	call	0x888	; 0x888 <tinyCharge_is_fully_charged>
     226:	88 23       	and	r24, r24
     228:	49 f0       	breq	.+18     	; 0x23c <main+0x3c>
					// When the neuron is connected to a charger, and fully charged:
					tinyLED_set_color(INN_LED, CHARGING_DONE_COLOR);
     22a:	63 e0       	ldi	r22, 0x03	; 3
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 9a 06 	call	0xd34	; 0xd34 <tinyLED_set_color>
					tinyLED_set_color(OUT_LED, LED_OFF);
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 9a 06 	call	0xd34	; 0xd34 <tinyLED_set_color>
     23a:	11 c0       	rjmp	.+34     	; 0x25e <main+0x5e>
				}
				else{
					// When the neuron is charging and is not fully charged
					tinyLED_set_color_mode(OUT_LED, CHARGING_COLOR, SWING);
     23c:	43 e0       	ldi	r20, 0x03	; 3
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 76 06 	call	0xcec	; 0xcec <tinyLED_set_color_mode>
					tinyLED_set_color(INN_LED, LED_OFF);
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 9a 06 	call	0xd34	; 0xd34 <tinyLED_set_color>
     24e:	07 c0       	rjmp	.+14     	; 0x25e <main+0x5e>
				// Main loop			
				
				// Set LED
				// If the out led is turned LED_OFF, and the ping color is not disabled,
				// we turn on ping mode
				if(tinyLED_get_color(OUT_LED) == LED_OFF && PING_COLOR != LED_OFF){
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	0e 94 6e 06 	call	0xcdc	; 0xcdc <tinyLED_get_color>
					tinyLED_set_color_mode(OUT_LED, PING_COLOR, PING);
				}				
				
				// Update button	
				tinyButton_update();
     256:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <tinyButton_update>
				
				// Update the potential (This is where most of the important stuff happens)
				tinyPotential_update();
     25a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <tinyPotential_update>
			}
			// Update LED
			tinyLED_update();
     25e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <tinyLED_update>
				
			// Switch transistors
			tinyCharge_set_transistors();
     262:	0e 94 a4 04 	call	0x948	; 0x948 <tinyCharge_set_transistors>
			
			// Prepare for next cycle
			tinyISR_setflag(false);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 54 06 	call	0xca8	; 0xca8 <tinyISR_setflag>
			tinyDebugger_send_uint32("time", tinyTime_now());
     26c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <tinyTime_now>
     270:	ab 01       	movw	r20, r22
     272:	bc 01       	movw	r22, r24
     274:	82 ef       	ldi	r24, 0xF2	; 242
     276:	95 ea       	ldi	r25, 0xA5	; 165
     278:	0e 94 ae 04 	call	0x95c	; 0x95c <tinyDebugger_send_uint32>
			tinyDebugger_end_line();
     27c:	0e 94 07 05 	call	0xa0e	; 0xa0e <tinyDebugger_end_line>
     280:	c6 cf       	rjmp	.-116    	; 0x20e <main+0xe>

00000282 <ADC_0_init>:
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC1.RES);
}
     282:	e0 e4       	ldi	r30, 0x40	; 64
     284:	f6 e0       	ldi	r31, 0x06	; 6
     286:	80 e1       	ldi	r24, 0x10	; 16
     288:	82 83       	std	Z+2, r24	; 0x02
     28a:	85 e0       	ldi	r24, 0x05	; 5
     28c:	80 83       	st	Z, r24
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	08 95       	ret

00000292 <ADC_0_is_conversion_done>:
     292:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     296:	81 70       	andi	r24, 0x01	; 1
     298:	08 95       	ret

0000029a <ADC_0_get_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_1_channel_t channel)
{
	ADC1.MUXPOS  = channel;
     29a:	e0 e4       	ldi	r30, 0x40	; 64
     29c:	f6 e0       	ldi	r31, 0x06	; 6
     29e:	86 83       	std	Z+6, r24	; 0x06
	ADC1.COMMAND = ADC_STCONV_bm;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 87       	std	Z+8, r24	; 0x08
adc_result_t ADC_0_get_conversion(adc_1_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
	while (!ADC_0_is_conversion_done())
     2a4:	0e 94 49 01 	call	0x292	; 0x292 <ADC_0_is_conversion_done>
     2a8:	88 23       	and	r24, r24
     2aa:	e1 f3       	breq	.-8      	; 0x2a4 <ADC_0_get_conversion+0xa>
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC1.RES);
     2ac:	e0 e4       	ldi	r30, 0x40	; 64
     2ae:	f6 e0       	ldi	r31, 0x06	; 6
     2b0:	20 89       	ldd	r18, Z+16	; 0x10
     2b2:	31 89       	ldd	r19, Z+17	; 0x11

	ADC_0_start_conversion(channel);
	while (!ADC_0_is_conversion_done())
		;
	res = ADC_0_get_conversion_result();
	ADC1.INTFLAGS |= ADC_RESRDY_bm;
     2b4:	93 85       	ldd	r25, Z+11	; 0x0b
     2b6:	91 60       	ori	r25, 0x01	; 1
     2b8:	93 87       	std	Z+11, r25	; 0x0b
	return res;
}
     2ba:	c9 01       	movw	r24, r18
     2bc:	08 95       	ret

000002be <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	08 95       	ret

000002c2 <DIGITAL_GLUE_LOGIC_0_init>:

	// Enable Protected register, peripheral must be disabled (ENABLE=0, in TCD.LUT0CTRLA).

	// CCL.SEQCTRL0 = CCL_SEQSEL_DISABLE_gc /* Sequential logic disabled */;

	CCL.TRUTH0 = 168; /* Truth 0: 168 */
     2c2:	e0 ec       	ldi	r30, 0xC0	; 192
     2c4:	f1 e0       	ldi	r31, 0x01	; 1
     2c6:	28 ea       	ldi	r18, 0xA8	; 168
     2c8:	20 87       	std	Z+8, r18	; 0x08

	CCL.LUT0CTRLC = CCL_INSEL2_TCA0_gc /* TCA0 WO2 input source */;
     2ca:	98 e0       	ldi	r25, 0x08	; 8
     2cc:	97 83       	std	Z+7, r25	; 0x07

	CCL.LUT0CTRLB = CCL_INSEL0_SPI0_gc /* SPI0 SCK source */
     2ce:	8b eb       	ldi	r24, 0xBB	; 187
     2d0:	86 83       	std	Z+6, r24	; 0x06
	                | CCL_INSEL1_SPI0_gc /* SPI0 MOSI input source */;

	CCL.LUT0CTRLA = 0 << CCL_CLKSRC_bp       /* Clock Source Selection: disabled */
     2d2:	39 e0       	ldi	r19, 0x09	; 9
     2d4:	35 83       	std	Z+5, r19	; 0x05
	                | CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	                | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	                | 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	                | 1 << CCL_OUTEN_bp;     /* Output Enable: enabled */

	CCL.TRUTH1 = 168; /* Truth 1: 168 */
     2d6:	24 87       	std	Z+12, r18	; 0x0c

	CCL.LUT1CTRLC = CCL_INSEL2_TCA0_gc /* TCA0 WO2 input source */;
     2d8:	93 87       	std	Z+11, r25	; 0x0b

	CCL.LUT1CTRLB = CCL_INSEL0_SPI0_gc /* SPI0 SCK source */
     2da:	82 87       	std	Z+10, r24	; 0x0a
	//		 | CCL_EDGEDET_DIS_gc /* Edge detector is disabled */
	//		 | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	//		 | 0 << CCL_ENABLE_bp /* LUT Enable: disabled */
	//		 | 0 << CCL_OUTEN_bp; /* Output Enable: disabled */

	CCL.CTRLA = 1 << CCL_ENABLE_bp      /* Enable: enabled */
     2dc:	81 e4       	ldi	r24, 0x41	; 65
     2de:	80 83       	st	Z, r24
	            | 1 << CCL_RUNSTDBY_bp; /* Run in Standby: enabled */

	return 0;
}
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	08 95       	ret

000002e4 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     2e4:	47 e0       	ldi	r20, 0x07	; 7
     2e6:	68 ed       	ldi	r22, 0xD8	; 216
     2e8:	8c e7       	ldi	r24, 0x7C	; 124
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 51 02 	call	0x4a2	; 0x4a2 <protected_write_io>
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	68 ed       	ldi	r22, 0xD8	; 216
     2f4:	81 e6       	ldi	r24, 0x61	; 97
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret

00000300 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     300:	78 94       	sei

	return 0;
}
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	08 95       	ret

00000306 <DAC_0_init>:
int8_t DAC_0_init()
{

	// DAC0.DATA = 0x0; /* DATA Register: 0x0 */

	DAC0.CTRLA = 1 << DAC_ENABLE_bp      /* DAC Enable: enabled */
     306:	81 e4       	ldi	r24, 0x41	; 65
     308:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
	             | 1 << DAC_OUTEN_bp     /* Output Buffer Enable: enabled */
	             | 0 << DAC_RUNSTDBY_bp; /* Run in Standby Mode: disabled */

	return 0;
}
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	08 95       	ret

00000310 <DAC_0_uninit>:
int8_t DAC_0_uninit()
{

	// DAC0.DATA = 0x0; /* DATA Register: 0x0 */

	DAC0.CTRLA = 1 << DAC_ENABLE_bp      /* DAC Enable: enabled */
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
	| 0 << DAC_OUTEN_bp     /* Output Buffer Enable: disabled */
	| 0 << DAC_RUNSTDBY_bp; /* Run in Standby Mode: disabled */

	return 0;
}
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	08 95       	ret

0000031a <DAC_0_enable>:
 *
 * \return Nothing
 */
void DAC_0_enable()
{
	DAC0.CTRLA |= DAC_ENABLE_bm;
     31a:	e0 ea       	ldi	r30, 0xA0	; 160
     31c:	f6 e0       	ldi	r31, 0x06	; 6
     31e:	80 81       	ld	r24, Z
     320:	81 60       	ori	r24, 0x01	; 1
     322:	80 83       	st	Z, r24
     324:	08 95       	ret

00000326 <DAC_0_disable>:
 *
 * \return Nothing
 */
void DAC_0_disable()
{
	DAC0.CTRLA &= ~DAC_ENABLE_bm;
     326:	e0 ea       	ldi	r30, 0xA0	; 160
     328:	f6 e0       	ldi	r31, 0x06	; 6
     32a:	80 81       	ld	r24, Z
     32c:	8e 7f       	andi	r24, 0xFE	; 254
     32e:	80 83       	st	Z, r24
     330:	08 95       	ret

00000332 <DAC_0_set_output>:
 *
 * \return Nothing
 */
void DAC_0_set_output(dac_resolution_t value)
{
	DAC0.DATA = value;
     332:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     336:	08 95       	ret

00000338 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     338:	e0 e1       	ldi	r30, 0x10	; 16
     33a:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     33c:	80 81       	ld	r24, Z
     33e:	88 60       	ori	r24, 0x08	; 8
     340:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     342:	e8 31       	cpi	r30, 0x18	; 24
     344:	84 e0       	ldi	r24, 0x04	; 4
     346:	f8 07       	cpc	r31, r24
     348:	c9 f7       	brne	.-14     	; 0x33c <mcu_init+0x4>
     34a:	e0 e3       	ldi	r30, 0x30	; 48
     34c:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     34e:	80 81       	ld	r24, Z
     350:	88 60       	ori	r24, 0x08	; 8
     352:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     354:	e8 33       	cpi	r30, 0x38	; 56
     356:	84 e0       	ldi	r24, 0x04	; 4
     358:	f8 07       	cpc	r31, r24
     35a:	c9 f7       	brne	.-14     	; 0x34e <mcu_init+0x16>
     35c:	e0 e5       	ldi	r30, 0x50	; 80
     35e:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     360:	80 81       	ld	r24, Z
     362:	88 60       	ori	r24, 0x08	; 8
     364:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     366:	e8 35       	cpi	r30, 0x58	; 88
     368:	84 e0       	ldi	r24, 0x04	; 4
     36a:	f8 07       	cpc	r31, r24
     36c:	c9 f7       	brne	.-14     	; 0x360 <mcu_init+0x28>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     36e:	08 95       	ret

00000370 <ADC_0_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     370:	e5 e1       	ldi	r30, 0x15	; 21
     372:	f4 e0       	ldi	r31, 0x04	; 4
     374:	80 81       	ld	r24, Z
     376:	88 7f       	andi	r24, 0xF8	; 248
     378:	84 60       	ori	r24, 0x04	; 4
     37a:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     37c:	80 81       	ld	r24, Z
     37e:	87 7f       	andi	r24, 0xF7	; 247
     380:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     382:	e7 e1       	ldi	r30, 0x17	; 23
     384:	f4 e0       	ldi	r31, 0x04	; 4
     386:	80 81       	ld	r24, Z
     388:	88 7f       	andi	r24, 0xF8	; 248
     38a:	84 60       	ori	r24, 0x04	; 4
     38c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     38e:	80 81       	ld	r24, Z
     390:	87 7f       	andi	r24, 0xF7	; 247
     392:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     394:	e0 e5       	ldi	r30, 0x50	; 80
     396:	f4 e0       	ldi	r31, 0x04	; 4
     398:	80 81       	ld	r24, Z
     39a:	88 7f       	andi	r24, 0xF8	; 248
     39c:	84 60       	ori	r24, 0x04	; 4
     39e:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     3a0:	80 81       	ld	r24, Z
     3a2:	87 7f       	andi	r24, 0xF7	; 247
     3a4:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     3a6:	e1 e5       	ldi	r30, 0x51	; 81
     3a8:	f4 e0       	ldi	r31, 0x04	; 4
     3aa:	80 81       	ld	r24, Z
     3ac:	88 7f       	andi	r24, 0xF8	; 248
     3ae:	84 60       	ori	r24, 0x04	; 4
     3b0:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     3b2:	80 81       	ld	r24, Z
     3b4:	87 7f       	andi	r24, 0xF7	; 247
     3b6:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     3b8:	e3 e5       	ldi	r30, 0x53	; 83
     3ba:	f4 e0       	ldi	r31, 0x04	; 4
     3bc:	80 81       	ld	r24, Z
     3be:	88 7f       	andi	r24, 0xF8	; 248
     3c0:	84 60       	ori	r24, 0x04	; 4
     3c2:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     3c4:	80 81       	ld	r24, Z
     3c6:	87 7f       	andi	r24, 0xF7	; 247
     3c8:	80 83       	st	Z, r24
	// Disable digital input buffer
	DEN4_PIN_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	DEN4_PIN_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
     3ca:	0e 94 41 01 	call	0x282	; 0x282 <ADC_0_init>
     3ce:	08 95       	ret

000003d0 <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     3d0:	23 98       	cbi	0x04, 3	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     3d2:	e3 e3       	ldi	r30, 0x33	; 51
     3d4:	f4 e0       	ldi	r31, 0x04	; 4
     3d6:	80 81       	ld	r24, Z
     3d8:	87 7f       	andi	r24, 0xF7	; 247
     3da:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     3dc:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     3de:	2a 98       	cbi	0x05, 2	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     3e0:	0e 94 8b 02 	call	0x516	; 0x516 <USART_0_init>
     3e4:	08 95       	ret

000003e6 <TIMER_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     3e6:	25 9a       	sbi	0x04, 5	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     3e8:	2d 98       	cbi	0x05, 5	; 5
	    // <false"> Low
	    // <true"> High
	    false);

	/* set the alternate pin mux */
	PORTMUX.CTRLC |= PORTMUX_TCA02_bm;
     3ea:	e0 e0       	ldi	r30, 0x00	; 0
     3ec:	f2 e0       	ldi	r31, 0x02	; 2
     3ee:	82 81       	ldd	r24, Z+2	; 0x02
     3f0:	84 60       	ori	r24, 0x04	; 4
     3f2:	82 83       	std	Z+2, r24	; 0x02

	TIMER_0_init();
     3f4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <TIMER_0_init>
     3f8:	08 95       	ret

000003fa <DIGITAL_GLUE_LOGIC_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     3fa:	24 9a       	sbi	0x04, 4	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     3fc:	2c 98       	cbi	0x05, 4	; 5
	    // <false"> Low
	    // <true"> High
	    false);

	/* set the alternate pin mux */
	PORTMUX.CTRLA |= PORTMUX_LUT0_bm;
     3fe:	e0 e0       	ldi	r30, 0x00	; 0
     400:	f2 e0       	ldi	r31, 0x02	; 2
     402:	80 81       	ld	r24, Z
     404:	80 61       	ori	r24, 0x10	; 16
     406:	80 83       	st	Z, r24

	DIGITAL_GLUE_LOGIC_0_init();
     408:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIGITAL_GLUE_LOGIC_0_init>
     40c:	08 95       	ret

0000040e <SPI_0_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     40e:	02 98       	cbi	0x00, 2	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     410:	e2 e1       	ldi	r30, 0x12	; 18
     412:	f4 e0       	ldi	r31, 0x04	; 4
     414:	80 81       	ld	r24, Z
     416:	87 7f       	andi	r24, 0xF7	; 247
     418:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     41a:	01 9a       	sbi	0x00, 1	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     41c:	09 98       	cbi	0x01, 1	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     41e:	03 9a       	sbi	0x00, 3	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     420:	0b 98       	cbi	0x01, 3	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     422:	04 9a       	sbi	0x00, 4	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     424:	0c 98       	cbi	0x01, 4	; 1
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
     426:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_0_init>
     42a:	08 95       	ret

0000042c <DAC_0_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     42c:	e6 e1       	ldi	r30, 0x16	; 22
     42e:	f4 e0       	ldi	r31, 0x04	; 4
     430:	80 81       	ld	r24, Z
     432:	88 7f       	andi	r24, 0xF8	; 248
     434:	84 60       	ori	r24, 0x04	; 4
     436:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     438:	80 81       	ld	r24, Z
     43a:	87 7f       	andi	r24, 0xF7	; 247
     43c:	80 83       	st	Z, r24
	// Disable digital input buffer
	AXON_PIN_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	AXON_PIN_set_pull_mode(PORT_PULL_OFF);

	DAC_0_init();
     43e:	0e 94 83 01 	call	0x306	; 0x306 <DAC_0_init>
     442:	08 95       	ret

00000444 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     444:	0e 94 9c 01 	call	0x338	; 0x338 <mcu_init>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     448:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     44a:	29 98       	cbi	0x05, 1	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     44c:	26 98       	cbi	0x04, 6	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     44e:	e6 e3       	ldi	r30, 0x36	; 54
     450:	f4 e0       	ldi	r31, 0x04	; 4
     452:	80 81       	ld	r24, Z
     454:	87 7f       	andi	r24, 0xF7	; 247
     456:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     458:	27 98       	cbi	0x04, 7	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     45a:	e7 e3       	ldi	r30, 0x37	; 55
     45c:	f4 e0       	ldi	r31, 0x04	; 4
     45e:	80 81       	ld	r24, Z
     460:	87 7f       	andi	r24, 0xF7	; 247
     462:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     464:	42 98       	cbi	0x08, 2	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     466:	e2 e5       	ldi	r30, 0x52	; 82
     468:	f4 e0       	ldi	r31, 0x04	; 4
     46a:	80 81       	ld	r24, Z
     46c:	88 60       	ori	r24, 0x08	; 8
     46e:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     470:	45 9a       	sbi	0x08, 5	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     472:	4d 9a       	sbi	0x09, 5	; 9
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    true);

	CLKCTRL_init();
     474:	0e 94 72 01 	call	0x2e4	; 0x2e4 <CLKCTRL_init>

	RTC_0_init();
     478:	0e 94 55 02 	call	0x4aa	; 0x4aa <RTC_0_init>

	ADC_0_initialization();
     47c:	0e 94 b8 01 	call	0x370	; 0x370 <ADC_0_initialization>

	USART_0_initialization();
     480:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <USART_0_initialization>

	TIMER_0_initialization();
     484:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <TIMER_0_initialization>

	DIGITAL_GLUE_LOGIC_0_initialization();
     488:	0e 94 fd 01 	call	0x3fa	; 0x3fa <DIGITAL_GLUE_LOGIC_0_initialization>

	SPI_0_initialization();
     48c:	0e 94 07 02 	call	0x40e	; 0x40e <SPI_0_initialization>

	DAC_0_initialization();
     490:	0e 94 16 02 	call	0x42c	; 0x42c <DAC_0_initialization>

	CPUINT_init();
     494:	0e 94 80 01 	call	0x300	; 0x300 <CPUINT_init>

	SLPCTRL_init();
     498:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SLPCTRL_init>

	BOD_init();
     49c:	0e 94 5f 01 	call	0x2be	; 0x2be <BOD_init>
     4a0:	08 95       	ret

000004a2 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     4a2:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     4a4:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     4a6:	40 83       	st	Z, r20
	ret                             // Return to caller
     4a8:	08 95       	ret

000004aa <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     4aa:	e0 e4       	ldi	r30, 0x40	; 64
     4ac:	f1 e0       	ldi	r31, 0x01	; 1
     4ae:	81 81       	ldd	r24, Z+1	; 0x01
     4b0:	81 11       	cpse	r24, r1
     4b2:	fd cf       	rjmp	.-6      	; 0x4ae <RTC_0_init+0x4>
	}

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	RTC.CNT = 0x20; /* Counter: 0x20 */
     4b4:	e0 e4       	ldi	r30, 0x40	; 64
     4b6:	f1 e0       	ldi	r31, 0x01	; 1
     4b8:	80 e2       	ldi	r24, 0x20	; 32
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	80 87       	std	Z+8, r24	; 0x08
     4be:	91 87       	std	Z+9, r25	; 0x09

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     4c0:	81 e8       	ldi	r24, 0x81	; 129
     4c2:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x20 / TIMESCALE; /* Period: 0x20 */
     4c4:	80 e8       	ldi	r24, 0x80	; 128
     4c6:	92 e0       	ldi	r25, 0x02	; 2
     4c8:	82 87       	std	Z+10, r24	; 0x0a
     4ca:	93 87       	std	Z+11, r25	; 0x0b

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	RTC.DBGCTRL = 1 << RTC_DBGRUN_bp; /* Run in debug: enabled */
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	85 83       	std	Z+5, r24	; 0x05

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
     4d0:	82 83       	std	Z+2, r24	; 0x02
	              | 1 << RTC_OVF_bp; /* Overflow Interrupt enable: enabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     4d2:	81 89       	ldd	r24, Z+17	; 0x11
     4d4:	81 11       	cpse	r24, r1
     4d6:	fd cf       	rjmp	.-6      	; 0x4d2 <RTC_0_init+0x28>
	}

	RTC.PITCTRLA = RTC_PERIOD_OFF_gc    /* Off */
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	08 95       	ret

000004e2 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	08 95       	ret

000004e6 <SPI_0_init>:
 * \return Initialization status
 */
int8_t SPI_0_init()
{

	SPI0.CTRLA = 0 << SPI_CLK2X_bp     /* Enable Double Speed: disabled */
     4e6:	e0 e2       	ldi	r30, 0x20	; 32
     4e8:	f8 e0       	ldi	r31, 0x08	; 8
     4ea:	83 e2       	ldi	r24, 0x23	; 35
     4ec:	80 83       	st	Z, r24
	             | 0 << SPI_DORD_bp    /* Data Order Setting: disabled */
	             | 1 << SPI_ENABLE_bp  /* Enable Module: enabled */
	             | 1 << SPI_MASTER_bp  /* SPI module in master mode */
	             | SPI_PRESC_DIV16_gc; /* System Clock / 16 */

	SPI0.CTRLB = 0 << SPI_BUFEN_bp   /* Buffer Mode Enable: disabled */
     4ee:	84 e0       	ldi	r24, 0x04	; 4
     4f0:	81 83       	std	Z+1, r24	; 0x01
	//		 | 0 << SPI_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << SPI_SSIE_bp /* Slave Select Trigger Interrupt Enable: disabled */
	//		 | 0 << SPI_TXCIE_bp; /* Transfer Complete Interrupt Enable: disabled */

	return 0;
}
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	08 95       	ret

000004f6 <TIMER_0_init>:

	// TCA0.SINGLE.CMP0 = 0x0; /* Compare Register 0: 0x0 */

	// TCA0.SINGLE.CMP1 = 0x0; /* Compare Register 1: 0x0 */

	TCA0.SINGLE.CMP2 = 0x4; /* Compare Register 2: 0x4 */
     4f6:	e0 e0       	ldi	r30, 0x00	; 0
     4f8:	fa e0       	ldi	r31, 0x0A	; 10
     4fa:	84 e0       	ldi	r24, 0x04	; 4
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	84 a7       	std	Z+44, r24	; 0x2c
     500:	95 a7       	std	Z+45, r25	; 0x2d

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
     502:	83 e4       	ldi	r24, 0x43	; 67
     504:	81 83       	std	Z+1, r24	; 0x01
	                    | 0 << TCA_SINGLE_CMP0EN_bp         /* Compare 0 Enable: disabled */
	                    | 0 << TCA_SINGLE_CMP1EN_bp         /* Compare 1 Enable: disabled */
	                    | 1 << TCA_SINGLE_CMP2EN_bp         /* Compare 2 Enable: enabled */
	                    | TCA_SINGLE_WGMODE_SINGLESLOPE_gc; /*  */

	TCA0.SINGLE.CTRLC = 0 << TCA_SINGLE_CMP0OV_bp    /* Compare 0 Waveform Output Value: disabled */
     506:	84 e0       	ldi	r24, 0x04	; 4
     508:	82 83       	std	Z+2, r24	; 0x02
	// TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp /* Compare 0 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	TCA0.SINGLE.PER = 0x7; /* Period: 0x7 */
     50a:	87 e0       	ldi	r24, 0x07	; 7
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	86 a3       	std	Z+38, r24	; 0x26
     510:	97 a3       	std	Z+39, r25	; 0x27

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp; /* Module Enable: disabled */

	return 0;
}
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	08 95       	ret

00000516 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART0.STATUS & USART_RXCIF_bm))
		;
	return USART0.RXDATAL;
}
     516:	e0 e0       	ldi	r30, 0x00	; 0
     518:	f8 e0       	ldi	r31, 0x08	; 8
     51a:	8b e5       	ldi	r24, 0x5B	; 91
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	80 87       	std	Z+8, r24	; 0x08
     520:	91 87       	std	Z+9, r25	; 0x09
     522:	80 ec       	ldi	r24, 0xC0	; 192
     524:	86 83       	std	Z+6, r24	; 0x06
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	98 e3       	ldi	r25, 0x38	; 56
     52a:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <__iob+0x2>
     52e:	90 93 6d 38 	sts	0x386D, r25	; 0x80386d <__iob+0x3>
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	08 95       	ret

00000536 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
     536:	e0 e0       	ldi	r30, 0x00	; 0
     538:	f8 e0       	ldi	r31, 0x08	; 8
     53a:	94 81       	ldd	r25, Z+4	; 0x04
     53c:	95 ff       	sbrs	r25, 5
     53e:	fd cf       	rjmp	.-6      	; 0x53a <USART_0_write+0x4>
		;
	USART0.TXDATAL = data;
     540:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     544:	08 95       	ret

00000546 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
     546:	0e 94 9b 02 	call	0x536	; 0x536 <USART_0_write>
	return 0;
}
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	08 95       	ret

00000550 <tinyAxon_add_pulse>:
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
	{
		if(pulse_queue[i] == 0){
     550:	20 91 16 38 	lds	r18, 0x3816	; 0x803816 <__data_end>
     554:	30 91 17 38 	lds	r19, 0x3817	; 0x803817 <__data_end+0x1>
     558:	23 2b       	or	r18, r19
     55a:	51 f0       	breq	.+20     	; 0x570 <tinyAxon_add_pulse+0x20>
     55c:	e8 e1       	ldi	r30, 0x18	; 24
     55e:	f8 e3       	ldi	r31, 0x38	; 56
     560:	21 e0       	ldi	r18, 0x01	; 1
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	b9 01       	movw	r22, r18
     566:	41 91       	ld	r20, Z+
     568:	51 91       	ld	r21, Z+
     56a:	45 2b       	or	r20, r21
     56c:	81 f4       	brne	.+32     	; 0x58e <tinyAxon_add_pulse+0x3e>
     56e:	02 c0       	rjmp	.+4      	; 0x574 <tinyAxon_add_pulse+0x24>
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	70 e0       	ldi	r23, 0x00	; 0
			pulse_queue[i] = new_pulse;
     574:	66 0f       	add	r22, r22
     576:	77 1f       	adc	r23, r23
     578:	fb 01       	movw	r30, r22
     57a:	ea 5e       	subi	r30, 0xEA	; 234
     57c:	f7 4c       	sbci	r31, 0xC7	; 199
     57e:	80 83       	st	Z, r24
     580:	91 83       	std	Z+1, r25	; 0x01
			pulses_in_queue++;
     582:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     586:	8f 5f       	subi	r24, 0xFF	; 255
     588:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <pulses_in_queue>
			// We return so we only ever add one
			break;
     58c:	08 95       	ret
     58e:	2f 5f       	subi	r18, 0xFF	; 255
     590:	3f 4f       	sbci	r19, 0xFF	; 255
*/
static void tinyAxon_add_pulse(uint16_t new_pulse)
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     592:	2a 30       	cpi	r18, 0x0A	; 10
     594:	31 05       	cpc	r19, r1
     596:	31 f7       	brne	.-52     	; 0x564 <tinyAxon_add_pulse+0x14>
     598:	08 95       	ret

0000059a <tinyAxon_is_firing>:
// DAC has no DAC_0_get_output, so we keep track of this here.
uint8_t axonOutputValue = 0;


_Bool tinyAxon_is_firing(){
	return axonOutputValue != NO_SIGNAL_OUTPUT;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <axonOutputValue>
     5a0:	91 11       	cpse	r25, r1
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <tinyAxon_is_firing+0xc>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
}
     5a6:	08 95       	ret

000005a8 <find_newest_pulse>:
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
     5a8:	40 91 16 38 	lds	r20, 0x3816	; 0x803816 <__data_end>
     5ac:	50 91 17 38 	lds	r21, 0x3817	; 0x803817 <__data_end+0x1>
     5b0:	e8 e1       	ldi	r30, 0x18	; 24
     5b2:	f8 e3       	ldi	r31, 0x38	; 56
	
// This function will be used with pulse_queue to find the newest pulse
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
     5b4:	80 e0       	ldi	r24, 0x00	; 0
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     5b6:	91 e0       	ldi	r25, 0x01	; 1
		if (pulse_queue[current_index] > max) {
     5b8:	21 91       	ld	r18, Z+
     5ba:	31 91       	ld	r19, Z+
     5bc:	42 17       	cp	r20, r18
     5be:	53 07       	cpc	r21, r19
     5c0:	10 f4       	brcc	.+4      	; 0x5c6 <find_newest_pulse+0x1e>
     5c2:	89 2f       	mov	r24, r25
			return_index = current_index;
			max = pulse_queue[current_index];
     5c4:	a9 01       	movw	r20, r18
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     5c6:	9f 5f       	subi	r25, 0xFF	; 255
     5c8:	9a 30       	cpi	r25, 0x0A	; 10
     5ca:	b1 f7       	brne	.-20     	; 0x5b8 <find_newest_pulse+0x10>
			return_index = current_index;
			max = pulse_queue[current_index];
		}
	}
	return return_index;
}
     5cc:	08 95       	ret

000005ce <tinyAxon_stop_sending_pulse>:
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
}

void tinyAxon_stop_sending_pulse()
{
	DAC_0_set_output(NO_SIGNAL_OUTPUT);
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 99 01 	call	0x332	; 0x332 <DAC_0_set_output>
	axonOutputValue=NO_SIGNAL_OUTPUT;
     5d6:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <axonOutputValue>
     5da:	08 95       	ret

000005dc <tinyAxon_remove_pulse>:

/*
If the potential is very low, we want to try to remove a pulse.
*/
bool tinyAxon_remove_pulse(void)
{
     5dc:	cf 93       	push	r28
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
     5de:	c0 91 2a 38 	lds	r28, 0x382A	; 0x80382a <pulses_in_queue>
     5e2:	cc 23       	and	r28, r28
     5e4:	c9 f0       	breq	.+50     	; 0x618 <tinyAxon_remove_pulse+0x3c>
		//There was no pulse to remove.
		return false;
	}
	else{
		// If we are to remove a pulse, we want to remove the one that will fire last.
		uint8_t pulse_index = find_newest_pulse();
     5e6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <find_newest_pulse>
		uint16_t newest_pulse = pulse_queue[pulse_index];
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	fc 01       	movw	r30, r24
     5ee:	ee 0f       	add	r30, r30
     5f0:	ff 1f       	adc	r31, r31
     5f2:	ea 5e       	subi	r30, 0xEA	; 234
     5f4:	f7 4c       	sbci	r31, 0xC7	; 199
	
		// Now we want to check if the pulse is too far away to be affected by the low potential, or close enough that we decide to remove it.
		// (When we say that the pulse is too far away, it refers to the biological process of how the potential spreads from Dendrites to axon).
		if(newest_pulse > PULSE_NO_RETURN_TIME){
     5f6:	20 81       	ld	r18, Z
     5f8:	31 81       	ldd	r19, Z+1	; 0x01
     5fa:	2d 33       	cpi	r18, 0x3D	; 61
     5fc:	31 05       	cpc	r19, r1
     5fe:	70 f0       	brcs	.+28     	; 0x61c <tinyAxon_remove_pulse+0x40>
			// We decided to remove the pulse
			pulse_queue[pulse_index] = 0;
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	fc 01       	movw	r30, r24
     606:	ea 5e       	subi	r30, 0xEA	; 234
     608:	f7 4c       	sbci	r31, 0xC7	; 199
     60a:	10 82       	st	Z, r1
     60c:	11 82       	std	Z+1, r1	; 0x01
			pulses_in_queue--;
     60e:	c1 50       	subi	r28, 0x01	; 1
     610:	c0 93 2a 38 	sts	0x382A, r28	; 0x80382a <pulses_in_queue>
			return true;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	03 c0       	rjmp	.+6      	; 0x61e <tinyAxon_remove_pulse+0x42>
bool tinyAxon_remove_pulse(void)
{
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
		//There was no pulse to remove.
		return false;
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	01 c0       	rjmp	.+2      	; 0x61e <tinyAxon_remove_pulse+0x42>
			pulses_in_queue--;
			return true;
		}
		// Here we have found that there is a pulse queued, but it is old enough to let pass anyway, so now we need to put it back into the queue.
		else{
			return false;
     61c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <tinyAxon_update_potential>:
/*
Decides whether or not the axon should fire
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	6b 01       	movw	r12, r22
     62c:	7c 01       	movw	r14, r24
	//While the neuron has enough potential to fire, we want to fire more
	while (potential >= THRESHOLD_POTENTIAL)
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	48 ec       	ldi	r20, 0xC8	; 200
     634:	51 e4       	ldi	r21, 0x41	; 65
     636:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__gesf2>
     63a:	88 23       	and	r24, r24
     63c:	bc f1       	brlt	.+110    	; 0x6ac <tinyAxon_update_potential+0x8a>
	{
		// We have to check if there are already queued pulses, so that the frequency never exceeds FIRE_DELAY
		if(pulses_in_queue>0){
     63e:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     642:	88 23       	and	r24, r24
     644:	b1 f0       	breq	.+44     	; 0x672 <tinyAxon_update_potential+0x50>
			uint16_t newest_pulse = pulse_queue[find_newest_pulse()];
     646:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <find_newest_pulse>
     64a:	e8 2f       	mov	r30, r24
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	ee 0f       	add	r30, r30
     650:	ff 1f       	adc	r31, r31
     652:	ea 5e       	subi	r30, 0xEA	; 234
     654:	f7 4c       	sbci	r31, 0xC7	; 199
			
			// There is at least one pulse in the queue, and it is "so close", that we need to offset the new pulse, so that we keep at least
			// one FIRE_DELAY between each pulse
			if(newest_pulse + FIRE_DELAY > TRAVLE_DELAY){
     656:	80 81       	ld	r24, Z
     658:	91 81       	ldd	r25, Z+1	; 0x01
     65a:	0a 96       	adiw	r24, 0x0a	; 10
     65c:	85 36       	cpi	r24, 0x65	; 101
     65e:	91 05       	cpc	r25, r1
     660:	18 f0       	brcs	.+6      	; 0x668 <tinyAxon_update_potential+0x46>
				tinyAxon_add_pulse(newest_pulse + FIRE_DELAY);
     662:	0e 94 a8 02 	call	0x550	; 0x550 <tinyAxon_add_pulse>
     666:	09 c0       	rjmp	.+18     	; 0x67a <tinyAxon_update_potential+0x58>
			}
			// There is at least one pulse in the queue, but it's "far enough away" to ignore
			else{
				tinyAxon_add_pulse(TRAVLE_DELAY);
     668:	84 e6       	ldi	r24, 0x64	; 100
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 a8 02 	call	0x550	; 0x550 <tinyAxon_add_pulse>
     670:	04 c0       	rjmp	.+8      	; 0x67a <tinyAxon_update_potential+0x58>
			}
		}
		// There are no pulses in the queue, so we add a pulse as normal
		else{
			tinyAxon_add_pulse(TRAVLE_DELAY);		
     672:	84 e6       	ldi	r24, 0x64	; 100
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 a8 02 	call	0x550	; 0x550 <tinyAxon_add_pulse>
		}
		
		potential += POSTFIRE_POTENTIAL_REACTION; // This is usually defined as a negative value, don't be confused by the +=
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	48 ec       	ldi	r20, 0xC8	; 200
     680:	51 e4       	ldi	r21, 0x41	; 65
     682:	c7 01       	movw	r24, r14
     684:	b6 01       	movw	r22, r12
     686:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__subsf3>
     68a:	6b 01       	movw	r12, r22
     68c:	7c 01       	movw	r14, r24
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     68e:	45 e0       	ldi	r20, 0x05	; 5
     690:	63 e0       	ldi	r22, 0x03	; 3
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	0e 94 76 06 	call	0xcec	; 0xcec <tinyLED_set_color_mode>
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
	//While the neuron has enough potential to fire, we want to fire more
	while (potential >= THRESHOLD_POTENTIAL)
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	48 ec       	ldi	r20, 0xC8	; 200
     69e:	51 e4       	ldi	r21, 0x41	; 65
     6a0:	c7 01       	movw	r24, r14
     6a2:	b6 01       	movw	r22, r12
     6a4:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__gesf2>
     6a8:	88 23       	and	r24, r24
     6aa:	4c f6       	brge	.-110    	; 0x63e <tinyAxon_update_potential+0x1c>
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
	}
	
	// If the neuron has a very low potential, we want to remove a pulse from the queue (if there is one)
	if(potential < -THRESHOLD_POTENTIAL)
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	48 ec       	ldi	r20, 0xC8	; 200
     6b2:	51 ec       	ldi	r21, 0xC1	; 193
     6b4:	c7 01       	movw	r24, r14
     6b6:	b6 01       	movw	r22, r12
     6b8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__cmpsf2>
     6bc:	88 23       	and	r24, r24
     6be:	0c f0       	brlt	.+2      	; 0x6c2 <tinyAxon_update_potential+0xa0>
     6c0:	46 c0       	rjmp	.+140    	; 0x74e <tinyAxon_update_potential+0x12c>
	{
		if(pulses_in_queue > 0) // Perhaps this should be a separate variable? For now, we will just simply use -THRESHOLD_POTENTIAL
     6c2:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     6c6:	88 23       	and	r24, r24
     6c8:	11 f1       	breq	.+68     	; 0x70e <tinyAxon_update_potential+0xec>
		{
			// The neurons potential is low enough to attempt to remove a queued fire (Fire less)
			if(tinyAxon_remove_pulse())
     6ca:	0e 94 ee 02 	call	0x5dc	; 0x5dc <tinyAxon_remove_pulse>
     6ce:	88 23       	and	r24, r24
     6d0:	f1 f1       	breq	.+124    	; 0x74e <tinyAxon_update_potential+0x12c>
			{
				// The potential has evened out a bit
				potential += THRESHOLD_POTENTIAL;
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	48 ec       	ldi	r20, 0xC8	; 200
     6d8:	51 e4       	ldi	r21, 0x41	; 65
     6da:	c7 01       	movw	r24, r14
     6dc:	b6 01       	movw	r22, r12
     6de:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__addsf3>
     6e2:	6b 01       	movw	r12, r22
     6e4:	7c 01       	movw	r14, r24
     6e6:	33 c0       	rjmp	.+102    	; 0x74e <tinyAxon_update_potential+0x12c>
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
		{
			if(pulse_queue[i] != 0){
     6e8:	80 81       	ld	r24, Z
     6ea:	91 81       	ldd	r25, Z+1	; 0x01
     6ec:	00 97       	sbiw	r24, 0x00	; 0
     6ee:	39 f0       	breq	.+14     	; 0x6fe <tinyAxon_update_potential+0xdc>
				pulse_queue[i]--;
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	80 83       	st	Z, r24
     6f4:	91 83       	std	Z+1, r25	; 0x01
				
				// If the time went from 1 to 0, we fire the axon
				if(pulse_queue[i] == 0){
     6f6:	89 2b       	or	r24, r25
     6f8:	11 f4       	brne	.+4      	; 0x6fe <tinyAxon_update_potential+0xdc>
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
	pulses_in_queue--;
     6fa:	41 50       	subi	r20, 0x01	; 1
Function to set firing.
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
     6fc:	51 e0       	ldi	r21, 0x01	; 1
     6fe:	32 96       	adiw	r30, 0x02	; 2
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     700:	e2 17       	cp	r30, r18
     702:	f3 07       	cpc	r31, r19
     704:	89 f7       	brne	.-30     	; 0x6e8 <tinyAxon_update_potential+0xc6>
     706:	50 93 2c 38 	sts	0x382C, r21	; 0x80382c <tinyAxon_should_fire>
     70a:	40 93 2a 38 	sts	0x382A, r20	; 0x80382a <pulses_in_queue>
The function should set the DAC to fire for two
update cycles once the pulse flag is set high.
*/
static void tinyAxon_update_pulse_transmitter(void)
{
	if (tinyAxon_should_fire)
     70e:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <tinyAxon_should_fire>
     712:	88 23       	and	r24, r24
     714:	91 f0       	breq	.+36     	; 0x73a <tinyAxon_update_potential+0x118>
	{
		tinyAxon_should_fire = false;
     716:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <tinyAxon_should_fire>
*/
static void tinyAxon_start_sending_pulse()
{
	if (NEURONTYPE == EXCITATORY_NEURON)
	{
		DAC_0_set_output(EXCITATORY_NEURON_OUTPUT);
     71a:	80 e8       	ldi	r24, 0x80	; 128
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 99 01 	call	0x332	; 0x332 <DAC_0_set_output>
		axonOutputValue=EXCITATORY_NEURON_OUTPUT;
     722:	80 e8       	ldi	r24, 0x80	; 128
     724:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <axonOutputValue>
	{
		DAC_0_set_output(INHIBITORY_NEURON_OUTPUT);
		axonOutputValue=INHIBITORY_NEURON_OUTPUT;
	}
	
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
     728:	45 e0       	ldi	r20, 0x05	; 5
     72a:	65 e0       	ldi	r22, 0x05	; 5
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	0e 94 76 06 	call	0xcec	; 0xcec <tinyLED_set_color_mode>
{
	if (tinyAxon_should_fire)
	{
		tinyAxon_should_fire = false;
		tinyAxon_start_sending_pulse();
		tinyAxon_has_just_fired = true;
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <tinyAxon_has_just_fired>
     738:	15 c0       	rjmp	.+42     	; 0x764 <tinyAxon_update_potential+0x142>
		
	}
	else if (tinyAxon_has_just_fired)
     73a:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <tinyAxon_has_just_fired>
     73e:	88 23       	and	r24, r24
     740:	19 f0       	breq	.+6      	; 0x748 <tinyAxon_update_potential+0x126>
	{
		tinyAxon_has_just_fired = false;
     742:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <tinyAxon_has_just_fired>
     746:	0e c0       	rjmp	.+28     	; 0x764 <tinyAxon_update_potential+0x142>
	}
	else if (!tinyAxon_has_just_fired && !tinyAxon_should_fire)
	{
		tinyAxon_stop_sending_pulse();
     748:	0e 94 e7 02 	call	0x5ce	; 0x5ce <tinyAxon_stop_sending_pulse>
     74c:	0b c0       	rjmp	.+22     	; 0x764 <tinyAxon_update_potential+0x142>
			}
		}
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
     74e:	40 91 2a 38 	lds	r20, 0x382A	; 0x80382a <pulses_in_queue>
     752:	44 23       	and	r20, r20
     754:	e1 f2       	breq	.-72     	; 0x70e <tinyAxon_update_potential+0xec>
     756:	50 91 2c 38 	lds	r21, 0x382C	; 0x80382c <tinyAxon_should_fire>
     75a:	e6 e1       	ldi	r30, 0x16	; 22
     75c:	f8 e3       	ldi	r31, 0x38	; 56
     75e:	2a e2       	ldi	r18, 0x2A	; 42
     760:	38 e3       	ldi	r19, 0x38	; 56
     762:	c2 cf       	rjmp	.-124    	; 0x6e8 <tinyAxon_update_potential+0xc6>
	}
	
	// Here we set the actual output of the DAC (Digital to Analog Converter)
	tinyAxon_update_pulse_transmitter();
	
	tinyDebugger_send_uint8("Axon", axonOutputValue);
     764:	60 91 2b 38 	lds	r22, 0x382B	; 0x80382b <axonOutputValue>
     768:	87 ef       	ldi	r24, 0xF7	; 247
     76a:	95 ea       	ldi	r25, 0xA5	; 165
     76c:	0e 94 c0 04 	call	0x980	; 0x980 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("Pulses", pulses_in_queue);
     770:	60 91 2a 38 	lds	r22, 0x382A	; 0x80382a <pulses_in_queue>
     774:	8c ef       	ldi	r24, 0xFC	; 252
     776:	95 ea       	ldi	r25, 0xA5	; 165
     778:	0e 94 c0 04 	call	0x980	; 0x980 <tinyDebugger_send_uint8>
	
	
	return potential;
}
     77c:	c7 01       	movw	r24, r14
     77e:	b6 01       	movw	r22, r12
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	08 95       	ret

0000078a <tinyAxon_check_charge_level>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     78a:	66 b1       	in	r22, 0x06	; 6

_Bool tinyAxon_check_charge_level(void)
{
	// We check the AXON_CHECK_PIN. If it is hight while the axon is not firing, it must be connected to a charger
	
	tinyDebugger_send_uint8("Pulses", AXON_CHECK_PIN_get_level());
     78c:	66 1f       	adc	r22, r22
     78e:	66 27       	eor	r22, r22
     790:	66 1f       	adc	r22, r22
     792:	8c ef       	ldi	r24, 0xFC	; 252
     794:	95 ea       	ldi	r25, 0xA5	; 165
     796:	0e 94 c0 04 	call	0x980	; 0x980 <tinyDebugger_send_uint8>
	return (AXON_CHECK_PIN_get_level() && !tinyAxon_has_just_fired);
     79a:	37 9b       	sbis	0x06, 7	; 6
     79c:	05 c0       	rjmp	.+10     	; 0x7a8 <tinyAxon_check_charge_level+0x1e>
     79e:	90 91 2d 38 	lds	r25, 0x382D	; 0x80382d <tinyAxon_has_just_fired>
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	89 27       	eor	r24, r25
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <tinyAxon_check_charge_level+0x22>
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	81 70       	andi	r24, 0x01	; 1
     7ae:	08 95       	ret

000007b0 <tinyButton_update>:
/*
If the button has been let go, we change button_press to true. This only lasts one cycle, before it is set to false again.
If the button is held down for longer than PULSEMODE_BUTTON_PRESS_TIME, we toggle the pulse mode state.
*/
void tinyButton_update(void)
{
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
	button_press = false;
     7b8:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <button_press>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return VPORTC.IN & (1 << pin);
     7bc:	8a b1       	in	r24, 0x0a	; 10
	_Bool button_is_pushed_down = !BUTTON_PIN_get_level(); // The digital port will be read as low if the button is pushed down.
     7be:	d1 e0       	ldi	r29, 0x01	; 1
     7c0:	c8 2f       	mov	r28, r24
     7c2:	c4 70       	andi	r28, 0x04	; 4
     7c4:	82 fd       	sbrc	r24, 2
     7c6:	d0 e0       	ldi	r29, 0x00	; 0

	if (button_is_pushed_down && !button_was_pushed_down)
     7c8:	c1 11       	cpse	r28, r1
     7ca:	39 c0       	rjmp	.+114    	; 0x83e <tinyButton_update+0x8e>
     7cc:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <button_was_pushed_down>
     7d0:	81 11       	cpse	r24, r1
     7d2:	0e c0       	rjmp	.+28     	; 0x7f0 <tinyButton_update+0x40>
	{
		tinyButton_start_time = tinyTime_now();
     7d4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <tinyTime_now>
     7d8:	60 93 2e 38 	sts	0x382E, r22	; 0x80382e <tinyButton_start_time>
     7dc:	70 93 2f 38 	sts	0x382F, r23	; 0x80382f <tinyButton_start_time+0x1>
     7e0:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <tinyButton_start_time+0x2>
     7e4:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <tinyButton_start_time+0x3>
	}
	if (button_is_pushed_down && button_was_pushed_down)
     7e8:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <button_was_pushed_down>
     7ec:	88 23       	and	r24, r24
     7ee:	b9 f1       	breq	.+110    	; 0x85e <tinyButton_update+0xae>
	{
		if ((tinyTime_now() - tinyButton_start_time) > PULSEMODE_BUTTON_PRESS_TIME)
     7f0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <tinyTime_now>
     7f4:	00 91 2e 38 	lds	r16, 0x382E	; 0x80382e <tinyButton_start_time>
     7f8:	10 91 2f 38 	lds	r17, 0x382F	; 0x80382f <tinyButton_start_time+0x1>
     7fc:	20 91 30 38 	lds	r18, 0x3830	; 0x803830 <tinyButton_start_time+0x2>
     800:	30 91 31 38 	lds	r19, 0x3831	; 0x803831 <tinyButton_start_time+0x3>
     804:	60 1b       	sub	r22, r16
     806:	71 0b       	sbc	r23, r17
     808:	82 0b       	sbc	r24, r18
     80a:	93 0b       	sbc	r25, r19
     80c:	0e 94 32 0b 	call	0x1664	; 0x1664 <__floatunsisf>
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	48 ec       	ldi	r20, 0xC8	; 200
     816:	52 e4       	ldi	r21, 0x42	; 66
     818:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__gesf2>
     81c:	18 16       	cp	r1, r24
     81e:	7c f4       	brge	.+30     	; 0x83e <tinyButton_update+0x8e>
		{
			tinyPulse_toggle_pulse_mode();
     820:	0e 94 6e 09 	call	0x12dc	; 0x12dc <tinyPulse_toggle_pulse_mode>
			tinyButton_start_time = tinyTime_now();
     824:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <tinyTime_now>
     828:	60 93 2e 38 	sts	0x382E, r22	; 0x80382e <tinyButton_start_time>
     82c:	70 93 2f 38 	sts	0x382F, r23	; 0x80382f <tinyButton_start_time+0x1>
     830:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <tinyButton_start_time+0x2>
     834:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <tinyButton_start_time+0x3>
			// We don't want switching to pulse mode to count as a button press, so we ignore the next button press
			ignore_next_button_press = true;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <ignore_next_button_press>
		}
	}
	if (!button_is_pushed_down && button_was_pushed_down)
     83e:	cc 23       	and	r28, r28
     840:	71 f0       	breq	.+28     	; 0x85e <tinyButton_update+0xae>
     842:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <button_was_pushed_down>
     846:	88 23       	and	r24, r24
     848:	51 f0       	breq	.+20     	; 0x85e <tinyButton_update+0xae>
	{
		if(!ignore_next_button_press){
     84a:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <ignore_next_button_press>
     84e:	81 11       	cpse	r24, r1
     850:	04 c0       	rjmp	.+8      	; 0x85a <tinyButton_update+0xaa>
			button_press = true;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <button_press>
     858:	02 c0       	rjmp	.+4      	; 0x85e <tinyButton_update+0xae>
		}
		else{
			ignore_next_button_press = false;
     85a:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <ignore_next_button_press>
		}
		
	}
	button_was_pushed_down = button_is_pushed_down;
     85e:	d0 93 34 38 	sts	0x3834, r29	; 0x803834 <button_was_pushed_down>
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	08 95       	ret

0000086c <tinyButton_update_potential>:

double tinyButton_update_potential(double potential){
	if(button_press){
     86c:	20 91 33 38 	lds	r18, 0x3833	; 0x803833 <button_press>
     870:	22 23       	and	r18, r18
     872:	31 f0       	breq	.+12     	; 0x880 <tinyButton_update_potential+0x14>
		potential += BUTTON_PRESS_REACTION;
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	40 ed       	ldi	r20, 0xD0	; 208
     87a:	51 e4       	ldi	r21, 0x41	; 65
     87c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__addsf3>
	}
	return potential;
}
     880:	08 95       	ret

00000882 <tinyCharge_is_connected_to_charger>:
*/
uint8_t charge_counter = 0; 

_Bool tinyCharge_is_connected_to_charger(){
	return connected_to_charger;
}
     882:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     886:	08 95       	ret

00000888 <tinyCharge_is_fully_charged>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     888:	86 b1       	in	r24, 0x06	; 6

_Bool tinyCharge_is_fully_charged(){
	return CHARGING_STATUS_PIN_get_level();
}
     88a:	86 fb       	bst	r24, 6
     88c:	88 27       	eor	r24, r24
     88e:	80 f9       	bld	r24, 0
     890:	08 95       	ret

00000892 <tinyCharge_DAC_dissable>:
void tinyCharge_DAC_dissable(){
	
	// We need some way to disable the DAC to prevent huge current draw when charging (64mA). When there is no code uploaded to the attiny, there is no problem.
	// We're going to try to enable the pin as a dendrite, since they seem to be doing fine. Completely uninitializing the pin probably caused a microchip to be fried.
	
	DAC_0_uninit();
     892:	0e 94 88 01 	call	0x310	; 0x310 <DAC_0_uninit>
	DAC_0_disable();
     896:	0e 94 93 01 	call	0x326	; 0x326 <DAC_0_disable>
     89a:	08 95       	ret

0000089c <tinyCharge_DAC_enable>:
void tinyCharge_DAC_enable(){
	
	// We need some way to disable the DAC to prevent huge current draw when charging (64mA). When there is no code uploaded to the attiny, there is no problem.
	// We're going to try to enable the pin as a dendrite, since they seem to be doing fine. Completely uninitializing the pin probably caused a microchip to be fried.
	
	DAC_0_init();
     89c:	0e 94 83 01 	call	0x306	; 0x306 <DAC_0_init>
	DAC_0_enable();
     8a0:	0e 94 8d 01 	call	0x31a	; 0x31a <DAC_0_enable>
     8a4:	08 95       	ret

000008a6 <tinyCharge_switch_mode>:
}


void tinyCharge_switch_mode(){
	
	if(connected_to_charger){
     8a6:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     8aa:	88 23       	and	r24, r24
     8ac:	89 f0       	breq	.+34     	; 0x8d0 <tinyCharge_switch_mode+0x2a>
		// Switch from main to charging mode
		
		// Set LED
		tinyLED_set_color_mode(OUT_LED, CHARGING_COLOR, SWING);
     8ae:	43 e0       	ldi	r20, 0x03	; 3
     8b0:	61 e0       	ldi	r22, 0x01	; 1
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	0e 94 76 06 	call	0xcec	; 0xcec <tinyLED_set_color_mode>
		tinyLED_set_color(INN_LED, LED_OFF);
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	0e 94 9a 06 	call	0xd34	; 0xd34 <tinyLED_set_color>


		// Stop axon from firing
		// (There is a small chance that the neuron is put into charging mode as it is firing. The axon is then never told to stop firing)
		tinyAxon_stop_sending_pulse();
     8c0:	0e 94 e7 02 	call	0x5ce	; 0x5ce <tinyAxon_stop_sending_pulse>

		// disable DAC
		tinyCharge_DAC_dissable();
     8c4:	0e 94 49 04 	call	0x892	; 0x892 <tinyCharge_DAC_dissable>
		
		// We also turn off pulse mode, because it's confusing if it suddenly comes on
		// after it has been charging
		tinyPulse_set_pulse_mode(false);
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0e 94 8a 09 	call	0x1314	; 0x1314 <tinyPulse_set_pulse_mode>
     8ce:	08 95       	ret
	}
	else{
		// Switch from charge to main mode
		
		// Set LED
		tinyLED_set_color(OUT_LED, LED_OFF);
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	0e 94 9a 06 	call	0xd34	; 0xd34 <tinyLED_set_color>
		tinyLED_set_color(INN_LED, LED_OFF);
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	0e 94 9a 06 	call	0xd34	; 0xd34 <tinyLED_set_color>
		
		// enable DAC
		tinyCharge_DAC_enable();
     8e0:	0e 94 4e 04 	call	0x89c	; 0x89c <tinyCharge_DAC_enable>
     8e4:	08 95       	ret

000008e6 <tinyCharge_set_charging_mode>:
	}
}

void tinyCharge_set_charging_mode(_Bool charging_status){
	if(charging_status != connected_to_charger){
     8e6:	90 91 59 38 	lds	r25, 0x3859	; 0x803859 <connected_to_charger>
     8ea:	98 17       	cp	r25, r24
     8ec:	21 f0       	breq	.+8      	; 0x8f6 <tinyCharge_set_charging_mode+0x10>
		connected_to_charger = charging_status;
     8ee:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <connected_to_charger>
		tinyCharge_switch_mode();
     8f2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <tinyCharge_switch_mode>
     8f6:	08 95       	ret

000008f8 <tinyCharge_update_charging_mode>:
*/
void tinyCharge_update_charging_mode(){
	// For complicated reasons, the axon_check_level will be high even when the charger is not connected
	// WHEN the neuron is in charging mode, hence we ignore the axon level when the neuron is in charging mode
	_Bool charging;
	if(connected_to_charger){
     8f8:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     8fc:	88 23       	and	r24, r24
     8fe:	19 f0       	breq	.+6      	; 0x906 <tinyCharge_update_charging_mode+0xe>
		charging = tinyDendrite_check_charge_level();
     900:	0e 94 2c 05 	call	0xa58	; 0xa58 <tinyDendrite_check_charge_level>
     904:	0a c0       	rjmp	.+20     	; 0x91a <tinyCharge_update_charging_mode+0x22>
	} else{
		charging = tinyDendrite_check_charge_level() || tinyAxon_check_charge_level();
     906:	0e 94 2c 05 	call	0xa58	; 0xa58 <tinyDendrite_check_charge_level>
     90a:	81 11       	cpse	r24, r1
     90c:	03 c0       	rjmp	.+6      	; 0x914 <tinyCharge_update_charging_mode+0x1c>
     90e:	0e 94 c5 03 	call	0x78a	; 0x78a <tinyAxon_check_charge_level>
     912:	02 c0       	rjmp	.+4      	; 0x918 <tinyCharge_update_charging_mode+0x20>
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	81 70       	andi	r24, 0x01	; 1
	}
	
	// In order to prevent the axon from stimulating itself, we only switch into charging mode when the conditions have been right for several cycles
	if(!connected_to_charger && charging){
     91a:	90 91 59 38 	lds	r25, 0x3859	; 0x803859 <connected_to_charger>
     91e:	91 11       	cpse	r25, r1
     920:	10 c0       	rjmp	.+32     	; 0x942 <tinyCharge_update_charging_mode+0x4a>
     922:	88 23       	and	r24, r24
     924:	71 f0       	breq	.+28     	; 0x942 <tinyCharge_update_charging_mode+0x4a>
		charge_counter++;
     926:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <charge_counter>
     92a:	8f 5f       	subi	r24, 0xFF	; 255
		if(charge_counter > CYCLES_REQUIRED_FOR_CHARGING_MODE_SWITCH){
     92c:	8b 30       	cpi	r24, 0x0B	; 11
     92e:	18 f4       	brcc	.+6      	; 0x936 <tinyCharge_update_charging_mode+0x3e>
		charging = tinyDendrite_check_charge_level() || tinyAxon_check_charge_level();
	}
	
	// In order to prevent the axon from stimulating itself, we only switch into charging mode when the conditions have been right for several cycles
	if(!connected_to_charger && charging){
		charge_counter++;
     930:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <charge_counter>
     934:	08 95       	ret
		if(charge_counter > CYCLES_REQUIRED_FOR_CHARGING_MODE_SWITCH){
			charge_counter = 0;
     936:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <charge_counter>
			tinyCharge_set_charging_mode(charging);
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <tinyCharge_set_charging_mode>
     940:	08 95       	ret
		}
	}
	else{
		tinyCharge_set_charging_mode(charging);
     942:	0e 94 73 04 	call	0x8e6	; 0x8e6 <tinyCharge_set_charging_mode>
     946:	08 95       	ret

00000948 <tinyCharge_set_transistors>:
}



void tinyCharge_set_transistors(){
	if(connected_to_charger){
     948:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     94c:	88 23       	and	r24, r24
     94e:	19 f0       	breq	.+6      	; 0x956 <tinyCharge_set_transistors+0xe>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     950:	4d 98       	cbi	0x09, 5	; 9
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     952:	29 9a       	sbi	0x05, 1	; 5
     954:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     956:	4d 9a       	sbi	0x09, 5	; 9
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     958:	29 98       	cbi	0x05, 1	; 5
     95a:	08 95       	ret

0000095c <tinyDebugger_send_uint32>:
}
void tinyDebugger_send_string(const char* name, char * value){
	if(DEBUGGING){
		printf("%s:%s\t", name, value);
	}
}
     95c:	7f 93       	push	r23
     95e:	6f 93       	push	r22
     960:	5f 93       	push	r21
     962:	4f 93       	push	r20
     964:	9f 93       	push	r25
     966:	8f 93       	push	r24
     968:	8b e0       	ldi	r24, 0x0B	; 11
     96a:	96 ea       	ldi	r25, 0xA6	; 166
     96c:	9f 93       	push	r25
     96e:	8f 93       	push	r24
     970:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <printf>
     974:	8d b7       	in	r24, 0x3d	; 61
     976:	9e b7       	in	r25, 0x3e	; 62
     978:	08 96       	adiw	r24, 0x08	; 8
     97a:	8d bf       	out	0x3d, r24	; 61
     97c:	9e bf       	out	0x3e, r25	; 62
     97e:	08 95       	ret

00000980 <tinyDebugger_send_uint8>:
     980:	1f 92       	push	r1
     982:	6f 93       	push	r22
     984:	9f 93       	push	r25
     986:	8f 93       	push	r24
     988:	84 e1       	ldi	r24, 0x14	; 20
     98a:	96 ea       	ldi	r25, 0xA6	; 166
     98c:	9f 93       	push	r25
     98e:	8f 93       	push	r24
     990:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <printf>
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	08 95       	ret

000009a2 <tinyDebugger_send_double>:
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	64 97       	sbiw	r28, 0x14	; 20
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	de bf       	out	0x3e, r29	; 62
     9bc:	d8 2e       	mov	r13, r24
     9be:	c9 2e       	mov	r12, r25
     9c0:	cb 01       	movw	r24, r22
     9c2:	ba 01       	movw	r22, r20
     9c4:	9e 01       	movw	r18, r28
     9c6:	2f 5f       	subi	r18, 0xFF	; 255
     9c8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ca:	79 01       	movw	r14, r18
     9cc:	89 01       	movw	r16, r18
     9ce:	21 e0       	ldi	r18, 0x01	; 1
     9d0:	41 e0       	ldi	r20, 0x01	; 1
     9d2:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <dtostrf>
     9d6:	ff 92       	push	r15
     9d8:	ef 92       	push	r14
     9da:	cf 92       	push	r12
     9dc:	df 92       	push	r13
     9de:	8c e1       	ldi	r24, 0x1C	; 28
     9e0:	96 ea       	ldi	r25, 0xA6	; 166
     9e2:	9f 93       	push	r25
     9e4:	8f 93       	push	r24
     9e6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <printf>
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
     9f6:	64 96       	adiw	r28, 0x14	; 20
     9f8:	cd bf       	out	0x3d, r28	; 61
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	08 95       	ret

00000a0e <tinyDebugger_end_line>:
void tinyDebugger_end_line(){
	if(DEBUGGING){
		printf("\r\n");
     a0e:	8b e2       	ldi	r24, 0x2B	; 43
     a10:	96 ea       	ldi	r25, 0xA6	; 166
     a12:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <puts>
     a16:	08 95       	ret

00000a18 <tinyDendrite_read_signals>:
	}
}

uint8_t tinyDendrite_get_value(uint8_t dendrite_number){
	return tinyDendrite_values[dendrite_number];
}
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	ce e0       	ldi	r28, 0x0E	; 14
     a26:	d8 e3       	ldi	r29, 0x38	; 56
     a28:	00 e4       	ldi	r16, 0x40	; 64
     a2a:	18 e3       	ldi	r17, 0x38	; 56
     a2c:	0f 2e       	mov	r0, r31
     a2e:	f3 e1       	ldi	r31, 0x13	; 19
     a30:	ef 2e       	mov	r14, r31
     a32:	f8 e3       	ldi	r31, 0x38	; 56
     a34:	ff 2e       	mov	r15, r31
     a36:	f0 2d       	mov	r31, r0
     a38:	89 91       	ld	r24, Y+
     a3a:	0e 94 4d 01 	call	0x29a	; 0x29a <ADC_0_get_conversion>
     a3e:	f8 01       	movw	r30, r16
     a40:	81 93       	st	Z+, r24
     a42:	8f 01       	movw	r16, r30
     a44:	ce 15       	cp	r28, r14
     a46:	df 05       	cpc	r29, r15
     a48:	b9 f7       	brne	.-18     	; 0xa38 <tinyDendrite_read_signals+0x20>
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	08 95       	ret

00000a58 <tinyDendrite_check_charge_level>:

_Bool tinyDendrite_check_charge_level(void)
{
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
	_Bool charging = false;
	
	tinyDendrite_read_signals();
     a5c:	0e 94 0c 05 	call	0xa18	; 0xa18 <tinyDendrite_read_signals>
     a60:	eb e3       	ldi	r30, 0x3B	; 59
     a62:	f8 e3       	ldi	r31, 0x38	; 56
     a64:	c6 e3       	ldi	r28, 0x36	; 54
     a66:	d8 e3       	ldi	r29, 0x38	; 56
     a68:	a0 e4       	ldi	r26, 0x40	; 64
     a6a:	b8 e3       	ldi	r27, 0x38	; 56
     a6c:	20 e4       	ldi	r18, 0x40	; 64
     a6e:	38 e3       	ldi	r19, 0x38	; 56
	return tinyDendrite_values[dendrite_number];
}

_Bool tinyDendrite_check_charge_level(void)
{
	_Bool charging = false;
     a70:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     a72:	47 e0       	ldi	r20, 0x07	; 7
	_Bool charging = false;
	
	tinyDendrite_read_signals();
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     a74:	90 81       	ld	r25, Z
     a76:	99 93       	st	Y+, r25
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     a78:	9d 91       	ld	r25, X+
     a7a:	99 3e       	cpi	r25, 0xE9	; 233
     a7c:	10 f0       	brcs	.+4      	; 0xa82 <tinyDendrite_check_charge_level+0x2a>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     a7e:	40 83       	st	Z, r20
			charging = true;
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	31 96       	adiw	r30, 0x01	; 1
_Bool tinyDendrite_check_charge_level(void)
{
	_Bool charging = false;
	
	tinyDendrite_read_signals();
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
     a84:	e2 17       	cp	r30, r18
     a86:	f3 07       	cpc	r31, r19
     a88:	a9 f7       	brne	.-22     	; 0xa74 <tinyDendrite_check_charge_level+0x1c>
			tinyDendrite_current_signals[i] = CHARGING;
			charging = true;
		}
	}
	return charging;
}
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <tinyDendrite_update_signals>:

/*
This function converts the 8 bit value from the ADC into one of the signal types defined in DendriteSignal
*/
void tinyDendrite_update_signals(void)
{
     a90:	af 92       	push	r10
     a92:	bf 92       	push	r11
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
	
	// This function does not read the dendrite values! Read_signals must be called somewhere prior to this function!
	// As of writing this, the update_charging_mode function in main runs check_charge_level, so 
	// the tinyDendrite_values are updated when update_signals is called later
	
	tinyDebugger_send_uint8("D1", tinyDendrite_values[0]);
     aa2:	c0 e4       	ldi	r28, 0x40	; 64
     aa4:	d8 e3       	ldi	r29, 0x38	; 56
     aa6:	68 81       	ld	r22, Y
     aa8:	8d e2       	ldi	r24, 0x2D	; 45
     aaa:	96 ea       	ldi	r25, 0xA6	; 166
     aac:	0e 94 c0 04 	call	0x980	; 0x980 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D2", tinyDendrite_values[1]);
     ab0:	69 81       	ldd	r22, Y+1	; 0x01
     ab2:	80 e3       	ldi	r24, 0x30	; 48
     ab4:	96 ea       	ldi	r25, 0xA6	; 166
     ab6:	0e 94 c0 04 	call	0x980	; 0x980 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D3", tinyDendrite_values[2]);
     aba:	6a 81       	ldd	r22, Y+2	; 0x02
     abc:	83 e3       	ldi	r24, 0x33	; 51
     abe:	96 ea       	ldi	r25, 0xA6	; 166
     ac0:	0e 94 c0 04 	call	0x980	; 0x980 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
     ac4:	6b 81       	ldd	r22, Y+3	; 0x03
     ac6:	86 e3       	ldi	r24, 0x36	; 54
     ac8:	96 ea       	ldi	r25, 0xA6	; 166
     aca:	0e 94 c0 04 	call	0x980	; 0x980 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
     ace:	6c 81       	ldd	r22, Y+4	; 0x04
     ad0:	89 e3       	ldi	r24, 0x39	; 57
     ad2:	96 ea       	ldi	r25, 0xA6	; 166
     ad4:	0e 94 c0 04 	call	0x980	; 0x980 <tinyDebugger_send_uint8>
     ad8:	eb e3       	ldi	r30, 0x3B	; 59
     ada:	f8 e3       	ldi	r31, 0x38	; 56
     adc:	26 e3       	ldi	r18, 0x36	; 54
     ade:	38 e3       	ldi	r19, 0x38	; 56
     ae0:	40 e4       	ldi	r20, 0x40	; 64
     ae2:	58 e3       	ldi	r21, 0x38	; 56
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     ae4:	dd 24       	eor	r13, r13
     ae6:	d3 94       	inc	r13
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     ae8:	0f 2e       	mov	r0, r31
     aea:	f3 e0       	ldi	r31, 0x03	; 3
     aec:	ef 2e       	mov	r14, r31
     aee:	f0 2d       	mov	r31, r0
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     af0:	68 94       	set
     af2:	ff 24       	eor	r15, r15
     af4:	f1 f8       	bld	r15, 1
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     af6:	04 e0       	ldi	r16, 0x04	; 4
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     af8:	16 e0       	ldi	r17, 0x06	; 6
			// been moved to tinyDendrite_check_charging.
			//charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     afa:	75 e0       	ldi	r23, 0x05	; 5
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     afc:	67 e0       	ldi	r22, 0x07	; 7
     afe:	5f 01       	movw	r10, r30
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
	
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     b00:	80 81       	ld	r24, Z
     b02:	d9 01       	movw	r26, r18
     b04:	8d 93       	st	X+, r24
     b06:	9d 01       	movw	r18, r26
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     b08:	99 91       	ld	r25, Y+
     b0a:	99 3e       	cpi	r25, 0xE9	; 233
     b0c:	10 f0       	brcs	.+4      	; 0xb12 <tinyDendrite_update_signals+0x82>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     b0e:	60 83       	st	Z, r22
     b10:	19 c0       	rjmp	.+50     	; 0xb44 <tinyDendrite_update_signals+0xb4>
			// Previously, we used this function to check charging, but this has now
			// been moved to tinyDendrite_check_charging.
			//charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
     b12:	98 3c       	cpi	r25, 0xC8	; 200
     b14:	10 f0       	brcs	.+4      	; 0xb1a <tinyDendrite_update_signals+0x8a>
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     b16:	70 83       	st	Z, r23
     b18:	15 c0       	rjmp	.+42     	; 0xb44 <tinyDendrite_update_signals+0xb4>
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
     b1a:	97 3a       	cpi	r25, 0xA7	; 167
     b1c:	10 f0       	brcs	.+4      	; 0xb22 <tinyDendrite_update_signals+0x92>
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     b1e:	10 83       	st	Z, r17
     b20:	11 c0       	rjmp	.+34     	; 0xb44 <tinyDendrite_update_signals+0xb4>
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
     b22:	95 38       	cpi	r25, 0x85	; 133
     b24:	10 f0       	brcs	.+4      	; 0xb2a <tinyDendrite_update_signals+0x9a>
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     b26:	00 83       	st	Z, r16
     b28:	0d c0       	rjmp	.+26     	; 0xb44 <tinyDendrite_update_signals+0xb4>
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
     b2a:	94 36       	cpi	r25, 0x64	; 100
     b2c:	10 f0       	brcs	.+4      	; 0xb32 <tinyDendrite_update_signals+0xa2>
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     b2e:	f0 82       	st	Z, r15
     b30:	09 c0       	rjmp	.+18     	; 0xb44 <tinyDendrite_update_signals+0xb4>
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
     b32:	93 34       	cpi	r25, 0x43	; 67
     b34:	10 f0       	brcs	.+4      	; 0xb3a <tinyDendrite_update_signals+0xaa>
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     b36:	e0 82       	st	Z, r14
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <tinyDendrite_update_signals+0xb4>
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
     b3a:	92 32       	cpi	r25, 0x22	; 34
     b3c:	10 f0       	brcs	.+4      	; 0xb42 <tinyDendrite_update_signals+0xb2>
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     b3e:	d0 82       	st	Z, r13
     b40:	01 c0       	rjmp	.+2      	; 0xb44 <tinyDendrite_update_signals+0xb4>
		}
		else
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     b42:	10 82       	st	Z, r1
		}
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
     b44:	d5 01       	movw	r26, r10
     b46:	9c 91       	ld	r25, X
     b48:	89 13       	cpse	r24, r25
     b4a:	01 c0       	rjmp	.+2      	; 0xb4e <tinyDendrite_update_signals+0xbe>
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     b4c:	1c 92       	st	X, r1
     b4e:	31 96       	adiw	r30, 0x01	; 1
	tinyDebugger_send_uint8("D2", tinyDendrite_values[1]);
	tinyDebugger_send_uint8("D3", tinyDendrite_values[2]);
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
	
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
     b50:	e4 17       	cp	r30, r20
     b52:	f5 07       	cpc	r31, r21
     b54:	a1 f6       	brne	.-88     	; 0xafe <tinyDendrite_update_signals+0x6e>
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
		}
	}
}
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	bf 90       	pop	r11
     b66:	af 90       	pop	r10
     b68:	08 95       	ret

00000b6a <tinyDendrite_get_potential>:
/*
This is the master function of the module that is callable from
outside. It uses the previously declared functions to return the potential.
*/
int16_t tinyDendrite_get_potential()
{
     b6a:	ef 92       	push	r14
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
	if(tinyAxon_is_firing() && IGNORE_INPUT_WHILE_FIRING){
     b76:	0e 94 cd 02 	call	0x59a	; 0x59a <tinyAxon_is_firing>
		
		return NO_SIGNAL_REACTION;
	}
	
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
     b7a:	0e 94 48 05 	call	0xa90	; 0xa90 <tinyDendrite_update_signals>
     b7e:	cb e3       	ldi	r28, 0x3B	; 59
     b80:	d8 e3       	ldi	r29, 0x38	; 56
     b82:	0f 2e       	mov	r0, r31
     b84:	f0 e4       	ldi	r31, 0x40	; 64
     b86:	ef 2e       	mov	r14, r31
     b88:	f8 e3       	ldi	r31, 0x38	; 56
     b8a:	ff 2e       	mov	r15, r31
     b8c:	f0 2d       	mov	r31, r0
	
	int16_t return_potential_val = 0;
     b8e:	00 e0       	ldi	r16, 0x00	; 0
     b90:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
	{
		switch(tinyDendrite_current_signals[i])
     b92:	89 91       	ld	r24, Y+
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	19 f1       	breq	.+70     	; 0xbde <tinyDendrite_get_potential+0x74>
     b98:	28 f4       	brcc	.+10     	; 0xba4 <tinyDendrite_get_potential+0x3a>
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	81 f1       	breq	.+96     	; 0xbfe <tinyDendrite_get_potential+0x94>
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	31 f1       	breq	.+76     	; 0xbee <tinyDendrite_get_potential+0x84>
     ba2:	34 c0       	rjmp	.+104    	; 0xc0c <tinyDendrite_get_potential+0xa2>
     ba4:	85 30       	cpi	r24, 0x05	; 5
     ba6:	59 f0       	breq	.+22     	; 0xbbe <tinyDendrite_get_potential+0x54>
     ba8:	90 f0       	brcs	.+36     	; 0xbce <tinyDendrite_get_potential+0x64>
     baa:	86 30       	cpi	r24, 0x06	; 6
     bac:	79 f5       	brne	.+94     	; 0xc0c <tinyDendrite_get_potential+0xa2>
		{
			case NO_SIGNAL:
				return_potential_val += NO_SIGNAL_REACTION;
				break;
			case HIGH_EXCITE:
				return_potential_val += HIGH_EXCITE_REACTION;
     bae:	0c 5c       	subi	r16, 0xCC	; 204
     bb0:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     bb2:	45 e0       	ldi	r20, 0x05	; 5
     bb4:	63 e0       	ldi	r22, 0x03	; 3
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	0e 94 76 06 	call	0xcec	; 0xcec <tinyLED_set_color_mode>
				break;
     bbc:	27 c0       	rjmp	.+78     	; 0xc0c <tinyDendrite_get_potential+0xa2>
			case NORMAL_EXCITE:
				return_potential_val += NORMAL_EXCITE_REACTION;
     bbe:	07 5e       	subi	r16, 0xE7	; 231
     bc0:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     bc2:	45 e0       	ldi	r20, 0x05	; 5
     bc4:	63 e0       	ldi	r22, 0x03	; 3
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	0e 94 76 06 	call	0xcec	; 0xcec <tinyLED_set_color_mode>
				break;
     bcc:	1f c0       	rjmp	.+62     	; 0xc0c <tinyDendrite_get_potential+0xa2>
			case LOW_EXCITE:
				return_potential_val += LOW_EXCITE_REACTION;
     bce:	0c 5e       	subi	r16, 0xEC	; 236
     bd0:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     bd2:	45 e0       	ldi	r20, 0x05	; 5
     bd4:	63 e0       	ldi	r22, 0x03	; 3
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	0e 94 76 06 	call	0xcec	; 0xcec <tinyLED_set_color_mode>
				break;
     bdc:	17 c0       	rjmp	.+46     	; 0xc0c <tinyDendrite_get_potential+0xa2>
			case HIGH_INHIB:
				return_potential_val += HIGH_INHIB_REACTION;
     bde:	02 53       	subi	r16, 0x32	; 50
     be0:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     be2:	45 e0       	ldi	r20, 0x05	; 5
     be4:	61 e0       	ldi	r22, 0x01	; 1
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	0e 94 76 06 	call	0xcec	; 0xcec <tinyLED_set_color_mode>
				break;
     bec:	0f c0       	rjmp	.+30     	; 0xc0c <tinyDendrite_get_potential+0xa2>
			case NORMAL_INHIB:
				return_potential_val += NORMAL_INHIB_REACTION;
     bee:	09 51       	subi	r16, 0x19	; 25
     bf0:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     bf2:	45 e0       	ldi	r20, 0x05	; 5
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	0e 94 76 06 	call	0xcec	; 0xcec <tinyLED_set_color_mode>
				break;
     bfc:	07 c0       	rjmp	.+14     	; 0xc0c <tinyDendrite_get_potential+0xa2>
			case LOW_INHIB:
				return_potential_val += LOW_INHIB_REACTION;
     bfe:	04 51       	subi	r16, 0x14	; 20
     c00:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     c02:	45 e0       	ldi	r20, 0x05	; 5
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	0e 94 76 06 	call	0xcec	; 0xcec <tinyLED_set_color_mode>
	
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
	
	int16_t return_potential_val = 0;
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
     c0c:	ce 15       	cp	r28, r14
     c0e:	df 05       	cpc	r29, r15
     c10:	09 f0       	breq	.+2      	; 0xc14 <tinyDendrite_get_potential+0xaa>
     c12:	bf cf       	rjmp	.-130    	; 0xb92 <tinyDendrite_get_potential+0x28>
		}
	}
	
	return return_potential_val;
	
}
     c14:	c8 01       	movw	r24, r16
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	ff 90       	pop	r15
     c20:	ef 90       	pop	r14
     c22:	08 95       	ret

00000c24 <tinyDendrite_update_potential>:

double tinyDendrite_update_potential(double potential){
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	6b 01       	movw	r12, r22
     c2e:	7c 01       	movw	r14, r24
	
	int16_t potential_change = tinyDendrite_get_potential();
     c30:	0e 94 b5 05 	call	0xb6a	; 0xb6a <tinyDendrite_get_potential>
	potential += potential_change;
	return potential;
     c34:	bc 01       	movw	r22, r24
     c36:	99 0f       	add	r25, r25
     c38:	88 0b       	sbc	r24, r24
     c3a:	99 0b       	sbc	r25, r25
     c3c:	0e 94 34 0b 	call	0x1668	; 0x1668 <__floatsisf>
     c40:	a7 01       	movw	r20, r14
     c42:	96 01       	movw	r18, r12
     c44:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__addsf3>
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	cf 90       	pop	r12
     c50:	08 95       	ret

00000c52 <__vector_6>:
This function is called every time the RTC (Real Time Clock) counter overflows.
With the current settings, it will be called every ms.
The RTC clock runs at 1kHz, and the number of cycles before overflow is set with RTC.PER = someHexValue (e.g. 0x20) in src/rtc.c
*/
ISR(RTC_CNT_vect)
{
     c52:	1f 92       	push	r1
     c54:	0f 92       	push	r0
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	0f 92       	push	r0
     c5a:	11 24       	eor	r1, r1
     c5c:	2f 93       	push	r18
     c5e:	3f 93       	push	r19
     c60:	4f 93       	push	r20
     c62:	5f 93       	push	r21
     c64:	6f 93       	push	r22
     c66:	7f 93       	push	r23
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
     c6c:	af 93       	push	r26
     c6e:	bf 93       	push	r27
     c70:	cf 93       	push	r28
     c72:	ef 93       	push	r30
     c74:	ff 93       	push	r31
static _Bool tinyISR_interrupt_flag = false;


void tinyISR_setflag(_Bool new_flag_val)
{
	tinyISR_interrupt_flag = new_flag_val;
     c76:	c1 e0       	ldi	r28, 0x01	; 1
     c78:	c0 93 45 38 	sts	0x3845, r28	; 0x803845 <tinyISR_interrupt_flag>
{
	// Set flag to let main loop run a new cycle
	tinyISR_setflag(true);
	
	// Timer counter incrementation
	tinyTime_counter_increment();
     c7c:	0e 94 c8 09 	call	0x1390	; 0x1390 <tinyTime_counter_increment>

	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
     c80:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
}
     c84:	ff 91       	pop	r31
     c86:	ef 91       	pop	r30
     c88:	cf 91       	pop	r28
     c8a:	bf 91       	pop	r27
     c8c:	af 91       	pop	r26
     c8e:	9f 91       	pop	r25
     c90:	8f 91       	pop	r24
     c92:	7f 91       	pop	r23
     c94:	6f 91       	pop	r22
     c96:	5f 91       	pop	r21
     c98:	4f 91       	pop	r20
     c9a:	3f 91       	pop	r19
     c9c:	2f 91       	pop	r18
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <tinyISR_setflag>:
static _Bool tinyISR_interrupt_flag = false;


void tinyISR_setflag(_Bool new_flag_val)
{
	tinyISR_interrupt_flag = new_flag_val;
     ca8:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <tinyISR_interrupt_flag>
     cac:	08 95       	ret

00000cae <tinyISR_getflag>:
}

_Bool tinyISR_getflag(void)
{
	return tinyISR_interrupt_flag;
}
     cae:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <tinyISR_interrupt_flag>
     cb2:	08 95       	ret

00000cb4 <tinyLED_SPIWriteByte>:
Function used to send a byte over SPI, which in turn gets
translated to the bit-sequence required by the LEDs over the CCL.
*/
static void tinyLED_SPIWriteByte(uint8_t byte)
{
	SPI0.INTFLAGS = SPI0_INTFLAGS; // clear the write collision flag to allow writing
     cb4:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
     cb8:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
	TCA0.SINGLE.CNT = 0; // reset TCA counter register to ensure the first rising edge of the PWM is predictable
     cbc:	e0 e0       	ldi	r30, 0x00	; 0
     cbe:	fa e0       	ldi	r31, 0x0A	; 10
     cc0:	10 a2       	std	Z+32, r1	; 0x20
     cc2:	11 a2       	std	Z+33, r1	; 0x21
	
	// start TCA
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 1 << TCA_SPLIT_ENABLE_bp;
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	90 83       	st	Z, r25
	SPI0_DATA = byte;
     cc8:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>

	while((SPI0.INTFLAGS & SPI_RXCIE_bm) == 0){} // wait for transfer to complete
     ccc:	e0 e2       	ldi	r30, 0x20	; 32
     cce:	f8 e0       	ldi	r31, 0x08	; 8
     cd0:	83 81       	ldd	r24, Z+3	; 0x03
     cd2:	88 23       	and	r24, r24
     cd4:	ec f7       	brge	.-6      	; 0xcd0 <tinyLED_SPIWriteByte+0x1c>
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
     cd6:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     cda:	08 95       	ret

00000cdc <tinyLED_get_color>:
	tinyLED_set_color_mode(LED_id, color, STABLE);
}

enum Colors tinyLED_get_color(uint8_t LED_id)
{
	return tinyLED_settings[LED_id].color;
     cdc:	e8 2f       	mov	r30, r24
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	ee 0f       	add	r30, r30
     ce2:	ff 1f       	adc	r31, r31
     ce4:	ee 59       	subi	r30, 0x9E	; 158
     ce6:	f7 4c       	sbci	r31, 0xC7	; 199
}
     ce8:	80 81       	ld	r24, Z
     cea:	08 95       	ret

00000cec <tinyLED_set_color_mode>:
{
	// If we are in pulse mode, we want to stay in pulse mode after we have flashed a light.
	// We do this by storing the previous mode in old settings.
	// However, it can happen that two flashes comes very quickly after one another, that leads
	// to an infinite flash loop, therefore, we only store the settings if it is not flash mode.
	if(tinyLED_settings[LED_id].mode != FLASH_ONCE){
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	fc 01       	movw	r30, r24
     cf0:	ee 0f       	add	r30, r30
     cf2:	ff 1f       	adc	r31, r31
     cf4:	ee 59       	subi	r30, 0x9E	; 158
     cf6:	f7 4c       	sbci	r31, 0xC7	; 199
     cf8:	51 81       	ldd	r21, Z+1	; 0x01
     cfa:	55 30       	cpi	r21, 0x05	; 5
     cfc:	61 f0       	breq	.+24     	; 0xd16 <tinyLED_set_color_mode+0x2a>
		// We use two lines to avoid pointer trouble. (I'm not good with pointers)
		tinyLED_old_settings[LED_id].color = tinyLED_settings[LED_id].color;
     cfe:	9c 01       	movw	r18, r24
     d00:	22 0f       	add	r18, r18
     d02:	33 1f       	adc	r19, r19
     d04:	f9 01       	movw	r30, r18
     d06:	ea 59       	subi	r30, 0x9A	; 154
     d08:	f7 4c       	sbci	r31, 0xC7	; 199
     d0a:	d9 01       	movw	r26, r18
     d0c:	ae 59       	subi	r26, 0x9E	; 158
     d0e:	b7 4c       	sbci	r27, 0xC7	; 199
     d10:	2c 91       	ld	r18, X
     d12:	20 83       	st	Z, r18
		tinyLED_old_settings[LED_id].mode = tinyLED_settings[LED_id].mode;
     d14:	51 83       	std	Z+1, r21	; 0x01
	}
	
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_settings[LED_id] = setting;
     d16:	fc 01       	movw	r30, r24
     d18:	ee 0f       	add	r30, r30
     d1a:	ff 1f       	adc	r31, r31
     d1c:	ee 59       	subi	r30, 0x9E	; 158
     d1e:	f7 4c       	sbci	r31, 0xC7	; 199
     d20:	60 83       	st	Z, r22
     d22:	41 83       	std	Z+1, r20	; 0x01
	if (mode == FLASH_ONCE)
     d24:	45 30       	cpi	r20, 0x05	; 5
     d26:	29 f4       	brne	.+10     	; 0xd32 <tinyLED_set_color_mode+0x46>
	{
		tinyLED_flash_once_time[LED_id] = 1000*FLASH_TIME;
     d28:	fc 01       	movw	r30, r24
     d2a:	e6 5a       	subi	r30, 0xA6	; 166
     d2c:	f7 4c       	sbci	r31, 0xC7	; 199
     d2e:	2a e0       	ldi	r18, 0x0A	; 10
     d30:	20 83       	st	Z, r18
     d32:	08 95       	ret

00000d34 <tinyLED_set_color>:
/*
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color(uint8_t LED_id, enum Colors color)
{
	tinyLED_set_color_mode(LED_id, color, STABLE);
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	0e 94 76 06 	call	0xcec	; 0xcec <tinyLED_set_color_mode>
     d3a:	08 95       	ret

00000d3c <tinyLED_RGB_Color_Compare>:
	return rgb_color;
			
};
// This might be cause of strange light behavior?
//Message		expected 'struct RGB_Color *' but argument is of type 'struct RGB_Color (*)[2]'	Hjernebyggesett_V4	C:\Users\Elias Lundheim\Documents\GitHub\neural\Hjernebyggesett_V4\Hjernebyggesett_V4\tinyLED\tinyLED.c	121
_Bool tinyLED_RGB_Color_Compare(struct RGB_Color (*a)[NUMBER_OF_LEDS], struct RGB_Color (*b)[NUMBER_OF_LEDS]){
     d3c:	dc 01       	movw	r26, r24
     d3e:	fb 01       	movw	r30, r22
	for (int i=0; i<NUMBER_OF_LEDS; i++)
	{
		if(!((*a)[i].red==(*b)[i].red && (*a)[i].green==(*b)[i].green && (*a)[i].blue==(*b)[i].blue)){
     d40:	9c 91       	ld	r25, X
     d42:	80 81       	ld	r24, Z
     d44:	98 13       	cpse	r25, r24
     d46:	20 c0       	rjmp	.+64     	; 0xd88 <tinyLED_RGB_Color_Compare+0x4c>
     d48:	11 96       	adiw	r26, 0x01	; 1
     d4a:	9c 91       	ld	r25, X
     d4c:	11 97       	sbiw	r26, 0x01	; 1
     d4e:	81 81       	ldd	r24, Z+1	; 0x01
     d50:	98 13       	cpse	r25, r24
     d52:	1c c0       	rjmp	.+56     	; 0xd8c <tinyLED_RGB_Color_Compare+0x50>
     d54:	12 96       	adiw	r26, 0x02	; 2
     d56:	9c 91       	ld	r25, X
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	82 81       	ldd	r24, Z+2	; 0x02
     d5c:	98 13       	cpse	r25, r24
     d5e:	18 c0       	rjmp	.+48     	; 0xd90 <tinyLED_RGB_Color_Compare+0x54>
     d60:	13 96       	adiw	r26, 0x03	; 3
     d62:	9c 91       	ld	r25, X
     d64:	13 97       	sbiw	r26, 0x03	; 3
     d66:	83 81       	ldd	r24, Z+3	; 0x03
     d68:	98 13       	cpse	r25, r24
     d6a:	14 c0       	rjmp	.+40     	; 0xd94 <tinyLED_RGB_Color_Compare+0x58>
     d6c:	14 96       	adiw	r26, 0x04	; 4
     d6e:	9c 91       	ld	r25, X
     d70:	14 97       	sbiw	r26, 0x04	; 4
     d72:	84 81       	ldd	r24, Z+4	; 0x04
     d74:	98 13       	cpse	r25, r24
     d76:	10 c0       	rjmp	.+32     	; 0xd98 <tinyLED_RGB_Color_Compare+0x5c>
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	15 96       	adiw	r26, 0x05	; 5
     d7c:	2c 91       	ld	r18, X
     d7e:	95 81       	ldd	r25, Z+5	; 0x05
     d80:	29 17       	cp	r18, r25
     d82:	59 f0       	breq	.+22     	; 0xd9a <tinyLED_RGB_Color_Compare+0x5e>
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	08 95       	ret
			return false;
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	08 95       	ret
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	08 95       	ret
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	08 95       	ret
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	08 95       	ret
     d98:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
     d9a:	08 95       	ret

00000d9c <tinyLED_update>:
/*
function to write the current LED-array on to the LEDs and
effectively update the values stored in the LEDs to the values stored in the MCU.
*/
void tinyLED_update(void)
{
     d9c:	2f 92       	push	r2
     d9e:	3f 92       	push	r3
     da0:	4f 92       	push	r4
     da2:	5f 92       	push	r5
     da4:	6f 92       	push	r6
     da6:	7f 92       	push	r7
     da8:	8f 92       	push	r8
     daa:	9f 92       	push	r9
     dac:	af 92       	push	r10
     dae:	bf 92       	push	r11
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	6f 97       	sbiw	r28, 0x1f	; 31
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	de bf       	out	0x3e, r29	; 62
			
	uint32_t now = tinyTime_now();
     dca:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <tinyTime_now>
     dce:	6b 01       	movw	r12, r22
     dd0:	7c 01       	movw	r14, r24
	
	// This is a sin curve, but between 0 and 1 instead of -1 and 1
	double sinValue = 0.5+sin((double)now/(100*M_PI/SWING_RATE))/2;
     dd2:	0e 94 32 0b 	call	0x1664	; 0x1664 <__floatunsisf>
     dd6:	22 ed       	ldi	r18, 0xD2	; 210
     dd8:	33 e5       	ldi	r19, 0x53	; 83
     dda:	4b ef       	ldi	r20, 0xFB	; 251
     ddc:	51 e4       	ldi	r21, 0x41	; 65
     dde:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__divsf3>
     de2:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <sin>
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	5f e3       	ldi	r21, 0x3F	; 63
     dee:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	5f e3       	ldi	r21, 0x3F	; 63
     dfa:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__addsf3>
     dfe:	6f 83       	std	Y+7, r22	; 0x07
     e00:	78 87       	std	Y+8, r23	; 0x08
     e02:	89 87       	std	Y+9, r24	; 0x09
     e04:	9a 87       	std	Y+10, r25	; 0x0a
	
	// If FLASH_RATE is one, then that means that the left side of the "<" will just count from 0 to 1000, and flash_on will be true for half of the time
	_Bool flash_on = now%(uint32_t)(1000/FLASH_RATE)  <   500/FLASH_RATE;
     e06:	c7 01       	movw	r24, r14
     e08:	b6 01       	movw	r22, r12
     e0a:	22 e3       	ldi	r18, 0x32	; 50
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__udivmodsi4>
     e16:	0e 94 32 0b 	call	0x1664	; 0x1664 <__floatunsisf>
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	48 ec       	ldi	r20, 0xC8	; 200
     e20:	51 e4       	ldi	r21, 0x41	; 65
     e22:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__cmpsf2>
     e26:	88 1f       	adc	r24, r24
     e28:	88 27       	eor	r24, r24
     e2a:	88 1f       	adc	r24, r24
     e2c:	8b 87       	std	Y+11, r24	; 0x0b
	
	// PING_RATE is usually small, so the left side counts to some large number. Since flash_time usually is also quite small,
	// the left side will usually be larger than the right
	_Bool ping_on =  now%(uint32_t)(1000/PING_RATE)   <   1000*FLASH_TIME;
     e2e:	c7 01       	movw	r24, r14
     e30:	b6 01       	movw	r22, r12
     e32:	24 ef       	ldi	r18, 0xF4	; 244
     e34:	31 e0       	ldi	r19, 0x01	; 1
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__udivmodsi4>
     e3e:	0e 94 32 0b 	call	0x1664	; 0x1664 <__floatunsisf>
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e2       	ldi	r20, 0x20	; 32
     e48:	51 e4       	ldi	r21, 0x41	; 65
     e4a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__cmpsf2>
     e4e:	88 1f       	adc	r24, r24
     e50:	88 27       	eor	r24, r24
     e52:	88 1f       	adc	r24, r24
     e54:	0f 2e       	mov	r0, r31
     e56:	f2 e6       	ldi	r31, 0x62	; 98
     e58:	2f 2e       	mov	r2, r31
     e5a:	f8 e3       	ldi	r31, 0x38	; 56
     e5c:	3f 2e       	mov	r3, r31
     e5e:	f0 2d       	mov	r31, r0
     e60:	9e 01       	movw	r18, r28
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	69 01       	movw	r12, r18
     e68:	0f 2e       	mov	r0, r31
     e6a:	f6 e6       	ldi	r31, 0x66	; 102
     e6c:	af 2e       	mov	r10, r31
     e6e:	f8 e3       	ldi	r31, 0x38	; 56
     e70:	bf 2e       	mov	r11, r31
     e72:	f0 2d       	mov	r31, r0
     e74:	0a e5       	ldi	r16, 0x5A	; 90
     e76:	18 e3       	ldi	r17, 0x38	; 56
     e78:	0f 2e       	mov	r0, r31
     e7a:	f6 e6       	ldi	r31, 0x66	; 102
     e7c:	4f 2e       	mov	r4, r31
     e7e:	f8 e3       	ldi	r31, 0x38	; 56
     e80:	5f 2e       	mov	r5, r31
     e82:	f0 2d       	mov	r31, r0
     e84:	39 01       	movw	r6, r18
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
				break;
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	28 8b       	std	Y+16, r18	; 0x10
     e90:	39 8b       	std	Y+17, r19	; 0x11
     e92:	4a 8b       	std	Y+18, r20	; 0x12
     e94:	5b 8b       	std	Y+19, r21	; 0x13
     e96:	f1 01       	movw	r30, r2
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
}

static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
     e98:	80 81       	ld	r24, Z
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	79 f0       	breq	.+30     	; 0xebc <tinyLED_update+0x120>
     e9e:	28 f4       	brcc	.+10     	; 0xeaa <tinyLED_update+0x10e>
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	41 f0       	breq	.+16     	; 0xeb4 <tinyLED_update+0x118>
     ea4:	82 30       	cpi	r24, 0x02	; 2
     ea6:	89 f0       	breq	.+34     	; 0xeca <tinyLED_update+0x12e>
     ea8:	28 c0       	rjmp	.+80     	; 0xefa <tinyLED_update+0x15e>
     eaa:	84 30       	cpi	r24, 0x04	; 4
     eac:	a9 f0       	breq	.+42     	; 0xed8 <tinyLED_update+0x13c>
     eae:	85 30       	cpi	r24, 0x05	; 5
     eb0:	d1 f0       	breq	.+52     	; 0xee6 <tinyLED_update+0x14a>
     eb2:	23 c0       	rjmp	.+70     	; 0xefa <tinyLED_update+0x15e>
	{
		case LED_OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
			break;
		case RED:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 0, 0};
     eb4:	f1 2c       	mov	r15, r1
     eb6:	e1 2c       	mov	r14, r1
     eb8:	69 e1       	ldi	r22, 0x19	; 25
     eba:	22 c0       	rjmp	.+68     	; 0xf00 <tinyLED_update+0x164>
			break;
		case GREEN:
			rgb_color = (struct RGB_Color){0, 255*LED_BRIGHTNESS, 0};
     ebc:	f1 2c       	mov	r15, r1
     ebe:	0f 2e       	mov	r0, r31
     ec0:	f9 e1       	ldi	r31, 0x19	; 25
     ec2:	ef 2e       	mov	r14, r31
     ec4:	f0 2d       	mov	r31, r0
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	1b c0       	rjmp	.+54     	; 0xf00 <tinyLED_update+0x164>
			break;
		case BLUE:
			rgb_color = (struct RGB_Color){0, 0, 255*LED_BRIGHTNESS};
     eca:	0f 2e       	mov	r0, r31
     ecc:	f9 e1       	ldi	r31, 0x19	; 25
     ece:	ff 2e       	mov	r15, r31
     ed0:	f0 2d       	mov	r31, r0
     ed2:	e1 2c       	mov	r14, r1
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	14 c0       	rjmp	.+40     	; 0xf00 <tinyLED_update+0x164>
			break;
		case YELLOW:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 0};
     ed8:	f1 2c       	mov	r15, r1
     eda:	0f 2e       	mov	r0, r31
     edc:	f9 e1       	ldi	r31, 0x19	; 25
     ede:	ef 2e       	mov	r14, r31
     ee0:	f0 2d       	mov	r31, r0
     ee2:	69 e1       	ldi	r22, 0x19	; 25
     ee4:	0d c0       	rjmp	.+26     	; 0xf00 <tinyLED_update+0x164>
			// Should the /3 be there? This requires testing.
			// After testing, findings were that at 0.1 brightness, one would see the three LEDs instead of one white led
			// We try with /2 instead.
			// We find that the best results come from not dividing by anything. At leasts in the lower brightness settings, and that
			// is where we suspect it will be most of the time. When we divide, the LEDs are so weak, that they appear as three lights instead of one.
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS};
     ee6:	0f 2e       	mov	r0, r31
     ee8:	f9 e1       	ldi	r31, 0x19	; 25
     eea:	ff 2e       	mov	r15, r31
     eec:	f0 2d       	mov	r31, r0
     eee:	0f 2e       	mov	r0, r31
     ef0:	f9 e1       	ldi	r31, 0x19	; 25
     ef2:	ef 2e       	mov	r14, r31
     ef4:	f0 2d       	mov	r31, r0
     ef6:	69 e1       	ldi	r22, 0x19	; 25
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <tinyLED_update+0x164>
static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
	{
		case LED_OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
     efa:	f1 2c       	mov	r15, r1
     efc:	e1 2c       	mov	r14, r1
     efe:	60 e0       	ldi	r22, 0x00	; 0
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
	{		
		// Convert enum to RGB_Color
		rgb_colors[i] = tinyLED_enum_to_RGB_Color(tinyLED_settings[i].color);
     f00:	d3 01       	movw	r26, r6
     f02:	6c 93       	st	X, r22
     f04:	11 96       	adiw	r26, 0x01	; 1
     f06:	ec 92       	st	X, r14
     f08:	11 97       	sbiw	r26, 0x01	; 1
     f0a:	12 96       	adiw	r26, 0x02	; 2
     f0c:	fc 92       	st	X, r15
			
		// Adjust colors according to mode
		switch(tinyLED_settings[i].mode)
     f0e:	81 81       	ldd	r24, Z+1	; 0x01
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	09 f4       	brne	.+2      	; 0xf16 <tinyLED_update+0x17a>
     f14:	50 c0       	rjmp	.+160    	; 0xfb6 <tinyLED_update+0x21a>
     f16:	28 f4       	brcc	.+10     	; 0xf22 <tinyLED_update+0x186>
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	51 f0       	breq	.+20     	; 0xf30 <tinyLED_update+0x194>
     f1c:	82 30       	cpi	r24, 0x02	; 2
     f1e:	c9 f1       	breq	.+114    	; 0xf92 <tinyLED_update+0x1f6>
     f20:	05 c1       	rjmp	.+522    	; 0x112c <tinyLED_update+0x390>
     f22:	84 30       	cpi	r24, 0x04	; 4
     f24:	09 f4       	brne	.+2      	; 0xf28 <tinyLED_update+0x18c>
     f26:	78 c0       	rjmp	.+240    	; 0x1018 <tinyLED_update+0x27c>
     f28:	85 30       	cpi	r24, 0x05	; 5
     f2a:	09 f4       	brne	.+2      	; 0xf2e <tinyLED_update+0x192>
     f2c:	f2 c0       	rjmp	.+484    	; 0x1112 <tinyLED_update+0x376>
     f2e:	fe c0       	rjmp	.+508    	; 0x112c <tinyLED_update+0x390>
		{
			case STABLE:
				break;
			case WEAK:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*WEAK_BRIGHTNESS, rgb_colors[i].green*WEAK_BRIGHTNESS, rgb_colors[i].blue*WEAK_BRIGHTNESS};
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 34 0b 	call	0x1668	; 0x1668 <__floatsisf>
     f3a:	2d ec       	ldi	r18, 0xCD	; 205
     f3c:	3c ec       	ldi	r19, 0xCC	; 204
     f3e:	4c ec       	ldi	r20, 0xCC	; 204
     f40:	5d e3       	ldi	r21, 0x3D	; 61
     f42:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
     f46:	0e 94 03 0b 	call	0x1606	; 0x1606 <__fixunssfsi>
     f4a:	f3 01       	movw	r30, r6
     f4c:	60 83       	st	Z, r22
     f4e:	6e 2d       	mov	r22, r14
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 34 0b 	call	0x1668	; 0x1668 <__floatsisf>
     f5a:	2d ec       	ldi	r18, 0xCD	; 205
     f5c:	3c ec       	ldi	r19, 0xCC	; 204
     f5e:	4c ec       	ldi	r20, 0xCC	; 204
     f60:	5d e3       	ldi	r21, 0x3D	; 61
     f62:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
     f66:	0e 94 03 0b 	call	0x1606	; 0x1606 <__fixunssfsi>
     f6a:	d3 01       	movw	r26, r6
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	6c 93       	st	X, r22
     f70:	6f 2d       	mov	r22, r15
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 34 0b 	call	0x1668	; 0x1668 <__floatsisf>
     f7c:	2d ec       	ldi	r18, 0xCD	; 205
     f7e:	3c ec       	ldi	r19, 0xCC	; 204
     f80:	4c ec       	ldi	r20, 0xCC	; 204
     f82:	5d e3       	ldi	r21, 0x3D	; 61
     f84:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
     f88:	0e 94 03 0b 	call	0x1606	; 0x1606 <__fixunssfsi>
     f8c:	f3 01       	movw	r30, r6
     f8e:	62 83       	std	Z+2, r22	; 0x02
				break;
     f90:	cd c0       	rjmp	.+410    	; 0x112c <tinyLED_update+0x390>
			case FLASH:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*flash_on, rgb_colors[i].green*flash_on, rgb_colors[i].blue*flash_on};
     f92:	fb 85       	ldd	r31, Y+11	; 0x0b
     f94:	f6 9f       	mul	r31, r22
     f96:	60 2d       	mov	r22, r0
     f98:	11 24       	eor	r1, r1
     f9a:	d3 01       	movw	r26, r6
     f9c:	6c 93       	st	X, r22
     f9e:	fe 9d       	mul	r31, r14
     fa0:	e0 2c       	mov	r14, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	11 96       	adiw	r26, 0x01	; 1
     fa6:	ec 92       	st	X, r14
     fa8:	11 97       	sbiw	r26, 0x01	; 1
     faa:	ff 9d       	mul	r31, r15
     fac:	f0 2c       	mov	r15, r0
     fae:	11 24       	eor	r1, r1
     fb0:	12 96       	adiw	r26, 0x02	; 2
     fb2:	fc 92       	st	X, r15
				break;
     fb4:	bb c0       	rjmp	.+374    	; 0x112c <tinyLED_update+0x390>
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 34 0b 	call	0x1668	; 0x1668 <__floatsisf>
     fc0:	2f 81       	ldd	r18, Y+7	; 0x07
     fc2:	38 85       	ldd	r19, Y+8	; 0x08
     fc4:	49 85       	ldd	r20, Y+9	; 0x09
     fc6:	5a 85       	ldd	r21, Y+10	; 0x0a
     fc8:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
     fcc:	0e 94 03 0b 	call	0x1606	; 0x1606 <__fixunssfsi>
     fd0:	f3 01       	movw	r30, r6
     fd2:	60 83       	st	Z, r22
     fd4:	6e 2d       	mov	r22, r14
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 34 0b 	call	0x1668	; 0x1668 <__floatsisf>
     fe0:	2f 81       	ldd	r18, Y+7	; 0x07
     fe2:	38 85       	ldd	r19, Y+8	; 0x08
     fe4:	49 85       	ldd	r20, Y+9	; 0x09
     fe6:	5a 85       	ldd	r21, Y+10	; 0x0a
     fe8:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
     fec:	0e 94 03 0b 	call	0x1606	; 0x1606 <__fixunssfsi>
     ff0:	d3 01       	movw	r26, r6
     ff2:	11 96       	adiw	r26, 0x01	; 1
     ff4:	6c 93       	st	X, r22
     ff6:	6f 2d       	mov	r22, r15
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 34 0b 	call	0x1668	; 0x1668 <__floatsisf>
    1002:	2f 81       	ldd	r18, Y+7	; 0x07
    1004:	38 85       	ldd	r19, Y+8	; 0x08
    1006:	49 85       	ldd	r20, Y+9	; 0x09
    1008:	5a 85       	ldd	r21, Y+10	; 0x0a
    100a:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
    100e:	0e 94 03 0b 	call	0x1606	; 0x1606 <__fixunssfsi>
    1012:	f3 01       	movw	r30, r6
    1014:	62 83       	std	Z+2, r22	; 0x02
				break;
    1016:	8a c0       	rjmp	.+276    	; 0x112c <tinyLED_update+0x390>
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 32 0b 	call	0x1664	; 0x1664 <__floatunsisf>
    1022:	9b 01       	movw	r18, r22
    1024:	ac 01       	movw	r20, r24
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	80 e8       	ldi	r24, 0x80	; 128
    102c:	9f e3       	ldi	r25, 0x3F	; 63
    102e:	0e 94 6f 0b 	call	0x16de	; 0x16de <fmin>
    1032:	6c 8b       	std	Y+20, r22	; 0x14
    1034:	7d 8b       	std	Y+21, r23	; 0x15
    1036:	8e 8b       	std	Y+22, r24	; 0x16
    1038:	9f 8b       	std	Y+23, r25	; 0x17
    103a:	68 89       	ldd	r22, Y+16	; 0x10
    103c:	79 89       	ldd	r23, Y+17	; 0x11
    103e:	8a 89       	ldd	r24, Y+18	; 0x12
    1040:	9b 89       	ldd	r25, Y+19	; 0x13
    1042:	0e 94 34 0b 	call	0x1668	; 0x1668 <__floatsisf>
    1046:	6c 87       	std	Y+12, r22	; 0x0c
    1048:	7d 87       	std	Y+13, r23	; 0x0d
    104a:	8e 87       	std	Y+14, r24	; 0x0e
    104c:	9f 87       	std	Y+15, r25	; 0x0f
    104e:	6e 2d       	mov	r22, r14
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 32 0b 	call	0x1664	; 0x1664 <__floatunsisf>
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 e8       	ldi	r24, 0x80	; 128
    1064:	9f e3       	ldi	r25, 0x3F	; 63
    1066:	0e 94 6f 0b 	call	0x16de	; 0x16de <fmin>
    106a:	68 8f       	std	Y+24, r22	; 0x18
    106c:	79 8f       	std	Y+25, r23	; 0x19
    106e:	8a 8f       	std	Y+26, r24	; 0x1a
    1070:	9b 8f       	std	Y+27, r25	; 0x1b
    1072:	6f 2d       	mov	r22, r15
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 32 0b 	call	0x1664	; 0x1664 <__floatunsisf>
    107e:	9b 01       	movw	r18, r22
    1080:	ac 01       	movw	r20, r24
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	80 e8       	ldi	r24, 0x80	; 128
    1088:	9f e3       	ldi	r25, 0x3F	; 63
    108a:	0e 94 6f 0b 	call	0x16de	; 0x16de <fmin>
    108e:	6c 8f       	std	Y+28, r22	; 0x1c
    1090:	7d 8f       	std	Y+29, r23	; 0x1d
    1092:	8e 8f       	std	Y+30, r24	; 0x1e
    1094:	9f 8f       	std	Y+31, r25	; 0x1f
    1096:	23 e3       	ldi	r18, 0x33	; 51
    1098:	33 e3       	ldi	r19, 0x33	; 51
    109a:	43 ea       	ldi	r20, 0xA3	; 163
    109c:	50 e4       	ldi	r21, 0x40	; 64
    109e:	6c 89       	ldd	r22, Y+20	; 0x14
    10a0:	7d 89       	ldd	r23, Y+21	; 0x15
    10a2:	8e 89       	ldd	r24, Y+22	; 0x16
    10a4:	9f 89       	ldd	r25, Y+23	; 0x17
    10a6:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
    10aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    10ac:	3d 85       	ldd	r19, Y+13	; 0x0d
    10ae:	4e 85       	ldd	r20, Y+14	; 0x0e
    10b0:	5f 85       	ldd	r21, Y+15	; 0x0f
    10b2:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
    10b6:	0e 94 03 0b 	call	0x1606	; 0x1606 <__fixunssfsi>
    10ba:	d3 01       	movw	r26, r6
    10bc:	6c 93       	st	X, r22
    10be:	23 e3       	ldi	r18, 0x33	; 51
    10c0:	33 e3       	ldi	r19, 0x33	; 51
    10c2:	43 ea       	ldi	r20, 0xA3	; 163
    10c4:	50 e4       	ldi	r21, 0x40	; 64
    10c6:	68 8d       	ldd	r22, Y+24	; 0x18
    10c8:	79 8d       	ldd	r23, Y+25	; 0x19
    10ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    10ce:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
    10d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10d4:	3d 85       	ldd	r19, Y+13	; 0x0d
    10d6:	4e 85       	ldd	r20, Y+14	; 0x0e
    10d8:	5f 85       	ldd	r21, Y+15	; 0x0f
    10da:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
    10de:	0e 94 03 0b 	call	0x1606	; 0x1606 <__fixunssfsi>
    10e2:	f3 01       	movw	r30, r6
    10e4:	61 83       	std	Z+1, r22	; 0x01
    10e6:	23 e3       	ldi	r18, 0x33	; 51
    10e8:	33 e3       	ldi	r19, 0x33	; 51
    10ea:	43 ea       	ldi	r20, 0xA3	; 163
    10ec:	50 e4       	ldi	r21, 0x40	; 64
    10ee:	6c 8d       	ldd	r22, Y+28	; 0x1c
    10f0:	7d 8d       	ldd	r23, Y+29	; 0x1d
    10f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10f6:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
    10fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    10fc:	3d 85       	ldd	r19, Y+13	; 0x0d
    10fe:	4e 85       	ldd	r20, Y+14	; 0x0e
    1100:	5f 85       	ldd	r21, Y+15	; 0x0f
    1102:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
    1106:	0e 94 03 0b 	call	0x1606	; 0x1606 <__fixunssfsi>
    110a:	d3 01       	movw	r26, r6
    110c:	12 96       	adiw	r26, 0x02	; 2
    110e:	6c 93       	st	X, r22
				break;
    1110:	0d c0       	rjmp	.+26     	; 0x112c <tinyLED_update+0x390>
			case FLASH_ONCE:
				if(tinyLED_flash_once_time[i]>0){
    1112:	d8 01       	movw	r26, r16
    1114:	8c 91       	ld	r24, X
    1116:	88 23       	and	r24, r24
    1118:	19 f0       	breq	.+6      	; 0x1120 <tinyLED_update+0x384>
					rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red, rgb_colors[i].green, rgb_colors[i].blue};
					tinyLED_flash_once_time[i]--;
    111a:	81 50       	subi	r24, 0x01	; 1
    111c:	8c 93       	st	X, r24
    111e:	06 c0       	rjmp	.+12     	; 0x112c <tinyLED_update+0x390>
				}
				else{
					// Here we return to the previous color and mode
					tinyLED_settings[i].color = tinyLED_old_settings[i].color;
    1120:	d5 01       	movw	r26, r10
    1122:	8c 91       	ld	r24, X
    1124:	80 83       	st	Z, r24
					tinyLED_settings[i].mode = tinyLED_old_settings[i].mode;
    1126:	11 96       	adiw	r26, 0x01	; 1
    1128:	8c 91       	ld	r24, X
    112a:	81 83       	std	Z+1, r24	; 0x01
    112c:	b2 e0       	ldi	r27, 0x02	; 2
    112e:	2b 0e       	add	r2, r27
    1130:	31 1c       	adc	r3, r1
    1132:	e3 e0       	ldi	r30, 0x03	; 3
    1134:	6e 0e       	add	r6, r30
    1136:	71 1c       	adc	r7, r1
    1138:	f2 e0       	ldi	r31, 0x02	; 2
    113a:	af 0e       	add	r10, r31
    113c:	b1 1c       	adc	r11, r1
    113e:	0f 5f       	subi	r16, 0xFF	; 255
    1140:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// This is where we store all the actual color values we want to send to the LED
	struct RGB_Color rgb_colors[NUMBER_OF_LEDS];
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
    1142:	24 14       	cp	r2, r4
    1144:	35 04       	cpc	r3, r5
    1146:	09 f0       	breq	.+2      	; 0x114a <tinyLED_update+0x3ae>
    1148:	a6 ce       	rjmp	.-692    	; 0xe96 <tinyLED_update+0xfa>
				break;
		}
	}
	
	// We only write to the LEDs if there is something to change. (eg. in SWING mode, we update the LEDs almost every cycle)
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
    114a:	6c e5       	ldi	r22, 0x5C	; 92
    114c:	78 e3       	ldi	r23, 0x38	; 56
    114e:	ce 01       	movw	r24, r28
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	0e 94 9e 06 	call	0xd3c	; 0xd3c <tinyLED_RGB_Color_Compare>
    1156:	81 11       	cpse	r24, r1
    1158:	21 c0       	rjmp	.+66     	; 0x119c <tinyLED_update+0x400>
    115a:	0c e5       	ldi	r16, 0x5C	; 92
    115c:	18 e3       	ldi	r17, 0x38	; 56
    115e:	7e 01       	movw	r14, r28
    1160:	27 e0       	ldi	r18, 0x07	; 7
    1162:	e2 0e       	add	r14, r18
    1164:	f1 1c       	adc	r15, r1
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
		{
			// Write to LEDs
			//For some reason, the data-bus to the LEDs is serialized as GRB
			//which means the 24-bit data-bus will look like [Green[0:7], Red[0:7], Blue[0:7]]
			tinyLED_SPIWriteByte(rgb_colors[i].green);
    1166:	d6 01       	movw	r26, r12
    1168:	11 96       	adiw	r26, 0x01	; 1
    116a:	8c 91       	ld	r24, X
    116c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].red);
    1170:	f6 01       	movw	r30, r12
    1172:	80 81       	ld	r24, Z
    1174:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
    1178:	d6 01       	movw	r26, r12
    117a:	12 96       	adiw	r26, 0x02	; 2
    117c:	8c 91       	ld	r24, X
    117e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <tinyLED_SPIWriteByte>
			tinyLED_old_colors[i] = rgb_colors[i];
    1182:	f6 01       	movw	r30, r12
    1184:	81 91       	ld	r24, Z+
    1186:	91 91       	ld	r25, Z+
    1188:	a1 91       	ld	r26, Z+
    118a:	6f 01       	movw	r12, r30
    118c:	f8 01       	movw	r30, r16
    118e:	81 93       	st	Z+, r24
    1190:	91 93       	st	Z+, r25
    1192:	a1 93       	st	Z+, r26
    1194:	8f 01       	movw	r16, r30
		}
	}
	
	// We only write to the LEDs if there is something to change. (eg. in SWING mode, we update the LEDs almost every cycle)
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
    1196:	ce 14       	cp	r12, r14
    1198:	df 04       	cpc	r13, r15
    119a:	29 f7       	brne	.-54     	; 0x1166 <tinyLED_update+0x3ca>
			tinyLED_old_colors[i] = rgb_colors[i];
		}
		//tinyDebugger_send_uint8("LED1 color", tinyLED_settings[0].color);
		//tinyDebugger_send_uint8("LED2 color", tinyLED_settings[1].color);
	}
}
    119c:	6f 96       	adiw	r28, 0x1f	; 31
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	af 90       	pop	r10
    11b6:	9f 90       	pop	r9
    11b8:	8f 90       	pop	r8
    11ba:	7f 90       	pop	r7
    11bc:	6f 90       	pop	r6
    11be:	5f 90       	pop	r5
    11c0:	4f 90       	pop	r4
    11c2:	3f 90       	pop	r3
    11c4:	2f 90       	pop	r2
    11c6:	08 95       	ret

000011c8 <tinyPotential_update>:

/*
Update the potential
*/
void tinyPotential_update()
{
    11c8:	cf 92       	push	r12
    11ca:	df 92       	push	r13
    11cc:	ef 92       	push	r14
    11ce:	ff 92       	push	r15
Function to decay the potential towards 0
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
    11d0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <tinyTime_now>
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    11d4:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <previous_update_time>
    11d8:	68 1b       	sub	r22, r24
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 32 0b 	call	0x1664	; 0x1664 <__floatunsisf>
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	48 ec       	ldi	r20, 0xC8	; 200
    11ea:	52 e4       	ldi	r21, 0x42	; 66
    11ec:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__divsf3>
    11f0:	90 58       	subi	r25, 0x80	; 128
    11f2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <exp>
    11f6:	20 91 4a 38 	lds	r18, 0x384A	; 0x80384a <tinyPotential_potential>
    11fa:	30 91 4b 38 	lds	r19, 0x384B	; 0x80384b <tinyPotential_potential+0x1>
    11fe:	40 91 4c 38 	lds	r20, 0x384C	; 0x80384c <tinyPotential_potential+0x2>
    1202:	50 91 4d 38 	lds	r21, 0x384D	; 0x80384d <tinyPotential_potential+0x3>
    1206:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
    120a:	6b 01       	movw	r12, r22
    120c:	7c 01       	movw	r14, r24
	if(fabs(tinyPotential_potential)<0.1){
    120e:	9f 77       	andi	r25, 0x7F	; 127
    1210:	2d ec       	ldi	r18, 0xCD	; 205
    1212:	3c ec       	ldi	r19, 0xCC	; 204
    1214:	4c ec       	ldi	r20, 0xCC	; 204
    1216:	5d e3       	ldi	r21, 0x3D	; 61
    1218:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__cmpsf2>
    121c:	88 23       	and	r24, r24
    121e:	4c f0       	brlt	.+18     	; 0x1232 <tinyPotential_update+0x6a>
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    1220:	c0 92 4a 38 	sts	0x384A, r12	; 0x80384a <tinyPotential_potential>
    1224:	d0 92 4b 38 	sts	0x384B, r13	; 0x80384b <tinyPotential_potential+0x1>
    1228:	e0 92 4c 38 	sts	0x384C, r14	; 0x80384c <tinyPotential_potential+0x2>
    122c:	f0 92 4d 38 	sts	0x384D, r15	; 0x80384d <tinyPotential_potential+0x3>
    1230:	08 c0       	rjmp	.+16     	; 0x1242 <tinyPotential_update+0x7a>
	if(fabs(tinyPotential_potential)<0.1){
		tinyPotential_potential=0;
    1232:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <tinyPotential_potential>
    1236:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <tinyPotential_potential+0x1>
    123a:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <tinyPotential_potential+0x2>
    123e:	10 92 4d 38 	sts	0x384D, r1	; 0x80384d <tinyPotential_potential+0x3>
	}
	previous_update_time = tinyTime_now();
    1242:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <tinyTime_now>
    1246:	60 93 46 38 	sts	0x3846, r22	; 0x803846 <previous_update_time>
    124a:	70 93 47 38 	sts	0x3847, r23	; 0x803847 <previous_update_time+0x1>
    124e:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <previous_update_time+0x2>
    1252:	90 93 49 38 	sts	0x3849, r25	; 0x803849 <previous_update_time+0x3>
void tinyPotential_update()
{
	//Some of the potential in the neuron has decayed away
	tinyPotential_decay();
	// Update potential with values from Dendrites
	tinyPotential_potential = tinyDendrite_update_potential(tinyPotential_potential);
    1256:	60 91 4a 38 	lds	r22, 0x384A	; 0x80384a <tinyPotential_potential>
    125a:	70 91 4b 38 	lds	r23, 0x384B	; 0x80384b <tinyPotential_potential+0x1>
    125e:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <tinyPotential_potential+0x2>
    1262:	90 91 4d 38 	lds	r25, 0x384D	; 0x80384d <tinyPotential_potential+0x3>
    1266:	0e 94 12 06 	call	0xc24	; 0xc24 <tinyDendrite_update_potential>
    126a:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <tinyPotential_potential>
    126e:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <tinyPotential_potential+0x1>
    1272:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <tinyPotential_potential+0x2>
    1276:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <tinyPotential_potential+0x3>
	
	// Update potential from button press
	tinyPotential_potential = tinyButton_update_potential(tinyPotential_potential);
    127a:	0e 94 36 04 	call	0x86c	; 0x86c <tinyButton_update_potential>
    127e:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <tinyPotential_potential>
    1282:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <tinyPotential_potential+0x1>
    1286:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <tinyPotential_potential+0x2>
    128a:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <tinyPotential_potential+0x3>
	
	// Update potential with values from spontaneous pulse.
	tinyPotential_potential = tinyPulse_update_potential(tinyPotential_potential);
    128e:	0e 94 90 09 	call	0x1320	; 0x1320 <tinyPulse_update_potential>
    1292:	ab 01       	movw	r20, r22
    1294:	bc 01       	movw	r22, r24
    1296:	40 93 4a 38 	sts	0x384A, r20	; 0x80384a <tinyPotential_potential>
    129a:	50 93 4b 38 	sts	0x384B, r21	; 0x80384b <tinyPotential_potential+0x1>
    129e:	60 93 4c 38 	sts	0x384C, r22	; 0x80384c <tinyPotential_potential+0x2>
    12a2:	70 93 4d 38 	sts	0x384D, r23	; 0x80384d <tinyPotential_potential+0x3>
	
	tinyDebugger_send_double("Potential", tinyPotential_potential);
    12a6:	8c e3       	ldi	r24, 0x3C	; 60
    12a8:	96 ea       	ldi	r25, 0xA6	; 166
    12aa:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <tinyDebugger_send_double>
	
	
	// Let the axon affect the potential
	// This is also where we decide whether or not the axon should fire
	tinyPotential_potential = tinyAxon_update_potential(tinyPotential_potential);
    12ae:	60 91 4a 38 	lds	r22, 0x384A	; 0x80384a <tinyPotential_potential>
    12b2:	70 91 4b 38 	lds	r23, 0x384B	; 0x80384b <tinyPotential_potential+0x1>
    12b6:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <tinyPotential_potential+0x2>
    12ba:	90 91 4d 38 	lds	r25, 0x384D	; 0x80384d <tinyPotential_potential+0x3>
    12be:	0e 94 11 03 	call	0x622	; 0x622 <tinyAxon_update_potential>
    12c2:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <tinyPotential_potential>
    12c6:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <tinyPotential_potential+0x1>
    12ca:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <tinyPotential_potential+0x2>
    12ce:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <tinyPotential_potential+0x3>
}
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	df 90       	pop	r13
    12d8:	cf 90       	pop	r12
    12da:	08 95       	ret

000012dc <tinyPulse_toggle_pulse_mode>:
_Bool tinyPulse_is_in_pulse_mode(){
	return pulse_mode;
}

void tinyPulse_toggle_pulse_mode(){
	pulse_mode = !pulse_mode;
    12dc:	90 91 54 38 	lds	r25, 0x3854	; 0x803854 <pulse_mode>
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	89 27       	eor	r24, r25
    12e4:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <pulse_mode>
	
	if(tinyPulse_is_in_pulse_mode()){
    12e8:	88 23       	and	r24, r24
    12ea:	59 f0       	breq	.+22     	; 0x1302 <tinyPulse_toggle_pulse_mode+0x26>
		tinyLED_set_color_mode(OUT_LED, PULSEMODE_COLOR, WEAK);
    12ec:	41 e0       	ldi	r20, 0x01	; 1
    12ee:	62 e0       	ldi	r22, 0x02	; 2
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	0e 94 76 06 	call	0xcec	; 0xcec <tinyLED_set_color_mode>
		tinyLED_set_color_mode(INN_LED, PULSEMODE_COLOR, WEAK);
    12f6:	41 e0       	ldi	r20, 0x01	; 1
    12f8:	62 e0       	ldi	r22, 0x02	; 2
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	0e 94 76 06 	call	0xcec	; 0xcec <tinyLED_set_color_mode>
    1300:	08 95       	ret
	}
	else{
		tinyLED_set_color(OUT_LED, LED_OFF);
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	0e 94 9a 06 	call	0xd34	; 0xd34 <tinyLED_set_color>
		tinyLED_set_color(INN_LED, LED_OFF);
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	0e 94 9a 06 	call	0xd34	; 0xd34 <tinyLED_set_color>
    1312:	08 95       	ret

00001314 <tinyPulse_set_pulse_mode>:
	}
}

void tinyPulse_set_pulse_mode(_Bool mode){
	if (pulse_mode != mode)
    1314:	90 91 54 38 	lds	r25, 0x3854	; 0x803854 <pulse_mode>
    1318:	98 13       	cpse	r25, r24
	{
		tinyPulse_toggle_pulse_mode();
    131a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <tinyPulse_toggle_pulse_mode>
    131e:	08 95       	ret

00001320 <tinyPulse_update_potential>:
	}
}

double tinyPulse_update_potential(double potential){
    1320:	cf 92       	push	r12
    1322:	df 92       	push	r13
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	6b 01       	movw	r12, r22
    132a:	7c 01       	movw	r14, r24
	if(pulse_mode){
    132c:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <pulse_mode>
    1330:	88 23       	and	r24, r24
    1332:	39 f1       	breq	.+78     	; 0x1382 <tinyPulse_update_potential+0x62>
		
		time_since_last_pulse = tinyTime_now() - time_of_last_pulse;
    1334:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <tinyTime_now>
    1338:	20 91 50 38 	lds	r18, 0x3850	; 0x803850 <time_of_last_pulse>
    133c:	30 91 51 38 	lds	r19, 0x3851	; 0x803851 <time_of_last_pulse+0x1>
    1340:	62 1b       	sub	r22, r18
    1342:	73 0b       	sbc	r23, r19
    1344:	60 93 4e 38 	sts	0x384E, r22	; 0x80384e <time_since_last_pulse>
    1348:	70 93 4f 38 	sts	0x384F, r23	; 0x80384f <time_since_last_pulse+0x1>
		
		if(time_since_last_pulse >= ideal_time_between_pulses){
    134c:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <ideal_time_between_pulses>
    1350:	90 91 14 38 	lds	r25, 0x3814	; 0x803814 <ideal_time_between_pulses+0x1>
    1354:	68 17       	cp	r22, r24
    1356:	79 07       	cpc	r23, r25
    1358:	a0 f0       	brcs	.+40     	; 0x1382 <tinyPulse_update_potential+0x62>
			// This isn't actually a button press. You could have a separate variable for this, but it seems unnecessary.
			potential += BUTTON_PRESS_REACTION;
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 ed       	ldi	r20, 0xD0	; 208
    1360:	51 e4       	ldi	r21, 0x41	; 65
    1362:	c7 01       	movw	r24, r14
    1364:	b6 01       	movw	r22, r12
    1366:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__addsf3>
    136a:	6b 01       	movw	r12, r22
    136c:	7c 01       	movw	r14, r24
			time_of_last_pulse = tinyTime_now();			
    136e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <tinyTime_now>
    1372:	60 93 50 38 	sts	0x3850, r22	; 0x803850 <time_of_last_pulse>
    1376:	70 93 51 38 	sts	0x3851, r23	; 0x803851 <time_of_last_pulse+0x1>
    137a:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <time_of_last_pulse+0x2>
    137e:	90 93 53 38 	sts	0x3853, r25	; 0x803853 <time_of_last_pulse+0x3>
		}
	}
	return potential;
}
    1382:	c7 01       	movw	r24, r14
    1384:	b6 01       	movw	r22, r12
    1386:	ff 90       	pop	r15
    1388:	ef 90       	pop	r14
    138a:	df 90       	pop	r13
    138c:	cf 90       	pop	r12
    138e:	08 95       	ret

00001390 <tinyTime_counter_increment>:
If the Interrupt Service Routine is clocked by a crystal oscillator
it gives a very precise timer-counter.
*/
void tinyTime_counter_increment(void)
{
	time_counter++;
    1390:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <time_counter>
    1394:	90 91 56 38 	lds	r25, 0x3856	; 0x803856 <time_counter+0x1>
    1398:	a0 91 57 38 	lds	r26, 0x3857	; 0x803857 <time_counter+0x2>
    139c:	b0 91 58 38 	lds	r27, 0x3858	; 0x803858 <time_counter+0x3>
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	a1 1d       	adc	r26, r1
    13a4:	b1 1d       	adc	r27, r1
    13a6:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <time_counter>
    13aa:	90 93 56 38 	sts	0x3856, r25	; 0x803856 <time_counter+0x1>
    13ae:	a0 93 57 38 	sts	0x3857, r26	; 0x803857 <time_counter+0x2>
    13b2:	b0 93 58 38 	sts	0x3858, r27	; 0x803858 <time_counter+0x3>
    13b6:	08 95       	ret

000013b8 <tinyTime_now>:
/*
This function is callable by external libraries to give them the counted time so far.
*/
uint32_t tinyTime_now(void)
{
	return time_counter;
    13b8:	60 91 55 38 	lds	r22, 0x3855	; 0x803855 <time_counter>
    13bc:	70 91 56 38 	lds	r23, 0x3856	; 0x803856 <time_counter+0x1>
    13c0:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <time_counter+0x2>
    13c4:	90 91 58 38 	lds	r25, 0x3858	; 0x803858 <time_counter+0x3>
    13c8:	08 95       	ret

000013ca <__subsf3>:
    13ca:	50 58       	subi	r21, 0x80	; 128

000013cc <__addsf3>:
    13cc:	bb 27       	eor	r27, r27
    13ce:	aa 27       	eor	r26, r26
    13d0:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__addsf3x>
    13d4:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__fp_round>
    13d8:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__fp_pscA>
    13dc:	38 f0       	brcs	.+14     	; 0x13ec <__addsf3+0x20>
    13de:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__fp_pscB>
    13e2:	20 f0       	brcs	.+8      	; 0x13ec <__addsf3+0x20>
    13e4:	39 f4       	brne	.+14     	; 0x13f4 <__addsf3+0x28>
    13e6:	9f 3f       	cpi	r25, 0xFF	; 255
    13e8:	19 f4       	brne	.+6      	; 0x13f0 <__addsf3+0x24>
    13ea:	26 f4       	brtc	.+8      	; 0x13f4 <__addsf3+0x28>
    13ec:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_nan>
    13f0:	0e f4       	brtc	.+2      	; 0x13f4 <__addsf3+0x28>
    13f2:	e0 95       	com	r30
    13f4:	e7 fb       	bst	r30, 7
    13f6:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>

000013fa <__addsf3x>:
    13fa:	e9 2f       	mov	r30, r25
    13fc:	0e 94 01 0c 	call	0x1802	; 0x1802 <__fp_split3>
    1400:	58 f3       	brcs	.-42     	; 0x13d8 <__addsf3+0xc>
    1402:	ba 17       	cp	r27, r26
    1404:	62 07       	cpc	r22, r18
    1406:	73 07       	cpc	r23, r19
    1408:	84 07       	cpc	r24, r20
    140a:	95 07       	cpc	r25, r21
    140c:	20 f0       	brcs	.+8      	; 0x1416 <__addsf3x+0x1c>
    140e:	79 f4       	brne	.+30     	; 0x142e <__addsf3x+0x34>
    1410:	a6 f5       	brtc	.+104    	; 0x147a <__addsf3x+0x80>
    1412:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_zero>
    1416:	0e f4       	brtc	.+2      	; 0x141a <__addsf3x+0x20>
    1418:	e0 95       	com	r30
    141a:	0b 2e       	mov	r0, r27
    141c:	ba 2f       	mov	r27, r26
    141e:	a0 2d       	mov	r26, r0
    1420:	0b 01       	movw	r0, r22
    1422:	b9 01       	movw	r22, r18
    1424:	90 01       	movw	r18, r0
    1426:	0c 01       	movw	r0, r24
    1428:	ca 01       	movw	r24, r20
    142a:	a0 01       	movw	r20, r0
    142c:	11 24       	eor	r1, r1
    142e:	ff 27       	eor	r31, r31
    1430:	59 1b       	sub	r21, r25
    1432:	99 f0       	breq	.+38     	; 0x145a <__addsf3x+0x60>
    1434:	59 3f       	cpi	r21, 0xF9	; 249
    1436:	50 f4       	brcc	.+20     	; 0x144c <__addsf3x+0x52>
    1438:	50 3e       	cpi	r21, 0xE0	; 224
    143a:	68 f1       	brcs	.+90     	; 0x1496 <__addsf3x+0x9c>
    143c:	1a 16       	cp	r1, r26
    143e:	f0 40       	sbci	r31, 0x00	; 0
    1440:	a2 2f       	mov	r26, r18
    1442:	23 2f       	mov	r18, r19
    1444:	34 2f       	mov	r19, r20
    1446:	44 27       	eor	r20, r20
    1448:	58 5f       	subi	r21, 0xF8	; 248
    144a:	f3 cf       	rjmp	.-26     	; 0x1432 <__addsf3x+0x38>
    144c:	46 95       	lsr	r20
    144e:	37 95       	ror	r19
    1450:	27 95       	ror	r18
    1452:	a7 95       	ror	r26
    1454:	f0 40       	sbci	r31, 0x00	; 0
    1456:	53 95       	inc	r21
    1458:	c9 f7       	brne	.-14     	; 0x144c <__addsf3x+0x52>
    145a:	7e f4       	brtc	.+30     	; 0x147a <__addsf3x+0x80>
    145c:	1f 16       	cp	r1, r31
    145e:	ba 0b       	sbc	r27, r26
    1460:	62 0b       	sbc	r22, r18
    1462:	73 0b       	sbc	r23, r19
    1464:	84 0b       	sbc	r24, r20
    1466:	ba f0       	brmi	.+46     	; 0x1496 <__addsf3x+0x9c>
    1468:	91 50       	subi	r25, 0x01	; 1
    146a:	a1 f0       	breq	.+40     	; 0x1494 <__addsf3x+0x9a>
    146c:	ff 0f       	add	r31, r31
    146e:	bb 1f       	adc	r27, r27
    1470:	66 1f       	adc	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	88 1f       	adc	r24, r24
    1476:	c2 f7       	brpl	.-16     	; 0x1468 <__addsf3x+0x6e>
    1478:	0e c0       	rjmp	.+28     	; 0x1496 <__addsf3x+0x9c>
    147a:	ba 0f       	add	r27, r26
    147c:	62 1f       	adc	r22, r18
    147e:	73 1f       	adc	r23, r19
    1480:	84 1f       	adc	r24, r20
    1482:	48 f4       	brcc	.+18     	; 0x1496 <__addsf3x+0x9c>
    1484:	87 95       	ror	r24
    1486:	77 95       	ror	r23
    1488:	67 95       	ror	r22
    148a:	b7 95       	ror	r27
    148c:	f7 95       	ror	r31
    148e:	9e 3f       	cpi	r25, 0xFE	; 254
    1490:	08 f0       	brcs	.+2      	; 0x1494 <__addsf3x+0x9a>
    1492:	b0 cf       	rjmp	.-160    	; 0x13f4 <__addsf3+0x28>
    1494:	93 95       	inc	r25
    1496:	88 0f       	add	r24, r24
    1498:	08 f0       	brcs	.+2      	; 0x149c <__addsf3x+0xa2>
    149a:	99 27       	eor	r25, r25
    149c:	ee 0f       	add	r30, r30
    149e:	97 95       	ror	r25
    14a0:	87 95       	ror	r24
    14a2:	08 95       	ret

000014a4 <__cmpsf2>:
    14a4:	0e 94 8e 0b 	call	0x171c	; 0x171c <__fp_cmp>
    14a8:	08 f4       	brcc	.+2      	; 0x14ac <__cmpsf2+0x8>
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	08 95       	ret

000014ae <__divsf3>:
    14ae:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__divsf3x>
    14b2:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__fp_round>
    14b6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__fp_pscB>
    14ba:	58 f0       	brcs	.+22     	; 0x14d2 <__divsf3+0x24>
    14bc:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__fp_pscA>
    14c0:	40 f0       	brcs	.+16     	; 0x14d2 <__divsf3+0x24>
    14c2:	29 f4       	brne	.+10     	; 0x14ce <__divsf3+0x20>
    14c4:	5f 3f       	cpi	r21, 0xFF	; 255
    14c6:	29 f0       	breq	.+10     	; 0x14d2 <__divsf3+0x24>
    14c8:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>
    14cc:	51 11       	cpse	r21, r1
    14ce:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__fp_szero>
    14d2:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_nan>

000014d6 <__divsf3x>:
    14d6:	0e 94 01 0c 	call	0x1802	; 0x1802 <__fp_split3>
    14da:	68 f3       	brcs	.-38     	; 0x14b6 <__divsf3+0x8>

000014dc <__divsf3_pse>:
    14dc:	99 23       	and	r25, r25
    14de:	b1 f3       	breq	.-20     	; 0x14cc <__divsf3+0x1e>
    14e0:	55 23       	and	r21, r21
    14e2:	91 f3       	breq	.-28     	; 0x14c8 <__divsf3+0x1a>
    14e4:	95 1b       	sub	r25, r21
    14e6:	55 0b       	sbc	r21, r21
    14e8:	bb 27       	eor	r27, r27
    14ea:	aa 27       	eor	r26, r26
    14ec:	62 17       	cp	r22, r18
    14ee:	73 07       	cpc	r23, r19
    14f0:	84 07       	cpc	r24, r20
    14f2:	38 f0       	brcs	.+14     	; 0x1502 <__divsf3_pse+0x26>
    14f4:	9f 5f       	subi	r25, 0xFF	; 255
    14f6:	5f 4f       	sbci	r21, 0xFF	; 255
    14f8:	22 0f       	add	r18, r18
    14fa:	33 1f       	adc	r19, r19
    14fc:	44 1f       	adc	r20, r20
    14fe:	aa 1f       	adc	r26, r26
    1500:	a9 f3       	breq	.-22     	; 0x14ec <__divsf3_pse+0x10>
    1502:	35 d0       	rcall	.+106    	; 0x156e <__divsf3_pse+0x92>
    1504:	0e 2e       	mov	r0, r30
    1506:	3a f0       	brmi	.+14     	; 0x1516 <__divsf3_pse+0x3a>
    1508:	e0 e8       	ldi	r30, 0x80	; 128
    150a:	32 d0       	rcall	.+100    	; 0x1570 <__divsf3_pse+0x94>
    150c:	91 50       	subi	r25, 0x01	; 1
    150e:	50 40       	sbci	r21, 0x00	; 0
    1510:	e6 95       	lsr	r30
    1512:	00 1c       	adc	r0, r0
    1514:	ca f7       	brpl	.-14     	; 0x1508 <__divsf3_pse+0x2c>
    1516:	2b d0       	rcall	.+86     	; 0x156e <__divsf3_pse+0x92>
    1518:	fe 2f       	mov	r31, r30
    151a:	29 d0       	rcall	.+82     	; 0x156e <__divsf3_pse+0x92>
    151c:	66 0f       	add	r22, r22
    151e:	77 1f       	adc	r23, r23
    1520:	88 1f       	adc	r24, r24
    1522:	bb 1f       	adc	r27, r27
    1524:	26 17       	cp	r18, r22
    1526:	37 07       	cpc	r19, r23
    1528:	48 07       	cpc	r20, r24
    152a:	ab 07       	cpc	r26, r27
    152c:	b0 e8       	ldi	r27, 0x80	; 128
    152e:	09 f0       	breq	.+2      	; 0x1532 <__divsf3_pse+0x56>
    1530:	bb 0b       	sbc	r27, r27
    1532:	80 2d       	mov	r24, r0
    1534:	bf 01       	movw	r22, r30
    1536:	ff 27       	eor	r31, r31
    1538:	93 58       	subi	r25, 0x83	; 131
    153a:	5f 4f       	sbci	r21, 0xFF	; 255
    153c:	3a f0       	brmi	.+14     	; 0x154c <__divsf3_pse+0x70>
    153e:	9e 3f       	cpi	r25, 0xFE	; 254
    1540:	51 05       	cpc	r21, r1
    1542:	78 f0       	brcs	.+30     	; 0x1562 <__divsf3_pse+0x86>
    1544:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>
    1548:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__fp_szero>
    154c:	5f 3f       	cpi	r21, 0xFF	; 255
    154e:	e4 f3       	brlt	.-8      	; 0x1548 <__divsf3_pse+0x6c>
    1550:	98 3e       	cpi	r25, 0xE8	; 232
    1552:	d4 f3       	brlt	.-12     	; 0x1548 <__divsf3_pse+0x6c>
    1554:	86 95       	lsr	r24
    1556:	77 95       	ror	r23
    1558:	67 95       	ror	r22
    155a:	b7 95       	ror	r27
    155c:	f7 95       	ror	r31
    155e:	9f 5f       	subi	r25, 0xFF	; 255
    1560:	c9 f7       	brne	.-14     	; 0x1554 <__divsf3_pse+0x78>
    1562:	88 0f       	add	r24, r24
    1564:	91 1d       	adc	r25, r1
    1566:	96 95       	lsr	r25
    1568:	87 95       	ror	r24
    156a:	97 f9       	bld	r25, 7
    156c:	08 95       	ret
    156e:	e1 e0       	ldi	r30, 0x01	; 1
    1570:	66 0f       	add	r22, r22
    1572:	77 1f       	adc	r23, r23
    1574:	88 1f       	adc	r24, r24
    1576:	bb 1f       	adc	r27, r27
    1578:	62 17       	cp	r22, r18
    157a:	73 07       	cpc	r23, r19
    157c:	84 07       	cpc	r24, r20
    157e:	ba 07       	cpc	r27, r26
    1580:	20 f0       	brcs	.+8      	; 0x158a <__divsf3_pse+0xae>
    1582:	62 1b       	sub	r22, r18
    1584:	73 0b       	sbc	r23, r19
    1586:	84 0b       	sbc	r24, r20
    1588:	ba 0b       	sbc	r27, r26
    158a:	ee 1f       	adc	r30, r30
    158c:	88 f7       	brcc	.-30     	; 0x1570 <__divsf3_pse+0x94>
    158e:	e0 95       	com	r30
    1590:	08 95       	ret
    1592:	29 f4       	brne	.+10     	; 0x159e <__divsf3_pse+0xc2>
    1594:	16 f0       	brts	.+4      	; 0x159a <__divsf3_pse+0xbe>
    1596:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>
    159a:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_zero>
    159e:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_nan>

000015a2 <exp>:
    15a2:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fp_splitA>
    15a6:	a8 f3       	brcs	.-22     	; 0x1592 <__divsf3_pse+0xb6>
    15a8:	96 38       	cpi	r25, 0x86	; 134
    15aa:	a0 f7       	brcc	.-24     	; 0x1594 <__divsf3_pse+0xb8>
    15ac:	07 f8       	bld	r0, 7
    15ae:	0f 92       	push	r0
    15b0:	e8 94       	clt
    15b2:	2b e3       	ldi	r18, 0x3B	; 59
    15b4:	3a ea       	ldi	r19, 0xAA	; 170
    15b6:	48 eb       	ldi	r20, 0xB8	; 184
    15b8:	5f e7       	ldi	r21, 0x7F	; 127
    15ba:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__mulsf3_pse>
    15be:	0f 92       	push	r0
    15c0:	0f 92       	push	r0
    15c2:	0f 92       	push	r0
    15c4:	4d b7       	in	r20, 0x3d	; 61
    15c6:	5e b7       	in	r21, 0x3e	; 62
    15c8:	0f 92       	push	r0
    15ca:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <modf>
    15ce:	ec e7       	ldi	r30, 0x7C	; 124
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fp_powser>
    15d6:	4f 91       	pop	r20
    15d8:	5f 91       	pop	r21
    15da:	ef 91       	pop	r30
    15dc:	ff 91       	pop	r31
    15de:	e5 95       	asr	r30
    15e0:	ee 1f       	adc	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	49 f0       	breq	.+18     	; 0x15f8 <exp+0x56>
    15e6:	fe 57       	subi	r31, 0x7E	; 126
    15e8:	e0 68       	ori	r30, 0x80	; 128
    15ea:	44 27       	eor	r20, r20
    15ec:	ee 0f       	add	r30, r30
    15ee:	44 1f       	adc	r20, r20
    15f0:	fa 95       	dec	r31
    15f2:	e1 f7       	brne	.-8      	; 0x15ec <exp+0x4a>
    15f4:	41 95       	neg	r20
    15f6:	55 0b       	sbc	r21, r21
    15f8:	0e 94 3b 0c 	call	0x1876	; 0x1876 <ldexp>
    15fc:	0f 90       	pop	r0
    15fe:	07 fe       	sbrs	r0, 7
    1600:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <inverse>
    1604:	08 95       	ret

00001606 <__fixunssfsi>:
    1606:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fp_splitA>
    160a:	88 f0       	brcs	.+34     	; 0x162e <__fixunssfsi+0x28>
    160c:	9f 57       	subi	r25, 0x7F	; 127
    160e:	98 f0       	brcs	.+38     	; 0x1636 <__fixunssfsi+0x30>
    1610:	b9 2f       	mov	r27, r25
    1612:	99 27       	eor	r25, r25
    1614:	b7 51       	subi	r27, 0x17	; 23
    1616:	b0 f0       	brcs	.+44     	; 0x1644 <__fixunssfsi+0x3e>
    1618:	e1 f0       	breq	.+56     	; 0x1652 <__fixunssfsi+0x4c>
    161a:	66 0f       	add	r22, r22
    161c:	77 1f       	adc	r23, r23
    161e:	88 1f       	adc	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	1a f0       	brmi	.+6      	; 0x162a <__fixunssfsi+0x24>
    1624:	ba 95       	dec	r27
    1626:	c9 f7       	brne	.-14     	; 0x161a <__fixunssfsi+0x14>
    1628:	14 c0       	rjmp	.+40     	; 0x1652 <__fixunssfsi+0x4c>
    162a:	b1 30       	cpi	r27, 0x01	; 1
    162c:	91 f0       	breq	.+36     	; 0x1652 <__fixunssfsi+0x4c>
    162e:	0e 94 23 0c 	call	0x1846	; 0x1846 <__fp_zero>
    1632:	b1 e0       	ldi	r27, 0x01	; 1
    1634:	08 95       	ret
    1636:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_zero>
    163a:	67 2f       	mov	r22, r23
    163c:	78 2f       	mov	r23, r24
    163e:	88 27       	eor	r24, r24
    1640:	b8 5f       	subi	r27, 0xF8	; 248
    1642:	39 f0       	breq	.+14     	; 0x1652 <__fixunssfsi+0x4c>
    1644:	b9 3f       	cpi	r27, 0xF9	; 249
    1646:	cc f3       	brlt	.-14     	; 0x163a <__fixunssfsi+0x34>
    1648:	86 95       	lsr	r24
    164a:	77 95       	ror	r23
    164c:	67 95       	ror	r22
    164e:	b3 95       	inc	r27
    1650:	d9 f7       	brne	.-10     	; 0x1648 <__fixunssfsi+0x42>
    1652:	3e f4       	brtc	.+14     	; 0x1662 <__fixunssfsi+0x5c>
    1654:	90 95       	com	r25
    1656:	80 95       	com	r24
    1658:	70 95       	com	r23
    165a:	61 95       	neg	r22
    165c:	7f 4f       	sbci	r23, 0xFF	; 255
    165e:	8f 4f       	sbci	r24, 0xFF	; 255
    1660:	9f 4f       	sbci	r25, 0xFF	; 255
    1662:	08 95       	ret

00001664 <__floatunsisf>:
    1664:	e8 94       	clt
    1666:	09 c0       	rjmp	.+18     	; 0x167a <__floatsisf+0x12>

00001668 <__floatsisf>:
    1668:	97 fb       	bst	r25, 7
    166a:	3e f4       	brtc	.+14     	; 0x167a <__floatsisf+0x12>
    166c:	90 95       	com	r25
    166e:	80 95       	com	r24
    1670:	70 95       	com	r23
    1672:	61 95       	neg	r22
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	8f 4f       	sbci	r24, 0xFF	; 255
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	99 23       	and	r25, r25
    167c:	a9 f0       	breq	.+42     	; 0x16a8 <__floatsisf+0x40>
    167e:	f9 2f       	mov	r31, r25
    1680:	96 e9       	ldi	r25, 0x96	; 150
    1682:	bb 27       	eor	r27, r27
    1684:	93 95       	inc	r25
    1686:	f6 95       	lsr	r31
    1688:	87 95       	ror	r24
    168a:	77 95       	ror	r23
    168c:	67 95       	ror	r22
    168e:	b7 95       	ror	r27
    1690:	f1 11       	cpse	r31, r1
    1692:	f8 cf       	rjmp	.-16     	; 0x1684 <__floatsisf+0x1c>
    1694:	fa f4       	brpl	.+62     	; 0x16d4 <__floatsisf+0x6c>
    1696:	bb 0f       	add	r27, r27
    1698:	11 f4       	brne	.+4      	; 0x169e <__floatsisf+0x36>
    169a:	60 ff       	sbrs	r22, 0
    169c:	1b c0       	rjmp	.+54     	; 0x16d4 <__floatsisf+0x6c>
    169e:	6f 5f       	subi	r22, 0xFF	; 255
    16a0:	7f 4f       	sbci	r23, 0xFF	; 255
    16a2:	8f 4f       	sbci	r24, 0xFF	; 255
    16a4:	9f 4f       	sbci	r25, 0xFF	; 255
    16a6:	16 c0       	rjmp	.+44     	; 0x16d4 <__floatsisf+0x6c>
    16a8:	88 23       	and	r24, r24
    16aa:	11 f0       	breq	.+4      	; 0x16b0 <__floatsisf+0x48>
    16ac:	96 e9       	ldi	r25, 0x96	; 150
    16ae:	11 c0       	rjmp	.+34     	; 0x16d2 <__floatsisf+0x6a>
    16b0:	77 23       	and	r23, r23
    16b2:	21 f0       	breq	.+8      	; 0x16bc <__floatsisf+0x54>
    16b4:	9e e8       	ldi	r25, 0x8E	; 142
    16b6:	87 2f       	mov	r24, r23
    16b8:	76 2f       	mov	r23, r22
    16ba:	05 c0       	rjmp	.+10     	; 0x16c6 <__floatsisf+0x5e>
    16bc:	66 23       	and	r22, r22
    16be:	71 f0       	breq	.+28     	; 0x16dc <__floatsisf+0x74>
    16c0:	96 e8       	ldi	r25, 0x86	; 134
    16c2:	86 2f       	mov	r24, r22
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	2a f0       	brmi	.+10     	; 0x16d4 <__floatsisf+0x6c>
    16ca:	9a 95       	dec	r25
    16cc:	66 0f       	add	r22, r22
    16ce:	77 1f       	adc	r23, r23
    16d0:	88 1f       	adc	r24, r24
    16d2:	da f7       	brpl	.-10     	; 0x16ca <__floatsisf+0x62>
    16d4:	88 0f       	add	r24, r24
    16d6:	96 95       	lsr	r25
    16d8:	87 95       	ror	r24
    16da:	97 f9       	bld	r25, 7
    16dc:	08 95       	ret

000016de <fmin>:
    16de:	99 0f       	add	r25, r25
    16e0:	bb 0b       	sbc	r27, r27
    16e2:	55 0f       	add	r21, r21
    16e4:	aa 0b       	sbc	r26, r26
    16e6:	e0 e8       	ldi	r30, 0x80	; 128
    16e8:	fe ef       	ldi	r31, 0xFE	; 254
    16ea:	16 16       	cp	r1, r22
    16ec:	17 06       	cpc	r1, r23
    16ee:	e8 07       	cpc	r30, r24
    16f0:	f9 07       	cpc	r31, r25
    16f2:	70 f0       	brcs	.+28     	; 0x1710 <fmin+0x32>
    16f4:	12 16       	cp	r1, r18
    16f6:	13 06       	cpc	r1, r19
    16f8:	e4 07       	cpc	r30, r20
    16fa:	f5 07       	cpc	r31, r21
    16fc:	60 f0       	brcs	.+24     	; 0x1716 <fmin+0x38>
    16fe:	ba 17       	cp	r27, r26
    1700:	54 f0       	brlt	.+20     	; 0x1716 <fmin+0x38>
    1702:	31 f4       	brne	.+12     	; 0x1710 <fmin+0x32>
    1704:	26 17       	cp	r18, r22
    1706:	37 07       	cpc	r19, r23
    1708:	48 07       	cpc	r20, r24
    170a:	59 07       	cpc	r21, r25
    170c:	a7 95       	ror	r26
    170e:	1b f4       	brvc	.+6      	; 0x1716 <fmin+0x38>
    1710:	b9 01       	movw	r22, r18
    1712:	ca 01       	movw	r24, r20
    1714:	ba 2f       	mov	r27, r26
    1716:	b6 95       	lsr	r27
    1718:	97 95       	ror	r25
    171a:	08 95       	ret

0000171c <__fp_cmp>:
    171c:	99 0f       	add	r25, r25
    171e:	00 08       	sbc	r0, r0
    1720:	55 0f       	add	r21, r21
    1722:	aa 0b       	sbc	r26, r26
    1724:	e0 e8       	ldi	r30, 0x80	; 128
    1726:	fe ef       	ldi	r31, 0xFE	; 254
    1728:	16 16       	cp	r1, r22
    172a:	17 06       	cpc	r1, r23
    172c:	e8 07       	cpc	r30, r24
    172e:	f9 07       	cpc	r31, r25
    1730:	c0 f0       	brcs	.+48     	; 0x1762 <__fp_cmp+0x46>
    1732:	12 16       	cp	r1, r18
    1734:	13 06       	cpc	r1, r19
    1736:	e4 07       	cpc	r30, r20
    1738:	f5 07       	cpc	r31, r21
    173a:	98 f0       	brcs	.+38     	; 0x1762 <__fp_cmp+0x46>
    173c:	62 1b       	sub	r22, r18
    173e:	73 0b       	sbc	r23, r19
    1740:	84 0b       	sbc	r24, r20
    1742:	95 0b       	sbc	r25, r21
    1744:	39 f4       	brne	.+14     	; 0x1754 <__fp_cmp+0x38>
    1746:	0a 26       	eor	r0, r26
    1748:	61 f0       	breq	.+24     	; 0x1762 <__fp_cmp+0x46>
    174a:	23 2b       	or	r18, r19
    174c:	24 2b       	or	r18, r20
    174e:	25 2b       	or	r18, r21
    1750:	21 f4       	brne	.+8      	; 0x175a <__fp_cmp+0x3e>
    1752:	08 95       	ret
    1754:	0a 26       	eor	r0, r26
    1756:	09 f4       	brne	.+2      	; 0x175a <__fp_cmp+0x3e>
    1758:	a1 40       	sbci	r26, 0x01	; 1
    175a:	a6 95       	lsr	r26
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	81 1d       	adc	r24, r1
    1760:	81 1d       	adc	r24, r1
    1762:	08 95       	ret

00001764 <__fp_inf>:
    1764:	97 f9       	bld	r25, 7
    1766:	9f 67       	ori	r25, 0x7F	; 127
    1768:	80 e8       	ldi	r24, 0x80	; 128
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	08 95       	ret

00001770 <__fp_nan>:
    1770:	9f ef       	ldi	r25, 0xFF	; 255
    1772:	80 ec       	ldi	r24, 0xC0	; 192
    1774:	08 95       	ret

00001776 <__fp_powser>:
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	1f 93       	push	r17
    177c:	0f 93       	push	r16
    177e:	ff 92       	push	r15
    1780:	ef 92       	push	r14
    1782:	df 92       	push	r13
    1784:	7b 01       	movw	r14, r22
    1786:	8c 01       	movw	r16, r24
    1788:	68 94       	set
    178a:	06 c0       	rjmp	.+12     	; 0x1798 <__fp_powser+0x22>
    178c:	da 2e       	mov	r13, r26
    178e:	ef 01       	movw	r28, r30
    1790:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__mulsf3x>
    1794:	fe 01       	movw	r30, r28
    1796:	e8 94       	clt
    1798:	a5 91       	lpm	r26, Z+
    179a:	25 91       	lpm	r18, Z+
    179c:	35 91       	lpm	r19, Z+
    179e:	45 91       	lpm	r20, Z+
    17a0:	55 91       	lpm	r21, Z+
    17a2:	a6 f3       	brts	.-24     	; 0x178c <__fp_powser+0x16>
    17a4:	ef 01       	movw	r28, r30
    17a6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__addsf3x>
    17aa:	fe 01       	movw	r30, r28
    17ac:	97 01       	movw	r18, r14
    17ae:	a8 01       	movw	r20, r16
    17b0:	da 94       	dec	r13
    17b2:	69 f7       	brne	.-38     	; 0x178e <__fp_powser+0x18>
    17b4:	df 90       	pop	r13
    17b6:	ef 90       	pop	r14
    17b8:	ff 90       	pop	r15
    17ba:	0f 91       	pop	r16
    17bc:	1f 91       	pop	r17
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <__fp_pscA>:
    17c4:	00 24       	eor	r0, r0
    17c6:	0a 94       	dec	r0
    17c8:	16 16       	cp	r1, r22
    17ca:	17 06       	cpc	r1, r23
    17cc:	18 06       	cpc	r1, r24
    17ce:	09 06       	cpc	r0, r25
    17d0:	08 95       	ret

000017d2 <__fp_pscB>:
    17d2:	00 24       	eor	r0, r0
    17d4:	0a 94       	dec	r0
    17d6:	12 16       	cp	r1, r18
    17d8:	13 06       	cpc	r1, r19
    17da:	14 06       	cpc	r1, r20
    17dc:	05 06       	cpc	r0, r21
    17de:	08 95       	ret

000017e0 <__fp_round>:
    17e0:	09 2e       	mov	r0, r25
    17e2:	03 94       	inc	r0
    17e4:	00 0c       	add	r0, r0
    17e6:	11 f4       	brne	.+4      	; 0x17ec <__fp_round+0xc>
    17e8:	88 23       	and	r24, r24
    17ea:	52 f0       	brmi	.+20     	; 0x1800 <__fp_round+0x20>
    17ec:	bb 0f       	add	r27, r27
    17ee:	40 f4       	brcc	.+16     	; 0x1800 <__fp_round+0x20>
    17f0:	bf 2b       	or	r27, r31
    17f2:	11 f4       	brne	.+4      	; 0x17f8 <__fp_round+0x18>
    17f4:	60 ff       	sbrs	r22, 0
    17f6:	04 c0       	rjmp	.+8      	; 0x1800 <__fp_round+0x20>
    17f8:	6f 5f       	subi	r22, 0xFF	; 255
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	8f 4f       	sbci	r24, 0xFF	; 255
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	08 95       	ret

00001802 <__fp_split3>:
    1802:	57 fd       	sbrc	r21, 7
    1804:	90 58       	subi	r25, 0x80	; 128
    1806:	44 0f       	add	r20, r20
    1808:	55 1f       	adc	r21, r21
    180a:	59 f0       	breq	.+22     	; 0x1822 <__fp_splitA+0x10>
    180c:	5f 3f       	cpi	r21, 0xFF	; 255
    180e:	71 f0       	breq	.+28     	; 0x182c <__fp_splitA+0x1a>
    1810:	47 95       	ror	r20

00001812 <__fp_splitA>:
    1812:	88 0f       	add	r24, r24
    1814:	97 fb       	bst	r25, 7
    1816:	99 1f       	adc	r25, r25
    1818:	61 f0       	breq	.+24     	; 0x1832 <__fp_splitA+0x20>
    181a:	9f 3f       	cpi	r25, 0xFF	; 255
    181c:	79 f0       	breq	.+30     	; 0x183c <__fp_splitA+0x2a>
    181e:	87 95       	ror	r24
    1820:	08 95       	ret
    1822:	12 16       	cp	r1, r18
    1824:	13 06       	cpc	r1, r19
    1826:	14 06       	cpc	r1, r20
    1828:	55 1f       	adc	r21, r21
    182a:	f2 cf       	rjmp	.-28     	; 0x1810 <__fp_split3+0xe>
    182c:	46 95       	lsr	r20
    182e:	f1 df       	rcall	.-30     	; 0x1812 <__fp_splitA>
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <__fp_splitA+0x30>
    1832:	16 16       	cp	r1, r22
    1834:	17 06       	cpc	r1, r23
    1836:	18 06       	cpc	r1, r24
    1838:	99 1f       	adc	r25, r25
    183a:	f1 cf       	rjmp	.-30     	; 0x181e <__fp_splitA+0xc>
    183c:	86 95       	lsr	r24
    183e:	71 05       	cpc	r23, r1
    1840:	61 05       	cpc	r22, r1
    1842:	08 94       	sec
    1844:	08 95       	ret

00001846 <__fp_zero>:
    1846:	e8 94       	clt

00001848 <__fp_szero>:
    1848:	bb 27       	eor	r27, r27
    184a:	66 27       	eor	r22, r22
    184c:	77 27       	eor	r23, r23
    184e:	cb 01       	movw	r24, r22
    1850:	97 f9       	bld	r25, 7
    1852:	08 95       	ret

00001854 <__gesf2>:
    1854:	0e 94 8e 0b 	call	0x171c	; 0x171c <__fp_cmp>
    1858:	08 f4       	brcc	.+2      	; 0x185c <__gesf2+0x8>
    185a:	8f ef       	ldi	r24, 0xFF	; 255
    185c:	08 95       	ret

0000185e <inverse>:
    185e:	9b 01       	movw	r18, r22
    1860:	ac 01       	movw	r20, r24
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	80 e8       	ldi	r24, 0x80	; 128
    1868:	9f e3       	ldi	r25, 0x3F	; 63
    186a:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__divsf3>
    186e:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>
    1872:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__fp_mpack>

00001876 <ldexp>:
    1876:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fp_splitA>
    187a:	d8 f3       	brcs	.-10     	; 0x1872 <inverse+0x14>
    187c:	99 23       	and	r25, r25
    187e:	c9 f3       	breq	.-14     	; 0x1872 <inverse+0x14>
    1880:	94 0f       	add	r25, r20
    1882:	51 1d       	adc	r21, r1
    1884:	a3 f3       	brvs	.-24     	; 0x186e <inverse+0x10>
    1886:	91 50       	subi	r25, 0x01	; 1
    1888:	50 40       	sbci	r21, 0x00	; 0
    188a:	94 f0       	brlt	.+36     	; 0x18b0 <ldexp+0x3a>
    188c:	59 f0       	breq	.+22     	; 0x18a4 <ldexp+0x2e>
    188e:	88 23       	and	r24, r24
    1890:	32 f0       	brmi	.+12     	; 0x189e <ldexp+0x28>
    1892:	66 0f       	add	r22, r22
    1894:	77 1f       	adc	r23, r23
    1896:	88 1f       	adc	r24, r24
    1898:	91 50       	subi	r25, 0x01	; 1
    189a:	50 40       	sbci	r21, 0x00	; 0
    189c:	c1 f7       	brne	.-16     	; 0x188e <ldexp+0x18>
    189e:	9e 3f       	cpi	r25, 0xFE	; 254
    18a0:	51 05       	cpc	r21, r1
    18a2:	2c f7       	brge	.-54     	; 0x186e <inverse+0x10>
    18a4:	88 0f       	add	r24, r24
    18a6:	91 1d       	adc	r25, r1
    18a8:	96 95       	lsr	r25
    18aa:	87 95       	ror	r24
    18ac:	97 f9       	bld	r25, 7
    18ae:	08 95       	ret
    18b0:	5f 3f       	cpi	r21, 0xFF	; 255
    18b2:	ac f0       	brlt	.+42     	; 0x18de <ldexp+0x68>
    18b4:	98 3e       	cpi	r25, 0xE8	; 232
    18b6:	9c f0       	brlt	.+38     	; 0x18de <ldexp+0x68>
    18b8:	bb 27       	eor	r27, r27
    18ba:	86 95       	lsr	r24
    18bc:	77 95       	ror	r23
    18be:	67 95       	ror	r22
    18c0:	b7 95       	ror	r27
    18c2:	08 f4       	brcc	.+2      	; 0x18c6 <ldexp+0x50>
    18c4:	b1 60       	ori	r27, 0x01	; 1
    18c6:	93 95       	inc	r25
    18c8:	c1 f7       	brne	.-16     	; 0x18ba <ldexp+0x44>
    18ca:	bb 0f       	add	r27, r27
    18cc:	58 f7       	brcc	.-42     	; 0x18a4 <ldexp+0x2e>
    18ce:	11 f4       	brne	.+4      	; 0x18d4 <ldexp+0x5e>
    18d0:	60 ff       	sbrs	r22, 0
    18d2:	e8 cf       	rjmp	.-48     	; 0x18a4 <ldexp+0x2e>
    18d4:	6f 5f       	subi	r22, 0xFF	; 255
    18d6:	7f 4f       	sbci	r23, 0xFF	; 255
    18d8:	8f 4f       	sbci	r24, 0xFF	; 255
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
    18dc:	e3 cf       	rjmp	.-58     	; 0x18a4 <ldexp+0x2e>
    18de:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__fp_szero>

000018e2 <modf>:
    18e2:	fa 01       	movw	r30, r20
    18e4:	dc 01       	movw	r26, r24
    18e6:	aa 0f       	add	r26, r26
    18e8:	bb 1f       	adc	r27, r27
    18ea:	9b 01       	movw	r18, r22
    18ec:	ac 01       	movw	r20, r24
    18ee:	bf 57       	subi	r27, 0x7F	; 127
    18f0:	28 f4       	brcc	.+10     	; 0x18fc <modf+0x1a>
    18f2:	22 27       	eor	r18, r18
    18f4:	33 27       	eor	r19, r19
    18f6:	44 27       	eor	r20, r20
    18f8:	50 78       	andi	r21, 0x80	; 128
    18fa:	20 c0       	rjmp	.+64     	; 0x193c <modf+0x5a>
    18fc:	b7 51       	subi	r27, 0x17	; 23
    18fe:	90 f4       	brcc	.+36     	; 0x1924 <modf+0x42>
    1900:	ab 2f       	mov	r26, r27
    1902:	00 24       	eor	r0, r0
    1904:	46 95       	lsr	r20
    1906:	37 95       	ror	r19
    1908:	27 95       	ror	r18
    190a:	01 1c       	adc	r0, r1
    190c:	a3 95       	inc	r26
    190e:	d2 f3       	brmi	.-12     	; 0x1904 <modf+0x22>
    1910:	00 20       	and	r0, r0
    1912:	71 f0       	breq	.+28     	; 0x1930 <modf+0x4e>
    1914:	22 0f       	add	r18, r18
    1916:	33 1f       	adc	r19, r19
    1918:	44 1f       	adc	r20, r20
    191a:	b3 95       	inc	r27
    191c:	da f3       	brmi	.-10     	; 0x1914 <modf+0x32>
    191e:	0e d0       	rcall	.+28     	; 0x193c <modf+0x5a>
    1920:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__subsf3>
    1924:	61 30       	cpi	r22, 0x01	; 1
    1926:	71 05       	cpc	r23, r1
    1928:	a0 e8       	ldi	r26, 0x80	; 128
    192a:	8a 07       	cpc	r24, r26
    192c:	b9 46       	sbci	r27, 0x69	; 105
    192e:	30 f4       	brcc	.+12     	; 0x193c <modf+0x5a>
    1930:	9b 01       	movw	r18, r22
    1932:	ac 01       	movw	r20, r24
    1934:	66 27       	eor	r22, r22
    1936:	77 27       	eor	r23, r23
    1938:	88 27       	eor	r24, r24
    193a:	90 78       	andi	r25, 0x80	; 128
    193c:	30 96       	adiw	r30, 0x00	; 0
    193e:	21 f0       	breq	.+8      	; 0x1948 <modf+0x66>
    1940:	20 83       	st	Z, r18
    1942:	31 83       	std	Z+1, r19	; 0x01
    1944:	42 83       	std	Z+2, r20	; 0x02
    1946:	53 83       	std	Z+3, r21	; 0x03
    1948:	08 95       	ret

0000194a <__mulsf3>:
    194a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__mulsf3x>
    194e:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__fp_round>
    1952:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__fp_pscA>
    1956:	38 f0       	brcs	.+14     	; 0x1966 <__mulsf3+0x1c>
    1958:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__fp_pscB>
    195c:	20 f0       	brcs	.+8      	; 0x1966 <__mulsf3+0x1c>
    195e:	95 23       	and	r25, r21
    1960:	11 f0       	breq	.+4      	; 0x1966 <__mulsf3+0x1c>
    1962:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>
    1966:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_nan>
    196a:	11 24       	eor	r1, r1
    196c:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__fp_szero>

00001970 <__mulsf3x>:
    1970:	0e 94 01 0c 	call	0x1802	; 0x1802 <__fp_split3>
    1974:	70 f3       	brcs	.-36     	; 0x1952 <__mulsf3+0x8>

00001976 <__mulsf3_pse>:
    1976:	95 9f       	mul	r25, r21
    1978:	c1 f3       	breq	.-16     	; 0x196a <__mulsf3+0x20>
    197a:	95 0f       	add	r25, r21
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	55 1f       	adc	r21, r21
    1980:	62 9f       	mul	r22, r18
    1982:	f0 01       	movw	r30, r0
    1984:	72 9f       	mul	r23, r18
    1986:	bb 27       	eor	r27, r27
    1988:	f0 0d       	add	r31, r0
    198a:	b1 1d       	adc	r27, r1
    198c:	63 9f       	mul	r22, r19
    198e:	aa 27       	eor	r26, r26
    1990:	f0 0d       	add	r31, r0
    1992:	b1 1d       	adc	r27, r1
    1994:	aa 1f       	adc	r26, r26
    1996:	64 9f       	mul	r22, r20
    1998:	66 27       	eor	r22, r22
    199a:	b0 0d       	add	r27, r0
    199c:	a1 1d       	adc	r26, r1
    199e:	66 1f       	adc	r22, r22
    19a0:	82 9f       	mul	r24, r18
    19a2:	22 27       	eor	r18, r18
    19a4:	b0 0d       	add	r27, r0
    19a6:	a1 1d       	adc	r26, r1
    19a8:	62 1f       	adc	r22, r18
    19aa:	73 9f       	mul	r23, r19
    19ac:	b0 0d       	add	r27, r0
    19ae:	a1 1d       	adc	r26, r1
    19b0:	62 1f       	adc	r22, r18
    19b2:	83 9f       	mul	r24, r19
    19b4:	a0 0d       	add	r26, r0
    19b6:	61 1d       	adc	r22, r1
    19b8:	22 1f       	adc	r18, r18
    19ba:	74 9f       	mul	r23, r20
    19bc:	33 27       	eor	r19, r19
    19be:	a0 0d       	add	r26, r0
    19c0:	61 1d       	adc	r22, r1
    19c2:	23 1f       	adc	r18, r19
    19c4:	84 9f       	mul	r24, r20
    19c6:	60 0d       	add	r22, r0
    19c8:	21 1d       	adc	r18, r1
    19ca:	82 2f       	mov	r24, r18
    19cc:	76 2f       	mov	r23, r22
    19ce:	6a 2f       	mov	r22, r26
    19d0:	11 24       	eor	r1, r1
    19d2:	9f 57       	subi	r25, 0x7F	; 127
    19d4:	50 40       	sbci	r21, 0x00	; 0
    19d6:	9a f0       	brmi	.+38     	; 0x19fe <__mulsf3_pse+0x88>
    19d8:	f1 f0       	breq	.+60     	; 0x1a16 <__mulsf3_pse+0xa0>
    19da:	88 23       	and	r24, r24
    19dc:	4a f0       	brmi	.+18     	; 0x19f0 <__mulsf3_pse+0x7a>
    19de:	ee 0f       	add	r30, r30
    19e0:	ff 1f       	adc	r31, r31
    19e2:	bb 1f       	adc	r27, r27
    19e4:	66 1f       	adc	r22, r22
    19e6:	77 1f       	adc	r23, r23
    19e8:	88 1f       	adc	r24, r24
    19ea:	91 50       	subi	r25, 0x01	; 1
    19ec:	50 40       	sbci	r21, 0x00	; 0
    19ee:	a9 f7       	brne	.-22     	; 0x19da <__mulsf3_pse+0x64>
    19f0:	9e 3f       	cpi	r25, 0xFE	; 254
    19f2:	51 05       	cpc	r21, r1
    19f4:	80 f0       	brcs	.+32     	; 0x1a16 <__mulsf3_pse+0xa0>
    19f6:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__fp_inf>
    19fa:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__fp_szero>
    19fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1a00:	e4 f3       	brlt	.-8      	; 0x19fa <__mulsf3_pse+0x84>
    1a02:	98 3e       	cpi	r25, 0xE8	; 232
    1a04:	d4 f3       	brlt	.-12     	; 0x19fa <__mulsf3_pse+0x84>
    1a06:	86 95       	lsr	r24
    1a08:	77 95       	ror	r23
    1a0a:	67 95       	ror	r22
    1a0c:	b7 95       	ror	r27
    1a0e:	f7 95       	ror	r31
    1a10:	e7 95       	ror	r30
    1a12:	9f 5f       	subi	r25, 0xFF	; 255
    1a14:	c1 f7       	brne	.-16     	; 0x1a06 <__mulsf3_pse+0x90>
    1a16:	fe 2b       	or	r31, r30
    1a18:	88 0f       	add	r24, r24
    1a1a:	91 1d       	adc	r25, r1
    1a1c:	96 95       	lsr	r25
    1a1e:	87 95       	ror	r24
    1a20:	97 f9       	bld	r25, 7
    1a22:	08 95       	ret

00001a24 <sin>:
    1a24:	9f 93       	push	r25
    1a26:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fp_rempio2>
    1a2a:	0f 90       	pop	r0
    1a2c:	07 fc       	sbrc	r0, 7
    1a2e:	ee 5f       	subi	r30, 0xFE	; 254
    1a30:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__fp_sinus>

00001a34 <__fp_mpack>:
    1a34:	9f 3f       	cpi	r25, 0xFF	; 255
    1a36:	31 f0       	breq	.+12     	; 0x1a44 <__fp_mpack_finite+0xc>

00001a38 <__fp_mpack_finite>:
    1a38:	91 50       	subi	r25, 0x01	; 1
    1a3a:	20 f4       	brcc	.+8      	; 0x1a44 <__fp_mpack_finite+0xc>
    1a3c:	87 95       	ror	r24
    1a3e:	77 95       	ror	r23
    1a40:	67 95       	ror	r22
    1a42:	b7 95       	ror	r27
    1a44:	88 0f       	add	r24, r24
    1a46:	91 1d       	adc	r25, r1
    1a48:	96 95       	lsr	r25
    1a4a:	87 95       	ror	r24
    1a4c:	97 f9       	bld	r25, 7
    1a4e:	08 95       	ret
    1a50:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_nan>

00001a54 <__fp_rempio2>:
    1a54:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fp_splitA>
    1a58:	d8 f3       	brcs	.-10     	; 0x1a50 <__fp_mpack_finite+0x18>
    1a5a:	e8 94       	clt
    1a5c:	e0 e0       	ldi	r30, 0x00	; 0
    1a5e:	bb 27       	eor	r27, r27
    1a60:	9f 57       	subi	r25, 0x7F	; 127
    1a62:	f0 f0       	brcs	.+60     	; 0x1aa0 <__fp_rempio2+0x4c>
    1a64:	2a ed       	ldi	r18, 0xDA	; 218
    1a66:	3f e0       	ldi	r19, 0x0F	; 15
    1a68:	49 ec       	ldi	r20, 0xC9	; 201
    1a6a:	06 c0       	rjmp	.+12     	; 0x1a78 <__fp_rempio2+0x24>
    1a6c:	ee 0f       	add	r30, r30
    1a6e:	bb 0f       	add	r27, r27
    1a70:	66 1f       	adc	r22, r22
    1a72:	77 1f       	adc	r23, r23
    1a74:	88 1f       	adc	r24, r24
    1a76:	28 f0       	brcs	.+10     	; 0x1a82 <__fp_rempio2+0x2e>
    1a78:	b2 3a       	cpi	r27, 0xA2	; 162
    1a7a:	62 07       	cpc	r22, r18
    1a7c:	73 07       	cpc	r23, r19
    1a7e:	84 07       	cpc	r24, r20
    1a80:	28 f0       	brcs	.+10     	; 0x1a8c <__fp_rempio2+0x38>
    1a82:	b2 5a       	subi	r27, 0xA2	; 162
    1a84:	62 0b       	sbc	r22, r18
    1a86:	73 0b       	sbc	r23, r19
    1a88:	84 0b       	sbc	r24, r20
    1a8a:	e3 95       	inc	r30
    1a8c:	9a 95       	dec	r25
    1a8e:	72 f7       	brpl	.-36     	; 0x1a6c <__fp_rempio2+0x18>
    1a90:	80 38       	cpi	r24, 0x80	; 128
    1a92:	30 f4       	brcc	.+12     	; 0x1aa0 <__fp_rempio2+0x4c>
    1a94:	9a 95       	dec	r25
    1a96:	bb 0f       	add	r27, r27
    1a98:	66 1f       	adc	r22, r22
    1a9a:	77 1f       	adc	r23, r23
    1a9c:	88 1f       	adc	r24, r24
    1a9e:	d2 f7       	brpl	.-12     	; 0x1a94 <__fp_rempio2+0x40>
    1aa0:	90 48       	sbci	r25, 0x80	; 128
    1aa2:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__fp_mpack_finite>

00001aa6 <__fp_sinus>:
    1aa6:	ef 93       	push	r30
    1aa8:	e0 ff       	sbrs	r30, 0
    1aaa:	07 c0       	rjmp	.+14     	; 0x1aba <__fp_sinus+0x14>
    1aac:	a2 ea       	ldi	r26, 0xA2	; 162
    1aae:	2a ed       	ldi	r18, 0xDA	; 218
    1ab0:	3f e0       	ldi	r19, 0x0F	; 15
    1ab2:	49 ec       	ldi	r20, 0xC9	; 201
    1ab4:	5f eb       	ldi	r21, 0xBF	; 191
    1ab6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__addsf3x>
    1aba:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__fp_round>
    1abe:	0f 90       	pop	r0
    1ac0:	03 94       	inc	r0
    1ac2:	01 fc       	sbrc	r0, 1
    1ac4:	90 58       	subi	r25, 0x80	; 128
    1ac6:	e4 ea       	ldi	r30, 0xA4	; 164
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__fp_powsodd>

00001ace <__fp_powsodd>:
    1ace:	9f 93       	push	r25
    1ad0:	8f 93       	push	r24
    1ad2:	7f 93       	push	r23
    1ad4:	6f 93       	push	r22
    1ad6:	ff 93       	push	r31
    1ad8:	ef 93       	push	r30
    1ada:	9b 01       	movw	r18, r22
    1adc:	ac 01       	movw	r20, r24
    1ade:	0e 94 a5 0c 	call	0x194a	; 0x194a <__mulsf3>
    1ae2:	ef 91       	pop	r30
    1ae4:	ff 91       	pop	r31
    1ae6:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fp_powser>
    1aea:	2f 91       	pop	r18
    1aec:	3f 91       	pop	r19
    1aee:	4f 91       	pop	r20
    1af0:	5f 91       	pop	r21
    1af2:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__mulsf3>

00001af6 <__udivmodsi4>:
    1af6:	a1 e2       	ldi	r26, 0x21	; 33
    1af8:	1a 2e       	mov	r1, r26
    1afa:	aa 1b       	sub	r26, r26
    1afc:	bb 1b       	sub	r27, r27
    1afe:	fd 01       	movw	r30, r26
    1b00:	0d c0       	rjmp	.+26     	; 0x1b1c <__udivmodsi4_ep>

00001b02 <__udivmodsi4_loop>:
    1b02:	aa 1f       	adc	r26, r26
    1b04:	bb 1f       	adc	r27, r27
    1b06:	ee 1f       	adc	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	a2 17       	cp	r26, r18
    1b0c:	b3 07       	cpc	r27, r19
    1b0e:	e4 07       	cpc	r30, r20
    1b10:	f5 07       	cpc	r31, r21
    1b12:	20 f0       	brcs	.+8      	; 0x1b1c <__udivmodsi4_ep>
    1b14:	a2 1b       	sub	r26, r18
    1b16:	b3 0b       	sbc	r27, r19
    1b18:	e4 0b       	sbc	r30, r20
    1b1a:	f5 0b       	sbc	r31, r21

00001b1c <__udivmodsi4_ep>:
    1b1c:	66 1f       	adc	r22, r22
    1b1e:	77 1f       	adc	r23, r23
    1b20:	88 1f       	adc	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	1a 94       	dec	r1
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <__udivmodsi4_loop>
    1b28:	60 95       	com	r22
    1b2a:	70 95       	com	r23
    1b2c:	80 95       	com	r24
    1b2e:	90 95       	com	r25
    1b30:	9b 01       	movw	r18, r22
    1b32:	ac 01       	movw	r20, r24
    1b34:	bd 01       	movw	r22, r26
    1b36:	cf 01       	movw	r24, r30
    1b38:	08 95       	ret

00001b3a <dtostrf>:
    1b3a:	ef 92       	push	r14
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	e8 01       	movw	r28, r16
    1b46:	47 fd       	sbrc	r20, 7
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <dtostrf+0x14>
    1b4a:	34 e0       	ldi	r19, 0x04	; 4
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <dtostrf+0x16>
    1b4e:	34 e1       	ldi	r19, 0x14	; 20
    1b50:	04 2e       	mov	r0, r20
    1b52:	00 0c       	add	r0, r0
    1b54:	55 0b       	sbc	r21, r21
    1b56:	57 ff       	sbrs	r21, 7
    1b58:	03 c0       	rjmp	.+6      	; 0x1b60 <dtostrf+0x26>
    1b5a:	51 95       	neg	r21
    1b5c:	41 95       	neg	r20
    1b5e:	51 09       	sbc	r21, r1
    1b60:	e3 2e       	mov	r14, r19
    1b62:	02 2f       	mov	r16, r18
    1b64:	24 2f       	mov	r18, r20
    1b66:	ae 01       	movw	r20, r28
    1b68:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <dtoa_prf>
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	ef 90       	pop	r14
    1b78:	08 95       	ret

00001b7a <printf>:
    1b7a:	a0 e0       	ldi	r26, 0x00	; 0
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e3 ec       	ldi	r30, 0xC3	; 195
    1b80:	fd e0       	ldi	r31, 0x0D	; 13
    1b82:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__prologue_saves__+0x20>
    1b86:	ae 01       	movw	r20, r28
    1b88:	4b 5f       	subi	r20, 0xFB	; 251
    1b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8c:	fa 01       	movw	r30, r20
    1b8e:	61 91       	ld	r22, Z+
    1b90:	71 91       	ld	r23, Z+
    1b92:	af 01       	movw	r20, r30
    1b94:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <__iob+0x2>
    1b98:	90 91 6d 38 	lds	r25, 0x386D	; 0x80386d <__iob+0x3>
    1b9c:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <vfprintf>
    1ba0:	e2 e0       	ldi	r30, 0x02	; 2
    1ba2:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__epilogue_restores__+0x20>

00001ba6 <puts>:
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	e0 91 6c 38 	lds	r30, 0x386C	; 0x80386c <__iob+0x2>
    1bb2:	f0 91 6d 38 	lds	r31, 0x386D	; 0x80386d <__iob+0x3>
    1bb6:	23 81       	ldd	r18, Z+3	; 0x03
    1bb8:	21 ff       	sbrs	r18, 1
    1bba:	1b c0       	rjmp	.+54     	; 0x1bf2 <puts+0x4c>
    1bbc:	8c 01       	movw	r16, r24
    1bbe:	d0 e0       	ldi	r29, 0x00	; 0
    1bc0:	c0 e0       	ldi	r28, 0x00	; 0
    1bc2:	f8 01       	movw	r30, r16
    1bc4:	81 91       	ld	r24, Z+
    1bc6:	8f 01       	movw	r16, r30
    1bc8:	60 91 6c 38 	lds	r22, 0x386C	; 0x80386c <__iob+0x2>
    1bcc:	70 91 6d 38 	lds	r23, 0x386D	; 0x80386d <__iob+0x3>
    1bd0:	db 01       	movw	r26, r22
    1bd2:	18 96       	adiw	r26, 0x08	; 8
    1bd4:	ed 91       	ld	r30, X+
    1bd6:	fc 91       	ld	r31, X
    1bd8:	19 97       	sbiw	r26, 0x09	; 9
    1bda:	88 23       	and	r24, r24
    1bdc:	31 f0       	breq	.+12     	; 0x1bea <puts+0x44>
    1bde:	09 95       	icall
    1be0:	89 2b       	or	r24, r25
    1be2:	79 f3       	breq	.-34     	; 0x1bc2 <puts+0x1c>
    1be4:	df ef       	ldi	r29, 0xFF	; 255
    1be6:	cf ef       	ldi	r28, 0xFF	; 255
    1be8:	ec cf       	rjmp	.-40     	; 0x1bc2 <puts+0x1c>
    1bea:	8a e0       	ldi	r24, 0x0A	; 10
    1bec:	09 95       	icall
    1bee:	89 2b       	or	r24, r25
    1bf0:	19 f0       	breq	.+6      	; 0x1bf8 <puts+0x52>
    1bf2:	8f ef       	ldi	r24, 0xFF	; 255
    1bf4:	9f ef       	ldi	r25, 0xFF	; 255
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <puts+0x56>
    1bf8:	8d 2f       	mov	r24, r29
    1bfa:	9c 2f       	mov	r25, r28
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	1f 91       	pop	r17
    1c02:	0f 91       	pop	r16
    1c04:	08 95       	ret

00001c06 <vfprintf>:
    1c06:	ab e0       	ldi	r26, 0x0B	; 11
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e9 e0       	ldi	r30, 0x09	; 9
    1c0c:	fe e0       	ldi	r31, 0x0E	; 14
    1c0e:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__prologue_saves__>
    1c12:	6c 01       	movw	r12, r24
    1c14:	7b 01       	movw	r14, r22
    1c16:	8a 01       	movw	r16, r20
    1c18:	fc 01       	movw	r30, r24
    1c1a:	16 82       	std	Z+6, r1	; 0x06
    1c1c:	17 82       	std	Z+7, r1	; 0x07
    1c1e:	83 81       	ldd	r24, Z+3	; 0x03
    1c20:	81 ff       	sbrs	r24, 1
    1c22:	cc c1       	rjmp	.+920    	; 0x1fbc <vfprintf+0x3b6>
    1c24:	ce 01       	movw	r24, r28
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	3c 01       	movw	r6, r24
    1c2a:	f6 01       	movw	r30, r12
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	f7 01       	movw	r30, r14
    1c30:	93 fd       	sbrc	r25, 3
    1c32:	85 91       	lpm	r24, Z+
    1c34:	93 ff       	sbrs	r25, 3
    1c36:	81 91       	ld	r24, Z+
    1c38:	7f 01       	movw	r14, r30
    1c3a:	88 23       	and	r24, r24
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <vfprintf+0x3a>
    1c3e:	ba c1       	rjmp	.+884    	; 0x1fb4 <vfprintf+0x3ae>
    1c40:	85 32       	cpi	r24, 0x25	; 37
    1c42:	39 f4       	brne	.+14     	; 0x1c52 <vfprintf+0x4c>
    1c44:	93 fd       	sbrc	r25, 3
    1c46:	85 91       	lpm	r24, Z+
    1c48:	93 ff       	sbrs	r25, 3
    1c4a:	81 91       	ld	r24, Z+
    1c4c:	7f 01       	movw	r14, r30
    1c4e:	85 32       	cpi	r24, 0x25	; 37
    1c50:	29 f4       	brne	.+10     	; 0x1c5c <vfprintf+0x56>
    1c52:	b6 01       	movw	r22, r12
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	0e 94 2c 12 	call	0x2458	; 0x2458 <fputc>
    1c5a:	e7 cf       	rjmp	.-50     	; 0x1c2a <vfprintf+0x24>
    1c5c:	91 2c       	mov	r9, r1
    1c5e:	21 2c       	mov	r2, r1
    1c60:	31 2c       	mov	r3, r1
    1c62:	ff e1       	ldi	r31, 0x1F	; 31
    1c64:	f3 15       	cp	r31, r3
    1c66:	d8 f0       	brcs	.+54     	; 0x1c9e <vfprintf+0x98>
    1c68:	8b 32       	cpi	r24, 0x2B	; 43
    1c6a:	79 f0       	breq	.+30     	; 0x1c8a <vfprintf+0x84>
    1c6c:	38 f4       	brcc	.+14     	; 0x1c7c <vfprintf+0x76>
    1c6e:	80 32       	cpi	r24, 0x20	; 32
    1c70:	79 f0       	breq	.+30     	; 0x1c90 <vfprintf+0x8a>
    1c72:	83 32       	cpi	r24, 0x23	; 35
    1c74:	a1 f4       	brne	.+40     	; 0x1c9e <vfprintf+0x98>
    1c76:	23 2d       	mov	r18, r3
    1c78:	20 61       	ori	r18, 0x10	; 16
    1c7a:	1d c0       	rjmp	.+58     	; 0x1cb6 <vfprintf+0xb0>
    1c7c:	8d 32       	cpi	r24, 0x2D	; 45
    1c7e:	61 f0       	breq	.+24     	; 0x1c98 <vfprintf+0x92>
    1c80:	80 33       	cpi	r24, 0x30	; 48
    1c82:	69 f4       	brne	.+26     	; 0x1c9e <vfprintf+0x98>
    1c84:	23 2d       	mov	r18, r3
    1c86:	21 60       	ori	r18, 0x01	; 1
    1c88:	16 c0       	rjmp	.+44     	; 0x1cb6 <vfprintf+0xb0>
    1c8a:	83 2d       	mov	r24, r3
    1c8c:	82 60       	ori	r24, 0x02	; 2
    1c8e:	38 2e       	mov	r3, r24
    1c90:	e3 2d       	mov	r30, r3
    1c92:	e4 60       	ori	r30, 0x04	; 4
    1c94:	3e 2e       	mov	r3, r30
    1c96:	2a c0       	rjmp	.+84     	; 0x1cec <vfprintf+0xe6>
    1c98:	f3 2d       	mov	r31, r3
    1c9a:	f8 60       	ori	r31, 0x08	; 8
    1c9c:	1d c0       	rjmp	.+58     	; 0x1cd8 <vfprintf+0xd2>
    1c9e:	37 fc       	sbrc	r3, 7
    1ca0:	2d c0       	rjmp	.+90     	; 0x1cfc <vfprintf+0xf6>
    1ca2:	20 ed       	ldi	r18, 0xD0	; 208
    1ca4:	28 0f       	add	r18, r24
    1ca6:	2a 30       	cpi	r18, 0x0A	; 10
    1ca8:	40 f0       	brcs	.+16     	; 0x1cba <vfprintf+0xb4>
    1caa:	8e 32       	cpi	r24, 0x2E	; 46
    1cac:	b9 f4       	brne	.+46     	; 0x1cdc <vfprintf+0xd6>
    1cae:	36 fc       	sbrc	r3, 6
    1cb0:	81 c1       	rjmp	.+770    	; 0x1fb4 <vfprintf+0x3ae>
    1cb2:	23 2d       	mov	r18, r3
    1cb4:	20 64       	ori	r18, 0x40	; 64
    1cb6:	32 2e       	mov	r3, r18
    1cb8:	19 c0       	rjmp	.+50     	; 0x1cec <vfprintf+0xe6>
    1cba:	36 fe       	sbrs	r3, 6
    1cbc:	06 c0       	rjmp	.+12     	; 0x1cca <vfprintf+0xc4>
    1cbe:	8a e0       	ldi	r24, 0x0A	; 10
    1cc0:	98 9e       	mul	r9, r24
    1cc2:	20 0d       	add	r18, r0
    1cc4:	11 24       	eor	r1, r1
    1cc6:	92 2e       	mov	r9, r18
    1cc8:	11 c0       	rjmp	.+34     	; 0x1cec <vfprintf+0xe6>
    1cca:	ea e0       	ldi	r30, 0x0A	; 10
    1ccc:	2e 9e       	mul	r2, r30
    1cce:	20 0d       	add	r18, r0
    1cd0:	11 24       	eor	r1, r1
    1cd2:	22 2e       	mov	r2, r18
    1cd4:	f3 2d       	mov	r31, r3
    1cd6:	f0 62       	ori	r31, 0x20	; 32
    1cd8:	3f 2e       	mov	r3, r31
    1cda:	08 c0       	rjmp	.+16     	; 0x1cec <vfprintf+0xe6>
    1cdc:	8c 36       	cpi	r24, 0x6C	; 108
    1cde:	21 f4       	brne	.+8      	; 0x1ce8 <vfprintf+0xe2>
    1ce0:	83 2d       	mov	r24, r3
    1ce2:	80 68       	ori	r24, 0x80	; 128
    1ce4:	38 2e       	mov	r3, r24
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <vfprintf+0xe6>
    1ce8:	88 36       	cpi	r24, 0x68	; 104
    1cea:	41 f4       	brne	.+16     	; 0x1cfc <vfprintf+0xf6>
    1cec:	f7 01       	movw	r30, r14
    1cee:	93 fd       	sbrc	r25, 3
    1cf0:	85 91       	lpm	r24, Z+
    1cf2:	93 ff       	sbrs	r25, 3
    1cf4:	81 91       	ld	r24, Z+
    1cf6:	7f 01       	movw	r14, r30
    1cf8:	81 11       	cpse	r24, r1
    1cfa:	b3 cf       	rjmp	.-154    	; 0x1c62 <vfprintf+0x5c>
    1cfc:	98 2f       	mov	r25, r24
    1cfe:	9f 7d       	andi	r25, 0xDF	; 223
    1d00:	95 54       	subi	r25, 0x45	; 69
    1d02:	93 30       	cpi	r25, 0x03	; 3
    1d04:	28 f4       	brcc	.+10     	; 0x1d10 <vfprintf+0x10a>
    1d06:	0c 5f       	subi	r16, 0xFC	; 252
    1d08:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0a:	9f e3       	ldi	r25, 0x3F	; 63
    1d0c:	99 83       	std	Y+1, r25	; 0x01
    1d0e:	0d c0       	rjmp	.+26     	; 0x1d2a <vfprintf+0x124>
    1d10:	83 36       	cpi	r24, 0x63	; 99
    1d12:	31 f0       	breq	.+12     	; 0x1d20 <vfprintf+0x11a>
    1d14:	83 37       	cpi	r24, 0x73	; 115
    1d16:	71 f0       	breq	.+28     	; 0x1d34 <vfprintf+0x12e>
    1d18:	83 35       	cpi	r24, 0x53	; 83
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <vfprintf+0x118>
    1d1c:	59 c0       	rjmp	.+178    	; 0x1dd0 <vfprintf+0x1ca>
    1d1e:	21 c0       	rjmp	.+66     	; 0x1d62 <vfprintf+0x15c>
    1d20:	f8 01       	movw	r30, r16
    1d22:	80 81       	ld	r24, Z
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	0e 5f       	subi	r16, 0xFE	; 254
    1d28:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2a:	88 24       	eor	r8, r8
    1d2c:	83 94       	inc	r8
    1d2e:	91 2c       	mov	r9, r1
    1d30:	53 01       	movw	r10, r6
    1d32:	13 c0       	rjmp	.+38     	; 0x1d5a <vfprintf+0x154>
    1d34:	28 01       	movw	r4, r16
    1d36:	f2 e0       	ldi	r31, 0x02	; 2
    1d38:	4f 0e       	add	r4, r31
    1d3a:	51 1c       	adc	r5, r1
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	a0 80       	ld	r10, Z
    1d40:	b1 80       	ldd	r11, Z+1	; 0x01
    1d42:	36 fe       	sbrs	r3, 6
    1d44:	03 c0       	rjmp	.+6      	; 0x1d4c <vfprintf+0x146>
    1d46:	69 2d       	mov	r22, r9
    1d48:	70 e0       	ldi	r23, 0x00	; 0
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <vfprintf+0x14a>
    1d4c:	6f ef       	ldi	r22, 0xFF	; 255
    1d4e:	7f ef       	ldi	r23, 0xFF	; 255
    1d50:	c5 01       	movw	r24, r10
    1d52:	0e 94 21 12 	call	0x2442	; 0x2442 <strnlen>
    1d56:	4c 01       	movw	r8, r24
    1d58:	82 01       	movw	r16, r4
    1d5a:	f3 2d       	mov	r31, r3
    1d5c:	ff 77       	andi	r31, 0x7F	; 127
    1d5e:	3f 2e       	mov	r3, r31
    1d60:	16 c0       	rjmp	.+44     	; 0x1d8e <vfprintf+0x188>
    1d62:	28 01       	movw	r4, r16
    1d64:	22 e0       	ldi	r18, 0x02	; 2
    1d66:	42 0e       	add	r4, r18
    1d68:	51 1c       	adc	r5, r1
    1d6a:	f8 01       	movw	r30, r16
    1d6c:	a0 80       	ld	r10, Z
    1d6e:	b1 80       	ldd	r11, Z+1	; 0x01
    1d70:	36 fe       	sbrs	r3, 6
    1d72:	03 c0       	rjmp	.+6      	; 0x1d7a <vfprintf+0x174>
    1d74:	69 2d       	mov	r22, r9
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <vfprintf+0x178>
    1d7a:	6f ef       	ldi	r22, 0xFF	; 255
    1d7c:	7f ef       	ldi	r23, 0xFF	; 255
    1d7e:	c5 01       	movw	r24, r10
    1d80:	0e 94 16 12 	call	0x242c	; 0x242c <strnlen_P>
    1d84:	4c 01       	movw	r8, r24
    1d86:	f3 2d       	mov	r31, r3
    1d88:	f0 68       	ori	r31, 0x80	; 128
    1d8a:	3f 2e       	mov	r3, r31
    1d8c:	82 01       	movw	r16, r4
    1d8e:	33 fc       	sbrc	r3, 3
    1d90:	1b c0       	rjmp	.+54     	; 0x1dc8 <vfprintf+0x1c2>
    1d92:	82 2d       	mov	r24, r2
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	88 16       	cp	r8, r24
    1d98:	99 06       	cpc	r9, r25
    1d9a:	b0 f4       	brcc	.+44     	; 0x1dc8 <vfprintf+0x1c2>
    1d9c:	b6 01       	movw	r22, r12
    1d9e:	80 e2       	ldi	r24, 0x20	; 32
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	0e 94 2c 12 	call	0x2458	; 0x2458 <fputc>
    1da6:	2a 94       	dec	r2
    1da8:	f4 cf       	rjmp	.-24     	; 0x1d92 <vfprintf+0x18c>
    1daa:	f5 01       	movw	r30, r10
    1dac:	37 fc       	sbrc	r3, 7
    1dae:	85 91       	lpm	r24, Z+
    1db0:	37 fe       	sbrs	r3, 7
    1db2:	81 91       	ld	r24, Z+
    1db4:	5f 01       	movw	r10, r30
    1db6:	b6 01       	movw	r22, r12
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 2c 12 	call	0x2458	; 0x2458 <fputc>
    1dbe:	21 10       	cpse	r2, r1
    1dc0:	2a 94       	dec	r2
    1dc2:	21 e0       	ldi	r18, 0x01	; 1
    1dc4:	82 1a       	sub	r8, r18
    1dc6:	91 08       	sbc	r9, r1
    1dc8:	81 14       	cp	r8, r1
    1dca:	91 04       	cpc	r9, r1
    1dcc:	71 f7       	brne	.-36     	; 0x1daa <vfprintf+0x1a4>
    1dce:	e8 c0       	rjmp	.+464    	; 0x1fa0 <vfprintf+0x39a>
    1dd0:	84 36       	cpi	r24, 0x64	; 100
    1dd2:	11 f0       	breq	.+4      	; 0x1dd8 <vfprintf+0x1d2>
    1dd4:	89 36       	cpi	r24, 0x69	; 105
    1dd6:	41 f5       	brne	.+80     	; 0x1e28 <vfprintf+0x222>
    1dd8:	f8 01       	movw	r30, r16
    1dda:	37 fe       	sbrs	r3, 7
    1ddc:	07 c0       	rjmp	.+14     	; 0x1dec <vfprintf+0x1e6>
    1dde:	60 81       	ld	r22, Z
    1de0:	71 81       	ldd	r23, Z+1	; 0x01
    1de2:	82 81       	ldd	r24, Z+2	; 0x02
    1de4:	93 81       	ldd	r25, Z+3	; 0x03
    1de6:	0c 5f       	subi	r16, 0xFC	; 252
    1de8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dea:	08 c0       	rjmp	.+16     	; 0x1dfc <vfprintf+0x1f6>
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	07 2e       	mov	r0, r23
    1df2:	00 0c       	add	r0, r0
    1df4:	88 0b       	sbc	r24, r24
    1df6:	99 0b       	sbc	r25, r25
    1df8:	0e 5f       	subi	r16, 0xFE	; 254
    1dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfc:	f3 2d       	mov	r31, r3
    1dfe:	ff 76       	andi	r31, 0x6F	; 111
    1e00:	3f 2e       	mov	r3, r31
    1e02:	97 ff       	sbrs	r25, 7
    1e04:	09 c0       	rjmp	.+18     	; 0x1e18 <vfprintf+0x212>
    1e06:	90 95       	com	r25
    1e08:	80 95       	com	r24
    1e0a:	70 95       	com	r23
    1e0c:	61 95       	neg	r22
    1e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e10:	8f 4f       	sbci	r24, 0xFF	; 255
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	f0 68       	ori	r31, 0x80	; 128
    1e16:	3f 2e       	mov	r3, r31
    1e18:	2a e0       	ldi	r18, 0x0A	; 10
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	a3 01       	movw	r20, r6
    1e1e:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__ultoa_invert>
    1e22:	88 2e       	mov	r8, r24
    1e24:	86 18       	sub	r8, r6
    1e26:	45 c0       	rjmp	.+138    	; 0x1eb2 <vfprintf+0x2ac>
    1e28:	85 37       	cpi	r24, 0x75	; 117
    1e2a:	31 f4       	brne	.+12     	; 0x1e38 <vfprintf+0x232>
    1e2c:	23 2d       	mov	r18, r3
    1e2e:	2f 7e       	andi	r18, 0xEF	; 239
    1e30:	b2 2e       	mov	r11, r18
    1e32:	2a e0       	ldi	r18, 0x0A	; 10
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	25 c0       	rjmp	.+74     	; 0x1e82 <vfprintf+0x27c>
    1e38:	93 2d       	mov	r25, r3
    1e3a:	99 7f       	andi	r25, 0xF9	; 249
    1e3c:	b9 2e       	mov	r11, r25
    1e3e:	8f 36       	cpi	r24, 0x6F	; 111
    1e40:	c1 f0       	breq	.+48     	; 0x1e72 <vfprintf+0x26c>
    1e42:	18 f4       	brcc	.+6      	; 0x1e4a <vfprintf+0x244>
    1e44:	88 35       	cpi	r24, 0x58	; 88
    1e46:	79 f0       	breq	.+30     	; 0x1e66 <vfprintf+0x260>
    1e48:	b5 c0       	rjmp	.+362    	; 0x1fb4 <vfprintf+0x3ae>
    1e4a:	80 37       	cpi	r24, 0x70	; 112
    1e4c:	19 f0       	breq	.+6      	; 0x1e54 <vfprintf+0x24e>
    1e4e:	88 37       	cpi	r24, 0x78	; 120
    1e50:	21 f0       	breq	.+8      	; 0x1e5a <vfprintf+0x254>
    1e52:	b0 c0       	rjmp	.+352    	; 0x1fb4 <vfprintf+0x3ae>
    1e54:	e9 2f       	mov	r30, r25
    1e56:	e0 61       	ori	r30, 0x10	; 16
    1e58:	be 2e       	mov	r11, r30
    1e5a:	b4 fe       	sbrs	r11, 4
    1e5c:	0d c0       	rjmp	.+26     	; 0x1e78 <vfprintf+0x272>
    1e5e:	fb 2d       	mov	r31, r11
    1e60:	f4 60       	ori	r31, 0x04	; 4
    1e62:	bf 2e       	mov	r11, r31
    1e64:	09 c0       	rjmp	.+18     	; 0x1e78 <vfprintf+0x272>
    1e66:	34 fe       	sbrs	r3, 4
    1e68:	0a c0       	rjmp	.+20     	; 0x1e7e <vfprintf+0x278>
    1e6a:	29 2f       	mov	r18, r25
    1e6c:	26 60       	ori	r18, 0x06	; 6
    1e6e:	b2 2e       	mov	r11, r18
    1e70:	06 c0       	rjmp	.+12     	; 0x1e7e <vfprintf+0x278>
    1e72:	28 e0       	ldi	r18, 0x08	; 8
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	05 c0       	rjmp	.+10     	; 0x1e82 <vfprintf+0x27c>
    1e78:	20 e1       	ldi	r18, 0x10	; 16
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <vfprintf+0x27c>
    1e7e:	20 e1       	ldi	r18, 0x10	; 16
    1e80:	32 e0       	ldi	r19, 0x02	; 2
    1e82:	f8 01       	movw	r30, r16
    1e84:	b7 fe       	sbrs	r11, 7
    1e86:	07 c0       	rjmp	.+14     	; 0x1e96 <vfprintf+0x290>
    1e88:	60 81       	ld	r22, Z
    1e8a:	71 81       	ldd	r23, Z+1	; 0x01
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	93 81       	ldd	r25, Z+3	; 0x03
    1e90:	0c 5f       	subi	r16, 0xFC	; 252
    1e92:	1f 4f       	sbci	r17, 0xFF	; 255
    1e94:	06 c0       	rjmp	.+12     	; 0x1ea2 <vfprintf+0x29c>
    1e96:	60 81       	ld	r22, Z
    1e98:	71 81       	ldd	r23, Z+1	; 0x01
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	0e 5f       	subi	r16, 0xFE	; 254
    1ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea2:	a3 01       	movw	r20, r6
    1ea4:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__ultoa_invert>
    1ea8:	88 2e       	mov	r8, r24
    1eaa:	86 18       	sub	r8, r6
    1eac:	fb 2d       	mov	r31, r11
    1eae:	ff 77       	andi	r31, 0x7F	; 127
    1eb0:	3f 2e       	mov	r3, r31
    1eb2:	36 fe       	sbrs	r3, 6
    1eb4:	0d c0       	rjmp	.+26     	; 0x1ed0 <vfprintf+0x2ca>
    1eb6:	23 2d       	mov	r18, r3
    1eb8:	2e 7f       	andi	r18, 0xFE	; 254
    1eba:	a2 2e       	mov	r10, r18
    1ebc:	89 14       	cp	r8, r9
    1ebe:	58 f4       	brcc	.+22     	; 0x1ed6 <vfprintf+0x2d0>
    1ec0:	34 fe       	sbrs	r3, 4
    1ec2:	0b c0       	rjmp	.+22     	; 0x1eda <vfprintf+0x2d4>
    1ec4:	32 fc       	sbrc	r3, 2
    1ec6:	09 c0       	rjmp	.+18     	; 0x1eda <vfprintf+0x2d4>
    1ec8:	83 2d       	mov	r24, r3
    1eca:	8e 7e       	andi	r24, 0xEE	; 238
    1ecc:	a8 2e       	mov	r10, r24
    1ece:	05 c0       	rjmp	.+10     	; 0x1eda <vfprintf+0x2d4>
    1ed0:	b8 2c       	mov	r11, r8
    1ed2:	a3 2c       	mov	r10, r3
    1ed4:	03 c0       	rjmp	.+6      	; 0x1edc <vfprintf+0x2d6>
    1ed6:	b8 2c       	mov	r11, r8
    1ed8:	01 c0       	rjmp	.+2      	; 0x1edc <vfprintf+0x2d6>
    1eda:	b9 2c       	mov	r11, r9
    1edc:	a4 fe       	sbrs	r10, 4
    1ede:	0f c0       	rjmp	.+30     	; 0x1efe <vfprintf+0x2f8>
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e8 0d       	add	r30, r8
    1ee4:	f1 1d       	adc	r31, r1
    1ee6:	80 81       	ld	r24, Z
    1ee8:	80 33       	cpi	r24, 0x30	; 48
    1eea:	21 f4       	brne	.+8      	; 0x1ef4 <vfprintf+0x2ee>
    1eec:	9a 2d       	mov	r25, r10
    1eee:	99 7e       	andi	r25, 0xE9	; 233
    1ef0:	a9 2e       	mov	r10, r25
    1ef2:	09 c0       	rjmp	.+18     	; 0x1f06 <vfprintf+0x300>
    1ef4:	a2 fe       	sbrs	r10, 2
    1ef6:	06 c0       	rjmp	.+12     	; 0x1f04 <vfprintf+0x2fe>
    1ef8:	b3 94       	inc	r11
    1efa:	b3 94       	inc	r11
    1efc:	04 c0       	rjmp	.+8      	; 0x1f06 <vfprintf+0x300>
    1efe:	8a 2d       	mov	r24, r10
    1f00:	86 78       	andi	r24, 0x86	; 134
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <vfprintf+0x300>
    1f04:	b3 94       	inc	r11
    1f06:	a3 fc       	sbrc	r10, 3
    1f08:	11 c0       	rjmp	.+34     	; 0x1f2c <vfprintf+0x326>
    1f0a:	a0 fe       	sbrs	r10, 0
    1f0c:	06 c0       	rjmp	.+12     	; 0x1f1a <vfprintf+0x314>
    1f0e:	b2 14       	cp	r11, r2
    1f10:	88 f4       	brcc	.+34     	; 0x1f34 <vfprintf+0x32e>
    1f12:	28 0c       	add	r2, r8
    1f14:	92 2c       	mov	r9, r2
    1f16:	9b 18       	sub	r9, r11
    1f18:	0e c0       	rjmp	.+28     	; 0x1f36 <vfprintf+0x330>
    1f1a:	b2 14       	cp	r11, r2
    1f1c:	60 f4       	brcc	.+24     	; 0x1f36 <vfprintf+0x330>
    1f1e:	b6 01       	movw	r22, r12
    1f20:	80 e2       	ldi	r24, 0x20	; 32
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 2c 12 	call	0x2458	; 0x2458 <fputc>
    1f28:	b3 94       	inc	r11
    1f2a:	f7 cf       	rjmp	.-18     	; 0x1f1a <vfprintf+0x314>
    1f2c:	b2 14       	cp	r11, r2
    1f2e:	18 f4       	brcc	.+6      	; 0x1f36 <vfprintf+0x330>
    1f30:	2b 18       	sub	r2, r11
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <vfprintf+0x332>
    1f34:	98 2c       	mov	r9, r8
    1f36:	21 2c       	mov	r2, r1
    1f38:	a4 fe       	sbrs	r10, 4
    1f3a:	10 c0       	rjmp	.+32     	; 0x1f5c <vfprintf+0x356>
    1f3c:	b6 01       	movw	r22, r12
    1f3e:	80 e3       	ldi	r24, 0x30	; 48
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	0e 94 2c 12 	call	0x2458	; 0x2458 <fputc>
    1f46:	a2 fe       	sbrs	r10, 2
    1f48:	17 c0       	rjmp	.+46     	; 0x1f78 <vfprintf+0x372>
    1f4a:	a1 fc       	sbrc	r10, 1
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <vfprintf+0x34e>
    1f4e:	88 e7       	ldi	r24, 0x78	; 120
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <vfprintf+0x352>
    1f54:	88 e5       	ldi	r24, 0x58	; 88
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	b6 01       	movw	r22, r12
    1f5a:	0c c0       	rjmp	.+24     	; 0x1f74 <vfprintf+0x36e>
    1f5c:	8a 2d       	mov	r24, r10
    1f5e:	86 78       	andi	r24, 0x86	; 134
    1f60:	59 f0       	breq	.+22     	; 0x1f78 <vfprintf+0x372>
    1f62:	a1 fe       	sbrs	r10, 1
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <vfprintf+0x364>
    1f66:	8b e2       	ldi	r24, 0x2B	; 43
    1f68:	01 c0       	rjmp	.+2      	; 0x1f6c <vfprintf+0x366>
    1f6a:	80 e2       	ldi	r24, 0x20	; 32
    1f6c:	a7 fc       	sbrc	r10, 7
    1f6e:	8d e2       	ldi	r24, 0x2D	; 45
    1f70:	b6 01       	movw	r22, r12
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	0e 94 2c 12 	call	0x2458	; 0x2458 <fputc>
    1f78:	89 14       	cp	r8, r9
    1f7a:	38 f4       	brcc	.+14     	; 0x1f8a <vfprintf+0x384>
    1f7c:	b6 01       	movw	r22, r12
    1f7e:	80 e3       	ldi	r24, 0x30	; 48
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 2c 12 	call	0x2458	; 0x2458 <fputc>
    1f86:	9a 94       	dec	r9
    1f88:	f7 cf       	rjmp	.-18     	; 0x1f78 <vfprintf+0x372>
    1f8a:	8a 94       	dec	r8
    1f8c:	f3 01       	movw	r30, r6
    1f8e:	e8 0d       	add	r30, r8
    1f90:	f1 1d       	adc	r31, r1
    1f92:	80 81       	ld	r24, Z
    1f94:	b6 01       	movw	r22, r12
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	0e 94 2c 12 	call	0x2458	; 0x2458 <fputc>
    1f9c:	81 10       	cpse	r8, r1
    1f9e:	f5 cf       	rjmp	.-22     	; 0x1f8a <vfprintf+0x384>
    1fa0:	22 20       	and	r2, r2
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <vfprintf+0x3a0>
    1fa4:	42 ce       	rjmp	.-892    	; 0x1c2a <vfprintf+0x24>
    1fa6:	b6 01       	movw	r22, r12
    1fa8:	80 e2       	ldi	r24, 0x20	; 32
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 94 2c 12 	call	0x2458	; 0x2458 <fputc>
    1fb0:	2a 94       	dec	r2
    1fb2:	f6 cf       	rjmp	.-20     	; 0x1fa0 <vfprintf+0x39a>
    1fb4:	f6 01       	movw	r30, r12
    1fb6:	86 81       	ldd	r24, Z+6	; 0x06
    1fb8:	97 81       	ldd	r25, Z+7	; 0x07
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <vfprintf+0x3ba>
    1fbc:	8f ef       	ldi	r24, 0xFF	; 255
    1fbe:	9f ef       	ldi	r25, 0xFF	; 255
    1fc0:	2b 96       	adiw	r28, 0x0b	; 11
    1fc2:	e2 e1       	ldi	r30, 0x12	; 18
    1fc4:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__>

00001fc8 <dtoa_prf>:
    1fc8:	a9 e0       	ldi	r26, 0x09	; 9
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	ea ee       	ldi	r30, 0xEA	; 234
    1fce:	ff e0       	ldi	r31, 0x0F	; 15
    1fd0:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <__prologue_saves__+0xc>
    1fd4:	6a 01       	movw	r12, r20
    1fd6:	12 2f       	mov	r17, r18
    1fd8:	b0 2e       	mov	r11, r16
    1fda:	2b e3       	ldi	r18, 0x3B	; 59
    1fdc:	20 17       	cp	r18, r16
    1fde:	20 f0       	brcs	.+8      	; 0x1fe8 <dtoa_prf+0x20>
    1fe0:	ff 24       	eor	r15, r15
    1fe2:	f3 94       	inc	r15
    1fe4:	f0 0e       	add	r15, r16
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <dtoa_prf+0x24>
    1fe8:	2c e3       	ldi	r18, 0x3C	; 60
    1fea:	f2 2e       	mov	r15, r18
    1fec:	0f 2d       	mov	r16, r15
    1fee:	27 e0       	ldi	r18, 0x07	; 7
    1ff0:	ae 01       	movw	r20, r28
    1ff2:	4f 5f       	subi	r20, 0xFF	; 255
    1ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff6:	0e 94 3e 11 	call	0x227c	; 0x227c <__ftoa_engine>
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	49 81       	ldd	r20, Y+1	; 0x01
    1ffe:	84 2f       	mov	r24, r20
    2000:	89 70       	andi	r24, 0x09	; 9
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	31 f0       	breq	.+12     	; 0x2012 <dtoa_prf+0x4a>
    2006:	e1 fc       	sbrc	r14, 1
    2008:	06 c0       	rjmp	.+12     	; 0x2016 <dtoa_prf+0x4e>
    200a:	e0 fe       	sbrs	r14, 0
    200c:	06 c0       	rjmp	.+12     	; 0x201a <dtoa_prf+0x52>
    200e:	90 e2       	ldi	r25, 0x20	; 32
    2010:	05 c0       	rjmp	.+10     	; 0x201c <dtoa_prf+0x54>
    2012:	9d e2       	ldi	r25, 0x2D	; 45
    2014:	03 c0       	rjmp	.+6      	; 0x201c <dtoa_prf+0x54>
    2016:	9b e2       	ldi	r25, 0x2B	; 43
    2018:	01 c0       	rjmp	.+2      	; 0x201c <dtoa_prf+0x54>
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	5e 2d       	mov	r21, r14
    201e:	50 71       	andi	r21, 0x10	; 16
    2020:	43 ff       	sbrs	r20, 3
    2022:	3c c0       	rjmp	.+120    	; 0x209c <dtoa_prf+0xd4>
    2024:	91 11       	cpse	r25, r1
    2026:	02 c0       	rjmp	.+4      	; 0x202c <dtoa_prf+0x64>
    2028:	83 e0       	ldi	r24, 0x03	; 3
    202a:	01 c0       	rjmp	.+2      	; 0x202e <dtoa_prf+0x66>
    202c:	84 e0       	ldi	r24, 0x04	; 4
    202e:	81 17       	cp	r24, r17
    2030:	18 f4       	brcc	.+6      	; 0x2038 <dtoa_prf+0x70>
    2032:	21 2f       	mov	r18, r17
    2034:	28 1b       	sub	r18, r24
    2036:	01 c0       	rjmp	.+2      	; 0x203a <dtoa_prf+0x72>
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	51 11       	cpse	r21, r1
    203c:	0b c0       	rjmp	.+22     	; 0x2054 <dtoa_prf+0x8c>
    203e:	f6 01       	movw	r30, r12
    2040:	82 2f       	mov	r24, r18
    2042:	30 e2       	ldi	r19, 0x20	; 32
    2044:	88 23       	and	r24, r24
    2046:	19 f0       	breq	.+6      	; 0x204e <dtoa_prf+0x86>
    2048:	31 93       	st	Z+, r19
    204a:	81 50       	subi	r24, 0x01	; 1
    204c:	fb cf       	rjmp	.-10     	; 0x2044 <dtoa_prf+0x7c>
    204e:	c2 0e       	add	r12, r18
    2050:	d1 1c       	adc	r13, r1
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	99 23       	and	r25, r25
    2056:	29 f0       	breq	.+10     	; 0x2062 <dtoa_prf+0x9a>
    2058:	d6 01       	movw	r26, r12
    205a:	9c 93       	st	X, r25
    205c:	f6 01       	movw	r30, r12
    205e:	31 96       	adiw	r30, 0x01	; 1
    2060:	6f 01       	movw	r12, r30
    2062:	c6 01       	movw	r24, r12
    2064:	03 96       	adiw	r24, 0x03	; 3
    2066:	e2 fe       	sbrs	r14, 2
    2068:	0a c0       	rjmp	.+20     	; 0x207e <dtoa_prf+0xb6>
    206a:	3e e4       	ldi	r19, 0x4E	; 78
    206c:	d6 01       	movw	r26, r12
    206e:	3c 93       	st	X, r19
    2070:	41 e4       	ldi	r20, 0x41	; 65
    2072:	11 96       	adiw	r26, 0x01	; 1
    2074:	4c 93       	st	X, r20
    2076:	11 97       	sbiw	r26, 0x01	; 1
    2078:	12 96       	adiw	r26, 0x02	; 2
    207a:	3c 93       	st	X, r19
    207c:	06 c0       	rjmp	.+12     	; 0x208a <dtoa_prf+0xc2>
    207e:	3e e6       	ldi	r19, 0x6E	; 110
    2080:	f6 01       	movw	r30, r12
    2082:	30 83       	st	Z, r19
    2084:	41 e6       	ldi	r20, 0x61	; 97
    2086:	41 83       	std	Z+1, r20	; 0x01
    2088:	32 83       	std	Z+2, r19	; 0x02
    208a:	fc 01       	movw	r30, r24
    208c:	32 2f       	mov	r19, r18
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	33 23       	and	r19, r19
    2092:	09 f4       	brne	.+2      	; 0x2096 <dtoa_prf+0xce>
    2094:	42 c0       	rjmp	.+132    	; 0x211a <dtoa_prf+0x152>
    2096:	41 93       	st	Z+, r20
    2098:	31 50       	subi	r19, 0x01	; 1
    209a:	fa cf       	rjmp	.-12     	; 0x2090 <dtoa_prf+0xc8>
    209c:	42 ff       	sbrs	r20, 2
    209e:	44 c0       	rjmp	.+136    	; 0x2128 <dtoa_prf+0x160>
    20a0:	91 11       	cpse	r25, r1
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <dtoa_prf+0xe0>
    20a4:	83 e0       	ldi	r24, 0x03	; 3
    20a6:	01 c0       	rjmp	.+2      	; 0x20aa <dtoa_prf+0xe2>
    20a8:	84 e0       	ldi	r24, 0x04	; 4
    20aa:	81 17       	cp	r24, r17
    20ac:	18 f4       	brcc	.+6      	; 0x20b4 <dtoa_prf+0xec>
    20ae:	21 2f       	mov	r18, r17
    20b0:	28 1b       	sub	r18, r24
    20b2:	01 c0       	rjmp	.+2      	; 0x20b6 <dtoa_prf+0xee>
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	51 11       	cpse	r21, r1
    20b8:	0b c0       	rjmp	.+22     	; 0x20d0 <dtoa_prf+0x108>
    20ba:	f6 01       	movw	r30, r12
    20bc:	82 2f       	mov	r24, r18
    20be:	30 e2       	ldi	r19, 0x20	; 32
    20c0:	88 23       	and	r24, r24
    20c2:	19 f0       	breq	.+6      	; 0x20ca <dtoa_prf+0x102>
    20c4:	31 93       	st	Z+, r19
    20c6:	81 50       	subi	r24, 0x01	; 1
    20c8:	fb cf       	rjmp	.-10     	; 0x20c0 <dtoa_prf+0xf8>
    20ca:	c2 0e       	add	r12, r18
    20cc:	d1 1c       	adc	r13, r1
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	99 23       	and	r25, r25
    20d2:	29 f0       	breq	.+10     	; 0x20de <dtoa_prf+0x116>
    20d4:	d6 01       	movw	r26, r12
    20d6:	9c 93       	st	X, r25
    20d8:	f6 01       	movw	r30, r12
    20da:	31 96       	adiw	r30, 0x01	; 1
    20dc:	6f 01       	movw	r12, r30
    20de:	c6 01       	movw	r24, r12
    20e0:	03 96       	adiw	r24, 0x03	; 3
    20e2:	e2 fe       	sbrs	r14, 2
    20e4:	0b c0       	rjmp	.+22     	; 0x20fc <dtoa_prf+0x134>
    20e6:	39 e4       	ldi	r19, 0x49	; 73
    20e8:	d6 01       	movw	r26, r12
    20ea:	3c 93       	st	X, r19
    20ec:	3e e4       	ldi	r19, 0x4E	; 78
    20ee:	11 96       	adiw	r26, 0x01	; 1
    20f0:	3c 93       	st	X, r19
    20f2:	11 97       	sbiw	r26, 0x01	; 1
    20f4:	36 e4       	ldi	r19, 0x46	; 70
    20f6:	12 96       	adiw	r26, 0x02	; 2
    20f8:	3c 93       	st	X, r19
    20fa:	07 c0       	rjmp	.+14     	; 0x210a <dtoa_prf+0x142>
    20fc:	39 e6       	ldi	r19, 0x69	; 105
    20fe:	f6 01       	movw	r30, r12
    2100:	30 83       	st	Z, r19
    2102:	3e e6       	ldi	r19, 0x6E	; 110
    2104:	31 83       	std	Z+1, r19	; 0x01
    2106:	36 e6       	ldi	r19, 0x66	; 102
    2108:	32 83       	std	Z+2, r19	; 0x02
    210a:	fc 01       	movw	r30, r24
    210c:	32 2f       	mov	r19, r18
    210e:	40 e2       	ldi	r20, 0x20	; 32
    2110:	33 23       	and	r19, r19
    2112:	19 f0       	breq	.+6      	; 0x211a <dtoa_prf+0x152>
    2114:	41 93       	st	Z+, r20
    2116:	31 50       	subi	r19, 0x01	; 1
    2118:	fb cf       	rjmp	.-10     	; 0x2110 <dtoa_prf+0x148>
    211a:	fc 01       	movw	r30, r24
    211c:	e2 0f       	add	r30, r18
    211e:	f1 1d       	adc	r31, r1
    2120:	10 82       	st	Z, r1
    2122:	8e ef       	ldi	r24, 0xFE	; 254
    2124:	9f ef       	ldi	r25, 0xFF	; 255
    2126:	a6 c0       	rjmp	.+332    	; 0x2274 <dtoa_prf+0x2ac>
    2128:	21 e0       	ldi	r18, 0x01	; 1
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	91 11       	cpse	r25, r1
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <dtoa_prf+0x16c>
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	16 16       	cp	r1, r22
    2136:	17 06       	cpc	r1, r23
    2138:	1c f4       	brge	.+6      	; 0x2140 <dtoa_prf+0x178>
    213a:	fb 01       	movw	r30, r22
    213c:	31 96       	adiw	r30, 0x01	; 1
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <dtoa_prf+0x17c>
    2140:	e1 e0       	ldi	r30, 0x01	; 1
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	2e 0f       	add	r18, r30
    2146:	3f 1f       	adc	r19, r31
    2148:	bb 20       	and	r11, r11
    214a:	21 f0       	breq	.+8      	; 0x2154 <dtoa_prf+0x18c>
    214c:	eb 2d       	mov	r30, r11
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	31 96       	adiw	r30, 0x01	; 1
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <dtoa_prf+0x190>
    2154:	e0 e0       	ldi	r30, 0x00	; 0
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	2e 0f       	add	r18, r30
    215a:	3f 1f       	adc	r19, r31
    215c:	e1 2f       	mov	r30, r17
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	2e 17       	cp	r18, r30
    2162:	3f 07       	cpc	r19, r31
    2164:	1c f4       	brge	.+6      	; 0x216c <dtoa_prf+0x1a4>
    2166:	12 1b       	sub	r17, r18
    2168:	21 2f       	mov	r18, r17
    216a:	01 c0       	rjmp	.+2      	; 0x216e <dtoa_prf+0x1a6>
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	8e 2d       	mov	r24, r14
    2170:	88 71       	andi	r24, 0x18	; 24
    2172:	59 f4       	brne	.+22     	; 0x218a <dtoa_prf+0x1c2>
    2174:	f6 01       	movw	r30, r12
    2176:	82 2f       	mov	r24, r18
    2178:	30 e2       	ldi	r19, 0x20	; 32
    217a:	88 23       	and	r24, r24
    217c:	19 f0       	breq	.+6      	; 0x2184 <dtoa_prf+0x1bc>
    217e:	31 93       	st	Z+, r19
    2180:	81 50       	subi	r24, 0x01	; 1
    2182:	fb cf       	rjmp	.-10     	; 0x217a <dtoa_prf+0x1b2>
    2184:	c2 0e       	add	r12, r18
    2186:	d1 1c       	adc	r13, r1
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	99 23       	and	r25, r25
    218c:	29 f0       	breq	.+10     	; 0x2198 <dtoa_prf+0x1d0>
    218e:	d6 01       	movw	r26, r12
    2190:	9c 93       	st	X, r25
    2192:	f6 01       	movw	r30, r12
    2194:	31 96       	adiw	r30, 0x01	; 1
    2196:	6f 01       	movw	r12, r30
    2198:	51 11       	cpse	r21, r1
    219a:	0b c0       	rjmp	.+22     	; 0x21b2 <dtoa_prf+0x1ea>
    219c:	f6 01       	movw	r30, r12
    219e:	82 2f       	mov	r24, r18
    21a0:	90 e3       	ldi	r25, 0x30	; 48
    21a2:	88 23       	and	r24, r24
    21a4:	19 f0       	breq	.+6      	; 0x21ac <dtoa_prf+0x1e4>
    21a6:	91 93       	st	Z+, r25
    21a8:	81 50       	subi	r24, 0x01	; 1
    21aa:	fb cf       	rjmp	.-10     	; 0x21a2 <dtoa_prf+0x1da>
    21ac:	c2 0e       	add	r12, r18
    21ae:	d1 1c       	adc	r13, r1
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	0f 2d       	mov	r16, r15
    21b4:	06 0f       	add	r16, r22
    21b6:	9a 81       	ldd	r25, Y+2	; 0x02
    21b8:	34 2f       	mov	r19, r20
    21ba:	30 71       	andi	r19, 0x10	; 16
    21bc:	44 ff       	sbrs	r20, 4
    21be:	03 c0       	rjmp	.+6      	; 0x21c6 <dtoa_prf+0x1fe>
    21c0:	91 33       	cpi	r25, 0x31	; 49
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <dtoa_prf+0x1fe>
    21c4:	01 50       	subi	r16, 0x01	; 1
    21c6:	10 16       	cp	r1, r16
    21c8:	24 f4       	brge	.+8      	; 0x21d2 <dtoa_prf+0x20a>
    21ca:	09 30       	cpi	r16, 0x09	; 9
    21cc:	18 f0       	brcs	.+6      	; 0x21d4 <dtoa_prf+0x20c>
    21ce:	08 e0       	ldi	r16, 0x08	; 8
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <dtoa_prf+0x20c>
    21d2:	01 e0       	ldi	r16, 0x01	; 1
    21d4:	ab 01       	movw	r20, r22
    21d6:	77 ff       	sbrs	r23, 7
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <dtoa_prf+0x216>
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	fb 01       	movw	r30, r22
    21e0:	e4 1b       	sub	r30, r20
    21e2:	f5 0b       	sbc	r31, r21
    21e4:	a1 e0       	ldi	r26, 0x01	; 1
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	ac 0f       	add	r26, r28
    21ea:	bd 1f       	adc	r27, r29
    21ec:	ea 0f       	add	r30, r26
    21ee:	fb 1f       	adc	r31, r27
    21f0:	8e e2       	ldi	r24, 0x2E	; 46
    21f2:	a8 2e       	mov	r10, r24
    21f4:	4b 01       	movw	r8, r22
    21f6:	80 1a       	sub	r8, r16
    21f8:	91 08       	sbc	r9, r1
    21fa:	0b 2d       	mov	r16, r11
    21fc:	10 e0       	ldi	r17, 0x00	; 0
    21fe:	11 95       	neg	r17
    2200:	01 95       	neg	r16
    2202:	11 09       	sbc	r17, r1
    2204:	4f 3f       	cpi	r20, 0xFF	; 255
    2206:	bf ef       	ldi	r27, 0xFF	; 255
    2208:	5b 07       	cpc	r21, r27
    220a:	21 f4       	brne	.+8      	; 0x2214 <dtoa_prf+0x24c>
    220c:	d6 01       	movw	r26, r12
    220e:	ac 92       	st	X, r10
    2210:	11 96       	adiw	r26, 0x01	; 1
    2212:	6d 01       	movw	r12, r26
    2214:	64 17       	cp	r22, r20
    2216:	75 07       	cpc	r23, r21
    2218:	2c f0       	brlt	.+10     	; 0x2224 <dtoa_prf+0x25c>
    221a:	84 16       	cp	r8, r20
    221c:	95 06       	cpc	r9, r21
    221e:	14 f4       	brge	.+4      	; 0x2224 <dtoa_prf+0x25c>
    2220:	81 81       	ldd	r24, Z+1	; 0x01
    2222:	01 c0       	rjmp	.+2      	; 0x2226 <dtoa_prf+0x25e>
    2224:	80 e3       	ldi	r24, 0x30	; 48
    2226:	41 50       	subi	r20, 0x01	; 1
    2228:	51 09       	sbc	r21, r1
    222a:	31 96       	adiw	r30, 0x01	; 1
    222c:	d6 01       	movw	r26, r12
    222e:	11 96       	adiw	r26, 0x01	; 1
    2230:	7d 01       	movw	r14, r26
    2232:	40 17       	cp	r20, r16
    2234:	51 07       	cpc	r21, r17
    2236:	24 f0       	brlt	.+8      	; 0x2240 <dtoa_prf+0x278>
    2238:	d6 01       	movw	r26, r12
    223a:	8c 93       	st	X, r24
    223c:	67 01       	movw	r12, r14
    223e:	e2 cf       	rjmp	.-60     	; 0x2204 <dtoa_prf+0x23c>
    2240:	64 17       	cp	r22, r20
    2242:	75 07       	cpc	r23, r21
    2244:	39 f4       	brne	.+14     	; 0x2254 <dtoa_prf+0x28c>
    2246:	96 33       	cpi	r25, 0x36	; 54
    2248:	20 f4       	brcc	.+8      	; 0x2252 <dtoa_prf+0x28a>
    224a:	95 33       	cpi	r25, 0x35	; 53
    224c:	19 f4       	brne	.+6      	; 0x2254 <dtoa_prf+0x28c>
    224e:	31 11       	cpse	r19, r1
    2250:	01 c0       	rjmp	.+2      	; 0x2254 <dtoa_prf+0x28c>
    2252:	81 e3       	ldi	r24, 0x31	; 49
    2254:	f6 01       	movw	r30, r12
    2256:	80 83       	st	Z, r24
    2258:	f7 01       	movw	r30, r14
    225a:	82 2f       	mov	r24, r18
    225c:	90 e2       	ldi	r25, 0x20	; 32
    225e:	88 23       	and	r24, r24
    2260:	19 f0       	breq	.+6      	; 0x2268 <dtoa_prf+0x2a0>
    2262:	91 93       	st	Z+, r25
    2264:	81 50       	subi	r24, 0x01	; 1
    2266:	fb cf       	rjmp	.-10     	; 0x225e <dtoa_prf+0x296>
    2268:	f7 01       	movw	r30, r14
    226a:	e2 0f       	add	r30, r18
    226c:	f1 1d       	adc	r31, r1
    226e:	10 82       	st	Z, r1
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	29 96       	adiw	r28, 0x09	; 9
    2276:	ec e0       	ldi	r30, 0x0C	; 12
    2278:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <__epilogue_restores__+0xc>

0000227c <__ftoa_engine>:
    227c:	28 30       	cpi	r18, 0x08	; 8
    227e:	08 f0       	brcs	.+2      	; 0x2282 <__ftoa_engine+0x6>
    2280:	27 e0       	ldi	r18, 0x07	; 7
    2282:	33 27       	eor	r19, r19
    2284:	da 01       	movw	r26, r20
    2286:	99 0f       	add	r25, r25
    2288:	31 1d       	adc	r19, r1
    228a:	87 fd       	sbrc	r24, 7
    228c:	91 60       	ori	r25, 0x01	; 1
    228e:	00 96       	adiw	r24, 0x00	; 0
    2290:	61 05       	cpc	r22, r1
    2292:	71 05       	cpc	r23, r1
    2294:	39 f4       	brne	.+14     	; 0x22a4 <__ftoa_engine+0x28>
    2296:	32 60       	ori	r19, 0x02	; 2
    2298:	2e 5f       	subi	r18, 0xFE	; 254
    229a:	3d 93       	st	X+, r19
    229c:	30 e3       	ldi	r19, 0x30	; 48
    229e:	2a 95       	dec	r18
    22a0:	e1 f7       	brne	.-8      	; 0x229a <__ftoa_engine+0x1e>
    22a2:	08 95       	ret
    22a4:	9f 3f       	cpi	r25, 0xFF	; 255
    22a6:	30 f0       	brcs	.+12     	; 0x22b4 <__ftoa_engine+0x38>
    22a8:	80 38       	cpi	r24, 0x80	; 128
    22aa:	71 05       	cpc	r23, r1
    22ac:	61 05       	cpc	r22, r1
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <__ftoa_engine+0x36>
    22b0:	3c 5f       	subi	r19, 0xFC	; 252
    22b2:	3c 5f       	subi	r19, 0xFC	; 252
    22b4:	3d 93       	st	X+, r19
    22b6:	91 30       	cpi	r25, 0x01	; 1
    22b8:	08 f0       	brcs	.+2      	; 0x22bc <__ftoa_engine+0x40>
    22ba:	80 68       	ori	r24, 0x80	; 128
    22bc:	91 1d       	adc	r25, r1
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	1f 93       	push	r17
    22c4:	0f 93       	push	r16
    22c6:	ff 92       	push	r15
    22c8:	ef 92       	push	r14
    22ca:	19 2f       	mov	r17, r25
    22cc:	98 7f       	andi	r25, 0xF8	; 248
    22ce:	96 95       	lsr	r25
    22d0:	e9 2f       	mov	r30, r25
    22d2:	96 95       	lsr	r25
    22d4:	96 95       	lsr	r25
    22d6:	e9 0f       	add	r30, r25
    22d8:	ff 27       	eor	r31, r31
    22da:	e4 5e       	subi	r30, 0xE4	; 228
    22dc:	fe 4f       	sbci	r31, 0xFE	; 254
    22de:	99 27       	eor	r25, r25
    22e0:	33 27       	eor	r19, r19
    22e2:	ee 24       	eor	r14, r14
    22e4:	ff 24       	eor	r15, r15
    22e6:	a7 01       	movw	r20, r14
    22e8:	e7 01       	movw	r28, r14
    22ea:	05 90       	lpm	r0, Z+
    22ec:	08 94       	sec
    22ee:	07 94       	ror	r0
    22f0:	28 f4       	brcc	.+10     	; 0x22fc <__ftoa_engine+0x80>
    22f2:	36 0f       	add	r19, r22
    22f4:	e7 1e       	adc	r14, r23
    22f6:	f8 1e       	adc	r15, r24
    22f8:	49 1f       	adc	r20, r25
    22fa:	51 1d       	adc	r21, r1
    22fc:	66 0f       	add	r22, r22
    22fe:	77 1f       	adc	r23, r23
    2300:	88 1f       	adc	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	06 94       	lsr	r0
    2306:	a1 f7       	brne	.-24     	; 0x22f0 <__ftoa_engine+0x74>
    2308:	05 90       	lpm	r0, Z+
    230a:	07 94       	ror	r0
    230c:	28 f4       	brcc	.+10     	; 0x2318 <__ftoa_engine+0x9c>
    230e:	e7 0e       	add	r14, r23
    2310:	f8 1e       	adc	r15, r24
    2312:	49 1f       	adc	r20, r25
    2314:	56 1f       	adc	r21, r22
    2316:	c1 1d       	adc	r28, r1
    2318:	77 0f       	add	r23, r23
    231a:	88 1f       	adc	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	66 1f       	adc	r22, r22
    2320:	06 94       	lsr	r0
    2322:	a1 f7       	brne	.-24     	; 0x230c <__ftoa_engine+0x90>
    2324:	05 90       	lpm	r0, Z+
    2326:	07 94       	ror	r0
    2328:	28 f4       	brcc	.+10     	; 0x2334 <__ftoa_engine+0xb8>
    232a:	f8 0e       	add	r15, r24
    232c:	49 1f       	adc	r20, r25
    232e:	56 1f       	adc	r21, r22
    2330:	c7 1f       	adc	r28, r23
    2332:	d1 1d       	adc	r29, r1
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	66 1f       	adc	r22, r22
    233a:	77 1f       	adc	r23, r23
    233c:	06 94       	lsr	r0
    233e:	a1 f7       	brne	.-24     	; 0x2328 <__ftoa_engine+0xac>
    2340:	05 90       	lpm	r0, Z+
    2342:	07 94       	ror	r0
    2344:	20 f4       	brcc	.+8      	; 0x234e <__ftoa_engine+0xd2>
    2346:	49 0f       	add	r20, r25
    2348:	56 1f       	adc	r21, r22
    234a:	c7 1f       	adc	r28, r23
    234c:	d8 1f       	adc	r29, r24
    234e:	99 0f       	add	r25, r25
    2350:	66 1f       	adc	r22, r22
    2352:	77 1f       	adc	r23, r23
    2354:	88 1f       	adc	r24, r24
    2356:	06 94       	lsr	r0
    2358:	a9 f7       	brne	.-22     	; 0x2344 <__ftoa_engine+0xc8>
    235a:	84 91       	lpm	r24, Z
    235c:	10 95       	com	r17
    235e:	17 70       	andi	r17, 0x07	; 7
    2360:	41 f0       	breq	.+16     	; 0x2372 <__ftoa_engine+0xf6>
    2362:	d6 95       	lsr	r29
    2364:	c7 95       	ror	r28
    2366:	57 95       	ror	r21
    2368:	47 95       	ror	r20
    236a:	f7 94       	ror	r15
    236c:	e7 94       	ror	r14
    236e:	1a 95       	dec	r17
    2370:	c1 f7       	brne	.-16     	; 0x2362 <__ftoa_engine+0xe6>
    2372:	e2 ec       	ldi	r30, 0xC2	; 194
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	68 94       	set
    2378:	15 90       	lpm	r1, Z+
    237a:	15 91       	lpm	r17, Z+
    237c:	35 91       	lpm	r19, Z+
    237e:	65 91       	lpm	r22, Z+
    2380:	95 91       	lpm	r25, Z+
    2382:	05 90       	lpm	r0, Z+
    2384:	7f e2       	ldi	r23, 0x2F	; 47
    2386:	73 95       	inc	r23
    2388:	e1 18       	sub	r14, r1
    238a:	f1 0a       	sbc	r15, r17
    238c:	43 0b       	sbc	r20, r19
    238e:	56 0b       	sbc	r21, r22
    2390:	c9 0b       	sbc	r28, r25
    2392:	d0 09       	sbc	r29, r0
    2394:	c0 f7       	brcc	.-16     	; 0x2386 <__ftoa_engine+0x10a>
    2396:	e1 0c       	add	r14, r1
    2398:	f1 1e       	adc	r15, r17
    239a:	43 1f       	adc	r20, r19
    239c:	56 1f       	adc	r21, r22
    239e:	c9 1f       	adc	r28, r25
    23a0:	d0 1d       	adc	r29, r0
    23a2:	7e f4       	brtc	.+30     	; 0x23c2 <__ftoa_engine+0x146>
    23a4:	70 33       	cpi	r23, 0x30	; 48
    23a6:	11 f4       	brne	.+4      	; 0x23ac <__ftoa_engine+0x130>
    23a8:	8a 95       	dec	r24
    23aa:	e6 cf       	rjmp	.-52     	; 0x2378 <__ftoa_engine+0xfc>
    23ac:	e8 94       	clt
    23ae:	01 50       	subi	r16, 0x01	; 1
    23b0:	30 f0       	brcs	.+12     	; 0x23be <__ftoa_engine+0x142>
    23b2:	08 0f       	add	r16, r24
    23b4:	0a f4       	brpl	.+2      	; 0x23b8 <__ftoa_engine+0x13c>
    23b6:	00 27       	eor	r16, r16
    23b8:	02 17       	cp	r16, r18
    23ba:	08 f4       	brcc	.+2      	; 0x23be <__ftoa_engine+0x142>
    23bc:	20 2f       	mov	r18, r16
    23be:	23 95       	inc	r18
    23c0:	02 2f       	mov	r16, r18
    23c2:	7a 33       	cpi	r23, 0x3A	; 58
    23c4:	28 f0       	brcs	.+10     	; 0x23d0 <__ftoa_engine+0x154>
    23c6:	79 e3       	ldi	r23, 0x39	; 57
    23c8:	7d 93       	st	X+, r23
    23ca:	2a 95       	dec	r18
    23cc:	e9 f7       	brne	.-6      	; 0x23c8 <__ftoa_engine+0x14c>
    23ce:	10 c0       	rjmp	.+32     	; 0x23f0 <__ftoa_engine+0x174>
    23d0:	7d 93       	st	X+, r23
    23d2:	2a 95       	dec	r18
    23d4:	89 f6       	brne	.-94     	; 0x2378 <__ftoa_engine+0xfc>
    23d6:	06 94       	lsr	r0
    23d8:	97 95       	ror	r25
    23da:	67 95       	ror	r22
    23dc:	37 95       	ror	r19
    23de:	17 95       	ror	r17
    23e0:	17 94       	ror	r1
    23e2:	e1 18       	sub	r14, r1
    23e4:	f1 0a       	sbc	r15, r17
    23e6:	43 0b       	sbc	r20, r19
    23e8:	56 0b       	sbc	r21, r22
    23ea:	c9 0b       	sbc	r28, r25
    23ec:	d0 09       	sbc	r29, r0
    23ee:	98 f0       	brcs	.+38     	; 0x2416 <__ftoa_engine+0x19a>
    23f0:	23 95       	inc	r18
    23f2:	7e 91       	ld	r23, -X
    23f4:	73 95       	inc	r23
    23f6:	7a 33       	cpi	r23, 0x3A	; 58
    23f8:	08 f0       	brcs	.+2      	; 0x23fc <__ftoa_engine+0x180>
    23fa:	70 e3       	ldi	r23, 0x30	; 48
    23fc:	7c 93       	st	X, r23
    23fe:	20 13       	cpse	r18, r16
    2400:	b8 f7       	brcc	.-18     	; 0x23f0 <__ftoa_engine+0x174>
    2402:	7e 91       	ld	r23, -X
    2404:	70 61       	ori	r23, 0x10	; 16
    2406:	7d 93       	st	X+, r23
    2408:	30 f0       	brcs	.+12     	; 0x2416 <__ftoa_engine+0x19a>
    240a:	83 95       	inc	r24
    240c:	71 e3       	ldi	r23, 0x31	; 49
    240e:	7d 93       	st	X+, r23
    2410:	70 e3       	ldi	r23, 0x30	; 48
    2412:	2a 95       	dec	r18
    2414:	e1 f7       	brne	.-8      	; 0x240e <__ftoa_engine+0x192>
    2416:	11 24       	eor	r1, r1
    2418:	ef 90       	pop	r14
    241a:	ff 90       	pop	r15
    241c:	0f 91       	pop	r16
    241e:	1f 91       	pop	r17
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	99 27       	eor	r25, r25
    2426:	87 fd       	sbrc	r24, 7
    2428:	90 95       	com	r25
    242a:	08 95       	ret

0000242c <strnlen_P>:
    242c:	fc 01       	movw	r30, r24
    242e:	05 90       	lpm	r0, Z+
    2430:	61 50       	subi	r22, 0x01	; 1
    2432:	70 40       	sbci	r23, 0x00	; 0
    2434:	01 10       	cpse	r0, r1
    2436:	d8 f7       	brcc	.-10     	; 0x242e <strnlen_P+0x2>
    2438:	80 95       	com	r24
    243a:	90 95       	com	r25
    243c:	8e 0f       	add	r24, r30
    243e:	9f 1f       	adc	r25, r31
    2440:	08 95       	ret

00002442 <strnlen>:
    2442:	fc 01       	movw	r30, r24
    2444:	61 50       	subi	r22, 0x01	; 1
    2446:	70 40       	sbci	r23, 0x00	; 0
    2448:	01 90       	ld	r0, Z+
    244a:	01 10       	cpse	r0, r1
    244c:	d8 f7       	brcc	.-10     	; 0x2444 <strnlen+0x2>
    244e:	80 95       	com	r24
    2450:	90 95       	com	r25
    2452:	8e 0f       	add	r24, r30
    2454:	9f 1f       	adc	r25, r31
    2456:	08 95       	ret

00002458 <fputc>:
    2458:	0f 93       	push	r16
    245a:	1f 93       	push	r17
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	fb 01       	movw	r30, r22
    2462:	23 81       	ldd	r18, Z+3	; 0x03
    2464:	21 fd       	sbrc	r18, 1
    2466:	03 c0       	rjmp	.+6      	; 0x246e <fputc+0x16>
    2468:	8f ef       	ldi	r24, 0xFF	; 255
    246a:	9f ef       	ldi	r25, 0xFF	; 255
    246c:	2c c0       	rjmp	.+88     	; 0x24c6 <fputc+0x6e>
    246e:	22 ff       	sbrs	r18, 2
    2470:	16 c0       	rjmp	.+44     	; 0x249e <fputc+0x46>
    2472:	46 81       	ldd	r20, Z+6	; 0x06
    2474:	57 81       	ldd	r21, Z+7	; 0x07
    2476:	24 81       	ldd	r18, Z+4	; 0x04
    2478:	35 81       	ldd	r19, Z+5	; 0x05
    247a:	42 17       	cp	r20, r18
    247c:	53 07       	cpc	r21, r19
    247e:	44 f4       	brge	.+16     	; 0x2490 <fputc+0x38>
    2480:	a0 81       	ld	r26, Z
    2482:	b1 81       	ldd	r27, Z+1	; 0x01
    2484:	9d 01       	movw	r18, r26
    2486:	2f 5f       	subi	r18, 0xFF	; 255
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	20 83       	st	Z, r18
    248c:	31 83       	std	Z+1, r19	; 0x01
    248e:	8c 93       	st	X, r24
    2490:	26 81       	ldd	r18, Z+6	; 0x06
    2492:	37 81       	ldd	r19, Z+7	; 0x07
    2494:	2f 5f       	subi	r18, 0xFF	; 255
    2496:	3f 4f       	sbci	r19, 0xFF	; 255
    2498:	26 83       	std	Z+6, r18	; 0x06
    249a:	37 83       	std	Z+7, r19	; 0x07
    249c:	14 c0       	rjmp	.+40     	; 0x24c6 <fputc+0x6e>
    249e:	8b 01       	movw	r16, r22
    24a0:	ec 01       	movw	r28, r24
    24a2:	fb 01       	movw	r30, r22
    24a4:	00 84       	ldd	r0, Z+8	; 0x08
    24a6:	f1 85       	ldd	r31, Z+9	; 0x09
    24a8:	e0 2d       	mov	r30, r0
    24aa:	09 95       	icall
    24ac:	89 2b       	or	r24, r25
    24ae:	e1 f6       	brne	.-72     	; 0x2468 <fputc+0x10>
    24b0:	d8 01       	movw	r26, r16
    24b2:	16 96       	adiw	r26, 0x06	; 6
    24b4:	8d 91       	ld	r24, X+
    24b6:	9c 91       	ld	r25, X
    24b8:	17 97       	sbiw	r26, 0x07	; 7
    24ba:	01 96       	adiw	r24, 0x01	; 1
    24bc:	16 96       	adiw	r26, 0x06	; 6
    24be:	8d 93       	st	X+, r24
    24c0:	9c 93       	st	X, r25
    24c2:	17 97       	sbiw	r26, 0x07	; 7
    24c4:	ce 01       	movw	r24, r28
    24c6:	df 91       	pop	r29
    24c8:	cf 91       	pop	r28
    24ca:	1f 91       	pop	r17
    24cc:	0f 91       	pop	r16
    24ce:	08 95       	ret

000024d0 <__ultoa_invert>:
    24d0:	fa 01       	movw	r30, r20
    24d2:	aa 27       	eor	r26, r26
    24d4:	28 30       	cpi	r18, 0x08	; 8
    24d6:	51 f1       	breq	.+84     	; 0x252c <__ultoa_invert+0x5c>
    24d8:	20 31       	cpi	r18, 0x10	; 16
    24da:	81 f1       	breq	.+96     	; 0x253c <__ultoa_invert+0x6c>
    24dc:	e8 94       	clt
    24de:	6f 93       	push	r22
    24e0:	6e 7f       	andi	r22, 0xFE	; 254
    24e2:	6e 5f       	subi	r22, 0xFE	; 254
    24e4:	7f 4f       	sbci	r23, 0xFF	; 255
    24e6:	8f 4f       	sbci	r24, 0xFF	; 255
    24e8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ea:	af 4f       	sbci	r26, 0xFF	; 255
    24ec:	b1 e0       	ldi	r27, 0x01	; 1
    24ee:	3e d0       	rcall	.+124    	; 0x256c <__ultoa_invert+0x9c>
    24f0:	b4 e0       	ldi	r27, 0x04	; 4
    24f2:	3c d0       	rcall	.+120    	; 0x256c <__ultoa_invert+0x9c>
    24f4:	67 0f       	add	r22, r23
    24f6:	78 1f       	adc	r23, r24
    24f8:	89 1f       	adc	r24, r25
    24fa:	9a 1f       	adc	r25, r26
    24fc:	a1 1d       	adc	r26, r1
    24fe:	68 0f       	add	r22, r24
    2500:	79 1f       	adc	r23, r25
    2502:	8a 1f       	adc	r24, r26
    2504:	91 1d       	adc	r25, r1
    2506:	a1 1d       	adc	r26, r1
    2508:	6a 0f       	add	r22, r26
    250a:	71 1d       	adc	r23, r1
    250c:	81 1d       	adc	r24, r1
    250e:	91 1d       	adc	r25, r1
    2510:	a1 1d       	adc	r26, r1
    2512:	20 d0       	rcall	.+64     	; 0x2554 <__ultoa_invert+0x84>
    2514:	09 f4       	brne	.+2      	; 0x2518 <__ultoa_invert+0x48>
    2516:	68 94       	set
    2518:	3f 91       	pop	r19
    251a:	2a e0       	ldi	r18, 0x0A	; 10
    251c:	26 9f       	mul	r18, r22
    251e:	11 24       	eor	r1, r1
    2520:	30 19       	sub	r19, r0
    2522:	30 5d       	subi	r19, 0xD0	; 208
    2524:	31 93       	st	Z+, r19
    2526:	de f6       	brtc	.-74     	; 0x24de <__ultoa_invert+0xe>
    2528:	cf 01       	movw	r24, r30
    252a:	08 95       	ret
    252c:	46 2f       	mov	r20, r22
    252e:	47 70       	andi	r20, 0x07	; 7
    2530:	40 5d       	subi	r20, 0xD0	; 208
    2532:	41 93       	st	Z+, r20
    2534:	b3 e0       	ldi	r27, 0x03	; 3
    2536:	0f d0       	rcall	.+30     	; 0x2556 <__ultoa_invert+0x86>
    2538:	c9 f7       	brne	.-14     	; 0x252c <__ultoa_invert+0x5c>
    253a:	f6 cf       	rjmp	.-20     	; 0x2528 <__ultoa_invert+0x58>
    253c:	46 2f       	mov	r20, r22
    253e:	4f 70       	andi	r20, 0x0F	; 15
    2540:	40 5d       	subi	r20, 0xD0	; 208
    2542:	4a 33       	cpi	r20, 0x3A	; 58
    2544:	18 f0       	brcs	.+6      	; 0x254c <__ultoa_invert+0x7c>
    2546:	49 5d       	subi	r20, 0xD9	; 217
    2548:	31 fd       	sbrc	r19, 1
    254a:	40 52       	subi	r20, 0x20	; 32
    254c:	41 93       	st	Z+, r20
    254e:	02 d0       	rcall	.+4      	; 0x2554 <__ultoa_invert+0x84>
    2550:	a9 f7       	brne	.-22     	; 0x253c <__ultoa_invert+0x6c>
    2552:	ea cf       	rjmp	.-44     	; 0x2528 <__ultoa_invert+0x58>
    2554:	b4 e0       	ldi	r27, 0x04	; 4
    2556:	a6 95       	lsr	r26
    2558:	97 95       	ror	r25
    255a:	87 95       	ror	r24
    255c:	77 95       	ror	r23
    255e:	67 95       	ror	r22
    2560:	ba 95       	dec	r27
    2562:	c9 f7       	brne	.-14     	; 0x2556 <__ultoa_invert+0x86>
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	61 05       	cpc	r22, r1
    2568:	71 05       	cpc	r23, r1
    256a:	08 95       	ret
    256c:	9b 01       	movw	r18, r22
    256e:	ac 01       	movw	r20, r24
    2570:	0a 2e       	mov	r0, r26
    2572:	06 94       	lsr	r0
    2574:	57 95       	ror	r21
    2576:	47 95       	ror	r20
    2578:	37 95       	ror	r19
    257a:	27 95       	ror	r18
    257c:	ba 95       	dec	r27
    257e:	c9 f7       	brne	.-14     	; 0x2572 <__ultoa_invert+0xa2>
    2580:	62 0f       	add	r22, r18
    2582:	73 1f       	adc	r23, r19
    2584:	84 1f       	adc	r24, r20
    2586:	95 1f       	adc	r25, r21
    2588:	a0 1d       	adc	r26, r0
    258a:	08 95       	ret

0000258c <__prologue_saves__>:
    258c:	2f 92       	push	r2
    258e:	3f 92       	push	r3
    2590:	4f 92       	push	r4
    2592:	5f 92       	push	r5
    2594:	6f 92       	push	r6
    2596:	7f 92       	push	r7
    2598:	8f 92       	push	r8
    259a:	9f 92       	push	r9
    259c:	af 92       	push	r10
    259e:	bf 92       	push	r11
    25a0:	cf 92       	push	r12
    25a2:	df 92       	push	r13
    25a4:	ef 92       	push	r14
    25a6:	ff 92       	push	r15
    25a8:	0f 93       	push	r16
    25aa:	1f 93       	push	r17
    25ac:	cf 93       	push	r28
    25ae:	df 93       	push	r29
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	ca 1b       	sub	r28, r26
    25b6:	db 0b       	sbc	r29, r27
    25b8:	cd bf       	out	0x3d, r28	; 61
    25ba:	de bf       	out	0x3e, r29	; 62
    25bc:	09 94       	ijmp

000025be <__epilogue_restores__>:
    25be:	2a 88       	ldd	r2, Y+18	; 0x12
    25c0:	39 88       	ldd	r3, Y+17	; 0x11
    25c2:	48 88       	ldd	r4, Y+16	; 0x10
    25c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    25c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    25c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    25ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    25cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    25ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    25d0:	b9 84       	ldd	r11, Y+9	; 0x09
    25d2:	c8 84       	ldd	r12, Y+8	; 0x08
    25d4:	df 80       	ldd	r13, Y+7	; 0x07
    25d6:	ee 80       	ldd	r14, Y+6	; 0x06
    25d8:	fd 80       	ldd	r15, Y+5	; 0x05
    25da:	0c 81       	ldd	r16, Y+4	; 0x04
    25dc:	1b 81       	ldd	r17, Y+3	; 0x03
    25de:	aa 81       	ldd	r26, Y+2	; 0x02
    25e0:	b9 81       	ldd	r27, Y+1	; 0x01
    25e2:	ce 0f       	add	r28, r30
    25e4:	d1 1d       	adc	r29, r1
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	ed 01       	movw	r28, r26
    25ec:	08 95       	ret

000025ee <_exit>:
    25ee:	f8 94       	cli

000025f0 <__stop_program>:
    25f0:	ff cf       	rjmp	.-2      	; 0x25f0 <__stop_program>
