
Hjernebyggesett_V4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00803800  00002586  0000263a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000251c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006a  0000a51c  0000251c  000025d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000055  00803816  00803816  00002650  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026ac  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000510  00000000  00000000  000026f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000895b  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003707  00000000  00000000  0000b55b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000029eb  00000000  00000000  0000ec62  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000968  00000000  00000000  00011650  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000035ef  00000000  00000000  00011fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001935  00000000  00000000  000155a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000388  00000000  00000000  00016edc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__vector_6>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	05 a8       	ldd	r0, Z+53	; 0x35
      a6:	4c cd       	rjmp	.-1384   	; 0xfffffb40 <__eeprom_end+0xff7efb40>
      a8:	b2 d4       	rcall	.+2404   	; 0xa0e <tinyDendrite_read_signals+0x18>
      aa:	4e b9       	out	0x0e, r20	; 14
      ac:	38 36       	cpi	r19, 0x68	; 104
      ae:	a9 02       	muls	r26, r25
      b0:	0c 50       	subi	r16, 0x0C	; 12
      b2:	b9 91       	ld	r27, Y+
      b4:	86 88       	ldd	r8, Z+22	; 0x16
      b6:	08 3c       	cpi	r16, 0xC8	; 200
      b8:	a6 aa       	std	Z+54, r10	; 0x36
      ba:	aa 2a       	or	r10, r26
      bc:	be 00       	.word	0x00be	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240

000000c2 <__trampolines_end>:
      c2:	00 40       	sbci	r16, 0x00	; 0
      c4:	7a 10       	cpse	r7, r10
      c6:	f3 5a       	subi	r31, 0xA3	; 163
      c8:	00 a0       	ldd	r0, Z+32	; 0x20
      ca:	72 4e       	sbci	r23, 0xE2	; 226
      cc:	18 09       	sbc	r17, r8
      ce:	00 10       	cpse	r0, r0
      d0:	a5 d4       	rcall	.+2378   	; 0xa1c <tinyDendrite_read_signals+0x26>
      d2:	e8 00       	.word	0x00e8	; ????
      d4:	00 e8       	ldi	r16, 0x80	; 128
      d6:	76 48       	sbci	r23, 0x86	; 134
      d8:	17 00       	.word	0x0017	; ????
      da:	00 e4       	ldi	r16, 0x40	; 64
      dc:	0b 54       	subi	r16, 0x4B	; 75
      de:	02 00       	.word	0x0002	; ????
      e0:	00 ca       	rjmp	.-3072   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
      e2:	9a 3b       	cpi	r25, 0xBA	; 186
      e4:	00 00       	nop
      e6:	00 e1       	ldi	r16, 0x10	; 16
      e8:	f5 05       	cpc	r31, r5
      ea:	00 00       	nop
      ec:	80 96       	adiw	r24, 0x20	; 32
      ee:	98 00       	.word	0x0098	; ????
      f0:	00 00       	nop
      f2:	40 42       	sbci	r20, 0x20	; 32
      f4:	0f 00       	.word	0x000f	; ????
      f6:	00 00       	nop
      f8:	a0 86       	std	Z+8, r10	; 0x08
      fa:	01 00       	.word	0x0001	; ????
      fc:	00 00       	nop
      fe:	10 27       	eor	r17, r16
     100:	00 00       	nop
     102:	00 00       	nop
     104:	e8 03       	fmulsu	r22, r16
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	64 00       	.word	0x0064	; ????
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	0a 00       	.word	0x000a	; ????
     112:	00 00       	nop
     114:	00 00       	nop
     116:	01 00       	.word	0x0001	; ????
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	2c 76       	andi	r18, 0x6C	; 108
     11e:	d8 88       	ldd	r13, Y+16	; 0x10
     120:	dc 67       	ori	r29, 0x7C	; 124
     122:	4f 08       	sbc	r4, r15
     124:	23 df       	rcall	.-442    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     126:	c1 df       	rcall	.-126    	; 0xaa <__SREG__+0x6b>
     128:	ae 59       	subi	r26, 0x9E	; 158
     12a:	e1 b1       	in	r30, 0x01	; 1
     12c:	b7 96       	adiw	r30, 0x27	; 39
     12e:	e5 e3       	ldi	r30, 0x35	; 53
     130:	e4 53       	subi	r30, 0x34	; 52
     132:	c6 3a       	cpi	r28, 0xA6	; 166
     134:	e6 51       	subi	r30, 0x16	; 22
     136:	99 76       	andi	r25, 0x69	; 105
     138:	96 e8       	ldi	r25, 0x86	; 134
     13a:	e6 c2       	rjmp	.+1484   	; 0x708 <tinyAxon_update_potential+0xea>
     13c:	84 26       	eor	r8, r20
     13e:	eb 89       	ldd	r30, Y+19	; 0x13
     140:	8c 9b       	sbis	0x11, 4	; 17
     142:	62 ed       	ldi	r22, 0xD2	; 210
     144:	40 7c       	andi	r20, 0xC0	; 192
     146:	6f fc       	.word	0xfc6f	; ????
     148:	ef bc       	out	0x2f, r14	; 47
     14a:	9c 9f       	mul	r25, r28
     14c:	40 f2       	brcs	.-112    	; 0xde <__trampolines_end+0x1c>
     14e:	ba a5       	ldd	r27, Y+42	; 0x2a
     150:	6f a5       	ldd	r22, Y+47	; 0x2f
     152:	f4 90       	lpm	r15, Z
     154:	05 5a       	subi	r16, 0xA5	; 165
     156:	2a f7       	brpl	.-54     	; 0x122 <__trampolines_end+0x60>
     158:	5c 93       	st	X, r21
     15a:	6b 6c       	ori	r22, 0xCB	; 203
     15c:	f9 67       	ori	r31, 0x79	; 121
     15e:	6d c1       	rjmp	.+730    	; 0x43a <DAC_0_initialization+0xe>
     160:	1b fc       	.word	0xfc1b	; ????
     162:	e0 e4       	ldi	r30, 0x40	; 64
     164:	0d 47       	sbci	r16, 0x7D	; 125
     166:	fe f5       	brtc	.+126    	; 0x1e6 <.do_clear_bss_loop>
     168:	20 e6       	ldi	r18, 0x60	; 96
     16a:	b5 00       	.word	0x00b5	; ????
     16c:	d0 ed       	ldi	r29, 0xD0	; 208
     16e:	90 2e       	mov	r9, r16
     170:	03 00       	.word	0x0003	; ????
     172:	94 35       	cpi	r25, 0x54	; 84
     174:	77 05       	cpc	r23, r7
     176:	00 80       	ld	r0, Z
     178:	84 1e       	adc	r8, r20
     17a:	08 00       	.word	0x0008	; ????
     17c:	00 20       	and	r0, r0
     17e:	4e 0a       	sbc	r4, r30
     180:	00 00       	nop
     182:	00 c8       	rjmp	.-4096   	; 0xfffff184 <__eeprom_end+0xff7ef184>
     184:	0c 33       	cpi	r16, 0x3C	; 60
     186:	33 33       	cpi	r19, 0x33	; 51
     188:	33 0f       	add	r19, r19
     18a:	98 6e       	ori	r25, 0xE8	; 232
     18c:	12 83       	std	Z+2, r17	; 0x02
     18e:	11 41       	sbci	r17, 0x11	; 17
     190:	ef 8d       	ldd	r30, Y+31	; 0x1f
     192:	21 14       	cp	r2, r1
     194:	89 3b       	cpi	r24, 0xB9	; 185
     196:	e6 55       	subi	r30, 0x56	; 86
     198:	16 cf       	rjmp	.-468    	; 0xffffffc6 <__eeprom_end+0xff7effc6>
     19a:	fe e6       	ldi	r31, 0x6E	; 110
     19c:	db 18       	sub	r13, r11
     19e:	d1 84       	ldd	r13, Z+9	; 0x09
     1a0:	4b 38       	cpi	r20, 0x8B	; 139
     1a2:	1b f7       	brvc	.-58     	; 0x16a <__trampolines_end+0xa8>
     1a4:	7c 1d       	adc	r23, r12
     1a6:	90 1d       	adc	r25, r0
     1a8:	a4 bb       	out	0x14, r26	; 20
     1aa:	e4 24       	eor	r14, r4
     1ac:	20 32       	cpi	r18, 0x20	; 32
     1ae:	84 72       	andi	r24, 0x24	; 36
     1b0:	5e 22       	and	r5, r30
     1b2:	81 00       	.word	0x0081	; ????
     1b4:	c9 f1       	breq	.+114    	; 0x228 <main+0x28>
     1b6:	24 ec       	ldi	r18, 0xC4	; 196
     1b8:	a1 e5       	ldi	r26, 0x51	; 81
     1ba:	3d 27       	eor	r19, r29

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	df e3       	ldi	r29, 0x3F	; 63
     1c6:	de bf       	out	0x3e, r29	; 62

000001c8 <__do_copy_data>:
     1c8:	18 e3       	ldi	r17, 0x38	; 56
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b8 e3       	ldi	r27, 0x38	; 56
     1ce:	e6 e8       	ldi	r30, 0x86	; 134
     1d0:	f5 e2       	ldi	r31, 0x25	; 37
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
     1d4:	05 90       	lpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	a6 31       	cpi	r26, 0x16	; 22
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>

000001de <__do_clear_bss>:
     1de:	28 e3       	ldi	r18, 0x38	; 56
     1e0:	a6 e1       	ldi	r26, 0x16	; 22
     1e2:	b8 e3       	ldi	r27, 0x38	; 56
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	ab 36       	cpi	r26, 0x6B	; 107
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 00 01 	call	0x200	; 0x200 <main>
     1f2:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <atmel_start_init>:
     1fa:	0e 94 22 02 	call	0x444	; 0x444 <system_init>
     1fe:	08 95       	ret

00000200 <main>:

int main(void)
{	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     200:	0e 94 fd 00 	call	0x1fa	; 0x1fa <atmel_start_init>
	For some reason, instead of the reference voltage being 4.32v, it is 3.3v. 
	A plausible explanation is that the microchip does not up the voltage, so that if the microchip is only ever 
	supplied with 3.3v, it will output 3.3v as the max.
	*/
	
	VREF.CTRLA |= VREF_DAC0REFSEL_4V34_gc;
     204:	e0 ea       	ldi	r30, 0xA0	; 160
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	83 60       	ori	r24, 0x03	; 3
     20c:	80 83       	st	Z, r24
	while (1)
	{
		// We don't want to update the neuron too often because of various reasons. The tinyISR_getflag is set every ms, and so the loop is only run once every ms.  
		if(tinyISR_getflag())
     20e:	0e 94 4a 06 	call	0xc94	; 0xc94 <tinyISR_getflag>
     212:	88 23       	and	r24, r24
     214:	e1 f3       	breq	.-8      	; 0x20e <main+0xe>
		{
			tinyCharge_update_charging_mode();
     216:	0e 94 6f 04 	call	0x8de	; 0x8de <tinyCharge_update_charging_mode>
			
			if(tinyCharge_is_connected_to_charger()){
     21a:	0e 94 37 04 	call	0x86e	; 0x86e <tinyCharge_is_connected_to_charger>
     21e:	88 23       	and	r24, r24
     220:	b9 f0       	breq	.+46     	; 0x250 <main+0x50>
				// Charge loop
				
				if(tinyCharge_is_fully_charged()){
     222:	0e 94 3a 04 	call	0x874	; 0x874 <tinyCharge_is_fully_charged>
     226:	88 23       	and	r24, r24
     228:	49 f0       	breq	.+18     	; 0x23c <main+0x3c>
					tinyLED_set_color(INN_LED, CHARGING_DONE_COLOR);
     22a:	63 e0       	ldi	r22, 0x03	; 3
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <tinyLED_set_color>
					tinyLED_set_color(OUT_LED, OFF);
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 61 06 	call	0xcc2	; 0xcc2 <tinyLED_set_color>
     23a:	11 c0       	rjmp	.+34     	; 0x25e <main+0x5e>
				}
				else{
					tinyLED_set_color_mode(OUT_LED, CHARGING_COLOR, SWING);
     23c:	42 e0       	ldi	r20, 0x02	; 2
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
					tinyLED_set_color(INN_LED, OFF);
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <tinyLED_set_color>
     24e:	07 c0       	rjmp	.+14     	; 0x25e <main+0x5e>
			}
			else{
				// Main loop			
				
				// Set LED
				if(tinyLED_get_color(OUT_LED) == OFF && PING_COLOR != OFF){
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <tinyLED_get_color>
					tinyLED_set_color_mode(OUT_LED, PING_COLOR, PING);
				}
				
				// Update button	
				tinyButton_update();
     256:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <tinyButton_update>
				
				// Update the potential (This is where most of the important stuff happens)
				tinyPotential_update();
     25a:	0e 94 94 08 	call	0x1128	; 0x1128 <tinyPotential_update>
			}
			// Update LED
			tinyLED_update();
     25e:	0e 94 b2 06 	call	0xd64	; 0xd64 <tinyLED_update>
				
			// Switch transistors
			tinyCharge_set_transistors();
     262:	0e 94 95 04 	call	0x92a	; 0x92a <tinyCharge_set_transistors>
			
			// Prepare for next cycle
			tinyISR_setflag(false);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 47 06 	call	0xc8e	; 0xc8e <tinyISR_setflag>
			tinyDebugger_send_uint32("time", tinyTime_now());
     26c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <tinyTime_now>
     270:	ab 01       	movw	r20, r22
     272:	bc 01       	movw	r22, r24
     274:	8c e1       	ldi	r24, 0x1C	; 28
     276:	95 ea       	ldi	r25, 0xA5	; 165
     278:	0e 94 9d 04 	call	0x93a	; 0x93a <tinyDebugger_send_uint32>
			tinyDebugger_end_line();
     27c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <tinyDebugger_end_line>
     280:	c6 cf       	rjmp	.-116    	; 0x20e <main+0xe>

00000282 <ADC_0_init>:
     282:	e0 e4       	ldi	r30, 0x40	; 64
     284:	f6 e0       	ldi	r31, 0x06	; 6
     286:	80 e1       	ldi	r24, 0x10	; 16
     288:	82 83       	std	Z+2, r24	; 0x02
     28a:	85 e0       	ldi	r24, 0x05	; 5
     28c:	80 83       	st	Z, r24
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	08 95       	ret

00000292 <ADC_0_is_conversion_done>:
     292:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     296:	81 70       	andi	r24, 0x01	; 1
     298:	08 95       	ret

0000029a <ADC_0_get_conversion>:
     29a:	e0 e4       	ldi	r30, 0x40	; 64
     29c:	f6 e0       	ldi	r31, 0x06	; 6
     29e:	86 83       	std	Z+6, r24	; 0x06
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 87       	std	Z+8, r24	; 0x08
     2a4:	0e 94 49 01 	call	0x292	; 0x292 <ADC_0_is_conversion_done>
     2a8:	88 23       	and	r24, r24
     2aa:	e1 f3       	breq	.-8      	; 0x2a4 <ADC_0_get_conversion+0xa>
     2ac:	e0 e4       	ldi	r30, 0x40	; 64
     2ae:	f6 e0       	ldi	r31, 0x06	; 6
     2b0:	20 89       	ldd	r18, Z+16	; 0x10
     2b2:	31 89       	ldd	r19, Z+17	; 0x11
     2b4:	93 85       	ldd	r25, Z+11	; 0x0b
     2b6:	91 60       	ori	r25, 0x01	; 1
     2b8:	93 87       	std	Z+11, r25	; 0x0b
     2ba:	c9 01       	movw	r24, r18
     2bc:	08 95       	ret

000002be <BOD_init>:
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	08 95       	ret

000002c2 <DIGITAL_GLUE_LOGIC_0_init>:
     2c2:	e0 ec       	ldi	r30, 0xC0	; 192
     2c4:	f1 e0       	ldi	r31, 0x01	; 1
     2c6:	28 ea       	ldi	r18, 0xA8	; 168
     2c8:	20 87       	std	Z+8, r18	; 0x08
     2ca:	98 e0       	ldi	r25, 0x08	; 8
     2cc:	97 83       	std	Z+7, r25	; 0x07
     2ce:	8b eb       	ldi	r24, 0xBB	; 187
     2d0:	86 83       	std	Z+6, r24	; 0x06
     2d2:	39 e0       	ldi	r19, 0x09	; 9
     2d4:	35 83       	std	Z+5, r19	; 0x05
     2d6:	24 87       	std	Z+12, r18	; 0x0c
     2d8:	93 87       	std	Z+11, r25	; 0x0b
     2da:	82 87       	std	Z+10, r24	; 0x0a
     2dc:	81 e4       	ldi	r24, 0x41	; 65
     2de:	80 83       	st	Z, r24
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	08 95       	ret

000002e4 <CLKCTRL_init>:
     2e4:	47 e0       	ldi	r20, 0x07	; 7
     2e6:	68 ed       	ldi	r22, 0xD8	; 216
     2e8:	8c e7       	ldi	r24, 0x7C	; 124
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 4f 02 	call	0x49e	; 0x49e <protected_write_io>
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	68 ed       	ldi	r22, 0xD8	; 216
     2f4:	81 e6       	ldi	r24, 0x61	; 97
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 4f 02 	call	0x49e	; 0x49e <protected_write_io>
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret

00000300 <CPUINT_init>:
     300:	78 94       	sei
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	08 95       	ret

00000306 <DAC_0_init>:
     306:	81 e4       	ldi	r24, 0x41	; 65
     308:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	08 95       	ret

00000310 <DAC_0_uninit>:
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	08 95       	ret

0000031a <DAC_0_enable>:
     31a:	e0 ea       	ldi	r30, 0xA0	; 160
     31c:	f6 e0       	ldi	r31, 0x06	; 6
     31e:	80 81       	ld	r24, Z
     320:	81 60       	ori	r24, 0x01	; 1
     322:	80 83       	st	Z, r24
     324:	08 95       	ret

00000326 <DAC_0_disable>:
     326:	e0 ea       	ldi	r30, 0xA0	; 160
     328:	f6 e0       	ldi	r31, 0x06	; 6
     32a:	80 81       	ld	r24, Z
     32c:	8e 7f       	andi	r24, 0xFE	; 254
     32e:	80 83       	st	Z, r24
     330:	08 95       	ret

00000332 <DAC_0_set_output>:
     332:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     336:	08 95       	ret

00000338 <mcu_init>:
     338:	e0 e1       	ldi	r30, 0x10	; 16
     33a:	f4 e0       	ldi	r31, 0x04	; 4
     33c:	80 81       	ld	r24, Z
     33e:	88 60       	ori	r24, 0x08	; 8
     340:	81 93       	st	Z+, r24
     342:	e8 31       	cpi	r30, 0x18	; 24
     344:	84 e0       	ldi	r24, 0x04	; 4
     346:	f8 07       	cpc	r31, r24
     348:	c9 f7       	brne	.-14     	; 0x33c <mcu_init+0x4>
     34a:	e0 e3       	ldi	r30, 0x30	; 48
     34c:	f4 e0       	ldi	r31, 0x04	; 4
     34e:	80 81       	ld	r24, Z
     350:	88 60       	ori	r24, 0x08	; 8
     352:	81 93       	st	Z+, r24
     354:	e8 33       	cpi	r30, 0x38	; 56
     356:	84 e0       	ldi	r24, 0x04	; 4
     358:	f8 07       	cpc	r31, r24
     35a:	c9 f7       	brne	.-14     	; 0x34e <mcu_init+0x16>
     35c:	e0 e5       	ldi	r30, 0x50	; 80
     35e:	f4 e0       	ldi	r31, 0x04	; 4
     360:	80 81       	ld	r24, Z
     362:	88 60       	ori	r24, 0x08	; 8
     364:	81 93       	st	Z+, r24
     366:	e8 35       	cpi	r30, 0x58	; 88
     368:	84 e0       	ldi	r24, 0x04	; 4
     36a:	f8 07       	cpc	r31, r24
     36c:	c9 f7       	brne	.-14     	; 0x360 <mcu_init+0x28>
     36e:	08 95       	ret

00000370 <ADC_0_initialization>:
     370:	e5 e1       	ldi	r30, 0x15	; 21
     372:	f4 e0       	ldi	r31, 0x04	; 4
     374:	80 81       	ld	r24, Z
     376:	88 7f       	andi	r24, 0xF8	; 248
     378:	84 60       	ori	r24, 0x04	; 4
     37a:	80 83       	st	Z, r24
     37c:	80 81       	ld	r24, Z
     37e:	87 7f       	andi	r24, 0xF7	; 247
     380:	80 83       	st	Z, r24
     382:	e7 e1       	ldi	r30, 0x17	; 23
     384:	f4 e0       	ldi	r31, 0x04	; 4
     386:	80 81       	ld	r24, Z
     388:	88 7f       	andi	r24, 0xF8	; 248
     38a:	84 60       	ori	r24, 0x04	; 4
     38c:	80 83       	st	Z, r24
     38e:	80 81       	ld	r24, Z
     390:	87 7f       	andi	r24, 0xF7	; 247
     392:	80 83       	st	Z, r24
     394:	e0 e5       	ldi	r30, 0x50	; 80
     396:	f4 e0       	ldi	r31, 0x04	; 4
     398:	80 81       	ld	r24, Z
     39a:	88 7f       	andi	r24, 0xF8	; 248
     39c:	84 60       	ori	r24, 0x04	; 4
     39e:	80 83       	st	Z, r24
     3a0:	80 81       	ld	r24, Z
     3a2:	87 7f       	andi	r24, 0xF7	; 247
     3a4:	80 83       	st	Z, r24
     3a6:	e1 e5       	ldi	r30, 0x51	; 81
     3a8:	f4 e0       	ldi	r31, 0x04	; 4
     3aa:	80 81       	ld	r24, Z
     3ac:	88 7f       	andi	r24, 0xF8	; 248
     3ae:	84 60       	ori	r24, 0x04	; 4
     3b0:	80 83       	st	Z, r24
     3b2:	80 81       	ld	r24, Z
     3b4:	87 7f       	andi	r24, 0xF7	; 247
     3b6:	80 83       	st	Z, r24
     3b8:	e3 e5       	ldi	r30, 0x53	; 83
     3ba:	f4 e0       	ldi	r31, 0x04	; 4
     3bc:	80 81       	ld	r24, Z
     3be:	88 7f       	andi	r24, 0xF8	; 248
     3c0:	84 60       	ori	r24, 0x04	; 4
     3c2:	80 83       	st	Z, r24
     3c4:	80 81       	ld	r24, Z
     3c6:	87 7f       	andi	r24, 0xF7	; 247
     3c8:	80 83       	st	Z, r24
     3ca:	0e 94 41 01 	call	0x282	; 0x282 <ADC_0_init>
     3ce:	08 95       	ret

000003d0 <USART_0_initialization>:
     3d0:	23 98       	cbi	0x04, 3	; 4
     3d2:	e3 e3       	ldi	r30, 0x33	; 51
     3d4:	f4 e0       	ldi	r31, 0x04	; 4
     3d6:	80 81       	ld	r24, Z
     3d8:	87 7f       	andi	r24, 0xF7	; 247
     3da:	80 83       	st	Z, r24
     3dc:	22 9a       	sbi	0x04, 2	; 4
     3de:	2a 98       	cbi	0x05, 2	; 5
     3e0:	0e 94 89 02 	call	0x512	; 0x512 <USART_0_init>
     3e4:	08 95       	ret

000003e6 <TIMER_0_initialization>:
     3e6:	25 9a       	sbi	0x04, 5	; 4
     3e8:	2d 98       	cbi	0x05, 5	; 5
     3ea:	e0 e0       	ldi	r30, 0x00	; 0
     3ec:	f2 e0       	ldi	r31, 0x02	; 2
     3ee:	82 81       	ldd	r24, Z+2	; 0x02
     3f0:	84 60       	ori	r24, 0x04	; 4
     3f2:	82 83       	std	Z+2, r24	; 0x02
     3f4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <TIMER_0_init>
     3f8:	08 95       	ret

000003fa <DIGITAL_GLUE_LOGIC_0_initialization>:
     3fa:	24 9a       	sbi	0x04, 4	; 4
     3fc:	2c 98       	cbi	0x05, 4	; 5
     3fe:	e0 e0       	ldi	r30, 0x00	; 0
     400:	f2 e0       	ldi	r31, 0x02	; 2
     402:	80 81       	ld	r24, Z
     404:	80 61       	ori	r24, 0x10	; 16
     406:	80 83       	st	Z, r24
     408:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIGITAL_GLUE_LOGIC_0_init>
     40c:	08 95       	ret

0000040e <SPI_0_initialization>:
     40e:	02 98       	cbi	0x00, 2	; 0
     410:	e2 e1       	ldi	r30, 0x12	; 18
     412:	f4 e0       	ldi	r31, 0x04	; 4
     414:	80 81       	ld	r24, Z
     416:	87 7f       	andi	r24, 0xF7	; 247
     418:	80 83       	st	Z, r24
     41a:	01 9a       	sbi	0x00, 1	; 0
     41c:	09 98       	cbi	0x01, 1	; 1
     41e:	03 9a       	sbi	0x00, 3	; 0
     420:	0b 98       	cbi	0x01, 3	; 1
     422:	04 9a       	sbi	0x00, 4	; 0
     424:	0c 98       	cbi	0x01, 4	; 1
     426:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_0_init>
     42a:	08 95       	ret

0000042c <DAC_0_initialization>:
     42c:	e6 e1       	ldi	r30, 0x16	; 22
     42e:	f4 e0       	ldi	r31, 0x04	; 4
     430:	80 81       	ld	r24, Z
     432:	88 7f       	andi	r24, 0xF8	; 248
     434:	84 60       	ori	r24, 0x04	; 4
     436:	80 83       	st	Z, r24
     438:	80 81       	ld	r24, Z
     43a:	87 7f       	andi	r24, 0xF7	; 247
     43c:	80 83       	st	Z, r24
     43e:	0e 94 83 01 	call	0x306	; 0x306 <DAC_0_init>
     442:	08 95       	ret

00000444 <system_init>:
     444:	0e 94 9c 01 	call	0x338	; 0x338 <mcu_init>
     448:	26 98       	cbi	0x04, 6	; 4
     44a:	e6 e3       	ldi	r30, 0x36	; 54
     44c:	f4 e0       	ldi	r31, 0x04	; 4
     44e:	80 81       	ld	r24, Z
     450:	87 7f       	andi	r24, 0xF7	; 247
     452:	80 83       	st	Z, r24
     454:	27 98       	cbi	0x04, 7	; 4
     456:	e7 e3       	ldi	r30, 0x37	; 55
     458:	f4 e0       	ldi	r31, 0x04	; 4
     45a:	80 81       	ld	r24, Z
     45c:	87 7f       	andi	r24, 0xF7	; 247
     45e:	80 83       	st	Z, r24
     460:	42 98       	cbi	0x08, 2	; 8
     462:	e2 e5       	ldi	r30, 0x52	; 82
     464:	f4 e0       	ldi	r31, 0x04	; 4
     466:	80 81       	ld	r24, Z
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	80 83       	st	Z, r24
     46c:	45 9a       	sbi	0x08, 5	; 8
     46e:	4d 9a       	sbi	0x09, 5	; 9
     470:	0e 94 72 01 	call	0x2e4	; 0x2e4 <CLKCTRL_init>
     474:	0e 94 53 02 	call	0x4a6	; 0x4a6 <RTC_0_init>
     478:	0e 94 b8 01 	call	0x370	; 0x370 <ADC_0_initialization>
     47c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <USART_0_initialization>
     480:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <TIMER_0_initialization>
     484:	0e 94 fd 01 	call	0x3fa	; 0x3fa <DIGITAL_GLUE_LOGIC_0_initialization>
     488:	0e 94 07 02 	call	0x40e	; 0x40e <SPI_0_initialization>
     48c:	0e 94 16 02 	call	0x42c	; 0x42c <DAC_0_initialization>
     490:	0e 94 80 01 	call	0x300	; 0x300 <CPUINT_init>
     494:	0e 94 6f 02 	call	0x4de	; 0x4de <SLPCTRL_init>
     498:	0e 94 5f 01 	call	0x2be	; 0x2be <BOD_init>
     49c:	08 95       	ret

0000049e <protected_write_io>:
     49e:	fc 01       	movw	r30, r24
     4a0:	64 bf       	out	0x34, r22	; 52
     4a2:	40 83       	st	Z, r20
     4a4:	08 95       	ret

000004a6 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     4a6:	e0 e4       	ldi	r30, 0x40	; 64
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	81 81       	ldd	r24, Z+1	; 0x01
     4ac:	81 11       	cpse	r24, r1
     4ae:	fd cf       	rjmp	.-6      	; 0x4aa <RTC_0_init+0x4>
	}

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	RTC.CNT = 0x20; /* Counter: 0x20 */
     4b0:	e0 e4       	ldi	r30, 0x40	; 64
     4b2:	f1 e0       	ldi	r31, 0x01	; 1
     4b4:	80 e2       	ldi	r24, 0x20	; 32
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	80 87       	std	Z+8, r24	; 0x08
     4ba:	91 87       	std	Z+9, r25	; 0x09

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     4bc:	81 e8       	ldi	r24, 0x81	; 129
     4be:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x20 / TIMESCALE; /* Period: 0x20 */
     4c0:	80 e8       	ldi	r24, 0x80	; 128
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	82 87       	std	Z+10, r24	; 0x0a
     4c6:	93 87       	std	Z+11, r25	; 0x0b

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	RTC.DBGCTRL = 1 << RTC_DBGRUN_bp; /* Run in debug: enabled */
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	85 83       	std	Z+5, r24	; 0x05

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
     4cc:	82 83       	std	Z+2, r24	; 0x02
	              | 1 << RTC_OVF_bp; /* Overflow Interrupt enable: enabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     4ce:	81 89       	ldd	r24, Z+17	; 0x11
     4d0:	81 11       	cpse	r24, r1
     4d2:	fd cf       	rjmp	.-6      	; 0x4ce <RTC_0_init+0x28>
	}

	RTC.PITCTRLA = RTC_PERIOD_OFF_gc    /* Off */
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	08 95       	ret

000004de <SLPCTRL_init>:
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	08 95       	ret

000004e2 <SPI_0_init>:
     4e2:	e0 e2       	ldi	r30, 0x20	; 32
     4e4:	f8 e0       	ldi	r31, 0x08	; 8
     4e6:	83 e2       	ldi	r24, 0x23	; 35
     4e8:	80 83       	st	Z, r24
     4ea:	84 e0       	ldi	r24, 0x04	; 4
     4ec:	81 83       	std	Z+1, r24	; 0x01
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	08 95       	ret

000004f2 <TIMER_0_init>:
     4f2:	e0 e0       	ldi	r30, 0x00	; 0
     4f4:	fa e0       	ldi	r31, 0x0A	; 10
     4f6:	84 e0       	ldi	r24, 0x04	; 4
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	84 a7       	std	Z+44, r24	; 0x2c
     4fc:	95 a7       	std	Z+45, r25	; 0x2d
     4fe:	83 e4       	ldi	r24, 0x43	; 67
     500:	81 83       	std	Z+1, r24	; 0x01
     502:	84 e0       	ldi	r24, 0x04	; 4
     504:	82 83       	std	Z+2, r24	; 0x02
     506:	87 e0       	ldi	r24, 0x07	; 7
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	86 a3       	std	Z+38, r24	; 0x26
     50c:	97 a3       	std	Z+39, r25	; 0x27
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	08 95       	ret

00000512 <USART_0_init>:
     512:	e0 e0       	ldi	r30, 0x00	; 0
     514:	f8 e0       	ldi	r31, 0x08	; 8
     516:	8b e5       	ldi	r24, 0x5B	; 91
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	80 87       	std	Z+8, r24	; 0x08
     51c:	91 87       	std	Z+9, r25	; 0x09
     51e:	80 ec       	ldi	r24, 0xC0	; 192
     520:	86 83       	std	Z+6, r24	; 0x06
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	98 e3       	ldi	r25, 0x38	; 56
     526:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <__iob+0x2>
     52a:	90 93 68 38 	sts	0x3868, r25	; 0x803868 <__iob+0x3>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	08 95       	ret

00000532 <USART_0_write>:
     532:	e0 e0       	ldi	r30, 0x00	; 0
     534:	f8 e0       	ldi	r31, 0x08	; 8
     536:	94 81       	ldd	r25, Z+4	; 0x04
     538:	95 ff       	sbrs	r25, 5
     53a:	fd cf       	rjmp	.-6      	; 0x536 <USART_0_write+0x4>
     53c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     540:	08 95       	ret

00000542 <USART_0_printCHAR>:
     542:	0e 94 99 02 	call	0x532	; 0x532 <USART_0_write>
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	08 95       	ret

0000054c <tinyAxon_add_pulse>:
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
	{
		if(pulse_queue[i] == 0){
     54c:	20 91 16 38 	lds	r18, 0x3816	; 0x803816 <__data_end>
     550:	30 91 17 38 	lds	r19, 0x3817	; 0x803817 <__data_end+0x1>
     554:	23 2b       	or	r18, r19
     556:	51 f0       	breq	.+20     	; 0x56c <tinyAxon_add_pulse+0x20>
     558:	e8 e1       	ldi	r30, 0x18	; 24
     55a:	f8 e3       	ldi	r31, 0x38	; 56
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	b9 01       	movw	r22, r18
     562:	41 91       	ld	r20, Z+
     564:	51 91       	ld	r21, Z+
     566:	45 2b       	or	r20, r21
     568:	81 f4       	brne	.+32     	; 0x58a <tinyAxon_add_pulse+0x3e>
     56a:	02 c0       	rjmp	.+4      	; 0x570 <tinyAxon_add_pulse+0x24>
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
			pulse_queue[i] = new_pulse;
     570:	66 0f       	add	r22, r22
     572:	77 1f       	adc	r23, r23
     574:	fb 01       	movw	r30, r22
     576:	ea 5e       	subi	r30, 0xEA	; 234
     578:	f7 4c       	sbci	r31, 0xC7	; 199
     57a:	80 83       	st	Z, r24
     57c:	91 83       	std	Z+1, r25	; 0x01
			pulses_in_queue++;
     57e:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     582:	8f 5f       	subi	r24, 0xFF	; 255
     584:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <pulses_in_queue>
			// We return so we only ever add one
			break;
     588:	08 95       	ret
     58a:	2f 5f       	subi	r18, 0xFF	; 255
     58c:	3f 4f       	sbci	r19, 0xFF	; 255
*/
static void tinyAxon_add_pulse(uint16_t new_pulse)
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     58e:	2a 30       	cpi	r18, 0x0A	; 10
     590:	31 05       	cpc	r19, r1
     592:	31 f7       	brne	.-52     	; 0x560 <tinyAxon_add_pulse+0x14>
     594:	08 95       	ret

00000596 <tinyAxon_is_firing>:
// DAC has no DAC_0_get_output, so we keep track of this here.
uint8_t axonOutputValue = 0;


_Bool tinyAxon_is_firing(){
	return axonOutputValue != NO_SIGNAL_OUTPUT;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <axonOutputValue>
     59c:	91 11       	cpse	r25, r1
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <tinyAxon_is_firing+0xc>
     5a0:	80 e0       	ldi	r24, 0x00	; 0
}
     5a2:	08 95       	ret

000005a4 <find_newest_pulse>:
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
     5a4:	40 91 16 38 	lds	r20, 0x3816	; 0x803816 <__data_end>
     5a8:	50 91 17 38 	lds	r21, 0x3817	; 0x803817 <__data_end+0x1>
     5ac:	e8 e1       	ldi	r30, 0x18	; 24
     5ae:	f8 e3       	ldi	r31, 0x38	; 56
	
// This function will be used with pulse_queue to find the newest pulse
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
     5b0:	80 e0       	ldi	r24, 0x00	; 0
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     5b2:	91 e0       	ldi	r25, 0x01	; 1
		if (pulse_queue[current_index] > max) {
     5b4:	21 91       	ld	r18, Z+
     5b6:	31 91       	ld	r19, Z+
     5b8:	42 17       	cp	r20, r18
     5ba:	53 07       	cpc	r21, r19
     5bc:	10 f4       	brcc	.+4      	; 0x5c2 <find_newest_pulse+0x1e>
     5be:	89 2f       	mov	r24, r25
			return_index = current_index;
			max = pulse_queue[current_index];
     5c0:	a9 01       	movw	r20, r18
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     5c2:	9f 5f       	subi	r25, 0xFF	; 255
     5c4:	9a 30       	cpi	r25, 0x0A	; 10
     5c6:	b1 f7       	brne	.-20     	; 0x5b4 <find_newest_pulse+0x10>
			return_index = current_index;
			max = pulse_queue[current_index];
		}
	}
	return return_index;
}
     5c8:	08 95       	ret

000005ca <tinyAxon_stop_sending_pulse>:
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
}

void tinyAxon_stop_sending_pulse()
{
	DAC_0_set_output(NO_SIGNAL_OUTPUT);
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 99 01 	call	0x332	; 0x332 <DAC_0_set_output>
	axonOutputValue=NO_SIGNAL_OUTPUT;
     5d2:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <axonOutputValue>
     5d6:	08 95       	ret

000005d8 <tinyAxon_remove_pulse>:

/*
If the potential is very low, we want to try to remove a pulse.
*/
bool tinyAxon_remove_pulse(void)
{
     5d8:	cf 93       	push	r28
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
     5da:	c0 91 2a 38 	lds	r28, 0x382A	; 0x80382a <pulses_in_queue>
     5de:	cc 23       	and	r28, r28
     5e0:	c9 f0       	breq	.+50     	; 0x614 <tinyAxon_remove_pulse+0x3c>
		//There was no pulse to remove.
		return false;
	}
	else{
		// If we are to remove a pulse, we want to remove the one that will fire last.
		uint8_t pulse_index = find_newest_pulse();
     5e2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <find_newest_pulse>
		uint16_t newest_pulse = pulse_queue[pulse_index];
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	fc 01       	movw	r30, r24
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	ea 5e       	subi	r30, 0xEA	; 234
     5f0:	f7 4c       	sbci	r31, 0xC7	; 199
	
		// Now we want to check if the pulse is too far away to be affected by the low potential, or close enough that we decide to remove it.
		// (When we say that the pulse is too far away, it refers to the biological process of how the potential spreads from Dendrites to axon).
		if(newest_pulse > PULSE_NO_RETURN_TIME){
     5f2:	20 81       	ld	r18, Z
     5f4:	31 81       	ldd	r19, Z+1	; 0x01
     5f6:	2d 33       	cpi	r18, 0x3D	; 61
     5f8:	31 05       	cpc	r19, r1
     5fa:	70 f0       	brcs	.+28     	; 0x618 <tinyAxon_remove_pulse+0x40>
			// We decided to remove the pulse
			pulse_queue[pulse_index] = 0;
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	fc 01       	movw	r30, r24
     602:	ea 5e       	subi	r30, 0xEA	; 234
     604:	f7 4c       	sbci	r31, 0xC7	; 199
     606:	10 82       	st	Z, r1
     608:	11 82       	std	Z+1, r1	; 0x01
			pulses_in_queue--;
     60a:	c1 50       	subi	r28, 0x01	; 1
     60c:	c0 93 2a 38 	sts	0x382A, r28	; 0x80382a <pulses_in_queue>
			return true;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	03 c0       	rjmp	.+6      	; 0x61a <tinyAxon_remove_pulse+0x42>
bool tinyAxon_remove_pulse(void)
{
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
		//There was no pulse to remove.
		return false;
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	01 c0       	rjmp	.+2      	; 0x61a <tinyAxon_remove_pulse+0x42>
			pulses_in_queue--;
			return true;
		}
		// Here we have found that there is a pulse queued, but it is old enough to let pass anyway, so now we need to put it back into the queue.
		else{
			return false;
     618:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <tinyAxon_update_potential>:
/*
Decides whether or not the axon should fire
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	6b 01       	movw	r12, r22
     628:	7c 01       	movw	r14, r24
	//While the neuron has enough potential to fire, we want to fire more
	while (potential >= THRESHOLD_POTENTIAL)
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	48 ec       	ldi	r20, 0xC8	; 200
     630:	51 e4       	ldi	r21, 0x41	; 65
     632:	0e 94 bf 0b 	call	0x177e	; 0x177e <__gesf2>
     636:	88 23       	and	r24, r24
     638:	bc f1       	brlt	.+110    	; 0x6a8 <tinyAxon_update_potential+0x8a>
	{
		// We have to check if there are already queued pulses, so that the frequency never exceeds FIRE_DELAY
		if(pulses_in_queue>0){
     63a:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     63e:	88 23       	and	r24, r24
     640:	b1 f0       	breq	.+44     	; 0x66e <tinyAxon_update_potential+0x50>
			uint16_t newest_pulse = pulse_queue[find_newest_pulse()];
     642:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <find_newest_pulse>
     646:	e8 2f       	mov	r30, r24
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	ea 5e       	subi	r30, 0xEA	; 234
     650:	f7 4c       	sbci	r31, 0xC7	; 199
			
			// There is at least one pulse in the queue, and it is "so close", that we need to offset the new pulse, so that we keep at least
			// one FIRE_DELAY between each pulse
			if(newest_pulse + FIRE_DELAY > TRAVLE_DELAY){
     652:	80 81       	ld	r24, Z
     654:	91 81       	ldd	r25, Z+1	; 0x01
     656:	0a 96       	adiw	r24, 0x0a	; 10
     658:	85 36       	cpi	r24, 0x65	; 101
     65a:	91 05       	cpc	r25, r1
     65c:	18 f0       	brcs	.+6      	; 0x664 <tinyAxon_update_potential+0x46>
				tinyAxon_add_pulse(newest_pulse + FIRE_DELAY);
     65e:	0e 94 a6 02 	call	0x54c	; 0x54c <tinyAxon_add_pulse>
     662:	09 c0       	rjmp	.+18     	; 0x676 <tinyAxon_update_potential+0x58>
			}
			// There is at least one pulse in the queue, but it's "far enough away" to ignore
			else{
				tinyAxon_add_pulse(TRAVLE_DELAY);
     664:	84 e6       	ldi	r24, 0x64	; 100
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 a6 02 	call	0x54c	; 0x54c <tinyAxon_add_pulse>
     66c:	04 c0       	rjmp	.+8      	; 0x676 <tinyAxon_update_potential+0x58>
			}
		}
		// There are no pulses in the queue, so we add a pulse as normal
		else{
			tinyAxon_add_pulse(TRAVLE_DELAY);		
     66e:	84 e6       	ldi	r24, 0x64	; 100
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 a6 02 	call	0x54c	; 0x54c <tinyAxon_add_pulse>
		}
		
		potential += POSTFIRE_POTENTIAL_REACTION; // This is usually defined as a negative value, don't be confused by the +=
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	48 ec       	ldi	r20, 0xC8	; 200
     67c:	51 e4       	ldi	r21, 0x41	; 65
     67e:	c7 01       	movw	r24, r14
     680:	b6 01       	movw	r22, r12
     682:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__subsf3>
     686:	6b 01       	movw	r12, r22
     688:	7c 01       	movw	r14, r24
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     68a:	44 e0       	ldi	r20, 0x04	; 4
     68c:	63 e0       	ldi	r22, 0x03	; 3
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
	//While the neuron has enough potential to fire, we want to fire more
	while (potential >= THRESHOLD_POTENTIAL)
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	48 ec       	ldi	r20, 0xC8	; 200
     69a:	51 e4       	ldi	r21, 0x41	; 65
     69c:	c7 01       	movw	r24, r14
     69e:	b6 01       	movw	r22, r12
     6a0:	0e 94 bf 0b 	call	0x177e	; 0x177e <__gesf2>
     6a4:	88 23       	and	r24, r24
     6a6:	4c f6       	brge	.-110    	; 0x63a <tinyAxon_update_potential+0x1c>
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
	}
	
	// If the neuron has a very low potential, we want to remove a pulse from the queue (if there is one)
	if(potential < -THRESHOLD_POTENTIAL)
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	48 ec       	ldi	r20, 0xC8	; 200
     6ae:	51 ec       	ldi	r21, 0xC1	; 193
     6b0:	c7 01       	movw	r24, r14
     6b2:	b6 01       	movw	r22, r12
     6b4:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__cmpsf2>
     6b8:	88 23       	and	r24, r24
     6ba:	0c f0       	brlt	.+2      	; 0x6be <tinyAxon_update_potential+0xa0>
     6bc:	46 c0       	rjmp	.+140    	; 0x74a <tinyAxon_update_potential+0x12c>
	{
		if(pulses_in_queue > 0) // Perhaps this should be a separate variable? For now, we will just simply use -THRESHOLD_POTENTIAL
     6be:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     6c2:	88 23       	and	r24, r24
     6c4:	11 f1       	breq	.+68     	; 0x70a <tinyAxon_update_potential+0xec>
		{
			// The neurons potential is low enough to attempt to remove a queued fire (Fire less)
			if(tinyAxon_remove_pulse())
     6c6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <tinyAxon_remove_pulse>
     6ca:	88 23       	and	r24, r24
     6cc:	f1 f1       	breq	.+124    	; 0x74a <tinyAxon_update_potential+0x12c>
			{
				// The potential has evened out a bit
				potential += THRESHOLD_POTENTIAL;
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	48 ec       	ldi	r20, 0xC8	; 200
     6d4:	51 e4       	ldi	r21, 0x41	; 65
     6d6:	c7 01       	movw	r24, r14
     6d8:	b6 01       	movw	r22, r12
     6da:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__addsf3>
     6de:	6b 01       	movw	r12, r22
     6e0:	7c 01       	movw	r14, r24
     6e2:	33 c0       	rjmp	.+102    	; 0x74a <tinyAxon_update_potential+0x12c>
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
		{
			if(pulse_queue[i] != 0){
     6e4:	80 81       	ld	r24, Z
     6e6:	91 81       	ldd	r25, Z+1	; 0x01
     6e8:	00 97       	sbiw	r24, 0x00	; 0
     6ea:	39 f0       	breq	.+14     	; 0x6fa <tinyAxon_update_potential+0xdc>
				pulse_queue[i]--;
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	80 83       	st	Z, r24
     6f0:	91 83       	std	Z+1, r25	; 0x01
				
				// If the time went from 1 to 0, we fire the axon
				if(pulse_queue[i] == 0){
     6f2:	89 2b       	or	r24, r25
     6f4:	11 f4       	brne	.+4      	; 0x6fa <tinyAxon_update_potential+0xdc>
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
	pulses_in_queue--;
     6f6:	41 50       	subi	r20, 0x01	; 1
Function to set firing.
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
     6f8:	51 e0       	ldi	r21, 0x01	; 1
     6fa:	32 96       	adiw	r30, 0x02	; 2
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     6fc:	e2 17       	cp	r30, r18
     6fe:	f3 07       	cpc	r31, r19
     700:	89 f7       	brne	.-30     	; 0x6e4 <tinyAxon_update_potential+0xc6>
     702:	50 93 2c 38 	sts	0x382C, r21	; 0x80382c <tinyAxon_should_fire>
     706:	40 93 2a 38 	sts	0x382A, r20	; 0x80382a <pulses_in_queue>
The function should set the DAC to fire for two
update cycles once the pulse flag is set high.
*/
static void tinyAxon_update_pulse_transmitter(void)
{
	if (tinyAxon_should_fire)
     70a:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <tinyAxon_should_fire>
     70e:	88 23       	and	r24, r24
     710:	91 f0       	breq	.+36     	; 0x736 <tinyAxon_update_potential+0x118>
	{
		tinyAxon_should_fire = false;
     712:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <tinyAxon_should_fire>
*/
static void tinyAxon_start_sending_pulse()
{
	if (NEURONTYPE == EXCITATORY_NEURON)
	{
		DAC_0_set_output(EXCITATORY_NEURON_OUTPUT);
     716:	86 ee       	ldi	r24, 0xE6	; 230
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 99 01 	call	0x332	; 0x332 <DAC_0_set_output>
		axonOutputValue=EXCITATORY_NEURON_OUTPUT;
     71e:	86 ee       	ldi	r24, 0xE6	; 230
     720:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <axonOutputValue>
	{
		DAC_0_set_output(INHIBITORY_NEURON_OUTPUT);
		axonOutputValue=INHIBITORY_NEURON_OUTPUT;
	}
	
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
     724:	44 e0       	ldi	r20, 0x04	; 4
     726:	65 e0       	ldi	r22, 0x05	; 5
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
{
	if (tinyAxon_should_fire)
	{
		tinyAxon_should_fire = false;
		tinyAxon_start_sending_pulse();
		tinyAxon_has_just_fired = true;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <tinyAxon_has_just_fired>
     734:	15 c0       	rjmp	.+42     	; 0x760 <tinyAxon_update_potential+0x142>
		
	}
	else if (tinyAxon_has_just_fired)
     736:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <tinyAxon_has_just_fired>
     73a:	88 23       	and	r24, r24
     73c:	19 f0       	breq	.+6      	; 0x744 <tinyAxon_update_potential+0x126>
	{
		tinyAxon_has_just_fired = false;
     73e:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <tinyAxon_has_just_fired>
     742:	0e c0       	rjmp	.+28     	; 0x760 <tinyAxon_update_potential+0x142>
	}
	else if (!tinyAxon_has_just_fired && !tinyAxon_should_fire)
	{
		tinyAxon_stop_sending_pulse();
     744:	0e 94 e5 02 	call	0x5ca	; 0x5ca <tinyAxon_stop_sending_pulse>
     748:	0b c0       	rjmp	.+22     	; 0x760 <tinyAxon_update_potential+0x142>
			}
		}
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
     74a:	40 91 2a 38 	lds	r20, 0x382A	; 0x80382a <pulses_in_queue>
     74e:	44 23       	and	r20, r20
     750:	e1 f2       	breq	.-72     	; 0x70a <tinyAxon_update_potential+0xec>
     752:	50 91 2c 38 	lds	r21, 0x382C	; 0x80382c <tinyAxon_should_fire>
     756:	e6 e1       	ldi	r30, 0x16	; 22
     758:	f8 e3       	ldi	r31, 0x38	; 56
     75a:	2a e2       	ldi	r18, 0x2A	; 42
     75c:	38 e3       	ldi	r19, 0x38	; 56
     75e:	c2 cf       	rjmp	.-124    	; 0x6e4 <tinyAxon_update_potential+0xc6>
	}
	
	// Here we set the actual output of the DAC (Digital to Analog Converter)
	tinyAxon_update_pulse_transmitter();
	
	tinyDebugger_send_uint8("Axon", axonOutputValue);
     760:	60 91 2b 38 	lds	r22, 0x382B	; 0x80382b <axonOutputValue>
     764:	81 e2       	ldi	r24, 0x21	; 33
     766:	95 ea       	ldi	r25, 0xA5	; 165
     768:	0e 94 af 04 	call	0x95e	; 0x95e <tinyDebugger_send_uint8>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     76c:	66 b1       	in	r22, 0x06	; 6
	tinyDebugger_send_uint8("Pulses", AXON_CHECK_PIN_get_level());
     76e:	66 1f       	adc	r22, r22
     770:	66 27       	eor	r22, r22
     772:	66 1f       	adc	r22, r22
     774:	86 e2       	ldi	r24, 0x26	; 38
     776:	95 ea       	ldi	r25, 0xA5	; 165
     778:	0e 94 af 04 	call	0x95e	; 0x95e <tinyDebugger_send_uint8>
	
	
	return potential;
}
     77c:	c7 01       	movw	r24, r14
     77e:	b6 01       	movw	r22, r12
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	08 95       	ret

0000078a <tinyAxon_check_charge_level>:
     78a:	66 b1       	in	r22, 0x06	; 6

_Bool tinyAxon_check_charge_level(void)
{
	// We check the AXON_CHECK_PIN. If it is hight while the axon is not firing, it must be connected to a charger
	
	tinyDebugger_send_uint8("Pulses", AXON_CHECK_PIN_get_level());
     78c:	66 1f       	adc	r22, r22
     78e:	66 27       	eor	r22, r22
     790:	66 1f       	adc	r22, r22
     792:	86 e2       	ldi	r24, 0x26	; 38
     794:	95 ea       	ldi	r25, 0xA5	; 165
     796:	0e 94 af 04 	call	0x95e	; 0x95e <tinyDebugger_send_uint8>
	return (AXON_CHECK_PIN_get_level() && !tinyAxon_has_just_fired);
     79a:	37 9b       	sbis	0x06, 7	; 6
     79c:	05 c0       	rjmp	.+10     	; 0x7a8 <tinyAxon_check_charge_level+0x1e>
     79e:	90 91 2d 38 	lds	r25, 0x382D	; 0x80382d <tinyAxon_has_just_fired>
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	89 27       	eor	r24, r25
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <tinyAxon_check_charge_level+0x22>
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	81 70       	andi	r24, 0x01	; 1
     7ae:	08 95       	ret

000007b0 <tinyButton_update>:
/*
If the button has been let go, we change button_press to true. This only lasts one cycle, before it is set to false again.
If the button is held down for longer than PULSEMODE_BUTTON_PRESS_TIME, we toggle the pulse mode state.
*/
void tinyButton_update(void)
{
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
	button_press = false;
     7b8:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <button_press>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return VPORTC.IN & (1 << pin);
     7bc:	8a b1       	in	r24, 0x0a	; 10
	_Bool button_is_pushed_down = !BUTTON_PIN_get_level(); // The digital port will be read as low if the button is pushed down.
     7be:	d1 e0       	ldi	r29, 0x01	; 1
     7c0:	c8 2f       	mov	r28, r24
     7c2:	c4 70       	andi	r28, 0x04	; 4
     7c4:	82 fd       	sbrc	r24, 2
     7c6:	d0 e0       	ldi	r29, 0x00	; 0

	if (button_is_pushed_down && !button_was_pushed_down)
     7c8:	c1 11       	cpse	r28, r1
     7ca:	36 c0       	rjmp	.+108    	; 0x838 <tinyButton_update+0x88>
     7cc:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <button_was_pushed_down>
     7d0:	81 11       	cpse	r24, r1
     7d2:	0e c0       	rjmp	.+28     	; 0x7f0 <tinyButton_update+0x40>
	{
		tinyButton_start_time = tinyTime_now();
     7d4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <tinyTime_now>
     7d8:	60 93 2e 38 	sts	0x382E, r22	; 0x80382e <tinyButton_start_time>
     7dc:	70 93 2f 38 	sts	0x382F, r23	; 0x80382f <tinyButton_start_time+0x1>
     7e0:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <tinyButton_start_time+0x2>
     7e4:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <tinyButton_start_time+0x3>
	}
	if (button_is_pushed_down && button_was_pushed_down)
     7e8:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <button_was_pushed_down>
     7ec:	88 23       	and	r24, r24
     7ee:	69 f1       	breq	.+90     	; 0x84a <tinyButton_update+0x9a>
	{
		if ((tinyTime_now() - tinyButton_start_time) > PULSEMODE_BUTTON_PRESS_TIME)
     7f0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <tinyTime_now>
     7f4:	00 91 2e 38 	lds	r16, 0x382E	; 0x80382e <tinyButton_start_time>
     7f8:	10 91 2f 38 	lds	r17, 0x382F	; 0x80382f <tinyButton_start_time+0x1>
     7fc:	20 91 30 38 	lds	r18, 0x3830	; 0x803830 <tinyButton_start_time+0x2>
     800:	30 91 31 38 	lds	r19, 0x3831	; 0x803831 <tinyButton_start_time+0x3>
     804:	60 1b       	sub	r22, r16
     806:	71 0b       	sbc	r23, r17
     808:	82 0b       	sbc	r24, r18
     80a:	93 0b       	sbc	r25, r19
     80c:	0e 94 c7 0a 	call	0x158e	; 0x158e <__floatunsisf>
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	48 ec       	ldi	r20, 0xC8	; 200
     816:	52 e4       	ldi	r21, 0x42	; 66
     818:	0e 94 bf 0b 	call	0x177e	; 0x177e <__gesf2>
     81c:	18 16       	cp	r1, r24
     81e:	64 f4       	brge	.+24     	; 0x838 <tinyButton_update+0x88>
		{
			tinyPulse_toggle_pulse_mode();
     820:	0e 94 1e 09 	call	0x123c	; 0x123c <tinyPulse_toggle_pulse_mode>
			tinyButton_start_time = tinyTime_now();
     824:	0e 94 71 09 	call	0x12e2	; 0x12e2 <tinyTime_now>
     828:	60 93 2e 38 	sts	0x382E, r22	; 0x80382e <tinyButton_start_time>
     82c:	70 93 2f 38 	sts	0x382F, r23	; 0x80382f <tinyButton_start_time+0x1>
     830:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <tinyButton_start_time+0x2>
     834:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <tinyButton_start_time+0x3>
		}
	}
	if (!button_is_pushed_down && button_was_pushed_down)
     838:	cc 23       	and	r28, r28
     83a:	39 f0       	breq	.+14     	; 0x84a <tinyButton_update+0x9a>
     83c:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <button_was_pushed_down>
     840:	88 23       	and	r24, r24
     842:	19 f0       	breq	.+6      	; 0x84a <tinyButton_update+0x9a>
	{
		button_press = true;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <button_press>
	}
	button_was_pushed_down = button_is_pushed_down;
     84a:	d0 93 33 38 	sts	0x3833, r29	; 0x803833 <button_was_pushed_down>
}
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	08 95       	ret

00000858 <tinyButton_update_potential>:

double tinyButton_update_potential(double potential){
	if(button_press){
     858:	20 91 32 38 	lds	r18, 0x3832	; 0x803832 <button_press>
     85c:	22 23       	and	r18, r18
     85e:	31 f0       	breq	.+12     	; 0x86c <tinyButton_update_potential+0x14>
		potential += BUTTON_PRESS_REACTION;
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	40 ed       	ldi	r20, 0xD0	; 208
     866:	51 e4       	ldi	r21, 0x41	; 65
     868:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__addsf3>
	}
	return potential;
}
     86c:	08 95       	ret

0000086e <tinyCharge_is_connected_to_charger>:
*/
uint8_t charge_counter = 0; 

_Bool tinyCharge_is_connected_to_charger(){
	return connected_to_charger;
}
     86e:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <connected_to_charger>
     872:	08 95       	ret

00000874 <tinyCharge_is_fully_charged>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     874:	86 b1       	in	r24, 0x06	; 6

_Bool tinyCharge_is_fully_charged(){
	return CHARGING_STATUS_PIN_get_level();
}
     876:	86 fb       	bst	r24, 6
     878:	88 27       	eor	r24, r24
     87a:	80 f9       	bld	r24, 0
     87c:	08 95       	ret

0000087e <tinyCharge_DAC_dissable>:
void tinyCharge_DAC_dissable(){
	
	// We need some way to disable the DAC to prevent huge current draw when charging (64mA). When there is no code uploaded to the attiny, there is no problem.
	// We're going to try to enable the pin as a dendrite, since they seem to be doing fine. Completely uninitializing the pin probably caused a microchip to be fried.
	
	DAC_0_uninit();
     87e:	0e 94 88 01 	call	0x310	; 0x310 <DAC_0_uninit>
	DAC_0_disable();
     882:	0e 94 93 01 	call	0x326	; 0x326 <DAC_0_disable>
     886:	08 95       	ret

00000888 <tinyCharge_DAC_enable>:
void tinyCharge_DAC_enable(){
	
	// We need some way to disable the DAC to prevent huge current draw when charging (64mA). When there is no code uploaded to the attiny, there is no problem.
	// We're going to try to enable the pin as a dendrite, since they seem to be doing fine. Completely uninitializing the pin probably caused a microchip to be fried.
	
	DAC_0_init();
     888:	0e 94 83 01 	call	0x306	; 0x306 <DAC_0_init>
	DAC_0_enable();
     88c:	0e 94 8d 01 	call	0x31a	; 0x31a <DAC_0_enable>
     890:	08 95       	ret

00000892 <tinyCharge_switch_mode>:
}


void tinyCharge_switch_mode(){
	
	if(connected_to_charger){
     892:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <connected_to_charger>
     896:	88 23       	and	r24, r24
     898:	71 f0       	breq	.+28     	; 0x8b6 <tinyCharge_switch_mode+0x24>
		// Switch from main to charging mode
		
		// Set LED
		tinyLED_set_color_mode(OUT_LED, CHARGING_COLOR, SWING);
     89a:	42 e0       	ldi	r20, 0x02	; 2
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
		tinyLED_set_color(INN_LED, OFF);
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <tinyLED_set_color>


		// Stop axon from firing
		// (There is a small chance that the neuron is put into charging mode as it is firing. The axon is then never told to stop firing)
		tinyAxon_stop_sending_pulse();
     8ac:	0e 94 e5 02 	call	0x5ca	; 0x5ca <tinyAxon_stop_sending_pulse>

		// disable DAC
		tinyCharge_DAC_dissable();
     8b0:	0e 94 3f 04 	call	0x87e	; 0x87e <tinyCharge_DAC_dissable>
     8b4:	08 95       	ret
	}
	else{
		// Switch from charge to main mode
		
		// Set LED
		tinyLED_set_color(OUT_LED, OFF);
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	0e 94 61 06 	call	0xcc2	; 0xcc2 <tinyLED_set_color>
		tinyLED_set_color(INN_LED, OFF);
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <tinyLED_set_color>
		
		// enable DAC
		tinyCharge_DAC_enable();
     8c6:	0e 94 44 04 	call	0x888	; 0x888 <tinyCharge_DAC_enable>
     8ca:	08 95       	ret

000008cc <tinyCharge_set_charging_mode>:
	}
}

void tinyCharge_set_charging_mode(_Bool charging_status){
	if(charging_status != connected_to_charger){
     8cc:	90 91 58 38 	lds	r25, 0x3858	; 0x803858 <connected_to_charger>
     8d0:	98 17       	cp	r25, r24
     8d2:	21 f0       	breq	.+8      	; 0x8dc <tinyCharge_set_charging_mode+0x10>
		connected_to_charger = charging_status;
     8d4:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <connected_to_charger>
		tinyCharge_switch_mode();
     8d8:	0e 94 49 04 	call	0x892	; 0x892 <tinyCharge_switch_mode>
     8dc:	08 95       	ret

000008de <tinyCharge_update_charging_mode>:
*/
void tinyCharge_update_charging_mode(){
	// For complicated reasons, the axon_check_level will be high even when the charger is not connected
	// WHEN the neuron is in charging mode, hence we ignore the axon level when the neuron is in charging mode
	_Bool charging;
	if(connected_to_charger){
     8de:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <connected_to_charger>
     8e2:	88 23       	and	r24, r24
     8e4:	19 f0       	breq	.+6      	; 0x8ec <tinyCharge_update_charging_mode+0xe>
		charging = tinyDendrite_check_charge_level();
     8e6:	0e 94 36 05 	call	0xa6c	; 0xa6c <tinyDendrite_check_charge_level>
     8ea:	0a c0       	rjmp	.+20     	; 0x900 <tinyCharge_update_charging_mode+0x22>
	} else{
		charging = tinyDendrite_check_charge_level() || tinyAxon_check_charge_level();
     8ec:	0e 94 36 05 	call	0xa6c	; 0xa6c <tinyDendrite_check_charge_level>
     8f0:	81 11       	cpse	r24, r1
     8f2:	03 c0       	rjmp	.+6      	; 0x8fa <tinyCharge_update_charging_mode+0x1c>
     8f4:	0e 94 c5 03 	call	0x78a	; 0x78a <tinyAxon_check_charge_level>
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <tinyCharge_update_charging_mode+0x20>
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	81 70       	andi	r24, 0x01	; 1
	}
	
	// In order to prevent the axon from stimulating itself, we only switch into charging mode when the conditions have been right for several cycles
	if(!connected_to_charger && charging){
     900:	90 91 58 38 	lds	r25, 0x3858	; 0x803858 <connected_to_charger>
     904:	91 11       	cpse	r25, r1
     906:	10 c0       	rjmp	.+32     	; 0x928 <tinyCharge_update_charging_mode+0x4a>
     908:	88 23       	and	r24, r24
     90a:	71 f0       	breq	.+28     	; 0x928 <tinyCharge_update_charging_mode+0x4a>
		charge_counter++;
     90c:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <charge_counter>
     910:	8f 5f       	subi	r24, 0xFF	; 255
		if(charge_counter > CYCLES_REQUIRED_FOR_CHARGING_MODE_SWITCH){
     912:	8b 30       	cpi	r24, 0x0B	; 11
     914:	18 f4       	brcc	.+6      	; 0x91c <tinyCharge_update_charging_mode+0x3e>
		charging = tinyDendrite_check_charge_level() || tinyAxon_check_charge_level();
	}
	
	// In order to prevent the axon from stimulating itself, we only switch into charging mode when the conditions have been right for several cycles
	if(!connected_to_charger && charging){
		charge_counter++;
     916:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <charge_counter>
     91a:	08 95       	ret
		if(charge_counter > CYCLES_REQUIRED_FOR_CHARGING_MODE_SWITCH){
			charge_counter = 0;
     91c:	10 92 34 38 	sts	0x3834, r1	; 0x803834 <charge_counter>
			tinyCharge_set_charging_mode(charging);
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 66 04 	call	0x8cc	; 0x8cc <tinyCharge_set_charging_mode>
     928:	08 95       	ret

0000092a <tinyCharge_set_transistors>:
	}
}


void tinyCharge_set_transistors(){
	if(connected_to_charger){
     92a:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <connected_to_charger>
     92e:	88 23       	and	r24, r24
     930:	11 f0       	breq	.+4      	; 0x936 <tinyCharge_set_transistors+0xc>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     932:	4d 98       	cbi	0x09, 5	; 9
     934:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     936:	4d 9a       	sbi	0x09, 5	; 9
     938:	08 95       	ret

0000093a <tinyDebugger_send_uint32>:
}
void tinyDebugger_send_string(const char* name, char * value){
	if(DEBUGGING){
		printf("%s:%s\t", name, value);
	}
}
     93a:	7f 93       	push	r23
     93c:	6f 93       	push	r22
     93e:	5f 93       	push	r21
     940:	4f 93       	push	r20
     942:	9f 93       	push	r25
     944:	8f 93       	push	r24
     946:	85 e3       	ldi	r24, 0x35	; 53
     948:	95 ea       	ldi	r25, 0xA5	; 165
     94a:	9f 93       	push	r25
     94c:	8f 93       	push	r24
     94e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <printf>
     952:	8d b7       	in	r24, 0x3d	; 61
     954:	9e b7       	in	r25, 0x3e	; 62
     956:	08 96       	adiw	r24, 0x08	; 8
     958:	8d bf       	out	0x3d, r24	; 61
     95a:	9e bf       	out	0x3e, r25	; 62
     95c:	08 95       	ret

0000095e <tinyDebugger_send_uint8>:
     95e:	1f 92       	push	r1
     960:	6f 93       	push	r22
     962:	9f 93       	push	r25
     964:	8f 93       	push	r24
     966:	8e e3       	ldi	r24, 0x3E	; 62
     968:	95 ea       	ldi	r25, 0xA5	; 165
     96a:	9f 93       	push	r25
     96c:	8f 93       	push	r24
     96e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <printf>
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	08 95       	ret

00000980 <tinyDebugger_send_double>:
     980:	cf 92       	push	r12
     982:	df 92       	push	r13
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	64 97       	sbiw	r28, 0x14	; 20
     996:	cd bf       	out	0x3d, r28	; 61
     998:	de bf       	out	0x3e, r29	; 62
     99a:	d8 2e       	mov	r13, r24
     99c:	c9 2e       	mov	r12, r25
     99e:	cb 01       	movw	r24, r22
     9a0:	ba 01       	movw	r22, r20
     9a2:	9e 01       	movw	r18, r28
     9a4:	2f 5f       	subi	r18, 0xFF	; 255
     9a6:	3f 4f       	sbci	r19, 0xFF	; 255
     9a8:	79 01       	movw	r14, r18
     9aa:	89 01       	movw	r16, r18
     9ac:	21 e0       	ldi	r18, 0x01	; 1
     9ae:	41 e0       	ldi	r20, 0x01	; 1
     9b0:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <dtostrf>
     9b4:	ff 92       	push	r15
     9b6:	ef 92       	push	r14
     9b8:	cf 92       	push	r12
     9ba:	df 92       	push	r13
     9bc:	86 e4       	ldi	r24, 0x46	; 70
     9be:	95 ea       	ldi	r25, 0xA5	; 165
     9c0:	9f 93       	push	r25
     9c2:	8f 93       	push	r24
     9c4:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <printf>
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	64 96       	adiw	r28, 0x14	; 20
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	df 90       	pop	r13
     9e8:	cf 90       	pop	r12
     9ea:	08 95       	ret

000009ec <tinyDebugger_end_line>:
void tinyDebugger_end_line(){
	if(DEBUGGING){
		printf("\r\n");
     9ec:	85 e5       	ldi	r24, 0x55	; 85
     9ee:	95 ea       	ldi	r25, 0xA5	; 165
     9f0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <puts>
     9f4:	08 95       	ret

000009f6 <tinyDendrite_read_signals>:

/*
This function reads the voltage at the Dendrite inputs with the ADC
*/
static void tinyDendrite_read_signals(void)
{
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ce e0       	ldi	r28, 0x0E	; 14
     a04:	d8 e3       	ldi	r29, 0x38	; 56
     a06:	0f e3       	ldi	r16, 0x3F	; 63
     a08:	18 e3       	ldi	r17, 0x38	; 56
     a0a:	0f 2e       	mov	r0, r31
     a0c:	f3 e1       	ldi	r31, 0x13	; 19
     a0e:	ef 2e       	mov	r14, r31
     a10:	f8 e3       	ldi	r31, 0x38	; 56
     a12:	ff 2e       	mov	r15, r31
     a14:	f0 2d       	mov	r31, r0
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_values[i] = ADC_0_get_conversion(Dendrite_ports[i]);
     a16:	89 91       	ld	r24, Y+
     a18:	0e 94 4d 01 	call	0x29a	; 0x29a <ADC_0_get_conversion>
     a1c:	f8 01       	movw	r30, r16
     a1e:	81 93       	st	Z+, r24
     a20:	8f 01       	movw	r16, r30
/*
This function reads the voltage at the Dendrite inputs with the ADC
*/
static void tinyDendrite_read_signals(void)
{
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
     a22:	ce 15       	cp	r28, r14
     a24:	df 05       	cpc	r29, r15
     a26:	b9 f7       	brne	.-18     	; 0xa16 <tinyDendrite_read_signals+0x20>
	{
		tinyDendrite_values[i] = ADC_0_get_conversion(Dendrite_ports[i]);
	}
	tinyDebugger_send_uint8("D1", tinyDendrite_values[0]);
     a28:	cf e3       	ldi	r28, 0x3F	; 63
     a2a:	d8 e3       	ldi	r29, 0x38	; 56
     a2c:	68 81       	ld	r22, Y
     a2e:	87 e5       	ldi	r24, 0x57	; 87
     a30:	95 ea       	ldi	r25, 0xA5	; 165
     a32:	0e 94 af 04 	call	0x95e	; 0x95e <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D2", tinyDendrite_values[1]);
     a36:	69 81       	ldd	r22, Y+1	; 0x01
     a38:	8a e5       	ldi	r24, 0x5A	; 90
     a3a:	95 ea       	ldi	r25, 0xA5	; 165
     a3c:	0e 94 af 04 	call	0x95e	; 0x95e <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D3", tinyDendrite_values[2]);
     a40:	6a 81       	ldd	r22, Y+2	; 0x02
     a42:	8d e5       	ldi	r24, 0x5D	; 93
     a44:	95 ea       	ldi	r25, 0xA5	; 165
     a46:	0e 94 af 04 	call	0x95e	; 0x95e <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
     a4a:	6b 81       	ldd	r22, Y+3	; 0x03
     a4c:	80 e6       	ldi	r24, 0x60	; 96
     a4e:	95 ea       	ldi	r25, 0xA5	; 165
     a50:	0e 94 af 04 	call	0x95e	; 0x95e <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
     a54:	6c 81       	ldd	r22, Y+4	; 0x04
     a56:	83 e6       	ldi	r24, 0x63	; 99
     a58:	95 ea       	ldi	r25, 0xA5	; 165
     a5a:	0e 94 af 04 	call	0x95e	; 0x95e <tinyDebugger_send_uint8>
}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	08 95       	ret

00000a6c <tinyDendrite_check_charge_level>:

_Bool tinyDendrite_check_charge_level(void)
{
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
	_Bool charging = false;
	
	tinyDendrite_read_signals();
     a70:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <tinyDendrite_read_signals>
     a74:	ea e3       	ldi	r30, 0x3A	; 58
     a76:	f8 e3       	ldi	r31, 0x38	; 56
     a78:	c5 e3       	ldi	r28, 0x35	; 53
     a7a:	d8 e3       	ldi	r29, 0x38	; 56
     a7c:	af e3       	ldi	r26, 0x3F	; 63
     a7e:	b8 e3       	ldi	r27, 0x38	; 56
     a80:	2f e3       	ldi	r18, 0x3F	; 63
     a82:	38 e3       	ldi	r19, 0x38	; 56
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
}

_Bool tinyDendrite_check_charge_level(void)
{
	_Bool charging = false;
     a84:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     a86:	47 e0       	ldi	r20, 0x07	; 7
	_Bool charging = false;
	
	tinyDendrite_read_signals();
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     a88:	90 81       	ld	r25, Z
     a8a:	99 93       	st	Y+, r25
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     a8c:	9d 91       	ld	r25, X+
     a8e:	99 3e       	cpi	r25, 0xE9	; 233
     a90:	10 f0       	brcs	.+4      	; 0xa96 <tinyDendrite_check_charge_level+0x2a>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     a92:	40 83       	st	Z, r20
			charging = true;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	31 96       	adiw	r30, 0x01	; 1
_Bool tinyDendrite_check_charge_level(void)
{
	_Bool charging = false;
	
	tinyDendrite_read_signals();
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     a98:	e2 17       	cp	r30, r18
     a9a:	f3 07       	cpc	r31, r19
     a9c:	a9 f7       	brne	.-22     	; 0xa88 <tinyDendrite_check_charge_level+0x1c>
			tinyDendrite_current_signals[i] = CHARGING;
			charging = true;
		}
	}
	return charging;
}
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <tinyDendrite_update_signals>:

/*
This function converts the 8 bit value from the ADC into one of the signal types defined in DendriteSignal
*/
void tinyDendrite_update_signals(void)
{
     aa4:	af 92       	push	r10
     aa6:	bf 92       	push	r11
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
	
	//Read the analog voltage values on each of the Dendrites
	//Since read_signals is called in check_charge_level, and check_charge_level is called at the beginning
	//of every loop, it's probably unnecessary to read the signals again, but I'll leave it inn for now.
	tinyDendrite_read_signals();
     ab6:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <tinyDendrite_read_signals>
     aba:	ea e3       	ldi	r30, 0x3A	; 58
     abc:	f8 e3       	ldi	r31, 0x38	; 56
     abe:	25 e3       	ldi	r18, 0x35	; 53
     ac0:	38 e3       	ldi	r19, 0x38	; 56
     ac2:	cf e3       	ldi	r28, 0x3F	; 63
     ac4:	d8 e3       	ldi	r29, 0x38	; 56
     ac6:	4f e3       	ldi	r20, 0x3F	; 63
     ac8:	58 e3       	ldi	r21, 0x38	; 56
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     aca:	dd 24       	eor	r13, r13
     acc:	d3 94       	inc	r13
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     ace:	0f 2e       	mov	r0, r31
     ad0:	f3 e0       	ldi	r31, 0x03	; 3
     ad2:	ef 2e       	mov	r14, r31
     ad4:	f0 2d       	mov	r31, r0
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     ad6:	68 94       	set
     ad8:	ff 24       	eor	r15, r15
     ada:	f1 f8       	bld	r15, 1
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     adc:	04 e0       	ldi	r16, 0x04	; 4
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     ade:	16 e0       	ldi	r17, 0x06	; 6
			// been moved to tinyDendrite_check_charging.
			//charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     ae0:	75 e0       	ldi	r23, 0x05	; 5
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     ae2:	67 e0       	ldi	r22, 0x07	; 7
     ae4:	5f 01       	movw	r10, r30
	//of every loop, it's probably unnecessary to read the signals again, but I'll leave it inn for now.
	tinyDendrite_read_signals();
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     ae6:	80 81       	ld	r24, Z
     ae8:	d9 01       	movw	r26, r18
     aea:	8d 93       	st	X+, r24
     aec:	9d 01       	movw	r18, r26
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     aee:	99 91       	ld	r25, Y+
     af0:	99 3e       	cpi	r25, 0xE9	; 233
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <tinyDendrite_update_signals+0x54>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     af4:	60 83       	st	Z, r22
     af6:	19 c0       	rjmp	.+50     	; 0xb2a <tinyDendrite_update_signals+0x86>
			// Previously, we used this function to check charging, but this has now
			// been moved to tinyDendrite_check_charging.
			//charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
     af8:	98 3c       	cpi	r25, 0xC8	; 200
     afa:	10 f0       	brcs	.+4      	; 0xb00 <tinyDendrite_update_signals+0x5c>
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     afc:	70 83       	st	Z, r23
     afe:	15 c0       	rjmp	.+42     	; 0xb2a <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
     b00:	97 3a       	cpi	r25, 0xA7	; 167
     b02:	10 f0       	brcs	.+4      	; 0xb08 <tinyDendrite_update_signals+0x64>
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     b04:	10 83       	st	Z, r17
     b06:	11 c0       	rjmp	.+34     	; 0xb2a <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
     b08:	95 38       	cpi	r25, 0x85	; 133
     b0a:	10 f0       	brcs	.+4      	; 0xb10 <tinyDendrite_update_signals+0x6c>
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     b0c:	00 83       	st	Z, r16
     b0e:	0d c0       	rjmp	.+26     	; 0xb2a <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
     b10:	94 36       	cpi	r25, 0x64	; 100
     b12:	10 f0       	brcs	.+4      	; 0xb18 <tinyDendrite_update_signals+0x74>
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     b14:	f0 82       	st	Z, r15
     b16:	09 c0       	rjmp	.+18     	; 0xb2a <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
     b18:	93 34       	cpi	r25, 0x43	; 67
     b1a:	10 f0       	brcs	.+4      	; 0xb20 <tinyDendrite_update_signals+0x7c>
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     b1c:	e0 82       	st	Z, r14
     b1e:	05 c0       	rjmp	.+10     	; 0xb2a <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
     b20:	92 32       	cpi	r25, 0x22	; 34
     b22:	10 f0       	brcs	.+4      	; 0xb28 <tinyDendrite_update_signals+0x84>
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     b24:	d0 82       	st	Z, r13
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <tinyDendrite_update_signals+0x86>
		}
		else
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     b28:	10 82       	st	Z, r1
		}
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
     b2a:	d5 01       	movw	r26, r10
     b2c:	9c 91       	ld	r25, X
     b2e:	89 13       	cpse	r24, r25
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <tinyDendrite_update_signals+0x90>
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     b32:	1c 92       	st	X, r1
     b34:	31 96       	adiw	r30, 0x01	; 1
	//Read the analog voltage values on each of the Dendrites
	//Since read_signals is called in check_charge_level, and check_charge_level is called at the beginning
	//of every loop, it's probably unnecessary to read the signals again, but I'll leave it inn for now.
	tinyDendrite_read_signals();
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     b36:	e4 17       	cp	r30, r20
     b38:	f5 07       	cpc	r31, r21
     b3a:	a1 f6       	brne	.-88     	; 0xae4 <tinyDendrite_update_signals+0x40>
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
		}
	}
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	df 90       	pop	r13
     b4a:	bf 90       	pop	r11
     b4c:	af 90       	pop	r10
     b4e:	08 95       	ret

00000b50 <tinyDendrite_get_potential>:
/*
This is the master function of the module that is callable from
outside. It uses the previously declared functions to return the potential.
*/
int16_t tinyDendrite_get_potential()
{
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
	if(tinyAxon_is_firing() && IGNORE_INPUT_WHILE_FIRING){
     b5c:	0e 94 cb 02 	call	0x596	; 0x596 <tinyAxon_is_firing>
		
		return NO_SIGNAL_REACTION;
	}
	
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
     b60:	0e 94 52 05 	call	0xaa4	; 0xaa4 <tinyDendrite_update_signals>
     b64:	ca e3       	ldi	r28, 0x3A	; 58
     b66:	d8 e3       	ldi	r29, 0x38	; 56
     b68:	0f 2e       	mov	r0, r31
     b6a:	ff e3       	ldi	r31, 0x3F	; 63
     b6c:	ef 2e       	mov	r14, r31
     b6e:	f8 e3       	ldi	r31, 0x38	; 56
     b70:	ff 2e       	mov	r15, r31
     b72:	f0 2d       	mov	r31, r0
	
	int16_t return_potential_val = 0;
     b74:	00 e0       	ldi	r16, 0x00	; 0
     b76:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		switch(tinyDendrite_current_signals[i])
     b78:	89 91       	ld	r24, Y+
     b7a:	83 30       	cpi	r24, 0x03	; 3
     b7c:	19 f1       	breq	.+70     	; 0xbc4 <tinyDendrite_get_potential+0x74>
     b7e:	28 f4       	brcc	.+10     	; 0xb8a <tinyDendrite_get_potential+0x3a>
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	81 f1       	breq	.+96     	; 0xbe4 <tinyDendrite_get_potential+0x94>
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	31 f1       	breq	.+76     	; 0xbd4 <tinyDendrite_get_potential+0x84>
     b88:	34 c0       	rjmp	.+104    	; 0xbf2 <tinyDendrite_get_potential+0xa2>
     b8a:	85 30       	cpi	r24, 0x05	; 5
     b8c:	59 f0       	breq	.+22     	; 0xba4 <tinyDendrite_get_potential+0x54>
     b8e:	90 f0       	brcs	.+36     	; 0xbb4 <tinyDendrite_get_potential+0x64>
     b90:	86 30       	cpi	r24, 0x06	; 6
     b92:	79 f5       	brne	.+94     	; 0xbf2 <tinyDendrite_get_potential+0xa2>
		{
			case NO_SIGNAL:
				return_potential_val += NO_SIGNAL_REACTION;
				break;
			case HIGH_EXCITE:
				return_potential_val += HIGH_EXCITE_REACTION;
     b94:	0c 5c       	subi	r16, 0xCC	; 204
     b96:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     b98:	44 e0       	ldi	r20, 0x04	; 4
     b9a:	63 e0       	ldi	r22, 0x03	; 3
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
				break;
     ba2:	27 c0       	rjmp	.+78     	; 0xbf2 <tinyDendrite_get_potential+0xa2>
			case NORMAL_EXCITE:
				return_potential_val += NORMAL_EXCITE_REACTION;
     ba4:	07 5e       	subi	r16, 0xE7	; 231
     ba6:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     ba8:	44 e0       	ldi	r20, 0x04	; 4
     baa:	63 e0       	ldi	r22, 0x03	; 3
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
				break;
     bb2:	1f c0       	rjmp	.+62     	; 0xbf2 <tinyDendrite_get_potential+0xa2>
			case LOW_EXCITE:
				return_potential_val += LOW_EXCITE_REACTION;
     bb4:	0c 5e       	subi	r16, 0xEC	; 236
     bb6:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     bb8:	44 e0       	ldi	r20, 0x04	; 4
     bba:	63 e0       	ldi	r22, 0x03	; 3
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
				break;
     bc2:	17 c0       	rjmp	.+46     	; 0xbf2 <tinyDendrite_get_potential+0xa2>
			case HIGH_INHIB:
				return_potential_val += HIGH_INHIB_REACTION;
     bc4:	02 53       	subi	r16, 0x32	; 50
     bc6:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     bc8:	44 e0       	ldi	r20, 0x04	; 4
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
				break;
     bd2:	0f c0       	rjmp	.+30     	; 0xbf2 <tinyDendrite_get_potential+0xa2>
			case NORMAL_INHIB:
				return_potential_val += NORMAL_INHIB_REACTION;
     bd4:	09 51       	subi	r16, 0x19	; 25
     bd6:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     bd8:	44 e0       	ldi	r20, 0x04	; 4
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
				break;
     be2:	07 c0       	rjmp	.+14     	; 0xbf2 <tinyDendrite_get_potential+0xa2>
			case LOW_INHIB:
				return_potential_val += LOW_INHIB_REACTION;
     be4:	04 51       	subi	r16, 0x14	; 20
     be6:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     be8:	44 e0       	ldi	r20, 0x04	; 4
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	0e 94 72 06 	call	0xce4	; 0xce4 <tinyLED_set_color_mode>
	
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
	
	int16_t return_potential_val = 0;
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     bf2:	ce 15       	cp	r28, r14
     bf4:	df 05       	cpc	r29, r15
     bf6:	09 f0       	breq	.+2      	; 0xbfa <tinyDendrite_get_potential+0xaa>
     bf8:	bf cf       	rjmp	.-130    	; 0xb78 <tinyDendrite_get_potential+0x28>
		}
	}
	
	return return_potential_val;
	
}
     bfa:	c8 01       	movw	r24, r16
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	08 95       	ret

00000c0a <tinyDendrite_update_potential>:

double tinyDendrite_update_potential(double potential){
     c0a:	cf 92       	push	r12
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	6b 01       	movw	r12, r22
     c14:	7c 01       	movw	r14, r24
	
	int16_t potential_change = tinyDendrite_get_potential();
     c16:	0e 94 a8 05 	call	0xb50	; 0xb50 <tinyDendrite_get_potential>
	potential += potential_change;
	return potential;
     c1a:	bc 01       	movw	r22, r24
     c1c:	99 0f       	add	r25, r25
     c1e:	88 0b       	sbc	r24, r24
     c20:	99 0b       	sbc	r25, r25
     c22:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__floatsisf>
     c26:	a7 01       	movw	r20, r14
     c28:	96 01       	movw	r18, r12
     c2a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__addsf3>
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	df 90       	pop	r13
     c34:	cf 90       	pop	r12
     c36:	08 95       	ret

00000c38 <__vector_6>:
     c38:	1f 92       	push	r1
     c3a:	0f 92       	push	r0
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	0f 92       	push	r0
     c40:	11 24       	eor	r1, r1
     c42:	2f 93       	push	r18
     c44:	3f 93       	push	r19
     c46:	4f 93       	push	r20
     c48:	5f 93       	push	r21
     c4a:	6f 93       	push	r22
     c4c:	7f 93       	push	r23
     c4e:	8f 93       	push	r24
     c50:	9f 93       	push	r25
     c52:	af 93       	push	r26
     c54:	bf 93       	push	r27
     c56:	cf 93       	push	r28
     c58:	ef 93       	push	r30
     c5a:	ff 93       	push	r31
     c5c:	c1 e0       	ldi	r28, 0x01	; 1
     c5e:	c0 93 44 38 	sts	0x3844, r28	; 0x803844 <tinyISR_interrupt_flag>
     c62:	0e 94 5d 09 	call	0x12ba	; 0x12ba <tinyTime_counter_increment>
     c66:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c6a:	ff 91       	pop	r31
     c6c:	ef 91       	pop	r30
     c6e:	cf 91       	pop	r28
     c70:	bf 91       	pop	r27
     c72:	af 91       	pop	r26
     c74:	9f 91       	pop	r25
     c76:	8f 91       	pop	r24
     c78:	7f 91       	pop	r23
     c7a:	6f 91       	pop	r22
     c7c:	5f 91       	pop	r21
     c7e:	4f 91       	pop	r20
     c80:	3f 91       	pop	r19
     c82:	2f 91       	pop	r18
     c84:	0f 90       	pop	r0
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	0f 90       	pop	r0
     c8a:	1f 90       	pop	r1
     c8c:	18 95       	reti

00000c8e <tinyISR_setflag>:
     c8e:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <tinyISR_interrupt_flag>
     c92:	08 95       	ret

00000c94 <tinyISR_getflag>:
     c94:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <tinyISR_interrupt_flag>
     c98:	08 95       	ret

00000c9a <tinyLED_SPIWriteByte>:
Function used to send a byte over SPI, which in turn gets
translated to the bit-sequence required by the LEDs over the CCL.
*/
static void tinyLED_SPIWriteByte(uint8_t byte)
{
	SPI0.INTFLAGS = SPI0_INTFLAGS; // clear the write collision flag to allow writing
     c9a:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
     c9e:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
	TCA0.SINGLE.CNT = 0; // reset TCA counter register to ensure the first rising edge of the PWM is predictable
     ca2:	e0 e0       	ldi	r30, 0x00	; 0
     ca4:	fa e0       	ldi	r31, 0x0A	; 10
     ca6:	10 a2       	std	Z+32, r1	; 0x20
     ca8:	11 a2       	std	Z+33, r1	; 0x21
	
	// start TCA
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 1 << TCA_SPLIT_ENABLE_bp;
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	90 83       	st	Z, r25
	SPI0_DATA = byte;
     cae:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>

	while((SPI0.INTFLAGS & SPI_RXCIE_bm) == 0){} // wait for transfer to complete
     cb2:	e0 e2       	ldi	r30, 0x20	; 32
     cb4:	f8 e0       	ldi	r31, 0x08	; 8
     cb6:	83 81       	ldd	r24, Z+3	; 0x03
     cb8:	88 23       	and	r24, r24
     cba:	ec f7       	brge	.-6      	; 0xcb6 <tinyLED_SPIWriteByte+0x1c>
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
     cbc:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     cc0:	08 95       	ret

00000cc2 <tinyLED_set_color>:
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color_mode(uint8_t LED_id, enum Colors color, enum ColorModes mode)
{
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_colors[LED_id] = setting;
     cc2:	e8 2f       	mov	r30, r24
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	ef 59       	subi	r30, 0x9F	; 159
     ccc:	f7 4c       	sbci	r31, 0xC7	; 199
     cce:	60 83       	st	Z, r22
     cd0:	11 82       	std	Z+1, r1	; 0x01
     cd2:	08 95       	ret

00000cd4 <tinyLED_get_color>:
	tinyLED_set_color_mode(LED_id, color, STABLE);
}

enum Colors tinyLED_get_color(uint8_t LED_id)
{
	return tinyLED_colors[LED_id].color;
     cd4:	e8 2f       	mov	r30, r24
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	ef 59       	subi	r30, 0x9F	; 159
     cde:	f7 4c       	sbci	r31, 0xC7	; 199
}
     ce0:	80 81       	ld	r24, Z
     ce2:	08 95       	ret

00000ce4 <tinyLED_set_color_mode>:
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color_mode(uint8_t LED_id, enum Colors color, enum ColorModes mode)
{
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_colors[LED_id] = setting;
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	fc 01       	movw	r30, r24
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	ef 59       	subi	r30, 0x9F	; 159
     cee:	f7 4c       	sbci	r31, 0xC7	; 199
     cf0:	60 83       	st	Z, r22
     cf2:	41 83       	std	Z+1, r20	; 0x01
	if (mode == FLASH_ONCE)
     cf4:	44 30       	cpi	r20, 0x04	; 4
     cf6:	29 f4       	brne	.+10     	; 0xd02 <tinyLED_set_color_mode+0x1e>
	{
		tinyLED_flash_once_time[LED_id] = 1000*FLASH_TIME;
     cf8:	fc 01       	movw	r30, r24
     cfa:	e7 5a       	subi	r30, 0xA7	; 167
     cfc:	f7 4c       	sbci	r31, 0xC7	; 199
     cfe:	2a e0       	ldi	r18, 0x0A	; 10
     d00:	20 83       	st	Z, r18
     d02:	08 95       	ret

00000d04 <tinyLED_RGB_Color_Compare>:
	return rgb_color;
			
};
// This might be cause of strange light behavior?
//Message		expected 'struct RGB_Color *' but argument is of type 'struct RGB_Color (*)[2]'	Hjernebyggesett_V4	C:\Users\Elias Lundheim\Documents\GitHub\neural\Hjernebyggesett_V4\Hjernebyggesett_V4\tinyLED\tinyLED.c	121
_Bool tinyLED_RGB_Color_Compare(struct RGB_Color (*a)[NUMBER_OF_LEDS], struct RGB_Color (*b)[NUMBER_OF_LEDS]){
     d04:	dc 01       	movw	r26, r24
     d06:	fb 01       	movw	r30, r22
	for (int i=0; i<NUMBER_OF_LEDS; i++)
	{
		if(!((*a)[i].red==(*b)[i].red && (*a)[i].green==(*b)[i].green && (*a)[i].blue==(*b)[i].blue)){
     d08:	9c 91       	ld	r25, X
     d0a:	80 81       	ld	r24, Z
     d0c:	98 13       	cpse	r25, r24
     d0e:	20 c0       	rjmp	.+64     	; 0xd50 <tinyLED_RGB_Color_Compare+0x4c>
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	9c 91       	ld	r25, X
     d14:	11 97       	sbiw	r26, 0x01	; 1
     d16:	81 81       	ldd	r24, Z+1	; 0x01
     d18:	98 13       	cpse	r25, r24
     d1a:	1c c0       	rjmp	.+56     	; 0xd54 <tinyLED_RGB_Color_Compare+0x50>
     d1c:	12 96       	adiw	r26, 0x02	; 2
     d1e:	9c 91       	ld	r25, X
     d20:	12 97       	sbiw	r26, 0x02	; 2
     d22:	82 81       	ldd	r24, Z+2	; 0x02
     d24:	98 13       	cpse	r25, r24
     d26:	18 c0       	rjmp	.+48     	; 0xd58 <tinyLED_RGB_Color_Compare+0x54>
     d28:	13 96       	adiw	r26, 0x03	; 3
     d2a:	9c 91       	ld	r25, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	83 81       	ldd	r24, Z+3	; 0x03
     d30:	98 13       	cpse	r25, r24
     d32:	14 c0       	rjmp	.+40     	; 0xd5c <tinyLED_RGB_Color_Compare+0x58>
     d34:	14 96       	adiw	r26, 0x04	; 4
     d36:	9c 91       	ld	r25, X
     d38:	14 97       	sbiw	r26, 0x04	; 4
     d3a:	84 81       	ldd	r24, Z+4	; 0x04
     d3c:	98 13       	cpse	r25, r24
     d3e:	10 c0       	rjmp	.+32     	; 0xd60 <tinyLED_RGB_Color_Compare+0x5c>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	15 96       	adiw	r26, 0x05	; 5
     d44:	2c 91       	ld	r18, X
     d46:	95 81       	ldd	r25, Z+5	; 0x05
     d48:	29 17       	cp	r18, r25
     d4a:	59 f0       	breq	.+22     	; 0xd62 <tinyLED_RGB_Color_Compare+0x5e>
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	08 95       	ret
			return false;
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	08 95       	ret
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	08 95       	ret
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	08 95       	ret
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	08 95       	ret
     d60:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
     d62:	08 95       	ret

00000d64 <tinyLED_update>:
/*
function to write the current LED-array on to the LEDs and
effectively update the values stored in the LEDs to the values stored in the MCU.
*/
void tinyLED_update(void)
{
     d64:	2f 92       	push	r2
     d66:	3f 92       	push	r3
     d68:	4f 92       	push	r4
     d6a:	5f 92       	push	r5
     d6c:	6f 92       	push	r6
     d6e:	7f 92       	push	r7
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	6e 97       	sbiw	r28, 0x1e	; 30
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	de bf       	out	0x3e, r29	; 62
			
	uint32_t now = tinyTime_now();
     d92:	0e 94 71 09 	call	0x12e2	; 0x12e2 <tinyTime_now>
     d96:	6b 01       	movw	r12, r22
     d98:	7c 01       	movw	r14, r24
	
	// This is a sin curve, but between 0 and 1 instead of -1 and 1
	double sinValue = 0.5+sin((double)now/(100*M_PI/SWING_RATE))/2;
     d9a:	0e 94 c7 0a 	call	0x158e	; 0x158e <__floatunsisf>
     d9e:	22 ed       	ldi	r18, 0xD2	; 210
     da0:	33 e5       	ldi	r19, 0x53	; 83
     da2:	4b ef       	ldi	r20, 0xFB	; 251
     da4:	51 e4       	ldi	r21, 0x41	; 65
     da6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__divsf3>
     daa:	0e 94 a7 0c 	call	0x194e	; 0x194e <sin>
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	5f e3       	ldi	r21, 0x3F	; 63
     db6:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__mulsf3>
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	5f e3       	ldi	r21, 0x3F	; 63
     dc2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__addsf3>
     dc6:	69 87       	std	Y+9, r22	; 0x09
     dc8:	7a 87       	std	Y+10, r23	; 0x0a
     dca:	8b 87       	std	Y+11, r24	; 0x0b
     dcc:	9c 87       	std	Y+12, r25	; 0x0c
	
	// If FLASH_RATE is one, then that means that the left side of the "<" will just count from 0 to 1000, and flash_on will be true for half of the time
	_Bool flash_on = now%(uint32_t)(1000/FLASH_RATE)  <   500/FLASH_RATE;
     dce:	c7 01       	movw	r24, r14
     dd0:	b6 01       	movw	r22, r12
     dd2:	22 e3       	ldi	r18, 0x32	; 50
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__udivmodsi4>
     dde:	0e 94 c7 0a 	call	0x158e	; 0x158e <__floatunsisf>
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	48 ec       	ldi	r20, 0xC8	; 200
     de8:	51 e4       	ldi	r21, 0x41	; 65
     dea:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__cmpsf2>
     dee:	88 1f       	adc	r24, r24
     df0:	88 27       	eor	r24, r24
     df2:	88 1f       	adc	r24, r24
     df4:	8f 83       	std	Y+7, r24	; 0x07
	
	// PING_RATE is usually small, so the left side counts to some large number. Since flash_time usually is also quite small,
	// the left side will usually be larger than the right
	_Bool ping_on =  now%(uint32_t)(1000/PING_RATE)   <   1000*FLASH_TIME;
     df6:	c7 01       	movw	r24, r14
     df8:	b6 01       	movw	r22, r12
     dfa:	24 ef       	ldi	r18, 0xF4	; 244
     dfc:	31 e0       	ldi	r19, 0x01	; 1
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__udivmodsi4>
     e06:	0e 94 c7 0a 	call	0x158e	; 0x158e <__floatunsisf>
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e2       	ldi	r20, 0x20	; 32
     e10:	51 e4       	ldi	r21, 0x41	; 65
     e12:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__cmpsf2>
     e16:	88 1f       	adc	r24, r24
     e18:	88 27       	eor	r24, r24
     e1a:	88 1f       	adc	r24, r24
     e1c:	01 e6       	ldi	r16, 0x61	; 97
     e1e:	18 e3       	ldi	r17, 0x38	; 56
     e20:	9e 01       	movw	r18, r28
     e22:	2f 5f       	subi	r18, 0xFF	; 255
     e24:	3f 4f       	sbci	r19, 0xFF	; 255
     e26:	0f 2e       	mov	r0, r31
     e28:	f9 e5       	ldi	r31, 0x59	; 89
     e2a:	4f 2e       	mov	r4, r31
     e2c:	f8 e3       	ldi	r31, 0x38	; 56
     e2e:	5f 2e       	mov	r5, r31
     e30:	f0 2d       	mov	r31, r0
     e32:	0f 2e       	mov	r0, r31
     e34:	f5 e6       	ldi	r31, 0x65	; 101
     e36:	6f 2e       	mov	r6, r31
     e38:	f8 e3       	ldi	r31, 0x38	; 56
     e3a:	7f 2e       	mov	r7, r31
     e3c:	f0 2d       	mov	r31, r0
     e3e:	19 01       	movw	r2, r18
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
				break;
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     e40:	88 2e       	mov	r8, r24
     e42:	91 2c       	mov	r9, r1
     e44:	a1 2c       	mov	r10, r1
     e46:	b1 2c       	mov	r11, r1
     e48:	2d 87       	std	Y+13, r18	; 0x0d
     e4a:	3e 87       	std	Y+14, r19	; 0x0e
     e4c:	df 80       	ldd	r13, Y+7	; 0x07
     e4e:	f8 01       	movw	r30, r16
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
}

static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
     e50:	80 81       	ld	r24, Z
     e52:	83 30       	cpi	r24, 0x03	; 3
     e54:	79 f0       	breq	.+30     	; 0xe74 <tinyLED_update+0x110>
     e56:	28 f4       	brcc	.+10     	; 0xe62 <tinyLED_update+0xfe>
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	41 f0       	breq	.+16     	; 0xe6c <tinyLED_update+0x108>
     e5c:	82 30       	cpi	r24, 0x02	; 2
     e5e:	89 f0       	breq	.+34     	; 0xe82 <tinyLED_update+0x11e>
     e60:	28 c0       	rjmp	.+80     	; 0xeb2 <tinyLED_update+0x14e>
     e62:	84 30       	cpi	r24, 0x04	; 4
     e64:	a9 f0       	breq	.+42     	; 0xe90 <tinyLED_update+0x12c>
     e66:	85 30       	cpi	r24, 0x05	; 5
     e68:	d1 f0       	breq	.+52     	; 0xe9e <tinyLED_update+0x13a>
     e6a:	23 c0       	rjmp	.+70     	; 0xeb2 <tinyLED_update+0x14e>
	{
		case OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
			break;
		case RED:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 0, 0};
     e6c:	f1 2c       	mov	r15, r1
     e6e:	e1 2c       	mov	r14, r1
     e70:	69 e1       	ldi	r22, 0x19	; 25
     e72:	22 c0       	rjmp	.+68     	; 0xeb8 <tinyLED_update+0x154>
			break;
		case GREEN:
			rgb_color = (struct RGB_Color){0, 255*LED_BRIGHTNESS, 0};
     e74:	f1 2c       	mov	r15, r1
     e76:	0f 2e       	mov	r0, r31
     e78:	f9 e1       	ldi	r31, 0x19	; 25
     e7a:	ef 2e       	mov	r14, r31
     e7c:	f0 2d       	mov	r31, r0
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	1b c0       	rjmp	.+54     	; 0xeb8 <tinyLED_update+0x154>
			break;
		case BLUE:
			rgb_color = (struct RGB_Color){0, 0, 255*LED_BRIGHTNESS};
     e82:	0f 2e       	mov	r0, r31
     e84:	f9 e1       	ldi	r31, 0x19	; 25
     e86:	ff 2e       	mov	r15, r31
     e88:	f0 2d       	mov	r31, r0
     e8a:	e1 2c       	mov	r14, r1
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	14 c0       	rjmp	.+40     	; 0xeb8 <tinyLED_update+0x154>
			break;
		case YELLOW:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 0};
     e90:	f1 2c       	mov	r15, r1
     e92:	0f 2e       	mov	r0, r31
     e94:	f9 e1       	ldi	r31, 0x19	; 25
     e96:	ef 2e       	mov	r14, r31
     e98:	f0 2d       	mov	r31, r0
     e9a:	69 e1       	ldi	r22, 0x19	; 25
     e9c:	0d c0       	rjmp	.+26     	; 0xeb8 <tinyLED_update+0x154>
			// Should the /3 be there? This requires testing.
			// After testing, findings were that at 0.1 brightness, one would see the three LEDs instead of one white led
			// We try with /2 instead.
			// We find that the best results come from not dividing by anything. At leasts in the lower brightness settings, and that
			// is where we suspect it will be most of the time. When we divide, the LEDs are so weak, that they appear as three lights instead of one.
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS};
     e9e:	0f 2e       	mov	r0, r31
     ea0:	f9 e1       	ldi	r31, 0x19	; 25
     ea2:	ff 2e       	mov	r15, r31
     ea4:	f0 2d       	mov	r31, r0
     ea6:	0f 2e       	mov	r0, r31
     ea8:	f9 e1       	ldi	r31, 0x19	; 25
     eaa:	ef 2e       	mov	r14, r31
     eac:	f0 2d       	mov	r31, r0
     eae:	69 e1       	ldi	r22, 0x19	; 25
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <tinyLED_update+0x154>
static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
	{
		case OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
     eb2:	f1 2c       	mov	r15, r1
     eb4:	e1 2c       	mov	r14, r1
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	2f 82       	std	Y+7, r2	; 0x07
     eba:	38 86       	std	Y+8, r3	; 0x08
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
	{		
		// Convert enum to RGB_Color
		rgb_colors[i] = tinyLED_enum_to_RGB_Color(tinyLED_colors[i].color);
     ebc:	d1 01       	movw	r26, r2
     ebe:	6c 93       	st	X, r22
     ec0:	11 96       	adiw	r26, 0x01	; 1
     ec2:	ec 92       	st	X, r14
     ec4:	11 97       	sbiw	r26, 0x01	; 1
     ec6:	12 96       	adiw	r26, 0x02	; 2
     ec8:	fc 92       	st	X, r15
			
		// Adjust colors according to mode
		switch(tinyLED_colors[i].mode)
     eca:	81 81       	ldd	r24, Z+1	; 0x01
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	d1 f0       	breq	.+52     	; 0xf04 <tinyLED_update+0x1a0>
     ed0:	18 f4       	brcc	.+6      	; 0xed8 <tinyLED_update+0x174>
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	41 f0       	breq	.+16     	; 0xee6 <tinyLED_update+0x182>
     ed6:	cd c0       	rjmp	.+410    	; 0x1072 <tinyLED_update+0x30e>
     ed8:	83 30       	cpi	r24, 0x03	; 3
     eda:	09 f4       	brne	.+2      	; 0xede <tinyLED_update+0x17a>
     edc:	44 c0       	rjmp	.+136    	; 0xf66 <tinyLED_update+0x202>
     ede:	84 30       	cpi	r24, 0x04	; 4
     ee0:	09 f4       	brne	.+2      	; 0xee4 <tinyLED_update+0x180>
     ee2:	bf c0       	rjmp	.+382    	; 0x1062 <tinyLED_update+0x2fe>
     ee4:	c6 c0       	rjmp	.+396    	; 0x1072 <tinyLED_update+0x30e>
		{
			case STABLE:
				break;
			case FLASH:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*flash_on, rgb_colors[i].green*flash_on, rgb_colors[i].blue*flash_on};
     ee6:	d6 9e       	mul	r13, r22
     ee8:	60 2d       	mov	r22, r0
     eea:	11 24       	eor	r1, r1
     eec:	ef 81       	ldd	r30, Y+7	; 0x07
     eee:	f8 85       	ldd	r31, Y+8	; 0x08
     ef0:	60 83       	st	Z, r22
     ef2:	de 9c       	mul	r13, r14
     ef4:	e0 2c       	mov	r14, r0
     ef6:	11 24       	eor	r1, r1
     ef8:	e1 82       	std	Z+1, r14	; 0x01
     efa:	df 9c       	mul	r13, r15
     efc:	f0 2c       	mov	r15, r0
     efe:	11 24       	eor	r1, r1
     f00:	f2 82       	std	Z+2, r15	; 0x02
				break;
     f02:	b7 c0       	rjmp	.+366    	; 0x1072 <tinyLED_update+0x30e>
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__floatsisf>
     f0e:	29 85       	ldd	r18, Y+9	; 0x09
     f10:	3a 85       	ldd	r19, Y+10	; 0x0a
     f12:	4b 85       	ldd	r20, Y+11	; 0x0b
     f14:	5c 85       	ldd	r21, Y+12	; 0x0c
     f16:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__mulsf3>
     f1a:	0e 94 98 0a 	call	0x1530	; 0x1530 <__fixunssfsi>
     f1e:	d1 01       	movw	r26, r2
     f20:	6c 93       	st	X, r22
     f22:	6e 2d       	mov	r22, r14
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__floatsisf>
     f2e:	29 85       	ldd	r18, Y+9	; 0x09
     f30:	3a 85       	ldd	r19, Y+10	; 0x0a
     f32:	4b 85       	ldd	r20, Y+11	; 0x0b
     f34:	5c 85       	ldd	r21, Y+12	; 0x0c
     f36:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__mulsf3>
     f3a:	0e 94 98 0a 	call	0x1530	; 0x1530 <__fixunssfsi>
     f3e:	f1 01       	movw	r30, r2
     f40:	61 83       	std	Z+1, r22	; 0x01
     f42:	6f 2d       	mov	r22, r15
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__floatsisf>
     f4e:	29 85       	ldd	r18, Y+9	; 0x09
     f50:	3a 85       	ldd	r19, Y+10	; 0x0a
     f52:	4b 85       	ldd	r20, Y+11	; 0x0b
     f54:	5c 85       	ldd	r21, Y+12	; 0x0c
     f56:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__mulsf3>
     f5a:	0e 94 98 0a 	call	0x1530	; 0x1530 <__fixunssfsi>
     f5e:	d1 01       	movw	r26, r2
     f60:	12 96       	adiw	r26, 0x02	; 2
     f62:	6c 93       	st	X, r22
				break;
     f64:	86 c0       	rjmp	.+268    	; 0x1072 <tinyLED_update+0x30e>
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 c7 0a 	call	0x158e	; 0x158e <__floatunsisf>
     f70:	9b 01       	movw	r18, r22
     f72:	ac 01       	movw	r20, r24
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	80 e8       	ldi	r24, 0x80	; 128
     f7a:	9f e3       	ldi	r25, 0x3F	; 63
     f7c:	0e 94 04 0b 	call	0x1608	; 0x1608 <fmin>
     f80:	6b 8b       	std	Y+19, r22	; 0x13
     f82:	7c 8b       	std	Y+20, r23	; 0x14
     f84:	8d 8b       	std	Y+21, r24	; 0x15
     f86:	9e 8b       	std	Y+22, r25	; 0x16
     f88:	c5 01       	movw	r24, r10
     f8a:	b4 01       	movw	r22, r8
     f8c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__floatsisf>
     f90:	6f 87       	std	Y+15, r22	; 0x0f
     f92:	78 8b       	std	Y+16, r23	; 0x10
     f94:	89 8b       	std	Y+17, r24	; 0x11
     f96:	9a 8b       	std	Y+18, r25	; 0x12
     f98:	6e 2d       	mov	r22, r14
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 c7 0a 	call	0x158e	; 0x158e <__floatunsisf>
     fa4:	9b 01       	movw	r18, r22
     fa6:	ac 01       	movw	r20, r24
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	80 e8       	ldi	r24, 0x80	; 128
     fae:	9f e3       	ldi	r25, 0x3F	; 63
     fb0:	0e 94 04 0b 	call	0x1608	; 0x1608 <fmin>
     fb4:	6f 8b       	std	Y+23, r22	; 0x17
     fb6:	78 8f       	std	Y+24, r23	; 0x18
     fb8:	89 8f       	std	Y+25, r24	; 0x19
     fba:	9a 8f       	std	Y+26, r25	; 0x1a
     fbc:	6f 2d       	mov	r22, r15
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 c7 0a 	call	0x158e	; 0x158e <__floatunsisf>
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	80 e8       	ldi	r24, 0x80	; 128
     fd2:	9f e3       	ldi	r25, 0x3F	; 63
     fd4:	0e 94 04 0b 	call	0x1608	; 0x1608 <fmin>
     fd8:	6b 8f       	std	Y+27, r22	; 0x1b
     fda:	7c 8f       	std	Y+28, r23	; 0x1c
     fdc:	8d 8f       	std	Y+29, r24	; 0x1d
     fde:	9e 8f       	std	Y+30, r25	; 0x1e
     fe0:	23 e3       	ldi	r18, 0x33	; 51
     fe2:	33 e3       	ldi	r19, 0x33	; 51
     fe4:	43 ea       	ldi	r20, 0xA3	; 163
     fe6:	50 e4       	ldi	r21, 0x40	; 64
     fe8:	6b 89       	ldd	r22, Y+19	; 0x13
     fea:	7c 89       	ldd	r23, Y+20	; 0x14
     fec:	8d 89       	ldd	r24, Y+21	; 0x15
     fee:	9e 89       	ldd	r25, Y+22	; 0x16
     ff0:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__mulsf3>
     ff4:	2f 85       	ldd	r18, Y+15	; 0x0f
     ff6:	38 89       	ldd	r19, Y+16	; 0x10
     ff8:	49 89       	ldd	r20, Y+17	; 0x11
     ffa:	5a 89       	ldd	r21, Y+18	; 0x12
     ffc:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__mulsf3>
    1000:	0e 94 98 0a 	call	0x1530	; 0x1530 <__fixunssfsi>
    1004:	ef 81       	ldd	r30, Y+7	; 0x07
    1006:	f8 85       	ldd	r31, Y+8	; 0x08
    1008:	60 83       	st	Z, r22
    100a:	23 e3       	ldi	r18, 0x33	; 51
    100c:	33 e3       	ldi	r19, 0x33	; 51
    100e:	43 ea       	ldi	r20, 0xA3	; 163
    1010:	50 e4       	ldi	r21, 0x40	; 64
    1012:	6f 89       	ldd	r22, Y+23	; 0x17
    1014:	78 8d       	ldd	r23, Y+24	; 0x18
    1016:	89 8d       	ldd	r24, Y+25	; 0x19
    1018:	9a 8d       	ldd	r25, Y+26	; 0x1a
    101a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__mulsf3>
    101e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1020:	38 89       	ldd	r19, Y+16	; 0x10
    1022:	49 89       	ldd	r20, Y+17	; 0x11
    1024:	5a 89       	ldd	r21, Y+18	; 0x12
    1026:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__mulsf3>
    102a:	0e 94 98 0a 	call	0x1530	; 0x1530 <__fixunssfsi>
    102e:	af 81       	ldd	r26, Y+7	; 0x07
    1030:	b8 85       	ldd	r27, Y+8	; 0x08
    1032:	11 96       	adiw	r26, 0x01	; 1
    1034:	6c 93       	st	X, r22
    1036:	23 e3       	ldi	r18, 0x33	; 51
    1038:	33 e3       	ldi	r19, 0x33	; 51
    103a:	43 ea       	ldi	r20, 0xA3	; 163
    103c:	50 e4       	ldi	r21, 0x40	; 64
    103e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1040:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1042:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1044:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1046:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__mulsf3>
    104a:	2f 85       	ldd	r18, Y+15	; 0x0f
    104c:	38 89       	ldd	r19, Y+16	; 0x10
    104e:	49 89       	ldd	r20, Y+17	; 0x11
    1050:	5a 89       	ldd	r21, Y+18	; 0x12
    1052:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__mulsf3>
    1056:	0e 94 98 0a 	call	0x1530	; 0x1530 <__fixunssfsi>
    105a:	ef 81       	ldd	r30, Y+7	; 0x07
    105c:	f8 85       	ldd	r31, Y+8	; 0x08
    105e:	62 83       	std	Z+2, r22	; 0x02
				break;
    1060:	08 c0       	rjmp	.+16     	; 0x1072 <tinyLED_update+0x30e>
			case FLASH_ONCE:
				if(tinyLED_flash_once_time[i]>0){
    1062:	d2 01       	movw	r26, r4
    1064:	8c 91       	ld	r24, X
    1066:	88 23       	and	r24, r24
    1068:	19 f0       	breq	.+6      	; 0x1070 <tinyLED_update+0x30c>
					rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red, rgb_colors[i].green, rgb_colors[i].blue};
					tinyLED_flash_once_time[i]--;
    106a:	81 50       	subi	r24, 0x01	; 1
    106c:	8c 93       	st	X, r24
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <tinyLED_update+0x30e>
				}
				else{
					tinyLED_colors[i].color = OFF;
    1070:	10 82       	st	Z, r1
    1072:	0e 5f       	subi	r16, 0xFE	; 254
    1074:	1f 4f       	sbci	r17, 0xFF	; 255
    1076:	b3 e0       	ldi	r27, 0x03	; 3
    1078:	2b 0e       	add	r2, r27
    107a:	31 1c       	adc	r3, r1
    107c:	ef ef       	ldi	r30, 0xFF	; 255
    107e:	4e 1a       	sub	r4, r30
    1080:	5e 0a       	sbc	r5, r30
	
	// This is where we store all the actual color values we want to send to the LED
	struct RGB_Color rgb_colors[NUMBER_OF_LEDS];
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
    1082:	06 15       	cp	r16, r6
    1084:	17 05       	cpc	r17, r7
    1086:	09 f0       	breq	.+2      	; 0x108a <tinyLED_update+0x326>
    1088:	e2 ce       	rjmp	.-572    	; 0xe4e <tinyLED_update+0xea>
    108a:	cd 84       	ldd	r12, Y+13	; 0x0d
    108c:	de 84       	ldd	r13, Y+14	; 0x0e
				break;
		}
	}
	
	// We only write to the LEDs if there is something to change. (eg. in SWING mode, we update the LEDs almost every cycle)
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
    108e:	6b e5       	ldi	r22, 0x5B	; 91
    1090:	78 e3       	ldi	r23, 0x38	; 56
    1092:	ce 01       	movw	r24, r28
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	0e 94 82 06 	call	0xd04	; 0xd04 <tinyLED_RGB_Color_Compare>
    109a:	81 11       	cpse	r24, r1
    109c:	2f c0       	rjmp	.+94     	; 0x10fc <tinyLED_update+0x398>
    109e:	0b e5       	ldi	r16, 0x5B	; 91
    10a0:	18 e3       	ldi	r17, 0x38	; 56
    10a2:	7e 01       	movw	r14, r28
    10a4:	f7 e0       	ldi	r31, 0x07	; 7
    10a6:	ef 0e       	add	r14, r31
    10a8:	f1 1c       	adc	r15, r1
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
		{
			// Write to LEDs
			//For some reason, the data-bus to the LEDs is serialized as GRB
			//which means the 24-bit data-bus will look like [Green[0:7], Red[0:7], Blue[0:7]]
			tinyLED_SPIWriteByte(rgb_colors[i].green);
    10aa:	d6 01       	movw	r26, r12
    10ac:	11 96       	adiw	r26, 0x01	; 1
    10ae:	8c 91       	ld	r24, X
    10b0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].red);
    10b4:	f6 01       	movw	r30, r12
    10b6:	80 81       	ld	r24, Z
    10b8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
    10bc:	d6 01       	movw	r26, r12
    10be:	12 96       	adiw	r26, 0x02	; 2
    10c0:	8c 91       	ld	r24, X
    10c2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <tinyLED_SPIWriteByte>
			tinyLED_old_colors[i] = rgb_colors[i];
    10c6:	f6 01       	movw	r30, r12
    10c8:	81 91       	ld	r24, Z+
    10ca:	91 91       	ld	r25, Z+
    10cc:	a1 91       	ld	r26, Z+
    10ce:	6f 01       	movw	r12, r30
    10d0:	f8 01       	movw	r30, r16
    10d2:	81 93       	st	Z+, r24
    10d4:	91 93       	st	Z+, r25
    10d6:	a1 93       	st	Z+, r26
    10d8:	8f 01       	movw	r16, r30
		}
	}
	
	// We only write to the LEDs if there is something to change. (eg. in SWING mode, we update the LEDs almost every cycle)
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
    10da:	ce 14       	cp	r12, r14
    10dc:	df 04       	cpc	r13, r15
    10de:	29 f7       	brne	.-54     	; 0x10aa <tinyLED_update+0x346>
			tinyLED_SPIWriteByte(rgb_colors[i].green);
			tinyLED_SPIWriteByte(rgb_colors[i].red);
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
			tinyLED_old_colors[i] = rgb_colors[i];
		}
		tinyDebugger_send_uint8("LED1 color", tinyLED_colors[0].color);
    10e0:	01 e6       	ldi	r16, 0x61	; 97
    10e2:	18 e3       	ldi	r17, 0x38	; 56
    10e4:	d8 01       	movw	r26, r16
    10e6:	6c 91       	ld	r22, X
    10e8:	86 e6       	ldi	r24, 0x66	; 102
    10ea:	95 ea       	ldi	r25, 0xA5	; 165
    10ec:	0e 94 af 04 	call	0x95e	; 0x95e <tinyDebugger_send_uint8>
		tinyDebugger_send_uint8("LED2 color", tinyLED_colors[1].color);
    10f0:	f8 01       	movw	r30, r16
    10f2:	62 81       	ldd	r22, Z+2	; 0x02
    10f4:	81 e7       	ldi	r24, 0x71	; 113
    10f6:	95 ea       	ldi	r25, 0xA5	; 165
    10f8:	0e 94 af 04 	call	0x95e	; 0x95e <tinyDebugger_send_uint8>
	}
}
    10fc:	6e 96       	adiw	r28, 0x1e	; 30
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	bf 90       	pop	r11
    1114:	af 90       	pop	r10
    1116:	9f 90       	pop	r9
    1118:	8f 90       	pop	r8
    111a:	7f 90       	pop	r7
    111c:	6f 90       	pop	r6
    111e:	5f 90       	pop	r5
    1120:	4f 90       	pop	r4
    1122:	3f 90       	pop	r3
    1124:	2f 90       	pop	r2
    1126:	08 95       	ret

00001128 <tinyPotential_update>:

/*
Update the potential
*/
void tinyPotential_update()
{
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
Function to decay the potential towards 0
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
    1130:	0e 94 71 09 	call	0x12e2	; 0x12e2 <tinyTime_now>
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    1134:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <previous_update_time>
    1138:	68 1b       	sub	r22, r24
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 c7 0a 	call	0x158e	; 0x158e <__floatunsisf>
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	48 ec       	ldi	r20, 0xC8	; 200
    114a:	52 e4       	ldi	r21, 0x42	; 66
    114c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__divsf3>
    1150:	90 58       	subi	r25, 0x80	; 128
    1152:	0e 94 66 0a 	call	0x14cc	; 0x14cc <exp>
    1156:	20 91 49 38 	lds	r18, 0x3849	; 0x803849 <tinyPotential_potential>
    115a:	30 91 4a 38 	lds	r19, 0x384A	; 0x80384a <tinyPotential_potential+0x1>
    115e:	40 91 4b 38 	lds	r20, 0x384B	; 0x80384b <tinyPotential_potential+0x2>
    1162:	50 91 4c 38 	lds	r21, 0x384C	; 0x80384c <tinyPotential_potential+0x3>
    1166:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__mulsf3>
    116a:	6b 01       	movw	r12, r22
    116c:	7c 01       	movw	r14, r24
	if(fabs(tinyPotential_potential)<0.1){
    116e:	9f 77       	andi	r25, 0x7F	; 127
    1170:	2d ec       	ldi	r18, 0xCD	; 205
    1172:	3c ec       	ldi	r19, 0xCC	; 204
    1174:	4c ec       	ldi	r20, 0xCC	; 204
    1176:	5d e3       	ldi	r21, 0x3D	; 61
    1178:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__cmpsf2>
    117c:	88 23       	and	r24, r24
    117e:	4c f0       	brlt	.+18     	; 0x1192 <tinyPotential_update+0x6a>
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    1180:	c0 92 49 38 	sts	0x3849, r12	; 0x803849 <tinyPotential_potential>
    1184:	d0 92 4a 38 	sts	0x384A, r13	; 0x80384a <tinyPotential_potential+0x1>
    1188:	e0 92 4b 38 	sts	0x384B, r14	; 0x80384b <tinyPotential_potential+0x2>
    118c:	f0 92 4c 38 	sts	0x384C, r15	; 0x80384c <tinyPotential_potential+0x3>
    1190:	08 c0       	rjmp	.+16     	; 0x11a2 <tinyPotential_update+0x7a>
	if(fabs(tinyPotential_potential)<0.1){
		tinyPotential_potential=0;
    1192:	10 92 49 38 	sts	0x3849, r1	; 0x803849 <tinyPotential_potential>
    1196:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <tinyPotential_potential+0x1>
    119a:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <tinyPotential_potential+0x2>
    119e:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <tinyPotential_potential+0x3>
	}
	previous_update_time = tinyTime_now();
    11a2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <tinyTime_now>
    11a6:	60 93 45 38 	sts	0x3845, r22	; 0x803845 <previous_update_time>
    11aa:	70 93 46 38 	sts	0x3846, r23	; 0x803846 <previous_update_time+0x1>
    11ae:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <previous_update_time+0x2>
    11b2:	90 93 48 38 	sts	0x3848, r25	; 0x803848 <previous_update_time+0x3>
void tinyPotential_update()
{
	//Some of the potential in the neuron has decayed away
	tinyPotential_decay();
	// Update potential with values from Dendrites
	tinyPotential_potential = tinyDendrite_update_potential(tinyPotential_potential);
    11b6:	60 91 49 38 	lds	r22, 0x3849	; 0x803849 <tinyPotential_potential>
    11ba:	70 91 4a 38 	lds	r23, 0x384A	; 0x80384a <tinyPotential_potential+0x1>
    11be:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <tinyPotential_potential+0x2>
    11c2:	90 91 4c 38 	lds	r25, 0x384C	; 0x80384c <tinyPotential_potential+0x3>
    11c6:	0e 94 05 06 	call	0xc0a	; 0xc0a <tinyDendrite_update_potential>
    11ca:	60 93 49 38 	sts	0x3849, r22	; 0x803849 <tinyPotential_potential>
    11ce:	70 93 4a 38 	sts	0x384A, r23	; 0x80384a <tinyPotential_potential+0x1>
    11d2:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <tinyPotential_potential+0x2>
    11d6:	90 93 4c 38 	sts	0x384C, r25	; 0x80384c <tinyPotential_potential+0x3>
	
	// Update potential from button press
	tinyPotential_potential = tinyButton_update_potential(tinyPotential_potential);
    11da:	0e 94 2c 04 	call	0x858	; 0x858 <tinyButton_update_potential>
    11de:	60 93 49 38 	sts	0x3849, r22	; 0x803849 <tinyPotential_potential>
    11e2:	70 93 4a 38 	sts	0x384A, r23	; 0x80384a <tinyPotential_potential+0x1>
    11e6:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <tinyPotential_potential+0x2>
    11ea:	90 93 4c 38 	sts	0x384C, r25	; 0x80384c <tinyPotential_potential+0x3>
	
	// Update potential with values from spontaneous pulse.
	tinyPotential_potential = tinyPulse_update_potential(tinyPotential_potential);
    11ee:	0e 94 25 09 	call	0x124a	; 0x124a <tinyPulse_update_potential>
    11f2:	ab 01       	movw	r20, r22
    11f4:	bc 01       	movw	r22, r24
    11f6:	40 93 49 38 	sts	0x3849, r20	; 0x803849 <tinyPotential_potential>
    11fa:	50 93 4a 38 	sts	0x384A, r21	; 0x80384a <tinyPotential_potential+0x1>
    11fe:	60 93 4b 38 	sts	0x384B, r22	; 0x80384b <tinyPotential_potential+0x2>
    1202:	70 93 4c 38 	sts	0x384C, r23	; 0x80384c <tinyPotential_potential+0x3>
	
	tinyDebugger_send_double("Potential", tinyPotential_potential);
    1206:	8c e7       	ldi	r24, 0x7C	; 124
    1208:	95 ea       	ldi	r25, 0xA5	; 165
    120a:	0e 94 c0 04 	call	0x980	; 0x980 <tinyDebugger_send_double>
	
	
	// Let the axon affect the potential
	// This is also where we decide whether or not the axon should fire
	tinyPotential_potential = tinyAxon_update_potential(tinyPotential_potential);
    120e:	60 91 49 38 	lds	r22, 0x3849	; 0x803849 <tinyPotential_potential>
    1212:	70 91 4a 38 	lds	r23, 0x384A	; 0x80384a <tinyPotential_potential+0x1>
    1216:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <tinyPotential_potential+0x2>
    121a:	90 91 4c 38 	lds	r25, 0x384C	; 0x80384c <tinyPotential_potential+0x3>
    121e:	0e 94 0f 03 	call	0x61e	; 0x61e <tinyAxon_update_potential>
    1222:	60 93 49 38 	sts	0x3849, r22	; 0x803849 <tinyPotential_potential>
    1226:	70 93 4a 38 	sts	0x384A, r23	; 0x80384a <tinyPotential_potential+0x1>
    122a:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <tinyPotential_potential+0x2>
    122e:	90 93 4c 38 	sts	0x384C, r25	; 0x80384c <tinyPotential_potential+0x3>
}
    1232:	ff 90       	pop	r15
    1234:	ef 90       	pop	r14
    1236:	df 90       	pop	r13
    1238:	cf 90       	pop	r12
    123a:	08 95       	ret

0000123c <tinyPulse_toggle_pulse_mode>:
uint32_t time_of_last_pulse = 0;
uint16_t time_since_last_pulse = 0;
uint16_t ideal_time_between_pulses = 1000/PULSEMODE_FREQUENCY;

void tinyPulse_toggle_pulse_mode(){
	pulse_mode = !pulse_mode;
    123c:	90 91 53 38 	lds	r25, 0x3853	; 0x803853 <pulse_mode>
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	89 27       	eor	r24, r25
    1244:	80 93 53 38 	sts	0x3853, r24	; 0x803853 <pulse_mode>
    1248:	08 95       	ret

0000124a <tinyPulse_update_potential>:
}

double tinyPulse_update_potential(double potential){
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	6b 01       	movw	r12, r22
    1254:	7c 01       	movw	r14, r24
	if(pulse_mode){
    1256:	80 91 53 38 	lds	r24, 0x3853	; 0x803853 <pulse_mode>
    125a:	88 23       	and	r24, r24
    125c:	39 f1       	breq	.+78     	; 0x12ac <tinyPulse_update_potential+0x62>
		
		time_since_last_pulse = tinyTime_now() - time_of_last_pulse;
    125e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <tinyTime_now>
    1262:	20 91 4f 38 	lds	r18, 0x384F	; 0x80384f <time_of_last_pulse>
    1266:	30 91 50 38 	lds	r19, 0x3850	; 0x803850 <time_of_last_pulse+0x1>
    126a:	62 1b       	sub	r22, r18
    126c:	73 0b       	sbc	r23, r19
    126e:	60 93 4d 38 	sts	0x384D, r22	; 0x80384d <time_since_last_pulse>
    1272:	70 93 4e 38 	sts	0x384E, r23	; 0x80384e <time_since_last_pulse+0x1>
		
		if(time_since_last_pulse >= ideal_time_between_pulses){
    1276:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <ideal_time_between_pulses>
    127a:	90 91 14 38 	lds	r25, 0x3814	; 0x803814 <ideal_time_between_pulses+0x1>
    127e:	68 17       	cp	r22, r24
    1280:	79 07       	cpc	r23, r25
    1282:	a0 f0       	brcs	.+40     	; 0x12ac <tinyPulse_update_potential+0x62>
			// This isn't actually a button press. You could have a separate variable for this, but it seems unnecessary.
			potential += BUTTON_PRESS_REACTION;
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 ed       	ldi	r20, 0xD0	; 208
    128a:	51 e4       	ldi	r21, 0x41	; 65
    128c:	c7 01       	movw	r24, r14
    128e:	b6 01       	movw	r22, r12
    1290:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__addsf3>
    1294:	6b 01       	movw	r12, r22
    1296:	7c 01       	movw	r14, r24
			time_of_last_pulse = tinyTime_now();			
    1298:	0e 94 71 09 	call	0x12e2	; 0x12e2 <tinyTime_now>
    129c:	60 93 4f 38 	sts	0x384F, r22	; 0x80384f <time_of_last_pulse>
    12a0:	70 93 50 38 	sts	0x3850, r23	; 0x803850 <time_of_last_pulse+0x1>
    12a4:	80 93 51 38 	sts	0x3851, r24	; 0x803851 <time_of_last_pulse+0x2>
    12a8:	90 93 52 38 	sts	0x3852, r25	; 0x803852 <time_of_last_pulse+0x3>
		}
	}
	return potential;
}
    12ac:	c7 01       	movw	r24, r14
    12ae:	b6 01       	movw	r22, r12
    12b0:	ff 90       	pop	r15
    12b2:	ef 90       	pop	r14
    12b4:	df 90       	pop	r13
    12b6:	cf 90       	pop	r12
    12b8:	08 95       	ret

000012ba <tinyTime_counter_increment>:
    12ba:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <time_counter>
    12be:	90 91 55 38 	lds	r25, 0x3855	; 0x803855 <time_counter+0x1>
    12c2:	a0 91 56 38 	lds	r26, 0x3856	; 0x803856 <time_counter+0x2>
    12c6:	b0 91 57 38 	lds	r27, 0x3857	; 0x803857 <time_counter+0x3>
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	a1 1d       	adc	r26, r1
    12ce:	b1 1d       	adc	r27, r1
    12d0:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <time_counter>
    12d4:	90 93 55 38 	sts	0x3855, r25	; 0x803855 <time_counter+0x1>
    12d8:	a0 93 56 38 	sts	0x3856, r26	; 0x803856 <time_counter+0x2>
    12dc:	b0 93 57 38 	sts	0x3857, r27	; 0x803857 <time_counter+0x3>
    12e0:	08 95       	ret

000012e2 <tinyTime_now>:
    12e2:	60 91 54 38 	lds	r22, 0x3854	; 0x803854 <time_counter>
    12e6:	70 91 55 38 	lds	r23, 0x3855	; 0x803855 <time_counter+0x1>
    12ea:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <time_counter+0x2>
    12ee:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <time_counter+0x3>
    12f2:	08 95       	ret

000012f4 <__subsf3>:
    12f4:	50 58       	subi	r21, 0x80	; 128

000012f6 <__addsf3>:
    12f6:	bb 27       	eor	r27, r27
    12f8:	aa 27       	eor	r26, r26
    12fa:	0e 94 92 09 	call	0x1324	; 0x1324 <__addsf3x>
    12fe:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__fp_round>
    1302:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fp_pscA>
    1306:	38 f0       	brcs	.+14     	; 0x1316 <__addsf3+0x20>
    1308:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fp_pscB>
    130c:	20 f0       	brcs	.+8      	; 0x1316 <__addsf3+0x20>
    130e:	39 f4       	brne	.+14     	; 0x131e <__addsf3+0x28>
    1310:	9f 3f       	cpi	r25, 0xFF	; 255
    1312:	19 f4       	brne	.+6      	; 0x131a <__addsf3+0x24>
    1314:	26 f4       	brtc	.+8      	; 0x131e <__addsf3+0x28>
    1316:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__fp_nan>
    131a:	0e f4       	brtc	.+2      	; 0x131e <__addsf3+0x28>
    131c:	e0 95       	com	r30
    131e:	e7 fb       	bst	r30, 7
    1320:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_inf>

00001324 <__addsf3x>:
    1324:	e9 2f       	mov	r30, r25
    1326:	0e 94 96 0b 	call	0x172c	; 0x172c <__fp_split3>
    132a:	58 f3       	brcs	.-42     	; 0x1302 <__addsf3+0xc>
    132c:	ba 17       	cp	r27, r26
    132e:	62 07       	cpc	r22, r18
    1330:	73 07       	cpc	r23, r19
    1332:	84 07       	cpc	r24, r20
    1334:	95 07       	cpc	r25, r21
    1336:	20 f0       	brcs	.+8      	; 0x1340 <__addsf3x+0x1c>
    1338:	79 f4       	brne	.+30     	; 0x1358 <__addsf3x+0x34>
    133a:	a6 f5       	brtc	.+104    	; 0x13a4 <__addsf3x+0x80>
    133c:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_zero>
    1340:	0e f4       	brtc	.+2      	; 0x1344 <__addsf3x+0x20>
    1342:	e0 95       	com	r30
    1344:	0b 2e       	mov	r0, r27
    1346:	ba 2f       	mov	r27, r26
    1348:	a0 2d       	mov	r26, r0
    134a:	0b 01       	movw	r0, r22
    134c:	b9 01       	movw	r22, r18
    134e:	90 01       	movw	r18, r0
    1350:	0c 01       	movw	r0, r24
    1352:	ca 01       	movw	r24, r20
    1354:	a0 01       	movw	r20, r0
    1356:	11 24       	eor	r1, r1
    1358:	ff 27       	eor	r31, r31
    135a:	59 1b       	sub	r21, r25
    135c:	99 f0       	breq	.+38     	; 0x1384 <__addsf3x+0x60>
    135e:	59 3f       	cpi	r21, 0xF9	; 249
    1360:	50 f4       	brcc	.+20     	; 0x1376 <__addsf3x+0x52>
    1362:	50 3e       	cpi	r21, 0xE0	; 224
    1364:	68 f1       	brcs	.+90     	; 0x13c0 <__addsf3x+0x9c>
    1366:	1a 16       	cp	r1, r26
    1368:	f0 40       	sbci	r31, 0x00	; 0
    136a:	a2 2f       	mov	r26, r18
    136c:	23 2f       	mov	r18, r19
    136e:	34 2f       	mov	r19, r20
    1370:	44 27       	eor	r20, r20
    1372:	58 5f       	subi	r21, 0xF8	; 248
    1374:	f3 cf       	rjmp	.-26     	; 0x135c <__addsf3x+0x38>
    1376:	46 95       	lsr	r20
    1378:	37 95       	ror	r19
    137a:	27 95       	ror	r18
    137c:	a7 95       	ror	r26
    137e:	f0 40       	sbci	r31, 0x00	; 0
    1380:	53 95       	inc	r21
    1382:	c9 f7       	brne	.-14     	; 0x1376 <__addsf3x+0x52>
    1384:	7e f4       	brtc	.+30     	; 0x13a4 <__addsf3x+0x80>
    1386:	1f 16       	cp	r1, r31
    1388:	ba 0b       	sbc	r27, r26
    138a:	62 0b       	sbc	r22, r18
    138c:	73 0b       	sbc	r23, r19
    138e:	84 0b       	sbc	r24, r20
    1390:	ba f0       	brmi	.+46     	; 0x13c0 <__addsf3x+0x9c>
    1392:	91 50       	subi	r25, 0x01	; 1
    1394:	a1 f0       	breq	.+40     	; 0x13be <__addsf3x+0x9a>
    1396:	ff 0f       	add	r31, r31
    1398:	bb 1f       	adc	r27, r27
    139a:	66 1f       	adc	r22, r22
    139c:	77 1f       	adc	r23, r23
    139e:	88 1f       	adc	r24, r24
    13a0:	c2 f7       	brpl	.-16     	; 0x1392 <__addsf3x+0x6e>
    13a2:	0e c0       	rjmp	.+28     	; 0x13c0 <__addsf3x+0x9c>
    13a4:	ba 0f       	add	r27, r26
    13a6:	62 1f       	adc	r22, r18
    13a8:	73 1f       	adc	r23, r19
    13aa:	84 1f       	adc	r24, r20
    13ac:	48 f4       	brcc	.+18     	; 0x13c0 <__addsf3x+0x9c>
    13ae:	87 95       	ror	r24
    13b0:	77 95       	ror	r23
    13b2:	67 95       	ror	r22
    13b4:	b7 95       	ror	r27
    13b6:	f7 95       	ror	r31
    13b8:	9e 3f       	cpi	r25, 0xFE	; 254
    13ba:	08 f0       	brcs	.+2      	; 0x13be <__addsf3x+0x9a>
    13bc:	b0 cf       	rjmp	.-160    	; 0x131e <__addsf3+0x28>
    13be:	93 95       	inc	r25
    13c0:	88 0f       	add	r24, r24
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <__addsf3x+0xa2>
    13c4:	99 27       	eor	r25, r25
    13c6:	ee 0f       	add	r30, r30
    13c8:	97 95       	ror	r25
    13ca:	87 95       	ror	r24
    13cc:	08 95       	ret

000013ce <__cmpsf2>:
    13ce:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fp_cmp>
    13d2:	08 f4       	brcc	.+2      	; 0x13d6 <__cmpsf2+0x8>
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	08 95       	ret

000013d8 <__divsf3>:
    13d8:	0e 94 00 0a 	call	0x1400	; 0x1400 <__divsf3x>
    13dc:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__fp_round>
    13e0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fp_pscB>
    13e4:	58 f0       	brcs	.+22     	; 0x13fc <__divsf3+0x24>
    13e6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fp_pscA>
    13ea:	40 f0       	brcs	.+16     	; 0x13fc <__divsf3+0x24>
    13ec:	29 f4       	brne	.+10     	; 0x13f8 <__divsf3+0x20>
    13ee:	5f 3f       	cpi	r21, 0xFF	; 255
    13f0:	29 f0       	breq	.+10     	; 0x13fc <__divsf3+0x24>
    13f2:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_inf>
    13f6:	51 11       	cpse	r21, r1
    13f8:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_szero>
    13fc:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__fp_nan>

00001400 <__divsf3x>:
    1400:	0e 94 96 0b 	call	0x172c	; 0x172c <__fp_split3>
    1404:	68 f3       	brcs	.-38     	; 0x13e0 <__divsf3+0x8>

00001406 <__divsf3_pse>:
    1406:	99 23       	and	r25, r25
    1408:	b1 f3       	breq	.-20     	; 0x13f6 <__divsf3+0x1e>
    140a:	55 23       	and	r21, r21
    140c:	91 f3       	breq	.-28     	; 0x13f2 <__divsf3+0x1a>
    140e:	95 1b       	sub	r25, r21
    1410:	55 0b       	sbc	r21, r21
    1412:	bb 27       	eor	r27, r27
    1414:	aa 27       	eor	r26, r26
    1416:	62 17       	cp	r22, r18
    1418:	73 07       	cpc	r23, r19
    141a:	84 07       	cpc	r24, r20
    141c:	38 f0       	brcs	.+14     	; 0x142c <__divsf3_pse+0x26>
    141e:	9f 5f       	subi	r25, 0xFF	; 255
    1420:	5f 4f       	sbci	r21, 0xFF	; 255
    1422:	22 0f       	add	r18, r18
    1424:	33 1f       	adc	r19, r19
    1426:	44 1f       	adc	r20, r20
    1428:	aa 1f       	adc	r26, r26
    142a:	a9 f3       	breq	.-22     	; 0x1416 <__divsf3_pse+0x10>
    142c:	35 d0       	rcall	.+106    	; 0x1498 <__divsf3_pse+0x92>
    142e:	0e 2e       	mov	r0, r30
    1430:	3a f0       	brmi	.+14     	; 0x1440 <__divsf3_pse+0x3a>
    1432:	e0 e8       	ldi	r30, 0x80	; 128
    1434:	32 d0       	rcall	.+100    	; 0x149a <__divsf3_pse+0x94>
    1436:	91 50       	subi	r25, 0x01	; 1
    1438:	50 40       	sbci	r21, 0x00	; 0
    143a:	e6 95       	lsr	r30
    143c:	00 1c       	adc	r0, r0
    143e:	ca f7       	brpl	.-14     	; 0x1432 <__divsf3_pse+0x2c>
    1440:	2b d0       	rcall	.+86     	; 0x1498 <__divsf3_pse+0x92>
    1442:	fe 2f       	mov	r31, r30
    1444:	29 d0       	rcall	.+82     	; 0x1498 <__divsf3_pse+0x92>
    1446:	66 0f       	add	r22, r22
    1448:	77 1f       	adc	r23, r23
    144a:	88 1f       	adc	r24, r24
    144c:	bb 1f       	adc	r27, r27
    144e:	26 17       	cp	r18, r22
    1450:	37 07       	cpc	r19, r23
    1452:	48 07       	cpc	r20, r24
    1454:	ab 07       	cpc	r26, r27
    1456:	b0 e8       	ldi	r27, 0x80	; 128
    1458:	09 f0       	breq	.+2      	; 0x145c <__divsf3_pse+0x56>
    145a:	bb 0b       	sbc	r27, r27
    145c:	80 2d       	mov	r24, r0
    145e:	bf 01       	movw	r22, r30
    1460:	ff 27       	eor	r31, r31
    1462:	93 58       	subi	r25, 0x83	; 131
    1464:	5f 4f       	sbci	r21, 0xFF	; 255
    1466:	3a f0       	brmi	.+14     	; 0x1476 <__divsf3_pse+0x70>
    1468:	9e 3f       	cpi	r25, 0xFE	; 254
    146a:	51 05       	cpc	r21, r1
    146c:	78 f0       	brcs	.+30     	; 0x148c <__divsf3_pse+0x86>
    146e:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_inf>
    1472:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_szero>
    1476:	5f 3f       	cpi	r21, 0xFF	; 255
    1478:	e4 f3       	brlt	.-8      	; 0x1472 <__divsf3_pse+0x6c>
    147a:	98 3e       	cpi	r25, 0xE8	; 232
    147c:	d4 f3       	brlt	.-12     	; 0x1472 <__divsf3_pse+0x6c>
    147e:	86 95       	lsr	r24
    1480:	77 95       	ror	r23
    1482:	67 95       	ror	r22
    1484:	b7 95       	ror	r27
    1486:	f7 95       	ror	r31
    1488:	9f 5f       	subi	r25, 0xFF	; 255
    148a:	c9 f7       	brne	.-14     	; 0x147e <__divsf3_pse+0x78>
    148c:	88 0f       	add	r24, r24
    148e:	91 1d       	adc	r25, r1
    1490:	96 95       	lsr	r25
    1492:	87 95       	ror	r24
    1494:	97 f9       	bld	r25, 7
    1496:	08 95       	ret
    1498:	e1 e0       	ldi	r30, 0x01	; 1
    149a:	66 0f       	add	r22, r22
    149c:	77 1f       	adc	r23, r23
    149e:	88 1f       	adc	r24, r24
    14a0:	bb 1f       	adc	r27, r27
    14a2:	62 17       	cp	r22, r18
    14a4:	73 07       	cpc	r23, r19
    14a6:	84 07       	cpc	r24, r20
    14a8:	ba 07       	cpc	r27, r26
    14aa:	20 f0       	brcs	.+8      	; 0x14b4 <__divsf3_pse+0xae>
    14ac:	62 1b       	sub	r22, r18
    14ae:	73 0b       	sbc	r23, r19
    14b0:	84 0b       	sbc	r24, r20
    14b2:	ba 0b       	sbc	r27, r26
    14b4:	ee 1f       	adc	r30, r30
    14b6:	88 f7       	brcc	.-30     	; 0x149a <__divsf3_pse+0x94>
    14b8:	e0 95       	com	r30
    14ba:	08 95       	ret
    14bc:	29 f4       	brne	.+10     	; 0x14c8 <__divsf3_pse+0xc2>
    14be:	16 f0       	brts	.+4      	; 0x14c4 <__divsf3_pse+0xbe>
    14c0:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_inf>
    14c4:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_zero>
    14c8:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__fp_nan>

000014cc <exp>:
    14cc:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fp_splitA>
    14d0:	a8 f3       	brcs	.-22     	; 0x14bc <__divsf3_pse+0xb6>
    14d2:	96 38       	cpi	r25, 0x86	; 134
    14d4:	a0 f7       	brcc	.-24     	; 0x14be <__divsf3_pse+0xb8>
    14d6:	07 f8       	bld	r0, 7
    14d8:	0f 92       	push	r0
    14da:	e8 94       	clt
    14dc:	2b e3       	ldi	r18, 0x3B	; 59
    14de:	3a ea       	ldi	r19, 0xAA	; 170
    14e0:	48 eb       	ldi	r20, 0xB8	; 184
    14e2:	5f e7       	ldi	r21, 0x7F	; 127
    14e4:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__mulsf3_pse>
    14e8:	0f 92       	push	r0
    14ea:	0f 92       	push	r0
    14ec:	0f 92       	push	r0
    14ee:	4d b7       	in	r20, 0x3d	; 61
    14f0:	5e b7       	in	r21, 0x3e	; 62
    14f2:	0f 92       	push	r0
    14f4:	0e 94 06 0c 	call	0x180c	; 0x180c <modf>
    14f8:	ec e7       	ldi	r30, 0x7C	; 124
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__fp_powser>
    1500:	4f 91       	pop	r20
    1502:	5f 91       	pop	r21
    1504:	ef 91       	pop	r30
    1506:	ff 91       	pop	r31
    1508:	e5 95       	asr	r30
    150a:	ee 1f       	adc	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	49 f0       	breq	.+18     	; 0x1522 <exp+0x56>
    1510:	fe 57       	subi	r31, 0x7E	; 126
    1512:	e0 68       	ori	r30, 0x80	; 128
    1514:	44 27       	eor	r20, r20
    1516:	ee 0f       	add	r30, r30
    1518:	44 1f       	adc	r20, r20
    151a:	fa 95       	dec	r31
    151c:	e1 f7       	brne	.-8      	; 0x1516 <exp+0x4a>
    151e:	41 95       	neg	r20
    1520:	55 0b       	sbc	r21, r21
    1522:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <ldexp>
    1526:	0f 90       	pop	r0
    1528:	07 fe       	sbrs	r0, 7
    152a:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <inverse>
    152e:	08 95       	ret

00001530 <__fixunssfsi>:
    1530:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fp_splitA>
    1534:	88 f0       	brcs	.+34     	; 0x1558 <__fixunssfsi+0x28>
    1536:	9f 57       	subi	r25, 0x7F	; 127
    1538:	98 f0       	brcs	.+38     	; 0x1560 <__fixunssfsi+0x30>
    153a:	b9 2f       	mov	r27, r25
    153c:	99 27       	eor	r25, r25
    153e:	b7 51       	subi	r27, 0x17	; 23
    1540:	b0 f0       	brcs	.+44     	; 0x156e <__fixunssfsi+0x3e>
    1542:	e1 f0       	breq	.+56     	; 0x157c <__fixunssfsi+0x4c>
    1544:	66 0f       	add	r22, r22
    1546:	77 1f       	adc	r23, r23
    1548:	88 1f       	adc	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	1a f0       	brmi	.+6      	; 0x1554 <__fixunssfsi+0x24>
    154e:	ba 95       	dec	r27
    1550:	c9 f7       	brne	.-14     	; 0x1544 <__fixunssfsi+0x14>
    1552:	14 c0       	rjmp	.+40     	; 0x157c <__fixunssfsi+0x4c>
    1554:	b1 30       	cpi	r27, 0x01	; 1
    1556:	91 f0       	breq	.+36     	; 0x157c <__fixunssfsi+0x4c>
    1558:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fp_zero>
    155c:	b1 e0       	ldi	r27, 0x01	; 1
    155e:	08 95       	ret
    1560:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_zero>
    1564:	67 2f       	mov	r22, r23
    1566:	78 2f       	mov	r23, r24
    1568:	88 27       	eor	r24, r24
    156a:	b8 5f       	subi	r27, 0xF8	; 248
    156c:	39 f0       	breq	.+14     	; 0x157c <__fixunssfsi+0x4c>
    156e:	b9 3f       	cpi	r27, 0xF9	; 249
    1570:	cc f3       	brlt	.-14     	; 0x1564 <__fixunssfsi+0x34>
    1572:	86 95       	lsr	r24
    1574:	77 95       	ror	r23
    1576:	67 95       	ror	r22
    1578:	b3 95       	inc	r27
    157a:	d9 f7       	brne	.-10     	; 0x1572 <__fixunssfsi+0x42>
    157c:	3e f4       	brtc	.+14     	; 0x158c <__fixunssfsi+0x5c>
    157e:	90 95       	com	r25
    1580:	80 95       	com	r24
    1582:	70 95       	com	r23
    1584:	61 95       	neg	r22
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	8f 4f       	sbci	r24, 0xFF	; 255
    158a:	9f 4f       	sbci	r25, 0xFF	; 255
    158c:	08 95       	ret

0000158e <__floatunsisf>:
    158e:	e8 94       	clt
    1590:	09 c0       	rjmp	.+18     	; 0x15a4 <__floatsisf+0x12>

00001592 <__floatsisf>:
    1592:	97 fb       	bst	r25, 7
    1594:	3e f4       	brtc	.+14     	; 0x15a4 <__floatsisf+0x12>
    1596:	90 95       	com	r25
    1598:	80 95       	com	r24
    159a:	70 95       	com	r23
    159c:	61 95       	neg	r22
    159e:	7f 4f       	sbci	r23, 0xFF	; 255
    15a0:	8f 4f       	sbci	r24, 0xFF	; 255
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	99 23       	and	r25, r25
    15a6:	a9 f0       	breq	.+42     	; 0x15d2 <__floatsisf+0x40>
    15a8:	f9 2f       	mov	r31, r25
    15aa:	96 e9       	ldi	r25, 0x96	; 150
    15ac:	bb 27       	eor	r27, r27
    15ae:	93 95       	inc	r25
    15b0:	f6 95       	lsr	r31
    15b2:	87 95       	ror	r24
    15b4:	77 95       	ror	r23
    15b6:	67 95       	ror	r22
    15b8:	b7 95       	ror	r27
    15ba:	f1 11       	cpse	r31, r1
    15bc:	f8 cf       	rjmp	.-16     	; 0x15ae <__floatsisf+0x1c>
    15be:	fa f4       	brpl	.+62     	; 0x15fe <__floatsisf+0x6c>
    15c0:	bb 0f       	add	r27, r27
    15c2:	11 f4       	brne	.+4      	; 0x15c8 <__floatsisf+0x36>
    15c4:	60 ff       	sbrs	r22, 0
    15c6:	1b c0       	rjmp	.+54     	; 0x15fe <__floatsisf+0x6c>
    15c8:	6f 5f       	subi	r22, 0xFF	; 255
    15ca:	7f 4f       	sbci	r23, 0xFF	; 255
    15cc:	8f 4f       	sbci	r24, 0xFF	; 255
    15ce:	9f 4f       	sbci	r25, 0xFF	; 255
    15d0:	16 c0       	rjmp	.+44     	; 0x15fe <__floatsisf+0x6c>
    15d2:	88 23       	and	r24, r24
    15d4:	11 f0       	breq	.+4      	; 0x15da <__floatsisf+0x48>
    15d6:	96 e9       	ldi	r25, 0x96	; 150
    15d8:	11 c0       	rjmp	.+34     	; 0x15fc <__floatsisf+0x6a>
    15da:	77 23       	and	r23, r23
    15dc:	21 f0       	breq	.+8      	; 0x15e6 <__floatsisf+0x54>
    15de:	9e e8       	ldi	r25, 0x8E	; 142
    15e0:	87 2f       	mov	r24, r23
    15e2:	76 2f       	mov	r23, r22
    15e4:	05 c0       	rjmp	.+10     	; 0x15f0 <__floatsisf+0x5e>
    15e6:	66 23       	and	r22, r22
    15e8:	71 f0       	breq	.+28     	; 0x1606 <__floatsisf+0x74>
    15ea:	96 e8       	ldi	r25, 0x86	; 134
    15ec:	86 2f       	mov	r24, r22
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	2a f0       	brmi	.+10     	; 0x15fe <__floatsisf+0x6c>
    15f4:	9a 95       	dec	r25
    15f6:	66 0f       	add	r22, r22
    15f8:	77 1f       	adc	r23, r23
    15fa:	88 1f       	adc	r24, r24
    15fc:	da f7       	brpl	.-10     	; 0x15f4 <__floatsisf+0x62>
    15fe:	88 0f       	add	r24, r24
    1600:	96 95       	lsr	r25
    1602:	87 95       	ror	r24
    1604:	97 f9       	bld	r25, 7
    1606:	08 95       	ret

00001608 <fmin>:
    1608:	99 0f       	add	r25, r25
    160a:	bb 0b       	sbc	r27, r27
    160c:	55 0f       	add	r21, r21
    160e:	aa 0b       	sbc	r26, r26
    1610:	e0 e8       	ldi	r30, 0x80	; 128
    1612:	fe ef       	ldi	r31, 0xFE	; 254
    1614:	16 16       	cp	r1, r22
    1616:	17 06       	cpc	r1, r23
    1618:	e8 07       	cpc	r30, r24
    161a:	f9 07       	cpc	r31, r25
    161c:	70 f0       	brcs	.+28     	; 0x163a <fmin+0x32>
    161e:	12 16       	cp	r1, r18
    1620:	13 06       	cpc	r1, r19
    1622:	e4 07       	cpc	r30, r20
    1624:	f5 07       	cpc	r31, r21
    1626:	60 f0       	brcs	.+24     	; 0x1640 <fmin+0x38>
    1628:	ba 17       	cp	r27, r26
    162a:	54 f0       	brlt	.+20     	; 0x1640 <fmin+0x38>
    162c:	31 f4       	brne	.+12     	; 0x163a <fmin+0x32>
    162e:	26 17       	cp	r18, r22
    1630:	37 07       	cpc	r19, r23
    1632:	48 07       	cpc	r20, r24
    1634:	59 07       	cpc	r21, r25
    1636:	a7 95       	ror	r26
    1638:	1b f4       	brvc	.+6      	; 0x1640 <fmin+0x38>
    163a:	b9 01       	movw	r22, r18
    163c:	ca 01       	movw	r24, r20
    163e:	ba 2f       	mov	r27, r26
    1640:	b6 95       	lsr	r27
    1642:	97 95       	ror	r25
    1644:	08 95       	ret

00001646 <__fp_cmp>:
    1646:	99 0f       	add	r25, r25
    1648:	00 08       	sbc	r0, r0
    164a:	55 0f       	add	r21, r21
    164c:	aa 0b       	sbc	r26, r26
    164e:	e0 e8       	ldi	r30, 0x80	; 128
    1650:	fe ef       	ldi	r31, 0xFE	; 254
    1652:	16 16       	cp	r1, r22
    1654:	17 06       	cpc	r1, r23
    1656:	e8 07       	cpc	r30, r24
    1658:	f9 07       	cpc	r31, r25
    165a:	c0 f0       	brcs	.+48     	; 0x168c <__fp_cmp+0x46>
    165c:	12 16       	cp	r1, r18
    165e:	13 06       	cpc	r1, r19
    1660:	e4 07       	cpc	r30, r20
    1662:	f5 07       	cpc	r31, r21
    1664:	98 f0       	brcs	.+38     	; 0x168c <__fp_cmp+0x46>
    1666:	62 1b       	sub	r22, r18
    1668:	73 0b       	sbc	r23, r19
    166a:	84 0b       	sbc	r24, r20
    166c:	95 0b       	sbc	r25, r21
    166e:	39 f4       	brne	.+14     	; 0x167e <__fp_cmp+0x38>
    1670:	0a 26       	eor	r0, r26
    1672:	61 f0       	breq	.+24     	; 0x168c <__fp_cmp+0x46>
    1674:	23 2b       	or	r18, r19
    1676:	24 2b       	or	r18, r20
    1678:	25 2b       	or	r18, r21
    167a:	21 f4       	brne	.+8      	; 0x1684 <__fp_cmp+0x3e>
    167c:	08 95       	ret
    167e:	0a 26       	eor	r0, r26
    1680:	09 f4       	brne	.+2      	; 0x1684 <__fp_cmp+0x3e>
    1682:	a1 40       	sbci	r26, 0x01	; 1
    1684:	a6 95       	lsr	r26
    1686:	8f ef       	ldi	r24, 0xFF	; 255
    1688:	81 1d       	adc	r24, r1
    168a:	81 1d       	adc	r24, r1
    168c:	08 95       	ret

0000168e <__fp_inf>:
    168e:	97 f9       	bld	r25, 7
    1690:	9f 67       	ori	r25, 0x7F	; 127
    1692:	80 e8       	ldi	r24, 0x80	; 128
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	08 95       	ret

0000169a <__fp_nan>:
    169a:	9f ef       	ldi	r25, 0xFF	; 255
    169c:	80 ec       	ldi	r24, 0xC0	; 192
    169e:	08 95       	ret

000016a0 <__fp_powser>:
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	1f 93       	push	r17
    16a6:	0f 93       	push	r16
    16a8:	ff 92       	push	r15
    16aa:	ef 92       	push	r14
    16ac:	df 92       	push	r13
    16ae:	7b 01       	movw	r14, r22
    16b0:	8c 01       	movw	r16, r24
    16b2:	68 94       	set
    16b4:	06 c0       	rjmp	.+12     	; 0x16c2 <__fp_powser+0x22>
    16b6:	da 2e       	mov	r13, r26
    16b8:	ef 01       	movw	r28, r30
    16ba:	0e 94 4d 0c 	call	0x189a	; 0x189a <__mulsf3x>
    16be:	fe 01       	movw	r30, r28
    16c0:	e8 94       	clt
    16c2:	a5 91       	lpm	r26, Z+
    16c4:	25 91       	lpm	r18, Z+
    16c6:	35 91       	lpm	r19, Z+
    16c8:	45 91       	lpm	r20, Z+
    16ca:	55 91       	lpm	r21, Z+
    16cc:	a6 f3       	brts	.-24     	; 0x16b6 <__fp_powser+0x16>
    16ce:	ef 01       	movw	r28, r30
    16d0:	0e 94 92 09 	call	0x1324	; 0x1324 <__addsf3x>
    16d4:	fe 01       	movw	r30, r28
    16d6:	97 01       	movw	r18, r14
    16d8:	a8 01       	movw	r20, r16
    16da:	da 94       	dec	r13
    16dc:	69 f7       	brne	.-38     	; 0x16b8 <__fp_powser+0x18>
    16de:	df 90       	pop	r13
    16e0:	ef 90       	pop	r14
    16e2:	ff 90       	pop	r15
    16e4:	0f 91       	pop	r16
    16e6:	1f 91       	pop	r17
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <__fp_pscA>:
    16ee:	00 24       	eor	r0, r0
    16f0:	0a 94       	dec	r0
    16f2:	16 16       	cp	r1, r22
    16f4:	17 06       	cpc	r1, r23
    16f6:	18 06       	cpc	r1, r24
    16f8:	09 06       	cpc	r0, r25
    16fa:	08 95       	ret

000016fc <__fp_pscB>:
    16fc:	00 24       	eor	r0, r0
    16fe:	0a 94       	dec	r0
    1700:	12 16       	cp	r1, r18
    1702:	13 06       	cpc	r1, r19
    1704:	14 06       	cpc	r1, r20
    1706:	05 06       	cpc	r0, r21
    1708:	08 95       	ret

0000170a <__fp_round>:
    170a:	09 2e       	mov	r0, r25
    170c:	03 94       	inc	r0
    170e:	00 0c       	add	r0, r0
    1710:	11 f4       	brne	.+4      	; 0x1716 <__fp_round+0xc>
    1712:	88 23       	and	r24, r24
    1714:	52 f0       	brmi	.+20     	; 0x172a <__fp_round+0x20>
    1716:	bb 0f       	add	r27, r27
    1718:	40 f4       	brcc	.+16     	; 0x172a <__fp_round+0x20>
    171a:	bf 2b       	or	r27, r31
    171c:	11 f4       	brne	.+4      	; 0x1722 <__fp_round+0x18>
    171e:	60 ff       	sbrs	r22, 0
    1720:	04 c0       	rjmp	.+8      	; 0x172a <__fp_round+0x20>
    1722:	6f 5f       	subi	r22, 0xFF	; 255
    1724:	7f 4f       	sbci	r23, 0xFF	; 255
    1726:	8f 4f       	sbci	r24, 0xFF	; 255
    1728:	9f 4f       	sbci	r25, 0xFF	; 255
    172a:	08 95       	ret

0000172c <__fp_split3>:
    172c:	57 fd       	sbrc	r21, 7
    172e:	90 58       	subi	r25, 0x80	; 128
    1730:	44 0f       	add	r20, r20
    1732:	55 1f       	adc	r21, r21
    1734:	59 f0       	breq	.+22     	; 0x174c <__fp_splitA+0x10>
    1736:	5f 3f       	cpi	r21, 0xFF	; 255
    1738:	71 f0       	breq	.+28     	; 0x1756 <__fp_splitA+0x1a>
    173a:	47 95       	ror	r20

0000173c <__fp_splitA>:
    173c:	88 0f       	add	r24, r24
    173e:	97 fb       	bst	r25, 7
    1740:	99 1f       	adc	r25, r25
    1742:	61 f0       	breq	.+24     	; 0x175c <__fp_splitA+0x20>
    1744:	9f 3f       	cpi	r25, 0xFF	; 255
    1746:	79 f0       	breq	.+30     	; 0x1766 <__fp_splitA+0x2a>
    1748:	87 95       	ror	r24
    174a:	08 95       	ret
    174c:	12 16       	cp	r1, r18
    174e:	13 06       	cpc	r1, r19
    1750:	14 06       	cpc	r1, r20
    1752:	55 1f       	adc	r21, r21
    1754:	f2 cf       	rjmp	.-28     	; 0x173a <__fp_split3+0xe>
    1756:	46 95       	lsr	r20
    1758:	f1 df       	rcall	.-30     	; 0x173c <__fp_splitA>
    175a:	08 c0       	rjmp	.+16     	; 0x176c <__fp_splitA+0x30>
    175c:	16 16       	cp	r1, r22
    175e:	17 06       	cpc	r1, r23
    1760:	18 06       	cpc	r1, r24
    1762:	99 1f       	adc	r25, r25
    1764:	f1 cf       	rjmp	.-30     	; 0x1748 <__fp_splitA+0xc>
    1766:	86 95       	lsr	r24
    1768:	71 05       	cpc	r23, r1
    176a:	61 05       	cpc	r22, r1
    176c:	08 94       	sec
    176e:	08 95       	ret

00001770 <__fp_zero>:
    1770:	e8 94       	clt

00001772 <__fp_szero>:
    1772:	bb 27       	eor	r27, r27
    1774:	66 27       	eor	r22, r22
    1776:	77 27       	eor	r23, r23
    1778:	cb 01       	movw	r24, r22
    177a:	97 f9       	bld	r25, 7
    177c:	08 95       	ret

0000177e <__gesf2>:
    177e:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fp_cmp>
    1782:	08 f4       	brcc	.+2      	; 0x1786 <__gesf2+0x8>
    1784:	8f ef       	ldi	r24, 0xFF	; 255
    1786:	08 95       	ret

00001788 <inverse>:
    1788:	9b 01       	movw	r18, r22
    178a:	ac 01       	movw	r20, r24
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	80 e8       	ldi	r24, 0x80	; 128
    1792:	9f e3       	ldi	r25, 0x3F	; 63
    1794:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__divsf3>
    1798:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_inf>
    179c:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__fp_mpack>

000017a0 <ldexp>:
    17a0:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fp_splitA>
    17a4:	d8 f3       	brcs	.-10     	; 0x179c <inverse+0x14>
    17a6:	99 23       	and	r25, r25
    17a8:	c9 f3       	breq	.-14     	; 0x179c <inverse+0x14>
    17aa:	94 0f       	add	r25, r20
    17ac:	51 1d       	adc	r21, r1
    17ae:	a3 f3       	brvs	.-24     	; 0x1798 <inverse+0x10>
    17b0:	91 50       	subi	r25, 0x01	; 1
    17b2:	50 40       	sbci	r21, 0x00	; 0
    17b4:	94 f0       	brlt	.+36     	; 0x17da <ldexp+0x3a>
    17b6:	59 f0       	breq	.+22     	; 0x17ce <ldexp+0x2e>
    17b8:	88 23       	and	r24, r24
    17ba:	32 f0       	brmi	.+12     	; 0x17c8 <ldexp+0x28>
    17bc:	66 0f       	add	r22, r22
    17be:	77 1f       	adc	r23, r23
    17c0:	88 1f       	adc	r24, r24
    17c2:	91 50       	subi	r25, 0x01	; 1
    17c4:	50 40       	sbci	r21, 0x00	; 0
    17c6:	c1 f7       	brne	.-16     	; 0x17b8 <ldexp+0x18>
    17c8:	9e 3f       	cpi	r25, 0xFE	; 254
    17ca:	51 05       	cpc	r21, r1
    17cc:	2c f7       	brge	.-54     	; 0x1798 <inverse+0x10>
    17ce:	88 0f       	add	r24, r24
    17d0:	91 1d       	adc	r25, r1
    17d2:	96 95       	lsr	r25
    17d4:	87 95       	ror	r24
    17d6:	97 f9       	bld	r25, 7
    17d8:	08 95       	ret
    17da:	5f 3f       	cpi	r21, 0xFF	; 255
    17dc:	ac f0       	brlt	.+42     	; 0x1808 <ldexp+0x68>
    17de:	98 3e       	cpi	r25, 0xE8	; 232
    17e0:	9c f0       	brlt	.+38     	; 0x1808 <ldexp+0x68>
    17e2:	bb 27       	eor	r27, r27
    17e4:	86 95       	lsr	r24
    17e6:	77 95       	ror	r23
    17e8:	67 95       	ror	r22
    17ea:	b7 95       	ror	r27
    17ec:	08 f4       	brcc	.+2      	; 0x17f0 <ldexp+0x50>
    17ee:	b1 60       	ori	r27, 0x01	; 1
    17f0:	93 95       	inc	r25
    17f2:	c1 f7       	brne	.-16     	; 0x17e4 <ldexp+0x44>
    17f4:	bb 0f       	add	r27, r27
    17f6:	58 f7       	brcc	.-42     	; 0x17ce <ldexp+0x2e>
    17f8:	11 f4       	brne	.+4      	; 0x17fe <ldexp+0x5e>
    17fa:	60 ff       	sbrs	r22, 0
    17fc:	e8 cf       	rjmp	.-48     	; 0x17ce <ldexp+0x2e>
    17fe:	6f 5f       	subi	r22, 0xFF	; 255
    1800:	7f 4f       	sbci	r23, 0xFF	; 255
    1802:	8f 4f       	sbci	r24, 0xFF	; 255
    1804:	9f 4f       	sbci	r25, 0xFF	; 255
    1806:	e3 cf       	rjmp	.-58     	; 0x17ce <ldexp+0x2e>
    1808:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_szero>

0000180c <modf>:
    180c:	fa 01       	movw	r30, r20
    180e:	dc 01       	movw	r26, r24
    1810:	aa 0f       	add	r26, r26
    1812:	bb 1f       	adc	r27, r27
    1814:	9b 01       	movw	r18, r22
    1816:	ac 01       	movw	r20, r24
    1818:	bf 57       	subi	r27, 0x7F	; 127
    181a:	28 f4       	brcc	.+10     	; 0x1826 <modf+0x1a>
    181c:	22 27       	eor	r18, r18
    181e:	33 27       	eor	r19, r19
    1820:	44 27       	eor	r20, r20
    1822:	50 78       	andi	r21, 0x80	; 128
    1824:	20 c0       	rjmp	.+64     	; 0x1866 <modf+0x5a>
    1826:	b7 51       	subi	r27, 0x17	; 23
    1828:	90 f4       	brcc	.+36     	; 0x184e <modf+0x42>
    182a:	ab 2f       	mov	r26, r27
    182c:	00 24       	eor	r0, r0
    182e:	46 95       	lsr	r20
    1830:	37 95       	ror	r19
    1832:	27 95       	ror	r18
    1834:	01 1c       	adc	r0, r1
    1836:	a3 95       	inc	r26
    1838:	d2 f3       	brmi	.-12     	; 0x182e <modf+0x22>
    183a:	00 20       	and	r0, r0
    183c:	71 f0       	breq	.+28     	; 0x185a <modf+0x4e>
    183e:	22 0f       	add	r18, r18
    1840:	33 1f       	adc	r19, r19
    1842:	44 1f       	adc	r20, r20
    1844:	b3 95       	inc	r27
    1846:	da f3       	brmi	.-10     	; 0x183e <modf+0x32>
    1848:	0e d0       	rcall	.+28     	; 0x1866 <modf+0x5a>
    184a:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__subsf3>
    184e:	61 30       	cpi	r22, 0x01	; 1
    1850:	71 05       	cpc	r23, r1
    1852:	a0 e8       	ldi	r26, 0x80	; 128
    1854:	8a 07       	cpc	r24, r26
    1856:	b9 46       	sbci	r27, 0x69	; 105
    1858:	30 f4       	brcc	.+12     	; 0x1866 <modf+0x5a>
    185a:	9b 01       	movw	r18, r22
    185c:	ac 01       	movw	r20, r24
    185e:	66 27       	eor	r22, r22
    1860:	77 27       	eor	r23, r23
    1862:	88 27       	eor	r24, r24
    1864:	90 78       	andi	r25, 0x80	; 128
    1866:	30 96       	adiw	r30, 0x00	; 0
    1868:	21 f0       	breq	.+8      	; 0x1872 <modf+0x66>
    186a:	20 83       	st	Z, r18
    186c:	31 83       	std	Z+1, r19	; 0x01
    186e:	42 83       	std	Z+2, r20	; 0x02
    1870:	53 83       	std	Z+3, r21	; 0x03
    1872:	08 95       	ret

00001874 <__mulsf3>:
    1874:	0e 94 4d 0c 	call	0x189a	; 0x189a <__mulsf3x>
    1878:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__fp_round>
    187c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fp_pscA>
    1880:	38 f0       	brcs	.+14     	; 0x1890 <__mulsf3+0x1c>
    1882:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fp_pscB>
    1886:	20 f0       	brcs	.+8      	; 0x1890 <__mulsf3+0x1c>
    1888:	95 23       	and	r25, r21
    188a:	11 f0       	breq	.+4      	; 0x1890 <__mulsf3+0x1c>
    188c:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_inf>
    1890:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__fp_nan>
    1894:	11 24       	eor	r1, r1
    1896:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_szero>

0000189a <__mulsf3x>:
    189a:	0e 94 96 0b 	call	0x172c	; 0x172c <__fp_split3>
    189e:	70 f3       	brcs	.-36     	; 0x187c <__mulsf3+0x8>

000018a0 <__mulsf3_pse>:
    18a0:	95 9f       	mul	r25, r21
    18a2:	c1 f3       	breq	.-16     	; 0x1894 <__mulsf3+0x20>
    18a4:	95 0f       	add	r25, r21
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	55 1f       	adc	r21, r21
    18aa:	62 9f       	mul	r22, r18
    18ac:	f0 01       	movw	r30, r0
    18ae:	72 9f       	mul	r23, r18
    18b0:	bb 27       	eor	r27, r27
    18b2:	f0 0d       	add	r31, r0
    18b4:	b1 1d       	adc	r27, r1
    18b6:	63 9f       	mul	r22, r19
    18b8:	aa 27       	eor	r26, r26
    18ba:	f0 0d       	add	r31, r0
    18bc:	b1 1d       	adc	r27, r1
    18be:	aa 1f       	adc	r26, r26
    18c0:	64 9f       	mul	r22, r20
    18c2:	66 27       	eor	r22, r22
    18c4:	b0 0d       	add	r27, r0
    18c6:	a1 1d       	adc	r26, r1
    18c8:	66 1f       	adc	r22, r22
    18ca:	82 9f       	mul	r24, r18
    18cc:	22 27       	eor	r18, r18
    18ce:	b0 0d       	add	r27, r0
    18d0:	a1 1d       	adc	r26, r1
    18d2:	62 1f       	adc	r22, r18
    18d4:	73 9f       	mul	r23, r19
    18d6:	b0 0d       	add	r27, r0
    18d8:	a1 1d       	adc	r26, r1
    18da:	62 1f       	adc	r22, r18
    18dc:	83 9f       	mul	r24, r19
    18de:	a0 0d       	add	r26, r0
    18e0:	61 1d       	adc	r22, r1
    18e2:	22 1f       	adc	r18, r18
    18e4:	74 9f       	mul	r23, r20
    18e6:	33 27       	eor	r19, r19
    18e8:	a0 0d       	add	r26, r0
    18ea:	61 1d       	adc	r22, r1
    18ec:	23 1f       	adc	r18, r19
    18ee:	84 9f       	mul	r24, r20
    18f0:	60 0d       	add	r22, r0
    18f2:	21 1d       	adc	r18, r1
    18f4:	82 2f       	mov	r24, r18
    18f6:	76 2f       	mov	r23, r22
    18f8:	6a 2f       	mov	r22, r26
    18fa:	11 24       	eor	r1, r1
    18fc:	9f 57       	subi	r25, 0x7F	; 127
    18fe:	50 40       	sbci	r21, 0x00	; 0
    1900:	9a f0       	brmi	.+38     	; 0x1928 <__mulsf3_pse+0x88>
    1902:	f1 f0       	breq	.+60     	; 0x1940 <__mulsf3_pse+0xa0>
    1904:	88 23       	and	r24, r24
    1906:	4a f0       	brmi	.+18     	; 0x191a <__mulsf3_pse+0x7a>
    1908:	ee 0f       	add	r30, r30
    190a:	ff 1f       	adc	r31, r31
    190c:	bb 1f       	adc	r27, r27
    190e:	66 1f       	adc	r22, r22
    1910:	77 1f       	adc	r23, r23
    1912:	88 1f       	adc	r24, r24
    1914:	91 50       	subi	r25, 0x01	; 1
    1916:	50 40       	sbci	r21, 0x00	; 0
    1918:	a9 f7       	brne	.-22     	; 0x1904 <__mulsf3_pse+0x64>
    191a:	9e 3f       	cpi	r25, 0xFE	; 254
    191c:	51 05       	cpc	r21, r1
    191e:	80 f0       	brcs	.+32     	; 0x1940 <__mulsf3_pse+0xa0>
    1920:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_inf>
    1924:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_szero>
    1928:	5f 3f       	cpi	r21, 0xFF	; 255
    192a:	e4 f3       	brlt	.-8      	; 0x1924 <__mulsf3_pse+0x84>
    192c:	98 3e       	cpi	r25, 0xE8	; 232
    192e:	d4 f3       	brlt	.-12     	; 0x1924 <__mulsf3_pse+0x84>
    1930:	86 95       	lsr	r24
    1932:	77 95       	ror	r23
    1934:	67 95       	ror	r22
    1936:	b7 95       	ror	r27
    1938:	f7 95       	ror	r31
    193a:	e7 95       	ror	r30
    193c:	9f 5f       	subi	r25, 0xFF	; 255
    193e:	c1 f7       	brne	.-16     	; 0x1930 <__mulsf3_pse+0x90>
    1940:	fe 2b       	or	r31, r30
    1942:	88 0f       	add	r24, r24
    1944:	91 1d       	adc	r25, r1
    1946:	96 95       	lsr	r25
    1948:	87 95       	ror	r24
    194a:	97 f9       	bld	r25, 7
    194c:	08 95       	ret

0000194e <sin>:
    194e:	9f 93       	push	r25
    1950:	0e 94 bf 0c 	call	0x197e	; 0x197e <__fp_rempio2>
    1954:	0f 90       	pop	r0
    1956:	07 fc       	sbrc	r0, 7
    1958:	ee 5f       	subi	r30, 0xFE	; 254
    195a:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__fp_sinus>

0000195e <__fp_mpack>:
    195e:	9f 3f       	cpi	r25, 0xFF	; 255
    1960:	31 f0       	breq	.+12     	; 0x196e <__fp_mpack_finite+0xc>

00001962 <__fp_mpack_finite>:
    1962:	91 50       	subi	r25, 0x01	; 1
    1964:	20 f4       	brcc	.+8      	; 0x196e <__fp_mpack_finite+0xc>
    1966:	87 95       	ror	r24
    1968:	77 95       	ror	r23
    196a:	67 95       	ror	r22
    196c:	b7 95       	ror	r27
    196e:	88 0f       	add	r24, r24
    1970:	91 1d       	adc	r25, r1
    1972:	96 95       	lsr	r25
    1974:	87 95       	ror	r24
    1976:	97 f9       	bld	r25, 7
    1978:	08 95       	ret
    197a:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__fp_nan>

0000197e <__fp_rempio2>:
    197e:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fp_splitA>
    1982:	d8 f3       	brcs	.-10     	; 0x197a <__fp_mpack_finite+0x18>
    1984:	e8 94       	clt
    1986:	e0 e0       	ldi	r30, 0x00	; 0
    1988:	bb 27       	eor	r27, r27
    198a:	9f 57       	subi	r25, 0x7F	; 127
    198c:	f0 f0       	brcs	.+60     	; 0x19ca <__fp_rempio2+0x4c>
    198e:	2a ed       	ldi	r18, 0xDA	; 218
    1990:	3f e0       	ldi	r19, 0x0F	; 15
    1992:	49 ec       	ldi	r20, 0xC9	; 201
    1994:	06 c0       	rjmp	.+12     	; 0x19a2 <__fp_rempio2+0x24>
    1996:	ee 0f       	add	r30, r30
    1998:	bb 0f       	add	r27, r27
    199a:	66 1f       	adc	r22, r22
    199c:	77 1f       	adc	r23, r23
    199e:	88 1f       	adc	r24, r24
    19a0:	28 f0       	brcs	.+10     	; 0x19ac <__fp_rempio2+0x2e>
    19a2:	b2 3a       	cpi	r27, 0xA2	; 162
    19a4:	62 07       	cpc	r22, r18
    19a6:	73 07       	cpc	r23, r19
    19a8:	84 07       	cpc	r24, r20
    19aa:	28 f0       	brcs	.+10     	; 0x19b6 <__fp_rempio2+0x38>
    19ac:	b2 5a       	subi	r27, 0xA2	; 162
    19ae:	62 0b       	sbc	r22, r18
    19b0:	73 0b       	sbc	r23, r19
    19b2:	84 0b       	sbc	r24, r20
    19b4:	e3 95       	inc	r30
    19b6:	9a 95       	dec	r25
    19b8:	72 f7       	brpl	.-36     	; 0x1996 <__fp_rempio2+0x18>
    19ba:	80 38       	cpi	r24, 0x80	; 128
    19bc:	30 f4       	brcc	.+12     	; 0x19ca <__fp_rempio2+0x4c>
    19be:	9a 95       	dec	r25
    19c0:	bb 0f       	add	r27, r27
    19c2:	66 1f       	adc	r22, r22
    19c4:	77 1f       	adc	r23, r23
    19c6:	88 1f       	adc	r24, r24
    19c8:	d2 f7       	brpl	.-12     	; 0x19be <__fp_rempio2+0x40>
    19ca:	90 48       	sbci	r25, 0x80	; 128
    19cc:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__fp_mpack_finite>

000019d0 <__fp_sinus>:
    19d0:	ef 93       	push	r30
    19d2:	e0 ff       	sbrs	r30, 0
    19d4:	07 c0       	rjmp	.+14     	; 0x19e4 <__fp_sinus+0x14>
    19d6:	a2 ea       	ldi	r26, 0xA2	; 162
    19d8:	2a ed       	ldi	r18, 0xDA	; 218
    19da:	3f e0       	ldi	r19, 0x0F	; 15
    19dc:	49 ec       	ldi	r20, 0xC9	; 201
    19de:	5f eb       	ldi	r21, 0xBF	; 191
    19e0:	0e 94 92 09 	call	0x1324	; 0x1324 <__addsf3x>
    19e4:	0e 94 85 0b 	call	0x170a	; 0x170a <__fp_round>
    19e8:	0f 90       	pop	r0
    19ea:	03 94       	inc	r0
    19ec:	01 fc       	sbrc	r0, 1
    19ee:	90 58       	subi	r25, 0x80	; 128
    19f0:	e4 ea       	ldi	r30, 0xA4	; 164
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__fp_powsodd>

000019f8 <__fp_powsodd>:
    19f8:	9f 93       	push	r25
    19fa:	8f 93       	push	r24
    19fc:	7f 93       	push	r23
    19fe:	6f 93       	push	r22
    1a00:	ff 93       	push	r31
    1a02:	ef 93       	push	r30
    1a04:	9b 01       	movw	r18, r22
    1a06:	ac 01       	movw	r20, r24
    1a08:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__mulsf3>
    1a0c:	ef 91       	pop	r30
    1a0e:	ff 91       	pop	r31
    1a10:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__fp_powser>
    1a14:	2f 91       	pop	r18
    1a16:	3f 91       	pop	r19
    1a18:	4f 91       	pop	r20
    1a1a:	5f 91       	pop	r21
    1a1c:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__mulsf3>

00001a20 <__udivmodsi4>:
    1a20:	a1 e2       	ldi	r26, 0x21	; 33
    1a22:	1a 2e       	mov	r1, r26
    1a24:	aa 1b       	sub	r26, r26
    1a26:	bb 1b       	sub	r27, r27
    1a28:	fd 01       	movw	r30, r26
    1a2a:	0d c0       	rjmp	.+26     	; 0x1a46 <__udivmodsi4_ep>

00001a2c <__udivmodsi4_loop>:
    1a2c:	aa 1f       	adc	r26, r26
    1a2e:	bb 1f       	adc	r27, r27
    1a30:	ee 1f       	adc	r30, r30
    1a32:	ff 1f       	adc	r31, r31
    1a34:	a2 17       	cp	r26, r18
    1a36:	b3 07       	cpc	r27, r19
    1a38:	e4 07       	cpc	r30, r20
    1a3a:	f5 07       	cpc	r31, r21
    1a3c:	20 f0       	brcs	.+8      	; 0x1a46 <__udivmodsi4_ep>
    1a3e:	a2 1b       	sub	r26, r18
    1a40:	b3 0b       	sbc	r27, r19
    1a42:	e4 0b       	sbc	r30, r20
    1a44:	f5 0b       	sbc	r31, r21

00001a46 <__udivmodsi4_ep>:
    1a46:	66 1f       	adc	r22, r22
    1a48:	77 1f       	adc	r23, r23
    1a4a:	88 1f       	adc	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	1a 94       	dec	r1
    1a50:	69 f7       	brne	.-38     	; 0x1a2c <__udivmodsi4_loop>
    1a52:	60 95       	com	r22
    1a54:	70 95       	com	r23
    1a56:	80 95       	com	r24
    1a58:	90 95       	com	r25
    1a5a:	9b 01       	movw	r18, r22
    1a5c:	ac 01       	movw	r20, r24
    1a5e:	bd 01       	movw	r22, r26
    1a60:	cf 01       	movw	r24, r30
    1a62:	08 95       	ret

00001a64 <dtostrf>:
    1a64:	ef 92       	push	r14
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	e8 01       	movw	r28, r16
    1a70:	47 fd       	sbrc	r20, 7
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <dtostrf+0x14>
    1a74:	34 e0       	ldi	r19, 0x04	; 4
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <dtostrf+0x16>
    1a78:	34 e1       	ldi	r19, 0x14	; 20
    1a7a:	04 2e       	mov	r0, r20
    1a7c:	00 0c       	add	r0, r0
    1a7e:	55 0b       	sbc	r21, r21
    1a80:	57 ff       	sbrs	r21, 7
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <dtostrf+0x26>
    1a84:	51 95       	neg	r21
    1a86:	41 95       	neg	r20
    1a88:	51 09       	sbc	r21, r1
    1a8a:	e3 2e       	mov	r14, r19
    1a8c:	02 2f       	mov	r16, r18
    1a8e:	24 2f       	mov	r18, r20
    1a90:	ae 01       	movw	r20, r28
    1a92:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <dtoa_prf>
    1a96:	ce 01       	movw	r24, r28
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	ef 90       	pop	r14
    1aa2:	08 95       	ret

00001aa4 <printf>:
    1aa4:	a0 e0       	ldi	r26, 0x00	; 0
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e8 e5       	ldi	r30, 0x58	; 88
    1aaa:	fd e0       	ldi	r31, 0x0D	; 13
    1aac:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__prologue_saves__+0x20>
    1ab0:	ae 01       	movw	r20, r28
    1ab2:	4b 5f       	subi	r20, 0xFB	; 251
    1ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab6:	fa 01       	movw	r30, r20
    1ab8:	61 91       	ld	r22, Z+
    1aba:	71 91       	ld	r23, Z+
    1abc:	af 01       	movw	r20, r30
    1abe:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <__iob+0x2>
    1ac2:	90 91 68 38 	lds	r25, 0x3868	; 0x803868 <__iob+0x3>
    1ac6:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <vfprintf>
    1aca:	e2 e0       	ldi	r30, 0x02	; 2
    1acc:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__epilogue_restores__+0x20>

00001ad0 <puts>:
    1ad0:	0f 93       	push	r16
    1ad2:	1f 93       	push	r17
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	e0 91 67 38 	lds	r30, 0x3867	; 0x803867 <__iob+0x2>
    1adc:	f0 91 68 38 	lds	r31, 0x3868	; 0x803868 <__iob+0x3>
    1ae0:	23 81       	ldd	r18, Z+3	; 0x03
    1ae2:	21 ff       	sbrs	r18, 1
    1ae4:	1b c0       	rjmp	.+54     	; 0x1b1c <puts+0x4c>
    1ae6:	8c 01       	movw	r16, r24
    1ae8:	d0 e0       	ldi	r29, 0x00	; 0
    1aea:	c0 e0       	ldi	r28, 0x00	; 0
    1aec:	f8 01       	movw	r30, r16
    1aee:	81 91       	ld	r24, Z+
    1af0:	8f 01       	movw	r16, r30
    1af2:	60 91 67 38 	lds	r22, 0x3867	; 0x803867 <__iob+0x2>
    1af6:	70 91 68 38 	lds	r23, 0x3868	; 0x803868 <__iob+0x3>
    1afa:	db 01       	movw	r26, r22
    1afc:	18 96       	adiw	r26, 0x08	; 8
    1afe:	ed 91       	ld	r30, X+
    1b00:	fc 91       	ld	r31, X
    1b02:	19 97       	sbiw	r26, 0x09	; 9
    1b04:	88 23       	and	r24, r24
    1b06:	31 f0       	breq	.+12     	; 0x1b14 <puts+0x44>
    1b08:	09 95       	icall
    1b0a:	89 2b       	or	r24, r25
    1b0c:	79 f3       	breq	.-34     	; 0x1aec <puts+0x1c>
    1b0e:	df ef       	ldi	r29, 0xFF	; 255
    1b10:	cf ef       	ldi	r28, 0xFF	; 255
    1b12:	ec cf       	rjmp	.-40     	; 0x1aec <puts+0x1c>
    1b14:	8a e0       	ldi	r24, 0x0A	; 10
    1b16:	09 95       	icall
    1b18:	89 2b       	or	r24, r25
    1b1a:	19 f0       	breq	.+6      	; 0x1b22 <puts+0x52>
    1b1c:	8f ef       	ldi	r24, 0xFF	; 255
    1b1e:	9f ef       	ldi	r25, 0xFF	; 255
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <puts+0x56>
    1b22:	8d 2f       	mov	r24, r29
    1b24:	9c 2f       	mov	r25, r28
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	08 95       	ret

00001b30 <vfprintf>:
    1b30:	ab e0       	ldi	r26, 0x0B	; 11
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	ee e9       	ldi	r30, 0x9E	; 158
    1b36:	fd e0       	ldi	r31, 0x0D	; 13
    1b38:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__prologue_saves__>
    1b3c:	6c 01       	movw	r12, r24
    1b3e:	7b 01       	movw	r14, r22
    1b40:	8a 01       	movw	r16, r20
    1b42:	fc 01       	movw	r30, r24
    1b44:	16 82       	std	Z+6, r1	; 0x06
    1b46:	17 82       	std	Z+7, r1	; 0x07
    1b48:	83 81       	ldd	r24, Z+3	; 0x03
    1b4a:	81 ff       	sbrs	r24, 1
    1b4c:	cc c1       	rjmp	.+920    	; 0x1ee6 <vfprintf+0x3b6>
    1b4e:	ce 01       	movw	r24, r28
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	3c 01       	movw	r6, r24
    1b54:	f6 01       	movw	r30, r12
    1b56:	93 81       	ldd	r25, Z+3	; 0x03
    1b58:	f7 01       	movw	r30, r14
    1b5a:	93 fd       	sbrc	r25, 3
    1b5c:	85 91       	lpm	r24, Z+
    1b5e:	93 ff       	sbrs	r25, 3
    1b60:	81 91       	ld	r24, Z+
    1b62:	7f 01       	movw	r14, r30
    1b64:	88 23       	and	r24, r24
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <vfprintf+0x3a>
    1b68:	ba c1       	rjmp	.+884    	; 0x1ede <vfprintf+0x3ae>
    1b6a:	85 32       	cpi	r24, 0x25	; 37
    1b6c:	39 f4       	brne	.+14     	; 0x1b7c <vfprintf+0x4c>
    1b6e:	93 fd       	sbrc	r25, 3
    1b70:	85 91       	lpm	r24, Z+
    1b72:	93 ff       	sbrs	r25, 3
    1b74:	81 91       	ld	r24, Z+
    1b76:	7f 01       	movw	r14, r30
    1b78:	85 32       	cpi	r24, 0x25	; 37
    1b7a:	29 f4       	brne	.+10     	; 0x1b86 <vfprintf+0x56>
    1b7c:	b6 01       	movw	r22, r12
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 94 c1 11 	call	0x2382	; 0x2382 <fputc>
    1b84:	e7 cf       	rjmp	.-50     	; 0x1b54 <vfprintf+0x24>
    1b86:	91 2c       	mov	r9, r1
    1b88:	21 2c       	mov	r2, r1
    1b8a:	31 2c       	mov	r3, r1
    1b8c:	ff e1       	ldi	r31, 0x1F	; 31
    1b8e:	f3 15       	cp	r31, r3
    1b90:	d8 f0       	brcs	.+54     	; 0x1bc8 <vfprintf+0x98>
    1b92:	8b 32       	cpi	r24, 0x2B	; 43
    1b94:	79 f0       	breq	.+30     	; 0x1bb4 <vfprintf+0x84>
    1b96:	38 f4       	brcc	.+14     	; 0x1ba6 <vfprintf+0x76>
    1b98:	80 32       	cpi	r24, 0x20	; 32
    1b9a:	79 f0       	breq	.+30     	; 0x1bba <vfprintf+0x8a>
    1b9c:	83 32       	cpi	r24, 0x23	; 35
    1b9e:	a1 f4       	brne	.+40     	; 0x1bc8 <vfprintf+0x98>
    1ba0:	23 2d       	mov	r18, r3
    1ba2:	20 61       	ori	r18, 0x10	; 16
    1ba4:	1d c0       	rjmp	.+58     	; 0x1be0 <vfprintf+0xb0>
    1ba6:	8d 32       	cpi	r24, 0x2D	; 45
    1ba8:	61 f0       	breq	.+24     	; 0x1bc2 <vfprintf+0x92>
    1baa:	80 33       	cpi	r24, 0x30	; 48
    1bac:	69 f4       	brne	.+26     	; 0x1bc8 <vfprintf+0x98>
    1bae:	23 2d       	mov	r18, r3
    1bb0:	21 60       	ori	r18, 0x01	; 1
    1bb2:	16 c0       	rjmp	.+44     	; 0x1be0 <vfprintf+0xb0>
    1bb4:	83 2d       	mov	r24, r3
    1bb6:	82 60       	ori	r24, 0x02	; 2
    1bb8:	38 2e       	mov	r3, r24
    1bba:	e3 2d       	mov	r30, r3
    1bbc:	e4 60       	ori	r30, 0x04	; 4
    1bbe:	3e 2e       	mov	r3, r30
    1bc0:	2a c0       	rjmp	.+84     	; 0x1c16 <vfprintf+0xe6>
    1bc2:	f3 2d       	mov	r31, r3
    1bc4:	f8 60       	ori	r31, 0x08	; 8
    1bc6:	1d c0       	rjmp	.+58     	; 0x1c02 <vfprintf+0xd2>
    1bc8:	37 fc       	sbrc	r3, 7
    1bca:	2d c0       	rjmp	.+90     	; 0x1c26 <vfprintf+0xf6>
    1bcc:	20 ed       	ldi	r18, 0xD0	; 208
    1bce:	28 0f       	add	r18, r24
    1bd0:	2a 30       	cpi	r18, 0x0A	; 10
    1bd2:	40 f0       	brcs	.+16     	; 0x1be4 <vfprintf+0xb4>
    1bd4:	8e 32       	cpi	r24, 0x2E	; 46
    1bd6:	b9 f4       	brne	.+46     	; 0x1c06 <vfprintf+0xd6>
    1bd8:	36 fc       	sbrc	r3, 6
    1bda:	81 c1       	rjmp	.+770    	; 0x1ede <vfprintf+0x3ae>
    1bdc:	23 2d       	mov	r18, r3
    1bde:	20 64       	ori	r18, 0x40	; 64
    1be0:	32 2e       	mov	r3, r18
    1be2:	19 c0       	rjmp	.+50     	; 0x1c16 <vfprintf+0xe6>
    1be4:	36 fe       	sbrs	r3, 6
    1be6:	06 c0       	rjmp	.+12     	; 0x1bf4 <vfprintf+0xc4>
    1be8:	8a e0       	ldi	r24, 0x0A	; 10
    1bea:	98 9e       	mul	r9, r24
    1bec:	20 0d       	add	r18, r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	92 2e       	mov	r9, r18
    1bf2:	11 c0       	rjmp	.+34     	; 0x1c16 <vfprintf+0xe6>
    1bf4:	ea e0       	ldi	r30, 0x0A	; 10
    1bf6:	2e 9e       	mul	r2, r30
    1bf8:	20 0d       	add	r18, r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	22 2e       	mov	r2, r18
    1bfe:	f3 2d       	mov	r31, r3
    1c00:	f0 62       	ori	r31, 0x20	; 32
    1c02:	3f 2e       	mov	r3, r31
    1c04:	08 c0       	rjmp	.+16     	; 0x1c16 <vfprintf+0xe6>
    1c06:	8c 36       	cpi	r24, 0x6C	; 108
    1c08:	21 f4       	brne	.+8      	; 0x1c12 <vfprintf+0xe2>
    1c0a:	83 2d       	mov	r24, r3
    1c0c:	80 68       	ori	r24, 0x80	; 128
    1c0e:	38 2e       	mov	r3, r24
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <vfprintf+0xe6>
    1c12:	88 36       	cpi	r24, 0x68	; 104
    1c14:	41 f4       	brne	.+16     	; 0x1c26 <vfprintf+0xf6>
    1c16:	f7 01       	movw	r30, r14
    1c18:	93 fd       	sbrc	r25, 3
    1c1a:	85 91       	lpm	r24, Z+
    1c1c:	93 ff       	sbrs	r25, 3
    1c1e:	81 91       	ld	r24, Z+
    1c20:	7f 01       	movw	r14, r30
    1c22:	81 11       	cpse	r24, r1
    1c24:	b3 cf       	rjmp	.-154    	; 0x1b8c <vfprintf+0x5c>
    1c26:	98 2f       	mov	r25, r24
    1c28:	9f 7d       	andi	r25, 0xDF	; 223
    1c2a:	95 54       	subi	r25, 0x45	; 69
    1c2c:	93 30       	cpi	r25, 0x03	; 3
    1c2e:	28 f4       	brcc	.+10     	; 0x1c3a <vfprintf+0x10a>
    1c30:	0c 5f       	subi	r16, 0xFC	; 252
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
    1c34:	9f e3       	ldi	r25, 0x3F	; 63
    1c36:	99 83       	std	Y+1, r25	; 0x01
    1c38:	0d c0       	rjmp	.+26     	; 0x1c54 <vfprintf+0x124>
    1c3a:	83 36       	cpi	r24, 0x63	; 99
    1c3c:	31 f0       	breq	.+12     	; 0x1c4a <vfprintf+0x11a>
    1c3e:	83 37       	cpi	r24, 0x73	; 115
    1c40:	71 f0       	breq	.+28     	; 0x1c5e <vfprintf+0x12e>
    1c42:	83 35       	cpi	r24, 0x53	; 83
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <vfprintf+0x118>
    1c46:	59 c0       	rjmp	.+178    	; 0x1cfa <vfprintf+0x1ca>
    1c48:	21 c0       	rjmp	.+66     	; 0x1c8c <vfprintf+0x15c>
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	80 81       	ld	r24, Z
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	0e 5f       	subi	r16, 0xFE	; 254
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	88 24       	eor	r8, r8
    1c56:	83 94       	inc	r8
    1c58:	91 2c       	mov	r9, r1
    1c5a:	53 01       	movw	r10, r6
    1c5c:	13 c0       	rjmp	.+38     	; 0x1c84 <vfprintf+0x154>
    1c5e:	28 01       	movw	r4, r16
    1c60:	f2 e0       	ldi	r31, 0x02	; 2
    1c62:	4f 0e       	add	r4, r31
    1c64:	51 1c       	adc	r5, r1
    1c66:	f8 01       	movw	r30, r16
    1c68:	a0 80       	ld	r10, Z
    1c6a:	b1 80       	ldd	r11, Z+1	; 0x01
    1c6c:	36 fe       	sbrs	r3, 6
    1c6e:	03 c0       	rjmp	.+6      	; 0x1c76 <vfprintf+0x146>
    1c70:	69 2d       	mov	r22, r9
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <vfprintf+0x14a>
    1c76:	6f ef       	ldi	r22, 0xFF	; 255
    1c78:	7f ef       	ldi	r23, 0xFF	; 255
    1c7a:	c5 01       	movw	r24, r10
    1c7c:	0e 94 b6 11 	call	0x236c	; 0x236c <strnlen>
    1c80:	4c 01       	movw	r8, r24
    1c82:	82 01       	movw	r16, r4
    1c84:	f3 2d       	mov	r31, r3
    1c86:	ff 77       	andi	r31, 0x7F	; 127
    1c88:	3f 2e       	mov	r3, r31
    1c8a:	16 c0       	rjmp	.+44     	; 0x1cb8 <vfprintf+0x188>
    1c8c:	28 01       	movw	r4, r16
    1c8e:	22 e0       	ldi	r18, 0x02	; 2
    1c90:	42 0e       	add	r4, r18
    1c92:	51 1c       	adc	r5, r1
    1c94:	f8 01       	movw	r30, r16
    1c96:	a0 80       	ld	r10, Z
    1c98:	b1 80       	ldd	r11, Z+1	; 0x01
    1c9a:	36 fe       	sbrs	r3, 6
    1c9c:	03 c0       	rjmp	.+6      	; 0x1ca4 <vfprintf+0x174>
    1c9e:	69 2d       	mov	r22, r9
    1ca0:	70 e0       	ldi	r23, 0x00	; 0
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <vfprintf+0x178>
    1ca4:	6f ef       	ldi	r22, 0xFF	; 255
    1ca6:	7f ef       	ldi	r23, 0xFF	; 255
    1ca8:	c5 01       	movw	r24, r10
    1caa:	0e 94 ab 11 	call	0x2356	; 0x2356 <strnlen_P>
    1cae:	4c 01       	movw	r8, r24
    1cb0:	f3 2d       	mov	r31, r3
    1cb2:	f0 68       	ori	r31, 0x80	; 128
    1cb4:	3f 2e       	mov	r3, r31
    1cb6:	82 01       	movw	r16, r4
    1cb8:	33 fc       	sbrc	r3, 3
    1cba:	1b c0       	rjmp	.+54     	; 0x1cf2 <vfprintf+0x1c2>
    1cbc:	82 2d       	mov	r24, r2
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	88 16       	cp	r8, r24
    1cc2:	99 06       	cpc	r9, r25
    1cc4:	b0 f4       	brcc	.+44     	; 0x1cf2 <vfprintf+0x1c2>
    1cc6:	b6 01       	movw	r22, r12
    1cc8:	80 e2       	ldi	r24, 0x20	; 32
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	0e 94 c1 11 	call	0x2382	; 0x2382 <fputc>
    1cd0:	2a 94       	dec	r2
    1cd2:	f4 cf       	rjmp	.-24     	; 0x1cbc <vfprintf+0x18c>
    1cd4:	f5 01       	movw	r30, r10
    1cd6:	37 fc       	sbrc	r3, 7
    1cd8:	85 91       	lpm	r24, Z+
    1cda:	37 fe       	sbrs	r3, 7
    1cdc:	81 91       	ld	r24, Z+
    1cde:	5f 01       	movw	r10, r30
    1ce0:	b6 01       	movw	r22, r12
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0e 94 c1 11 	call	0x2382	; 0x2382 <fputc>
    1ce8:	21 10       	cpse	r2, r1
    1cea:	2a 94       	dec	r2
    1cec:	21 e0       	ldi	r18, 0x01	; 1
    1cee:	82 1a       	sub	r8, r18
    1cf0:	91 08       	sbc	r9, r1
    1cf2:	81 14       	cp	r8, r1
    1cf4:	91 04       	cpc	r9, r1
    1cf6:	71 f7       	brne	.-36     	; 0x1cd4 <vfprintf+0x1a4>
    1cf8:	e8 c0       	rjmp	.+464    	; 0x1eca <vfprintf+0x39a>
    1cfa:	84 36       	cpi	r24, 0x64	; 100
    1cfc:	11 f0       	breq	.+4      	; 0x1d02 <vfprintf+0x1d2>
    1cfe:	89 36       	cpi	r24, 0x69	; 105
    1d00:	41 f5       	brne	.+80     	; 0x1d52 <vfprintf+0x222>
    1d02:	f8 01       	movw	r30, r16
    1d04:	37 fe       	sbrs	r3, 7
    1d06:	07 c0       	rjmp	.+14     	; 0x1d16 <vfprintf+0x1e6>
    1d08:	60 81       	ld	r22, Z
    1d0a:	71 81       	ldd	r23, Z+1	; 0x01
    1d0c:	82 81       	ldd	r24, Z+2	; 0x02
    1d0e:	93 81       	ldd	r25, Z+3	; 0x03
    1d10:	0c 5f       	subi	r16, 0xFC	; 252
    1d12:	1f 4f       	sbci	r17, 0xFF	; 255
    1d14:	08 c0       	rjmp	.+16     	; 0x1d26 <vfprintf+0x1f6>
    1d16:	60 81       	ld	r22, Z
    1d18:	71 81       	ldd	r23, Z+1	; 0x01
    1d1a:	07 2e       	mov	r0, r23
    1d1c:	00 0c       	add	r0, r0
    1d1e:	88 0b       	sbc	r24, r24
    1d20:	99 0b       	sbc	r25, r25
    1d22:	0e 5f       	subi	r16, 0xFE	; 254
    1d24:	1f 4f       	sbci	r17, 0xFF	; 255
    1d26:	f3 2d       	mov	r31, r3
    1d28:	ff 76       	andi	r31, 0x6F	; 111
    1d2a:	3f 2e       	mov	r3, r31
    1d2c:	97 ff       	sbrs	r25, 7
    1d2e:	09 c0       	rjmp	.+18     	; 0x1d42 <vfprintf+0x212>
    1d30:	90 95       	com	r25
    1d32:	80 95       	com	r24
    1d34:	70 95       	com	r23
    1d36:	61 95       	neg	r22
    1d38:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3e:	f0 68       	ori	r31, 0x80	; 128
    1d40:	3f 2e       	mov	r3, r31
    1d42:	2a e0       	ldi	r18, 0x0A	; 10
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	a3 01       	movw	r20, r6
    1d48:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__ultoa_invert>
    1d4c:	88 2e       	mov	r8, r24
    1d4e:	86 18       	sub	r8, r6
    1d50:	45 c0       	rjmp	.+138    	; 0x1ddc <vfprintf+0x2ac>
    1d52:	85 37       	cpi	r24, 0x75	; 117
    1d54:	31 f4       	brne	.+12     	; 0x1d62 <vfprintf+0x232>
    1d56:	23 2d       	mov	r18, r3
    1d58:	2f 7e       	andi	r18, 0xEF	; 239
    1d5a:	b2 2e       	mov	r11, r18
    1d5c:	2a e0       	ldi	r18, 0x0A	; 10
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	25 c0       	rjmp	.+74     	; 0x1dac <vfprintf+0x27c>
    1d62:	93 2d       	mov	r25, r3
    1d64:	99 7f       	andi	r25, 0xF9	; 249
    1d66:	b9 2e       	mov	r11, r25
    1d68:	8f 36       	cpi	r24, 0x6F	; 111
    1d6a:	c1 f0       	breq	.+48     	; 0x1d9c <vfprintf+0x26c>
    1d6c:	18 f4       	brcc	.+6      	; 0x1d74 <vfprintf+0x244>
    1d6e:	88 35       	cpi	r24, 0x58	; 88
    1d70:	79 f0       	breq	.+30     	; 0x1d90 <vfprintf+0x260>
    1d72:	b5 c0       	rjmp	.+362    	; 0x1ede <vfprintf+0x3ae>
    1d74:	80 37       	cpi	r24, 0x70	; 112
    1d76:	19 f0       	breq	.+6      	; 0x1d7e <vfprintf+0x24e>
    1d78:	88 37       	cpi	r24, 0x78	; 120
    1d7a:	21 f0       	breq	.+8      	; 0x1d84 <vfprintf+0x254>
    1d7c:	b0 c0       	rjmp	.+352    	; 0x1ede <vfprintf+0x3ae>
    1d7e:	e9 2f       	mov	r30, r25
    1d80:	e0 61       	ori	r30, 0x10	; 16
    1d82:	be 2e       	mov	r11, r30
    1d84:	b4 fe       	sbrs	r11, 4
    1d86:	0d c0       	rjmp	.+26     	; 0x1da2 <vfprintf+0x272>
    1d88:	fb 2d       	mov	r31, r11
    1d8a:	f4 60       	ori	r31, 0x04	; 4
    1d8c:	bf 2e       	mov	r11, r31
    1d8e:	09 c0       	rjmp	.+18     	; 0x1da2 <vfprintf+0x272>
    1d90:	34 fe       	sbrs	r3, 4
    1d92:	0a c0       	rjmp	.+20     	; 0x1da8 <vfprintf+0x278>
    1d94:	29 2f       	mov	r18, r25
    1d96:	26 60       	ori	r18, 0x06	; 6
    1d98:	b2 2e       	mov	r11, r18
    1d9a:	06 c0       	rjmp	.+12     	; 0x1da8 <vfprintf+0x278>
    1d9c:	28 e0       	ldi	r18, 0x08	; 8
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	05 c0       	rjmp	.+10     	; 0x1dac <vfprintf+0x27c>
    1da2:	20 e1       	ldi	r18, 0x10	; 16
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <vfprintf+0x27c>
    1da8:	20 e1       	ldi	r18, 0x10	; 16
    1daa:	32 e0       	ldi	r19, 0x02	; 2
    1dac:	f8 01       	movw	r30, r16
    1dae:	b7 fe       	sbrs	r11, 7
    1db0:	07 c0       	rjmp	.+14     	; 0x1dc0 <vfprintf+0x290>
    1db2:	60 81       	ld	r22, Z
    1db4:	71 81       	ldd	r23, Z+1	; 0x01
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	0c 5f       	subi	r16, 0xFC	; 252
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	06 c0       	rjmp	.+12     	; 0x1dcc <vfprintf+0x29c>
    1dc0:	60 81       	ld	r22, Z
    1dc2:	71 81       	ldd	r23, Z+1	; 0x01
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0e 5f       	subi	r16, 0xFE	; 254
    1dca:	1f 4f       	sbci	r17, 0xFF	; 255
    1dcc:	a3 01       	movw	r20, r6
    1dce:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__ultoa_invert>
    1dd2:	88 2e       	mov	r8, r24
    1dd4:	86 18       	sub	r8, r6
    1dd6:	fb 2d       	mov	r31, r11
    1dd8:	ff 77       	andi	r31, 0x7F	; 127
    1dda:	3f 2e       	mov	r3, r31
    1ddc:	36 fe       	sbrs	r3, 6
    1dde:	0d c0       	rjmp	.+26     	; 0x1dfa <vfprintf+0x2ca>
    1de0:	23 2d       	mov	r18, r3
    1de2:	2e 7f       	andi	r18, 0xFE	; 254
    1de4:	a2 2e       	mov	r10, r18
    1de6:	89 14       	cp	r8, r9
    1de8:	58 f4       	brcc	.+22     	; 0x1e00 <vfprintf+0x2d0>
    1dea:	34 fe       	sbrs	r3, 4
    1dec:	0b c0       	rjmp	.+22     	; 0x1e04 <vfprintf+0x2d4>
    1dee:	32 fc       	sbrc	r3, 2
    1df0:	09 c0       	rjmp	.+18     	; 0x1e04 <vfprintf+0x2d4>
    1df2:	83 2d       	mov	r24, r3
    1df4:	8e 7e       	andi	r24, 0xEE	; 238
    1df6:	a8 2e       	mov	r10, r24
    1df8:	05 c0       	rjmp	.+10     	; 0x1e04 <vfprintf+0x2d4>
    1dfa:	b8 2c       	mov	r11, r8
    1dfc:	a3 2c       	mov	r10, r3
    1dfe:	03 c0       	rjmp	.+6      	; 0x1e06 <vfprintf+0x2d6>
    1e00:	b8 2c       	mov	r11, r8
    1e02:	01 c0       	rjmp	.+2      	; 0x1e06 <vfprintf+0x2d6>
    1e04:	b9 2c       	mov	r11, r9
    1e06:	a4 fe       	sbrs	r10, 4
    1e08:	0f c0       	rjmp	.+30     	; 0x1e28 <vfprintf+0x2f8>
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	e8 0d       	add	r30, r8
    1e0e:	f1 1d       	adc	r31, r1
    1e10:	80 81       	ld	r24, Z
    1e12:	80 33       	cpi	r24, 0x30	; 48
    1e14:	21 f4       	brne	.+8      	; 0x1e1e <vfprintf+0x2ee>
    1e16:	9a 2d       	mov	r25, r10
    1e18:	99 7e       	andi	r25, 0xE9	; 233
    1e1a:	a9 2e       	mov	r10, r25
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <vfprintf+0x300>
    1e1e:	a2 fe       	sbrs	r10, 2
    1e20:	06 c0       	rjmp	.+12     	; 0x1e2e <vfprintf+0x2fe>
    1e22:	b3 94       	inc	r11
    1e24:	b3 94       	inc	r11
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <vfprintf+0x300>
    1e28:	8a 2d       	mov	r24, r10
    1e2a:	86 78       	andi	r24, 0x86	; 134
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <vfprintf+0x300>
    1e2e:	b3 94       	inc	r11
    1e30:	a3 fc       	sbrc	r10, 3
    1e32:	11 c0       	rjmp	.+34     	; 0x1e56 <vfprintf+0x326>
    1e34:	a0 fe       	sbrs	r10, 0
    1e36:	06 c0       	rjmp	.+12     	; 0x1e44 <vfprintf+0x314>
    1e38:	b2 14       	cp	r11, r2
    1e3a:	88 f4       	brcc	.+34     	; 0x1e5e <vfprintf+0x32e>
    1e3c:	28 0c       	add	r2, r8
    1e3e:	92 2c       	mov	r9, r2
    1e40:	9b 18       	sub	r9, r11
    1e42:	0e c0       	rjmp	.+28     	; 0x1e60 <vfprintf+0x330>
    1e44:	b2 14       	cp	r11, r2
    1e46:	60 f4       	brcc	.+24     	; 0x1e60 <vfprintf+0x330>
    1e48:	b6 01       	movw	r22, r12
    1e4a:	80 e2       	ldi	r24, 0x20	; 32
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 c1 11 	call	0x2382	; 0x2382 <fputc>
    1e52:	b3 94       	inc	r11
    1e54:	f7 cf       	rjmp	.-18     	; 0x1e44 <vfprintf+0x314>
    1e56:	b2 14       	cp	r11, r2
    1e58:	18 f4       	brcc	.+6      	; 0x1e60 <vfprintf+0x330>
    1e5a:	2b 18       	sub	r2, r11
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <vfprintf+0x332>
    1e5e:	98 2c       	mov	r9, r8
    1e60:	21 2c       	mov	r2, r1
    1e62:	a4 fe       	sbrs	r10, 4
    1e64:	10 c0       	rjmp	.+32     	; 0x1e86 <vfprintf+0x356>
    1e66:	b6 01       	movw	r22, r12
    1e68:	80 e3       	ldi	r24, 0x30	; 48
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	0e 94 c1 11 	call	0x2382	; 0x2382 <fputc>
    1e70:	a2 fe       	sbrs	r10, 2
    1e72:	17 c0       	rjmp	.+46     	; 0x1ea2 <vfprintf+0x372>
    1e74:	a1 fc       	sbrc	r10, 1
    1e76:	03 c0       	rjmp	.+6      	; 0x1e7e <vfprintf+0x34e>
    1e78:	88 e7       	ldi	r24, 0x78	; 120
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <vfprintf+0x352>
    1e7e:	88 e5       	ldi	r24, 0x58	; 88
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	b6 01       	movw	r22, r12
    1e84:	0c c0       	rjmp	.+24     	; 0x1e9e <vfprintf+0x36e>
    1e86:	8a 2d       	mov	r24, r10
    1e88:	86 78       	andi	r24, 0x86	; 134
    1e8a:	59 f0       	breq	.+22     	; 0x1ea2 <vfprintf+0x372>
    1e8c:	a1 fe       	sbrs	r10, 1
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <vfprintf+0x364>
    1e90:	8b e2       	ldi	r24, 0x2B	; 43
    1e92:	01 c0       	rjmp	.+2      	; 0x1e96 <vfprintf+0x366>
    1e94:	80 e2       	ldi	r24, 0x20	; 32
    1e96:	a7 fc       	sbrc	r10, 7
    1e98:	8d e2       	ldi	r24, 0x2D	; 45
    1e9a:	b6 01       	movw	r22, r12
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	0e 94 c1 11 	call	0x2382	; 0x2382 <fputc>
    1ea2:	89 14       	cp	r8, r9
    1ea4:	38 f4       	brcc	.+14     	; 0x1eb4 <vfprintf+0x384>
    1ea6:	b6 01       	movw	r22, r12
    1ea8:	80 e3       	ldi	r24, 0x30	; 48
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	0e 94 c1 11 	call	0x2382	; 0x2382 <fputc>
    1eb0:	9a 94       	dec	r9
    1eb2:	f7 cf       	rjmp	.-18     	; 0x1ea2 <vfprintf+0x372>
    1eb4:	8a 94       	dec	r8
    1eb6:	f3 01       	movw	r30, r6
    1eb8:	e8 0d       	add	r30, r8
    1eba:	f1 1d       	adc	r31, r1
    1ebc:	80 81       	ld	r24, Z
    1ebe:	b6 01       	movw	r22, r12
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	0e 94 c1 11 	call	0x2382	; 0x2382 <fputc>
    1ec6:	81 10       	cpse	r8, r1
    1ec8:	f5 cf       	rjmp	.-22     	; 0x1eb4 <vfprintf+0x384>
    1eca:	22 20       	and	r2, r2
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <vfprintf+0x3a0>
    1ece:	42 ce       	rjmp	.-892    	; 0x1b54 <vfprintf+0x24>
    1ed0:	b6 01       	movw	r22, r12
    1ed2:	80 e2       	ldi	r24, 0x20	; 32
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	0e 94 c1 11 	call	0x2382	; 0x2382 <fputc>
    1eda:	2a 94       	dec	r2
    1edc:	f6 cf       	rjmp	.-20     	; 0x1eca <vfprintf+0x39a>
    1ede:	f6 01       	movw	r30, r12
    1ee0:	86 81       	ldd	r24, Z+6	; 0x06
    1ee2:	97 81       	ldd	r25, Z+7	; 0x07
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <vfprintf+0x3ba>
    1ee6:	8f ef       	ldi	r24, 0xFF	; 255
    1ee8:	9f ef       	ldi	r25, 0xFF	; 255
    1eea:	2b 96       	adiw	r28, 0x0b	; 11
    1eec:	e2 e1       	ldi	r30, 0x12	; 18
    1eee:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__epilogue_restores__>

00001ef2 <dtoa_prf>:
    1ef2:	a9 e0       	ldi	r26, 0x09	; 9
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	ef e7       	ldi	r30, 0x7F	; 127
    1ef8:	ff e0       	ldi	r31, 0x0F	; 15
    1efa:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__prologue_saves__+0xc>
    1efe:	6a 01       	movw	r12, r20
    1f00:	12 2f       	mov	r17, r18
    1f02:	b0 2e       	mov	r11, r16
    1f04:	2b e3       	ldi	r18, 0x3B	; 59
    1f06:	20 17       	cp	r18, r16
    1f08:	20 f0       	brcs	.+8      	; 0x1f12 <dtoa_prf+0x20>
    1f0a:	ff 24       	eor	r15, r15
    1f0c:	f3 94       	inc	r15
    1f0e:	f0 0e       	add	r15, r16
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <dtoa_prf+0x24>
    1f12:	2c e3       	ldi	r18, 0x3C	; 60
    1f14:	f2 2e       	mov	r15, r18
    1f16:	0f 2d       	mov	r16, r15
    1f18:	27 e0       	ldi	r18, 0x07	; 7
    1f1a:	ae 01       	movw	r20, r28
    1f1c:	4f 5f       	subi	r20, 0xFF	; 255
    1f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f20:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <__ftoa_engine>
    1f24:	bc 01       	movw	r22, r24
    1f26:	49 81       	ldd	r20, Y+1	; 0x01
    1f28:	84 2f       	mov	r24, r20
    1f2a:	89 70       	andi	r24, 0x09	; 9
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	31 f0       	breq	.+12     	; 0x1f3c <dtoa_prf+0x4a>
    1f30:	e1 fc       	sbrc	r14, 1
    1f32:	06 c0       	rjmp	.+12     	; 0x1f40 <dtoa_prf+0x4e>
    1f34:	e0 fe       	sbrs	r14, 0
    1f36:	06 c0       	rjmp	.+12     	; 0x1f44 <dtoa_prf+0x52>
    1f38:	90 e2       	ldi	r25, 0x20	; 32
    1f3a:	05 c0       	rjmp	.+10     	; 0x1f46 <dtoa_prf+0x54>
    1f3c:	9d e2       	ldi	r25, 0x2D	; 45
    1f3e:	03 c0       	rjmp	.+6      	; 0x1f46 <dtoa_prf+0x54>
    1f40:	9b e2       	ldi	r25, 0x2B	; 43
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <dtoa_prf+0x54>
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	5e 2d       	mov	r21, r14
    1f48:	50 71       	andi	r21, 0x10	; 16
    1f4a:	43 ff       	sbrs	r20, 3
    1f4c:	3c c0       	rjmp	.+120    	; 0x1fc6 <dtoa_prf+0xd4>
    1f4e:	91 11       	cpse	r25, r1
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <dtoa_prf+0x64>
    1f52:	83 e0       	ldi	r24, 0x03	; 3
    1f54:	01 c0       	rjmp	.+2      	; 0x1f58 <dtoa_prf+0x66>
    1f56:	84 e0       	ldi	r24, 0x04	; 4
    1f58:	81 17       	cp	r24, r17
    1f5a:	18 f4       	brcc	.+6      	; 0x1f62 <dtoa_prf+0x70>
    1f5c:	21 2f       	mov	r18, r17
    1f5e:	28 1b       	sub	r18, r24
    1f60:	01 c0       	rjmp	.+2      	; 0x1f64 <dtoa_prf+0x72>
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	51 11       	cpse	r21, r1
    1f66:	0b c0       	rjmp	.+22     	; 0x1f7e <dtoa_prf+0x8c>
    1f68:	f6 01       	movw	r30, r12
    1f6a:	82 2f       	mov	r24, r18
    1f6c:	30 e2       	ldi	r19, 0x20	; 32
    1f6e:	88 23       	and	r24, r24
    1f70:	19 f0       	breq	.+6      	; 0x1f78 <dtoa_prf+0x86>
    1f72:	31 93       	st	Z+, r19
    1f74:	81 50       	subi	r24, 0x01	; 1
    1f76:	fb cf       	rjmp	.-10     	; 0x1f6e <dtoa_prf+0x7c>
    1f78:	c2 0e       	add	r12, r18
    1f7a:	d1 1c       	adc	r13, r1
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	99 23       	and	r25, r25
    1f80:	29 f0       	breq	.+10     	; 0x1f8c <dtoa_prf+0x9a>
    1f82:	d6 01       	movw	r26, r12
    1f84:	9c 93       	st	X, r25
    1f86:	f6 01       	movw	r30, r12
    1f88:	31 96       	adiw	r30, 0x01	; 1
    1f8a:	6f 01       	movw	r12, r30
    1f8c:	c6 01       	movw	r24, r12
    1f8e:	03 96       	adiw	r24, 0x03	; 3
    1f90:	e2 fe       	sbrs	r14, 2
    1f92:	0a c0       	rjmp	.+20     	; 0x1fa8 <dtoa_prf+0xb6>
    1f94:	3e e4       	ldi	r19, 0x4E	; 78
    1f96:	d6 01       	movw	r26, r12
    1f98:	3c 93       	st	X, r19
    1f9a:	41 e4       	ldi	r20, 0x41	; 65
    1f9c:	11 96       	adiw	r26, 0x01	; 1
    1f9e:	4c 93       	st	X, r20
    1fa0:	11 97       	sbiw	r26, 0x01	; 1
    1fa2:	12 96       	adiw	r26, 0x02	; 2
    1fa4:	3c 93       	st	X, r19
    1fa6:	06 c0       	rjmp	.+12     	; 0x1fb4 <dtoa_prf+0xc2>
    1fa8:	3e e6       	ldi	r19, 0x6E	; 110
    1faa:	f6 01       	movw	r30, r12
    1fac:	30 83       	st	Z, r19
    1fae:	41 e6       	ldi	r20, 0x61	; 97
    1fb0:	41 83       	std	Z+1, r20	; 0x01
    1fb2:	32 83       	std	Z+2, r19	; 0x02
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	32 2f       	mov	r19, r18
    1fb8:	40 e2       	ldi	r20, 0x20	; 32
    1fba:	33 23       	and	r19, r19
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <dtoa_prf+0xce>
    1fbe:	42 c0       	rjmp	.+132    	; 0x2044 <dtoa_prf+0x152>
    1fc0:	41 93       	st	Z+, r20
    1fc2:	31 50       	subi	r19, 0x01	; 1
    1fc4:	fa cf       	rjmp	.-12     	; 0x1fba <dtoa_prf+0xc8>
    1fc6:	42 ff       	sbrs	r20, 2
    1fc8:	44 c0       	rjmp	.+136    	; 0x2052 <dtoa_prf+0x160>
    1fca:	91 11       	cpse	r25, r1
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <dtoa_prf+0xe0>
    1fce:	83 e0       	ldi	r24, 0x03	; 3
    1fd0:	01 c0       	rjmp	.+2      	; 0x1fd4 <dtoa_prf+0xe2>
    1fd2:	84 e0       	ldi	r24, 0x04	; 4
    1fd4:	81 17       	cp	r24, r17
    1fd6:	18 f4       	brcc	.+6      	; 0x1fde <dtoa_prf+0xec>
    1fd8:	21 2f       	mov	r18, r17
    1fda:	28 1b       	sub	r18, r24
    1fdc:	01 c0       	rjmp	.+2      	; 0x1fe0 <dtoa_prf+0xee>
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	51 11       	cpse	r21, r1
    1fe2:	0b c0       	rjmp	.+22     	; 0x1ffa <dtoa_prf+0x108>
    1fe4:	f6 01       	movw	r30, r12
    1fe6:	82 2f       	mov	r24, r18
    1fe8:	30 e2       	ldi	r19, 0x20	; 32
    1fea:	88 23       	and	r24, r24
    1fec:	19 f0       	breq	.+6      	; 0x1ff4 <dtoa_prf+0x102>
    1fee:	31 93       	st	Z+, r19
    1ff0:	81 50       	subi	r24, 0x01	; 1
    1ff2:	fb cf       	rjmp	.-10     	; 0x1fea <dtoa_prf+0xf8>
    1ff4:	c2 0e       	add	r12, r18
    1ff6:	d1 1c       	adc	r13, r1
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	99 23       	and	r25, r25
    1ffc:	29 f0       	breq	.+10     	; 0x2008 <dtoa_prf+0x116>
    1ffe:	d6 01       	movw	r26, r12
    2000:	9c 93       	st	X, r25
    2002:	f6 01       	movw	r30, r12
    2004:	31 96       	adiw	r30, 0x01	; 1
    2006:	6f 01       	movw	r12, r30
    2008:	c6 01       	movw	r24, r12
    200a:	03 96       	adiw	r24, 0x03	; 3
    200c:	e2 fe       	sbrs	r14, 2
    200e:	0b c0       	rjmp	.+22     	; 0x2026 <dtoa_prf+0x134>
    2010:	39 e4       	ldi	r19, 0x49	; 73
    2012:	d6 01       	movw	r26, r12
    2014:	3c 93       	st	X, r19
    2016:	3e e4       	ldi	r19, 0x4E	; 78
    2018:	11 96       	adiw	r26, 0x01	; 1
    201a:	3c 93       	st	X, r19
    201c:	11 97       	sbiw	r26, 0x01	; 1
    201e:	36 e4       	ldi	r19, 0x46	; 70
    2020:	12 96       	adiw	r26, 0x02	; 2
    2022:	3c 93       	st	X, r19
    2024:	07 c0       	rjmp	.+14     	; 0x2034 <dtoa_prf+0x142>
    2026:	39 e6       	ldi	r19, 0x69	; 105
    2028:	f6 01       	movw	r30, r12
    202a:	30 83       	st	Z, r19
    202c:	3e e6       	ldi	r19, 0x6E	; 110
    202e:	31 83       	std	Z+1, r19	; 0x01
    2030:	36 e6       	ldi	r19, 0x66	; 102
    2032:	32 83       	std	Z+2, r19	; 0x02
    2034:	fc 01       	movw	r30, r24
    2036:	32 2f       	mov	r19, r18
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	33 23       	and	r19, r19
    203c:	19 f0       	breq	.+6      	; 0x2044 <dtoa_prf+0x152>
    203e:	41 93       	st	Z+, r20
    2040:	31 50       	subi	r19, 0x01	; 1
    2042:	fb cf       	rjmp	.-10     	; 0x203a <dtoa_prf+0x148>
    2044:	fc 01       	movw	r30, r24
    2046:	e2 0f       	add	r30, r18
    2048:	f1 1d       	adc	r31, r1
    204a:	10 82       	st	Z, r1
    204c:	8e ef       	ldi	r24, 0xFE	; 254
    204e:	9f ef       	ldi	r25, 0xFF	; 255
    2050:	a6 c0       	rjmp	.+332    	; 0x219e <dtoa_prf+0x2ac>
    2052:	21 e0       	ldi	r18, 0x01	; 1
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	91 11       	cpse	r25, r1
    2058:	02 c0       	rjmp	.+4      	; 0x205e <dtoa_prf+0x16c>
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	16 16       	cp	r1, r22
    2060:	17 06       	cpc	r1, r23
    2062:	1c f4       	brge	.+6      	; 0x206a <dtoa_prf+0x178>
    2064:	fb 01       	movw	r30, r22
    2066:	31 96       	adiw	r30, 0x01	; 1
    2068:	02 c0       	rjmp	.+4      	; 0x206e <dtoa_prf+0x17c>
    206a:	e1 e0       	ldi	r30, 0x01	; 1
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	2e 0f       	add	r18, r30
    2070:	3f 1f       	adc	r19, r31
    2072:	bb 20       	and	r11, r11
    2074:	21 f0       	breq	.+8      	; 0x207e <dtoa_prf+0x18c>
    2076:	eb 2d       	mov	r30, r11
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	31 96       	adiw	r30, 0x01	; 1
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <dtoa_prf+0x190>
    207e:	e0 e0       	ldi	r30, 0x00	; 0
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	2e 0f       	add	r18, r30
    2084:	3f 1f       	adc	r19, r31
    2086:	e1 2f       	mov	r30, r17
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	2e 17       	cp	r18, r30
    208c:	3f 07       	cpc	r19, r31
    208e:	1c f4       	brge	.+6      	; 0x2096 <dtoa_prf+0x1a4>
    2090:	12 1b       	sub	r17, r18
    2092:	21 2f       	mov	r18, r17
    2094:	01 c0       	rjmp	.+2      	; 0x2098 <dtoa_prf+0x1a6>
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	8e 2d       	mov	r24, r14
    209a:	88 71       	andi	r24, 0x18	; 24
    209c:	59 f4       	brne	.+22     	; 0x20b4 <dtoa_prf+0x1c2>
    209e:	f6 01       	movw	r30, r12
    20a0:	82 2f       	mov	r24, r18
    20a2:	30 e2       	ldi	r19, 0x20	; 32
    20a4:	88 23       	and	r24, r24
    20a6:	19 f0       	breq	.+6      	; 0x20ae <dtoa_prf+0x1bc>
    20a8:	31 93       	st	Z+, r19
    20aa:	81 50       	subi	r24, 0x01	; 1
    20ac:	fb cf       	rjmp	.-10     	; 0x20a4 <dtoa_prf+0x1b2>
    20ae:	c2 0e       	add	r12, r18
    20b0:	d1 1c       	adc	r13, r1
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	99 23       	and	r25, r25
    20b6:	29 f0       	breq	.+10     	; 0x20c2 <dtoa_prf+0x1d0>
    20b8:	d6 01       	movw	r26, r12
    20ba:	9c 93       	st	X, r25
    20bc:	f6 01       	movw	r30, r12
    20be:	31 96       	adiw	r30, 0x01	; 1
    20c0:	6f 01       	movw	r12, r30
    20c2:	51 11       	cpse	r21, r1
    20c4:	0b c0       	rjmp	.+22     	; 0x20dc <dtoa_prf+0x1ea>
    20c6:	f6 01       	movw	r30, r12
    20c8:	82 2f       	mov	r24, r18
    20ca:	90 e3       	ldi	r25, 0x30	; 48
    20cc:	88 23       	and	r24, r24
    20ce:	19 f0       	breq	.+6      	; 0x20d6 <dtoa_prf+0x1e4>
    20d0:	91 93       	st	Z+, r25
    20d2:	81 50       	subi	r24, 0x01	; 1
    20d4:	fb cf       	rjmp	.-10     	; 0x20cc <dtoa_prf+0x1da>
    20d6:	c2 0e       	add	r12, r18
    20d8:	d1 1c       	adc	r13, r1
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	0f 2d       	mov	r16, r15
    20de:	06 0f       	add	r16, r22
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	34 2f       	mov	r19, r20
    20e4:	30 71       	andi	r19, 0x10	; 16
    20e6:	44 ff       	sbrs	r20, 4
    20e8:	03 c0       	rjmp	.+6      	; 0x20f0 <dtoa_prf+0x1fe>
    20ea:	91 33       	cpi	r25, 0x31	; 49
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <dtoa_prf+0x1fe>
    20ee:	01 50       	subi	r16, 0x01	; 1
    20f0:	10 16       	cp	r1, r16
    20f2:	24 f4       	brge	.+8      	; 0x20fc <dtoa_prf+0x20a>
    20f4:	09 30       	cpi	r16, 0x09	; 9
    20f6:	18 f0       	brcs	.+6      	; 0x20fe <dtoa_prf+0x20c>
    20f8:	08 e0       	ldi	r16, 0x08	; 8
    20fa:	01 c0       	rjmp	.+2      	; 0x20fe <dtoa_prf+0x20c>
    20fc:	01 e0       	ldi	r16, 0x01	; 1
    20fe:	ab 01       	movw	r20, r22
    2100:	77 ff       	sbrs	r23, 7
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <dtoa_prf+0x216>
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	fb 01       	movw	r30, r22
    210a:	e4 1b       	sub	r30, r20
    210c:	f5 0b       	sbc	r31, r21
    210e:	a1 e0       	ldi	r26, 0x01	; 1
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	ac 0f       	add	r26, r28
    2114:	bd 1f       	adc	r27, r29
    2116:	ea 0f       	add	r30, r26
    2118:	fb 1f       	adc	r31, r27
    211a:	8e e2       	ldi	r24, 0x2E	; 46
    211c:	a8 2e       	mov	r10, r24
    211e:	4b 01       	movw	r8, r22
    2120:	80 1a       	sub	r8, r16
    2122:	91 08       	sbc	r9, r1
    2124:	0b 2d       	mov	r16, r11
    2126:	10 e0       	ldi	r17, 0x00	; 0
    2128:	11 95       	neg	r17
    212a:	01 95       	neg	r16
    212c:	11 09       	sbc	r17, r1
    212e:	4f 3f       	cpi	r20, 0xFF	; 255
    2130:	bf ef       	ldi	r27, 0xFF	; 255
    2132:	5b 07       	cpc	r21, r27
    2134:	21 f4       	brne	.+8      	; 0x213e <dtoa_prf+0x24c>
    2136:	d6 01       	movw	r26, r12
    2138:	ac 92       	st	X, r10
    213a:	11 96       	adiw	r26, 0x01	; 1
    213c:	6d 01       	movw	r12, r26
    213e:	64 17       	cp	r22, r20
    2140:	75 07       	cpc	r23, r21
    2142:	2c f0       	brlt	.+10     	; 0x214e <dtoa_prf+0x25c>
    2144:	84 16       	cp	r8, r20
    2146:	95 06       	cpc	r9, r21
    2148:	14 f4       	brge	.+4      	; 0x214e <dtoa_prf+0x25c>
    214a:	81 81       	ldd	r24, Z+1	; 0x01
    214c:	01 c0       	rjmp	.+2      	; 0x2150 <dtoa_prf+0x25e>
    214e:	80 e3       	ldi	r24, 0x30	; 48
    2150:	41 50       	subi	r20, 0x01	; 1
    2152:	51 09       	sbc	r21, r1
    2154:	31 96       	adiw	r30, 0x01	; 1
    2156:	d6 01       	movw	r26, r12
    2158:	11 96       	adiw	r26, 0x01	; 1
    215a:	7d 01       	movw	r14, r26
    215c:	40 17       	cp	r20, r16
    215e:	51 07       	cpc	r21, r17
    2160:	24 f0       	brlt	.+8      	; 0x216a <dtoa_prf+0x278>
    2162:	d6 01       	movw	r26, r12
    2164:	8c 93       	st	X, r24
    2166:	67 01       	movw	r12, r14
    2168:	e2 cf       	rjmp	.-60     	; 0x212e <dtoa_prf+0x23c>
    216a:	64 17       	cp	r22, r20
    216c:	75 07       	cpc	r23, r21
    216e:	39 f4       	brne	.+14     	; 0x217e <dtoa_prf+0x28c>
    2170:	96 33       	cpi	r25, 0x36	; 54
    2172:	20 f4       	brcc	.+8      	; 0x217c <dtoa_prf+0x28a>
    2174:	95 33       	cpi	r25, 0x35	; 53
    2176:	19 f4       	brne	.+6      	; 0x217e <dtoa_prf+0x28c>
    2178:	31 11       	cpse	r19, r1
    217a:	01 c0       	rjmp	.+2      	; 0x217e <dtoa_prf+0x28c>
    217c:	81 e3       	ldi	r24, 0x31	; 49
    217e:	f6 01       	movw	r30, r12
    2180:	80 83       	st	Z, r24
    2182:	f7 01       	movw	r30, r14
    2184:	82 2f       	mov	r24, r18
    2186:	90 e2       	ldi	r25, 0x20	; 32
    2188:	88 23       	and	r24, r24
    218a:	19 f0       	breq	.+6      	; 0x2192 <dtoa_prf+0x2a0>
    218c:	91 93       	st	Z+, r25
    218e:	81 50       	subi	r24, 0x01	; 1
    2190:	fb cf       	rjmp	.-10     	; 0x2188 <dtoa_prf+0x296>
    2192:	f7 01       	movw	r30, r14
    2194:	e2 0f       	add	r30, r18
    2196:	f1 1d       	adc	r31, r1
    2198:	10 82       	st	Z, r1
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	29 96       	adiw	r28, 0x09	; 9
    21a0:	ec e0       	ldi	r30, 0x0C	; 12
    21a2:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__epilogue_restores__+0xc>

000021a6 <__ftoa_engine>:
    21a6:	28 30       	cpi	r18, 0x08	; 8
    21a8:	08 f0       	brcs	.+2      	; 0x21ac <__ftoa_engine+0x6>
    21aa:	27 e0       	ldi	r18, 0x07	; 7
    21ac:	33 27       	eor	r19, r19
    21ae:	da 01       	movw	r26, r20
    21b0:	99 0f       	add	r25, r25
    21b2:	31 1d       	adc	r19, r1
    21b4:	87 fd       	sbrc	r24, 7
    21b6:	91 60       	ori	r25, 0x01	; 1
    21b8:	00 96       	adiw	r24, 0x00	; 0
    21ba:	61 05       	cpc	r22, r1
    21bc:	71 05       	cpc	r23, r1
    21be:	39 f4       	brne	.+14     	; 0x21ce <__ftoa_engine+0x28>
    21c0:	32 60       	ori	r19, 0x02	; 2
    21c2:	2e 5f       	subi	r18, 0xFE	; 254
    21c4:	3d 93       	st	X+, r19
    21c6:	30 e3       	ldi	r19, 0x30	; 48
    21c8:	2a 95       	dec	r18
    21ca:	e1 f7       	brne	.-8      	; 0x21c4 <__ftoa_engine+0x1e>
    21cc:	08 95       	ret
    21ce:	9f 3f       	cpi	r25, 0xFF	; 255
    21d0:	30 f0       	brcs	.+12     	; 0x21de <__ftoa_engine+0x38>
    21d2:	80 38       	cpi	r24, 0x80	; 128
    21d4:	71 05       	cpc	r23, r1
    21d6:	61 05       	cpc	r22, r1
    21d8:	09 f0       	breq	.+2      	; 0x21dc <__ftoa_engine+0x36>
    21da:	3c 5f       	subi	r19, 0xFC	; 252
    21dc:	3c 5f       	subi	r19, 0xFC	; 252
    21de:	3d 93       	st	X+, r19
    21e0:	91 30       	cpi	r25, 0x01	; 1
    21e2:	08 f0       	brcs	.+2      	; 0x21e6 <__ftoa_engine+0x40>
    21e4:	80 68       	ori	r24, 0x80	; 128
    21e6:	91 1d       	adc	r25, r1
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	1f 93       	push	r17
    21ee:	0f 93       	push	r16
    21f0:	ff 92       	push	r15
    21f2:	ef 92       	push	r14
    21f4:	19 2f       	mov	r17, r25
    21f6:	98 7f       	andi	r25, 0xF8	; 248
    21f8:	96 95       	lsr	r25
    21fa:	e9 2f       	mov	r30, r25
    21fc:	96 95       	lsr	r25
    21fe:	96 95       	lsr	r25
    2200:	e9 0f       	add	r30, r25
    2202:	ff 27       	eor	r31, r31
    2204:	e4 5e       	subi	r30, 0xE4	; 228
    2206:	fe 4f       	sbci	r31, 0xFE	; 254
    2208:	99 27       	eor	r25, r25
    220a:	33 27       	eor	r19, r19
    220c:	ee 24       	eor	r14, r14
    220e:	ff 24       	eor	r15, r15
    2210:	a7 01       	movw	r20, r14
    2212:	e7 01       	movw	r28, r14
    2214:	05 90       	lpm	r0, Z+
    2216:	08 94       	sec
    2218:	07 94       	ror	r0
    221a:	28 f4       	brcc	.+10     	; 0x2226 <__ftoa_engine+0x80>
    221c:	36 0f       	add	r19, r22
    221e:	e7 1e       	adc	r14, r23
    2220:	f8 1e       	adc	r15, r24
    2222:	49 1f       	adc	r20, r25
    2224:	51 1d       	adc	r21, r1
    2226:	66 0f       	add	r22, r22
    2228:	77 1f       	adc	r23, r23
    222a:	88 1f       	adc	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	06 94       	lsr	r0
    2230:	a1 f7       	brne	.-24     	; 0x221a <__ftoa_engine+0x74>
    2232:	05 90       	lpm	r0, Z+
    2234:	07 94       	ror	r0
    2236:	28 f4       	brcc	.+10     	; 0x2242 <__ftoa_engine+0x9c>
    2238:	e7 0e       	add	r14, r23
    223a:	f8 1e       	adc	r15, r24
    223c:	49 1f       	adc	r20, r25
    223e:	56 1f       	adc	r21, r22
    2240:	c1 1d       	adc	r28, r1
    2242:	77 0f       	add	r23, r23
    2244:	88 1f       	adc	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	66 1f       	adc	r22, r22
    224a:	06 94       	lsr	r0
    224c:	a1 f7       	brne	.-24     	; 0x2236 <__ftoa_engine+0x90>
    224e:	05 90       	lpm	r0, Z+
    2250:	07 94       	ror	r0
    2252:	28 f4       	brcc	.+10     	; 0x225e <__ftoa_engine+0xb8>
    2254:	f8 0e       	add	r15, r24
    2256:	49 1f       	adc	r20, r25
    2258:	56 1f       	adc	r21, r22
    225a:	c7 1f       	adc	r28, r23
    225c:	d1 1d       	adc	r29, r1
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	66 1f       	adc	r22, r22
    2264:	77 1f       	adc	r23, r23
    2266:	06 94       	lsr	r0
    2268:	a1 f7       	brne	.-24     	; 0x2252 <__ftoa_engine+0xac>
    226a:	05 90       	lpm	r0, Z+
    226c:	07 94       	ror	r0
    226e:	20 f4       	brcc	.+8      	; 0x2278 <__ftoa_engine+0xd2>
    2270:	49 0f       	add	r20, r25
    2272:	56 1f       	adc	r21, r22
    2274:	c7 1f       	adc	r28, r23
    2276:	d8 1f       	adc	r29, r24
    2278:	99 0f       	add	r25, r25
    227a:	66 1f       	adc	r22, r22
    227c:	77 1f       	adc	r23, r23
    227e:	88 1f       	adc	r24, r24
    2280:	06 94       	lsr	r0
    2282:	a9 f7       	brne	.-22     	; 0x226e <__ftoa_engine+0xc8>
    2284:	84 91       	lpm	r24, Z
    2286:	10 95       	com	r17
    2288:	17 70       	andi	r17, 0x07	; 7
    228a:	41 f0       	breq	.+16     	; 0x229c <__ftoa_engine+0xf6>
    228c:	d6 95       	lsr	r29
    228e:	c7 95       	ror	r28
    2290:	57 95       	ror	r21
    2292:	47 95       	ror	r20
    2294:	f7 94       	ror	r15
    2296:	e7 94       	ror	r14
    2298:	1a 95       	dec	r17
    229a:	c1 f7       	brne	.-16     	; 0x228c <__ftoa_engine+0xe6>
    229c:	e2 ec       	ldi	r30, 0xC2	; 194
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	68 94       	set
    22a2:	15 90       	lpm	r1, Z+
    22a4:	15 91       	lpm	r17, Z+
    22a6:	35 91       	lpm	r19, Z+
    22a8:	65 91       	lpm	r22, Z+
    22aa:	95 91       	lpm	r25, Z+
    22ac:	05 90       	lpm	r0, Z+
    22ae:	7f e2       	ldi	r23, 0x2F	; 47
    22b0:	73 95       	inc	r23
    22b2:	e1 18       	sub	r14, r1
    22b4:	f1 0a       	sbc	r15, r17
    22b6:	43 0b       	sbc	r20, r19
    22b8:	56 0b       	sbc	r21, r22
    22ba:	c9 0b       	sbc	r28, r25
    22bc:	d0 09       	sbc	r29, r0
    22be:	c0 f7       	brcc	.-16     	; 0x22b0 <__ftoa_engine+0x10a>
    22c0:	e1 0c       	add	r14, r1
    22c2:	f1 1e       	adc	r15, r17
    22c4:	43 1f       	adc	r20, r19
    22c6:	56 1f       	adc	r21, r22
    22c8:	c9 1f       	adc	r28, r25
    22ca:	d0 1d       	adc	r29, r0
    22cc:	7e f4       	brtc	.+30     	; 0x22ec <__ftoa_engine+0x146>
    22ce:	70 33       	cpi	r23, 0x30	; 48
    22d0:	11 f4       	brne	.+4      	; 0x22d6 <__ftoa_engine+0x130>
    22d2:	8a 95       	dec	r24
    22d4:	e6 cf       	rjmp	.-52     	; 0x22a2 <__ftoa_engine+0xfc>
    22d6:	e8 94       	clt
    22d8:	01 50       	subi	r16, 0x01	; 1
    22da:	30 f0       	brcs	.+12     	; 0x22e8 <__ftoa_engine+0x142>
    22dc:	08 0f       	add	r16, r24
    22de:	0a f4       	brpl	.+2      	; 0x22e2 <__ftoa_engine+0x13c>
    22e0:	00 27       	eor	r16, r16
    22e2:	02 17       	cp	r16, r18
    22e4:	08 f4       	brcc	.+2      	; 0x22e8 <__ftoa_engine+0x142>
    22e6:	20 2f       	mov	r18, r16
    22e8:	23 95       	inc	r18
    22ea:	02 2f       	mov	r16, r18
    22ec:	7a 33       	cpi	r23, 0x3A	; 58
    22ee:	28 f0       	brcs	.+10     	; 0x22fa <__ftoa_engine+0x154>
    22f0:	79 e3       	ldi	r23, 0x39	; 57
    22f2:	7d 93       	st	X+, r23
    22f4:	2a 95       	dec	r18
    22f6:	e9 f7       	brne	.-6      	; 0x22f2 <__ftoa_engine+0x14c>
    22f8:	10 c0       	rjmp	.+32     	; 0x231a <__ftoa_engine+0x174>
    22fa:	7d 93       	st	X+, r23
    22fc:	2a 95       	dec	r18
    22fe:	89 f6       	brne	.-94     	; 0x22a2 <__ftoa_engine+0xfc>
    2300:	06 94       	lsr	r0
    2302:	97 95       	ror	r25
    2304:	67 95       	ror	r22
    2306:	37 95       	ror	r19
    2308:	17 95       	ror	r17
    230a:	17 94       	ror	r1
    230c:	e1 18       	sub	r14, r1
    230e:	f1 0a       	sbc	r15, r17
    2310:	43 0b       	sbc	r20, r19
    2312:	56 0b       	sbc	r21, r22
    2314:	c9 0b       	sbc	r28, r25
    2316:	d0 09       	sbc	r29, r0
    2318:	98 f0       	brcs	.+38     	; 0x2340 <__ftoa_engine+0x19a>
    231a:	23 95       	inc	r18
    231c:	7e 91       	ld	r23, -X
    231e:	73 95       	inc	r23
    2320:	7a 33       	cpi	r23, 0x3A	; 58
    2322:	08 f0       	brcs	.+2      	; 0x2326 <__ftoa_engine+0x180>
    2324:	70 e3       	ldi	r23, 0x30	; 48
    2326:	7c 93       	st	X, r23
    2328:	20 13       	cpse	r18, r16
    232a:	b8 f7       	brcc	.-18     	; 0x231a <__ftoa_engine+0x174>
    232c:	7e 91       	ld	r23, -X
    232e:	70 61       	ori	r23, 0x10	; 16
    2330:	7d 93       	st	X+, r23
    2332:	30 f0       	brcs	.+12     	; 0x2340 <__ftoa_engine+0x19a>
    2334:	83 95       	inc	r24
    2336:	71 e3       	ldi	r23, 0x31	; 49
    2338:	7d 93       	st	X+, r23
    233a:	70 e3       	ldi	r23, 0x30	; 48
    233c:	2a 95       	dec	r18
    233e:	e1 f7       	brne	.-8      	; 0x2338 <__ftoa_engine+0x192>
    2340:	11 24       	eor	r1, r1
    2342:	ef 90       	pop	r14
    2344:	ff 90       	pop	r15
    2346:	0f 91       	pop	r16
    2348:	1f 91       	pop	r17
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	99 27       	eor	r25, r25
    2350:	87 fd       	sbrc	r24, 7
    2352:	90 95       	com	r25
    2354:	08 95       	ret

00002356 <strnlen_P>:
    2356:	fc 01       	movw	r30, r24
    2358:	05 90       	lpm	r0, Z+
    235a:	61 50       	subi	r22, 0x01	; 1
    235c:	70 40       	sbci	r23, 0x00	; 0
    235e:	01 10       	cpse	r0, r1
    2360:	d8 f7       	brcc	.-10     	; 0x2358 <strnlen_P+0x2>
    2362:	80 95       	com	r24
    2364:	90 95       	com	r25
    2366:	8e 0f       	add	r24, r30
    2368:	9f 1f       	adc	r25, r31
    236a:	08 95       	ret

0000236c <strnlen>:
    236c:	fc 01       	movw	r30, r24
    236e:	61 50       	subi	r22, 0x01	; 1
    2370:	70 40       	sbci	r23, 0x00	; 0
    2372:	01 90       	ld	r0, Z+
    2374:	01 10       	cpse	r0, r1
    2376:	d8 f7       	brcc	.-10     	; 0x236e <strnlen+0x2>
    2378:	80 95       	com	r24
    237a:	90 95       	com	r25
    237c:	8e 0f       	add	r24, r30
    237e:	9f 1f       	adc	r25, r31
    2380:	08 95       	ret

00002382 <fputc>:
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	fb 01       	movw	r30, r22
    238c:	23 81       	ldd	r18, Z+3	; 0x03
    238e:	21 fd       	sbrc	r18, 1
    2390:	03 c0       	rjmp	.+6      	; 0x2398 <fputc+0x16>
    2392:	8f ef       	ldi	r24, 0xFF	; 255
    2394:	9f ef       	ldi	r25, 0xFF	; 255
    2396:	2c c0       	rjmp	.+88     	; 0x23f0 <fputc+0x6e>
    2398:	22 ff       	sbrs	r18, 2
    239a:	16 c0       	rjmp	.+44     	; 0x23c8 <fputc+0x46>
    239c:	46 81       	ldd	r20, Z+6	; 0x06
    239e:	57 81       	ldd	r21, Z+7	; 0x07
    23a0:	24 81       	ldd	r18, Z+4	; 0x04
    23a2:	35 81       	ldd	r19, Z+5	; 0x05
    23a4:	42 17       	cp	r20, r18
    23a6:	53 07       	cpc	r21, r19
    23a8:	44 f4       	brge	.+16     	; 0x23ba <fputc+0x38>
    23aa:	a0 81       	ld	r26, Z
    23ac:	b1 81       	ldd	r27, Z+1	; 0x01
    23ae:	9d 01       	movw	r18, r26
    23b0:	2f 5f       	subi	r18, 0xFF	; 255
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	20 83       	st	Z, r18
    23b6:	31 83       	std	Z+1, r19	; 0x01
    23b8:	8c 93       	st	X, r24
    23ba:	26 81       	ldd	r18, Z+6	; 0x06
    23bc:	37 81       	ldd	r19, Z+7	; 0x07
    23be:	2f 5f       	subi	r18, 0xFF	; 255
    23c0:	3f 4f       	sbci	r19, 0xFF	; 255
    23c2:	26 83       	std	Z+6, r18	; 0x06
    23c4:	37 83       	std	Z+7, r19	; 0x07
    23c6:	14 c0       	rjmp	.+40     	; 0x23f0 <fputc+0x6e>
    23c8:	8b 01       	movw	r16, r22
    23ca:	ec 01       	movw	r28, r24
    23cc:	fb 01       	movw	r30, r22
    23ce:	00 84       	ldd	r0, Z+8	; 0x08
    23d0:	f1 85       	ldd	r31, Z+9	; 0x09
    23d2:	e0 2d       	mov	r30, r0
    23d4:	09 95       	icall
    23d6:	89 2b       	or	r24, r25
    23d8:	e1 f6       	brne	.-72     	; 0x2392 <fputc+0x10>
    23da:	d8 01       	movw	r26, r16
    23dc:	16 96       	adiw	r26, 0x06	; 6
    23de:	8d 91       	ld	r24, X+
    23e0:	9c 91       	ld	r25, X
    23e2:	17 97       	sbiw	r26, 0x07	; 7
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	16 96       	adiw	r26, 0x06	; 6
    23e8:	8d 93       	st	X+, r24
    23ea:	9c 93       	st	X, r25
    23ec:	17 97       	sbiw	r26, 0x07	; 7
    23ee:	ce 01       	movw	r24, r28
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	0f 91       	pop	r16
    23f8:	08 95       	ret

000023fa <__ultoa_invert>:
    23fa:	fa 01       	movw	r30, r20
    23fc:	aa 27       	eor	r26, r26
    23fe:	28 30       	cpi	r18, 0x08	; 8
    2400:	51 f1       	breq	.+84     	; 0x2456 <__ultoa_invert+0x5c>
    2402:	20 31       	cpi	r18, 0x10	; 16
    2404:	81 f1       	breq	.+96     	; 0x2466 <__ultoa_invert+0x6c>
    2406:	e8 94       	clt
    2408:	6f 93       	push	r22
    240a:	6e 7f       	andi	r22, 0xFE	; 254
    240c:	6e 5f       	subi	r22, 0xFE	; 254
    240e:	7f 4f       	sbci	r23, 0xFF	; 255
    2410:	8f 4f       	sbci	r24, 0xFF	; 255
    2412:	9f 4f       	sbci	r25, 0xFF	; 255
    2414:	af 4f       	sbci	r26, 0xFF	; 255
    2416:	b1 e0       	ldi	r27, 0x01	; 1
    2418:	3e d0       	rcall	.+124    	; 0x2496 <__ultoa_invert+0x9c>
    241a:	b4 e0       	ldi	r27, 0x04	; 4
    241c:	3c d0       	rcall	.+120    	; 0x2496 <__ultoa_invert+0x9c>
    241e:	67 0f       	add	r22, r23
    2420:	78 1f       	adc	r23, r24
    2422:	89 1f       	adc	r24, r25
    2424:	9a 1f       	adc	r25, r26
    2426:	a1 1d       	adc	r26, r1
    2428:	68 0f       	add	r22, r24
    242a:	79 1f       	adc	r23, r25
    242c:	8a 1f       	adc	r24, r26
    242e:	91 1d       	adc	r25, r1
    2430:	a1 1d       	adc	r26, r1
    2432:	6a 0f       	add	r22, r26
    2434:	71 1d       	adc	r23, r1
    2436:	81 1d       	adc	r24, r1
    2438:	91 1d       	adc	r25, r1
    243a:	a1 1d       	adc	r26, r1
    243c:	20 d0       	rcall	.+64     	; 0x247e <__ultoa_invert+0x84>
    243e:	09 f4       	brne	.+2      	; 0x2442 <__ultoa_invert+0x48>
    2440:	68 94       	set
    2442:	3f 91       	pop	r19
    2444:	2a e0       	ldi	r18, 0x0A	; 10
    2446:	26 9f       	mul	r18, r22
    2448:	11 24       	eor	r1, r1
    244a:	30 19       	sub	r19, r0
    244c:	30 5d       	subi	r19, 0xD0	; 208
    244e:	31 93       	st	Z+, r19
    2450:	de f6       	brtc	.-74     	; 0x2408 <__ultoa_invert+0xe>
    2452:	cf 01       	movw	r24, r30
    2454:	08 95       	ret
    2456:	46 2f       	mov	r20, r22
    2458:	47 70       	andi	r20, 0x07	; 7
    245a:	40 5d       	subi	r20, 0xD0	; 208
    245c:	41 93       	st	Z+, r20
    245e:	b3 e0       	ldi	r27, 0x03	; 3
    2460:	0f d0       	rcall	.+30     	; 0x2480 <__ultoa_invert+0x86>
    2462:	c9 f7       	brne	.-14     	; 0x2456 <__ultoa_invert+0x5c>
    2464:	f6 cf       	rjmp	.-20     	; 0x2452 <__ultoa_invert+0x58>
    2466:	46 2f       	mov	r20, r22
    2468:	4f 70       	andi	r20, 0x0F	; 15
    246a:	40 5d       	subi	r20, 0xD0	; 208
    246c:	4a 33       	cpi	r20, 0x3A	; 58
    246e:	18 f0       	brcs	.+6      	; 0x2476 <__ultoa_invert+0x7c>
    2470:	49 5d       	subi	r20, 0xD9	; 217
    2472:	31 fd       	sbrc	r19, 1
    2474:	40 52       	subi	r20, 0x20	; 32
    2476:	41 93       	st	Z+, r20
    2478:	02 d0       	rcall	.+4      	; 0x247e <__ultoa_invert+0x84>
    247a:	a9 f7       	brne	.-22     	; 0x2466 <__ultoa_invert+0x6c>
    247c:	ea cf       	rjmp	.-44     	; 0x2452 <__ultoa_invert+0x58>
    247e:	b4 e0       	ldi	r27, 0x04	; 4
    2480:	a6 95       	lsr	r26
    2482:	97 95       	ror	r25
    2484:	87 95       	ror	r24
    2486:	77 95       	ror	r23
    2488:	67 95       	ror	r22
    248a:	ba 95       	dec	r27
    248c:	c9 f7       	brne	.-14     	; 0x2480 <__ultoa_invert+0x86>
    248e:	00 97       	sbiw	r24, 0x00	; 0
    2490:	61 05       	cpc	r22, r1
    2492:	71 05       	cpc	r23, r1
    2494:	08 95       	ret
    2496:	9b 01       	movw	r18, r22
    2498:	ac 01       	movw	r20, r24
    249a:	0a 2e       	mov	r0, r26
    249c:	06 94       	lsr	r0
    249e:	57 95       	ror	r21
    24a0:	47 95       	ror	r20
    24a2:	37 95       	ror	r19
    24a4:	27 95       	ror	r18
    24a6:	ba 95       	dec	r27
    24a8:	c9 f7       	brne	.-14     	; 0x249c <__ultoa_invert+0xa2>
    24aa:	62 0f       	add	r22, r18
    24ac:	73 1f       	adc	r23, r19
    24ae:	84 1f       	adc	r24, r20
    24b0:	95 1f       	adc	r25, r21
    24b2:	a0 1d       	adc	r26, r0
    24b4:	08 95       	ret

000024b6 <__prologue_saves__>:
    24b6:	2f 92       	push	r2
    24b8:	3f 92       	push	r3
    24ba:	4f 92       	push	r4
    24bc:	5f 92       	push	r5
    24be:	6f 92       	push	r6
    24c0:	7f 92       	push	r7
    24c2:	8f 92       	push	r8
    24c4:	9f 92       	push	r9
    24c6:	af 92       	push	r10
    24c8:	bf 92       	push	r11
    24ca:	cf 92       	push	r12
    24cc:	df 92       	push	r13
    24ce:	ef 92       	push	r14
    24d0:	ff 92       	push	r15
    24d2:	0f 93       	push	r16
    24d4:	1f 93       	push	r17
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	ca 1b       	sub	r28, r26
    24e0:	db 0b       	sbc	r29, r27
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	de bf       	out	0x3e, r29	; 62
    24e6:	09 94       	ijmp

000024e8 <__epilogue_restores__>:
    24e8:	2a 88       	ldd	r2, Y+18	; 0x12
    24ea:	39 88       	ldd	r3, Y+17	; 0x11
    24ec:	48 88       	ldd	r4, Y+16	; 0x10
    24ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    24f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    24f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    24f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    24f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    24f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    24fa:	b9 84       	ldd	r11, Y+9	; 0x09
    24fc:	c8 84       	ldd	r12, Y+8	; 0x08
    24fe:	df 80       	ldd	r13, Y+7	; 0x07
    2500:	ee 80       	ldd	r14, Y+6	; 0x06
    2502:	fd 80       	ldd	r15, Y+5	; 0x05
    2504:	0c 81       	ldd	r16, Y+4	; 0x04
    2506:	1b 81       	ldd	r17, Y+3	; 0x03
    2508:	aa 81       	ldd	r26, Y+2	; 0x02
    250a:	b9 81       	ldd	r27, Y+1	; 0x01
    250c:	ce 0f       	add	r28, r30
    250e:	d1 1d       	adc	r29, r1
    2510:	cd bf       	out	0x3d, r28	; 61
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	ed 01       	movw	r28, r26
    2516:	08 95       	ret

00002518 <_exit>:
    2518:	f8 94       	cli

0000251a <__stop_program>:
    251a:	ff cf       	rjmp	.-2      	; 0x251a <__stop_program>
