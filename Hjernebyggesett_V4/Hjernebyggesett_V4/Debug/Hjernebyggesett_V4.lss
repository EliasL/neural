
Hjernebyggesett_V4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00803800  0000258a  0000263e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002520  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006a  0000a520  00002520  000025d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000055  00803816  00803816  00002654  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002654  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026b0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000510  00000000  00000000  000026f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008957  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003707  00000000  00000000  0000b557  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000029e5  00000000  00000000  0000ec5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000968  00000000  00000000  00011644  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000035ef  00000000  00000000  00011fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000192c  00000000  00000000  0001559b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000388  00000000  00000000  00016ec7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__vector_6>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	05 a8       	ldd	r0, Z+53	; 0x35
      a6:	4c cd       	rjmp	.-1384   	; 0xfffffb40 <__eeprom_end+0xff7efb40>
      a8:	b2 d4       	rcall	.+2404   	; 0xa0e <tinyDendrite_read_signals+0x14>
      aa:	4e b9       	out	0x0e, r20	; 14
      ac:	38 36       	cpi	r19, 0x68	; 104
      ae:	a9 02       	muls	r26, r25
      b0:	0c 50       	subi	r16, 0x0C	; 12
      b2:	b9 91       	ld	r27, Y+
      b4:	86 88       	ldd	r8, Z+22	; 0x16
      b6:	08 3c       	cpi	r16, 0xC8	; 200
      b8:	a6 aa       	std	Z+54, r10	; 0x36
      ba:	aa 2a       	or	r10, r26
      bc:	be 00       	.word	0x00be	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240

000000c2 <__trampolines_end>:
      c2:	00 40       	sbci	r16, 0x00	; 0
      c4:	7a 10       	cpse	r7, r10
      c6:	f3 5a       	subi	r31, 0xA3	; 163
      c8:	00 a0       	ldd	r0, Z+32	; 0x20
      ca:	72 4e       	sbci	r23, 0xE2	; 226
      cc:	18 09       	sbc	r17, r8
      ce:	00 10       	cpse	r0, r0
      d0:	a5 d4       	rcall	.+2378   	; 0xa1c <tinyDendrite_read_signals+0x22>
      d2:	e8 00       	.word	0x00e8	; ????
      d4:	00 e8       	ldi	r16, 0x80	; 128
      d6:	76 48       	sbci	r23, 0x86	; 134
      d8:	17 00       	.word	0x0017	; ????
      da:	00 e4       	ldi	r16, 0x40	; 64
      dc:	0b 54       	subi	r16, 0x4B	; 75
      de:	02 00       	.word	0x0002	; ????
      e0:	00 ca       	rjmp	.-3072   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
      e2:	9a 3b       	cpi	r25, 0xBA	; 186
      e4:	00 00       	nop
      e6:	00 e1       	ldi	r16, 0x10	; 16
      e8:	f5 05       	cpc	r31, r5
      ea:	00 00       	nop
      ec:	80 96       	adiw	r24, 0x20	; 32
      ee:	98 00       	.word	0x0098	; ????
      f0:	00 00       	nop
      f2:	40 42       	sbci	r20, 0x20	; 32
      f4:	0f 00       	.word	0x000f	; ????
      f6:	00 00       	nop
      f8:	a0 86       	std	Z+8, r10	; 0x08
      fa:	01 00       	.word	0x0001	; ????
      fc:	00 00       	nop
      fe:	10 27       	eor	r17, r16
     100:	00 00       	nop
     102:	00 00       	nop
     104:	e8 03       	fmulsu	r22, r16
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	64 00       	.word	0x0064	; ????
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	0a 00       	.word	0x000a	; ????
     112:	00 00       	nop
     114:	00 00       	nop
     116:	01 00       	.word	0x0001	; ????
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	2c 76       	andi	r18, 0x6C	; 108
     11e:	d8 88       	ldd	r13, Y+16	; 0x10
     120:	dc 67       	ori	r29, 0x7C	; 124
     122:	4f 08       	sbc	r4, r15
     124:	23 df       	rcall	.-442    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     126:	c1 df       	rcall	.-126    	; 0xaa <__SREG__+0x6b>
     128:	ae 59       	subi	r26, 0x9E	; 158
     12a:	e1 b1       	in	r30, 0x01	; 1
     12c:	b7 96       	adiw	r30, 0x27	; 39
     12e:	e5 e3       	ldi	r30, 0x35	; 53
     130:	e4 53       	subi	r30, 0x34	; 52
     132:	c6 3a       	cpi	r28, 0xA6	; 166
     134:	e6 51       	subi	r30, 0x16	; 22
     136:	99 76       	andi	r25, 0x69	; 105
     138:	96 e8       	ldi	r25, 0x86	; 134
     13a:	e6 c2       	rjmp	.+1484   	; 0x708 <tinyAxon_update_potential+0xea>
     13c:	84 26       	eor	r8, r20
     13e:	eb 89       	ldd	r30, Y+19	; 0x13
     140:	8c 9b       	sbis	0x11, 4	; 17
     142:	62 ed       	ldi	r22, 0xD2	; 210
     144:	40 7c       	andi	r20, 0xC0	; 192
     146:	6f fc       	.word	0xfc6f	; ????
     148:	ef bc       	out	0x2f, r14	; 47
     14a:	9c 9f       	mul	r25, r28
     14c:	40 f2       	brcs	.-112    	; 0xde <__trampolines_end+0x1c>
     14e:	ba a5       	ldd	r27, Y+42	; 0x2a
     150:	6f a5       	ldd	r22, Y+47	; 0x2f
     152:	f4 90       	lpm	r15, Z
     154:	05 5a       	subi	r16, 0xA5	; 165
     156:	2a f7       	brpl	.-54     	; 0x122 <__trampolines_end+0x60>
     158:	5c 93       	st	X, r21
     15a:	6b 6c       	ori	r22, 0xCB	; 203
     15c:	f9 67       	ori	r31, 0x79	; 121
     15e:	6d c1       	rjmp	.+730    	; 0x43a <DAC_0_initialization+0xe>
     160:	1b fc       	.word	0xfc1b	; ????
     162:	e0 e4       	ldi	r30, 0x40	; 64
     164:	0d 47       	sbci	r16, 0x7D	; 125
     166:	fe f5       	brtc	.+126    	; 0x1e6 <.do_clear_bss_loop>
     168:	20 e6       	ldi	r18, 0x60	; 96
     16a:	b5 00       	.word	0x00b5	; ????
     16c:	d0 ed       	ldi	r29, 0xD0	; 208
     16e:	90 2e       	mov	r9, r16
     170:	03 00       	.word	0x0003	; ????
     172:	94 35       	cpi	r25, 0x54	; 84
     174:	77 05       	cpc	r23, r7
     176:	00 80       	ld	r0, Z
     178:	84 1e       	adc	r8, r20
     17a:	08 00       	.word	0x0008	; ????
     17c:	00 20       	and	r0, r0
     17e:	4e 0a       	sbc	r4, r30
     180:	00 00       	nop
     182:	00 c8       	rjmp	.-4096   	; 0xfffff184 <__eeprom_end+0xff7ef184>
     184:	0c 33       	cpi	r16, 0x3C	; 60
     186:	33 33       	cpi	r19, 0x33	; 51
     188:	33 0f       	add	r19, r19
     18a:	98 6e       	ori	r25, 0xE8	; 232
     18c:	12 83       	std	Z+2, r17	; 0x02
     18e:	11 41       	sbci	r17, 0x11	; 17
     190:	ef 8d       	ldd	r30, Y+31	; 0x1f
     192:	21 14       	cp	r2, r1
     194:	89 3b       	cpi	r24, 0xB9	; 185
     196:	e6 55       	subi	r30, 0x56	; 86
     198:	16 cf       	rjmp	.-468    	; 0xffffffc6 <__eeprom_end+0xff7effc6>
     19a:	fe e6       	ldi	r31, 0x6E	; 110
     19c:	db 18       	sub	r13, r11
     19e:	d1 84       	ldd	r13, Z+9	; 0x09
     1a0:	4b 38       	cpi	r20, 0x8B	; 139
     1a2:	1b f7       	brvc	.-58     	; 0x16a <__trampolines_end+0xa8>
     1a4:	7c 1d       	adc	r23, r12
     1a6:	90 1d       	adc	r25, r0
     1a8:	a4 bb       	out	0x14, r26	; 20
     1aa:	e4 24       	eor	r14, r4
     1ac:	20 32       	cpi	r18, 0x20	; 32
     1ae:	84 72       	andi	r24, 0x24	; 36
     1b0:	5e 22       	and	r5, r30
     1b2:	81 00       	.word	0x0081	; ????
     1b4:	c9 f1       	breq	.+114    	; 0x228 <main+0x28>
     1b6:	24 ec       	ldi	r18, 0xC4	; 196
     1b8:	a1 e5       	ldi	r26, 0x51	; 81
     1ba:	3d 27       	eor	r19, r29

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	df e3       	ldi	r29, 0x3F	; 63
     1c6:	de bf       	out	0x3e, r29	; 62

000001c8 <__do_copy_data>:
     1c8:	18 e3       	ldi	r17, 0x38	; 56
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b8 e3       	ldi	r27, 0x38	; 56
     1ce:	ea e8       	ldi	r30, 0x8A	; 138
     1d0:	f5 e2       	ldi	r31, 0x25	; 37
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
     1d4:	05 90       	lpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	a6 31       	cpi	r26, 0x16	; 22
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>

000001de <__do_clear_bss>:
     1de:	28 e3       	ldi	r18, 0x38	; 56
     1e0:	a6 e1       	ldi	r26, 0x16	; 22
     1e2:	b8 e3       	ldi	r27, 0x38	; 56
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	ab 36       	cpi	r26, 0x6B	; 107
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 00 01 	call	0x200	; 0x200 <main>
     1f2:	0c 94 8e 12 	jmp	0x251c	; 0x251c <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <atmel_start_init>:
     1fa:	0e 94 22 02 	call	0x444	; 0x444 <system_init>
     1fe:	08 95       	ret

00000200 <main>:

int main(void)
{	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     200:	0e 94 fd 00 	call	0x1fa	; 0x1fa <atmel_start_init>
	For some reason, instead of the reference voltage being 4.32v, it is 3.3v. 
	A plausible explanation is that the microchip does not up the voltage, so that if the microchip is only ever 
	supplied with 3.3v, it will output 3.3v as the max.
	*/
	
	VREF.CTRLA |= VREF_DAC0REFSEL_4V34_gc;
     204:	e0 ea       	ldi	r30, 0xA0	; 160
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	83 60       	ori	r24, 0x03	; 3
     20c:	80 83       	st	Z, r24
	while (1)
	{
		// We don't want to update the neuron too often because of various reasons. The tinyISR_getflag is set every ms, and so the loop is only run once every ms.  
		if(tinyISR_getflag())
     20e:	0e 94 4c 06 	call	0xc98	; 0xc98 <tinyISR_getflag>
     212:	88 23       	and	r24, r24
     214:	e1 f3       	breq	.-8      	; 0x20e <main+0xe>
		{
			tinyCharge_update_charging_mode();
     216:	0e 94 6d 04 	call	0x8da	; 0x8da <tinyCharge_update_charging_mode>
			
			if(tinyCharge_is_connected_to_charger()){
     21a:	0e 94 35 04 	call	0x86a	; 0x86a <tinyCharge_is_connected_to_charger>
     21e:	88 23       	and	r24, r24
     220:	b9 f0       	breq	.+46     	; 0x250 <main+0x50>
				// Charge loop
				
				if(tinyCharge_is_fully_charged()){
     222:	0e 94 38 04 	call	0x870	; 0x870 <tinyCharge_is_fully_charged>
     226:	88 23       	and	r24, r24
     228:	49 f0       	breq	.+18     	; 0x23c <main+0x3c>
					tinyLED_set_color(INN_LED, CHARGING_DONE_COLOR);
     22a:	63 e0       	ldi	r22, 0x03	; 3
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <tinyLED_set_color>
					tinyLED_set_color(OUT_LED, OFF);
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 63 06 	call	0xcc6	; 0xcc6 <tinyLED_set_color>
     23a:	11 c0       	rjmp	.+34     	; 0x25e <main+0x5e>
				}
				else{
					tinyLED_set_color_mode(OUT_LED, CHARGING_COLOR, SWING);
     23c:	42 e0       	ldi	r20, 0x02	; 2
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 74 06 	call	0xce8	; 0xce8 <tinyLED_set_color_mode>
					tinyLED_set_color(INN_LED, OFF);
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <tinyLED_set_color>
     24e:	07 c0       	rjmp	.+14     	; 0x25e <main+0x5e>
			}
			else{
				// Main loop			
				
				// Set LED
				if(tinyLED_get_color(OUT_LED) == OFF && PING_COLOR != OFF){
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <tinyLED_get_color>
					tinyLED_set_color_mode(OUT_LED, PING_COLOR, PING);
				}
				
				// Update button	
				tinyButton_update();
     256:	0e 94 d6 03 	call	0x7ac	; 0x7ac <tinyButton_update>
				
				// Update the potential (This is where most of the important stuff happens)
				tinyPotential_update();
     25a:	0e 94 96 08 	call	0x112c	; 0x112c <tinyPotential_update>
			}
			// Update LED
			tinyLED_update();
     25e:	0e 94 b4 06 	call	0xd68	; 0xd68 <tinyLED_update>
				
			// Switch transistors
			tinyCharge_set_transistors();
     262:	0e 94 97 04 	call	0x92e	; 0x92e <tinyCharge_set_transistors>
			
			// Prepare for next cycle
			tinyISR_setflag(false);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 49 06 	call	0xc92	; 0xc92 <tinyISR_setflag>
			tinyDebugger_send_uint32("time", tinyTime_now());
     26c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <tinyTime_now>
     270:	ab 01       	movw	r20, r22
     272:	bc 01       	movw	r22, r24
     274:	80 e2       	ldi	r24, 0x20	; 32
     276:	95 ea       	ldi	r25, 0xA5	; 165
     278:	0e 94 9f 04 	call	0x93e	; 0x93e <tinyDebugger_send_uint32>
			tinyDebugger_end_line();
     27c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <tinyDebugger_end_line>
     280:	c6 cf       	rjmp	.-116    	; 0x20e <main+0xe>

00000282 <ADC_0_init>:
     282:	e0 e4       	ldi	r30, 0x40	; 64
     284:	f6 e0       	ldi	r31, 0x06	; 6
     286:	80 e1       	ldi	r24, 0x10	; 16
     288:	82 83       	std	Z+2, r24	; 0x02
     28a:	85 e0       	ldi	r24, 0x05	; 5
     28c:	80 83       	st	Z, r24
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	08 95       	ret

00000292 <ADC_0_is_conversion_done>:
     292:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     296:	81 70       	andi	r24, 0x01	; 1
     298:	08 95       	ret

0000029a <ADC_0_get_conversion>:
     29a:	e0 e4       	ldi	r30, 0x40	; 64
     29c:	f6 e0       	ldi	r31, 0x06	; 6
     29e:	86 83       	std	Z+6, r24	; 0x06
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 87       	std	Z+8, r24	; 0x08
     2a4:	0e 94 49 01 	call	0x292	; 0x292 <ADC_0_is_conversion_done>
     2a8:	88 23       	and	r24, r24
     2aa:	e1 f3       	breq	.-8      	; 0x2a4 <ADC_0_get_conversion+0xa>
     2ac:	e0 e4       	ldi	r30, 0x40	; 64
     2ae:	f6 e0       	ldi	r31, 0x06	; 6
     2b0:	20 89       	ldd	r18, Z+16	; 0x10
     2b2:	31 89       	ldd	r19, Z+17	; 0x11
     2b4:	93 85       	ldd	r25, Z+11	; 0x0b
     2b6:	91 60       	ori	r25, 0x01	; 1
     2b8:	93 87       	std	Z+11, r25	; 0x0b
     2ba:	c9 01       	movw	r24, r18
     2bc:	08 95       	ret

000002be <BOD_init>:
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	08 95       	ret

000002c2 <DIGITAL_GLUE_LOGIC_0_init>:
     2c2:	e0 ec       	ldi	r30, 0xC0	; 192
     2c4:	f1 e0       	ldi	r31, 0x01	; 1
     2c6:	28 ea       	ldi	r18, 0xA8	; 168
     2c8:	20 87       	std	Z+8, r18	; 0x08
     2ca:	98 e0       	ldi	r25, 0x08	; 8
     2cc:	97 83       	std	Z+7, r25	; 0x07
     2ce:	8b eb       	ldi	r24, 0xBB	; 187
     2d0:	86 83       	std	Z+6, r24	; 0x06
     2d2:	39 e0       	ldi	r19, 0x09	; 9
     2d4:	35 83       	std	Z+5, r19	; 0x05
     2d6:	24 87       	std	Z+12, r18	; 0x0c
     2d8:	93 87       	std	Z+11, r25	; 0x0b
     2da:	82 87       	std	Z+10, r24	; 0x0a
     2dc:	81 e4       	ldi	r24, 0x41	; 65
     2de:	80 83       	st	Z, r24
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	08 95       	ret

000002e4 <CLKCTRL_init>:
     2e4:	47 e0       	ldi	r20, 0x07	; 7
     2e6:	68 ed       	ldi	r22, 0xD8	; 216
     2e8:	8c e7       	ldi	r24, 0x7C	; 124
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 4f 02 	call	0x49e	; 0x49e <protected_write_io>
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	68 ed       	ldi	r22, 0xD8	; 216
     2f4:	81 e6       	ldi	r24, 0x61	; 97
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 4f 02 	call	0x49e	; 0x49e <protected_write_io>
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret

00000300 <CPUINT_init>:
     300:	78 94       	sei
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	08 95       	ret

00000306 <DAC_0_init>:
     306:	81 e4       	ldi	r24, 0x41	; 65
     308:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	08 95       	ret

00000310 <DAC_0_uninit>:
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	08 95       	ret

0000031a <DAC_0_enable>:
     31a:	e0 ea       	ldi	r30, 0xA0	; 160
     31c:	f6 e0       	ldi	r31, 0x06	; 6
     31e:	80 81       	ld	r24, Z
     320:	81 60       	ori	r24, 0x01	; 1
     322:	80 83       	st	Z, r24
     324:	08 95       	ret

00000326 <DAC_0_disable>:
     326:	e0 ea       	ldi	r30, 0xA0	; 160
     328:	f6 e0       	ldi	r31, 0x06	; 6
     32a:	80 81       	ld	r24, Z
     32c:	8e 7f       	andi	r24, 0xFE	; 254
     32e:	80 83       	st	Z, r24
     330:	08 95       	ret

00000332 <DAC_0_set_output>:
     332:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     336:	08 95       	ret

00000338 <mcu_init>:
     338:	e0 e1       	ldi	r30, 0x10	; 16
     33a:	f4 e0       	ldi	r31, 0x04	; 4
     33c:	80 81       	ld	r24, Z
     33e:	88 60       	ori	r24, 0x08	; 8
     340:	81 93       	st	Z+, r24
     342:	e8 31       	cpi	r30, 0x18	; 24
     344:	84 e0       	ldi	r24, 0x04	; 4
     346:	f8 07       	cpc	r31, r24
     348:	c9 f7       	brne	.-14     	; 0x33c <mcu_init+0x4>
     34a:	e0 e3       	ldi	r30, 0x30	; 48
     34c:	f4 e0       	ldi	r31, 0x04	; 4
     34e:	80 81       	ld	r24, Z
     350:	88 60       	ori	r24, 0x08	; 8
     352:	81 93       	st	Z+, r24
     354:	e8 33       	cpi	r30, 0x38	; 56
     356:	84 e0       	ldi	r24, 0x04	; 4
     358:	f8 07       	cpc	r31, r24
     35a:	c9 f7       	brne	.-14     	; 0x34e <mcu_init+0x16>
     35c:	e0 e5       	ldi	r30, 0x50	; 80
     35e:	f4 e0       	ldi	r31, 0x04	; 4
     360:	80 81       	ld	r24, Z
     362:	88 60       	ori	r24, 0x08	; 8
     364:	81 93       	st	Z+, r24
     366:	e8 35       	cpi	r30, 0x58	; 88
     368:	84 e0       	ldi	r24, 0x04	; 4
     36a:	f8 07       	cpc	r31, r24
     36c:	c9 f7       	brne	.-14     	; 0x360 <mcu_init+0x28>
     36e:	08 95       	ret

00000370 <ADC_0_initialization>:
     370:	e5 e1       	ldi	r30, 0x15	; 21
     372:	f4 e0       	ldi	r31, 0x04	; 4
     374:	80 81       	ld	r24, Z
     376:	88 7f       	andi	r24, 0xF8	; 248
     378:	84 60       	ori	r24, 0x04	; 4
     37a:	80 83       	st	Z, r24
     37c:	80 81       	ld	r24, Z
     37e:	87 7f       	andi	r24, 0xF7	; 247
     380:	80 83       	st	Z, r24
     382:	e7 e1       	ldi	r30, 0x17	; 23
     384:	f4 e0       	ldi	r31, 0x04	; 4
     386:	80 81       	ld	r24, Z
     388:	88 7f       	andi	r24, 0xF8	; 248
     38a:	84 60       	ori	r24, 0x04	; 4
     38c:	80 83       	st	Z, r24
     38e:	80 81       	ld	r24, Z
     390:	87 7f       	andi	r24, 0xF7	; 247
     392:	80 83       	st	Z, r24
     394:	e0 e5       	ldi	r30, 0x50	; 80
     396:	f4 e0       	ldi	r31, 0x04	; 4
     398:	80 81       	ld	r24, Z
     39a:	88 7f       	andi	r24, 0xF8	; 248
     39c:	84 60       	ori	r24, 0x04	; 4
     39e:	80 83       	st	Z, r24
     3a0:	80 81       	ld	r24, Z
     3a2:	87 7f       	andi	r24, 0xF7	; 247
     3a4:	80 83       	st	Z, r24
     3a6:	e1 e5       	ldi	r30, 0x51	; 81
     3a8:	f4 e0       	ldi	r31, 0x04	; 4
     3aa:	80 81       	ld	r24, Z
     3ac:	88 7f       	andi	r24, 0xF8	; 248
     3ae:	84 60       	ori	r24, 0x04	; 4
     3b0:	80 83       	st	Z, r24
     3b2:	80 81       	ld	r24, Z
     3b4:	87 7f       	andi	r24, 0xF7	; 247
     3b6:	80 83       	st	Z, r24
     3b8:	e3 e5       	ldi	r30, 0x53	; 83
     3ba:	f4 e0       	ldi	r31, 0x04	; 4
     3bc:	80 81       	ld	r24, Z
     3be:	88 7f       	andi	r24, 0xF8	; 248
     3c0:	84 60       	ori	r24, 0x04	; 4
     3c2:	80 83       	st	Z, r24
     3c4:	80 81       	ld	r24, Z
     3c6:	87 7f       	andi	r24, 0xF7	; 247
     3c8:	80 83       	st	Z, r24
     3ca:	0e 94 41 01 	call	0x282	; 0x282 <ADC_0_init>
     3ce:	08 95       	ret

000003d0 <USART_0_initialization>:
     3d0:	23 98       	cbi	0x04, 3	; 4
     3d2:	e3 e3       	ldi	r30, 0x33	; 51
     3d4:	f4 e0       	ldi	r31, 0x04	; 4
     3d6:	80 81       	ld	r24, Z
     3d8:	87 7f       	andi	r24, 0xF7	; 247
     3da:	80 83       	st	Z, r24
     3dc:	22 9a       	sbi	0x04, 2	; 4
     3de:	2a 98       	cbi	0x05, 2	; 5
     3e0:	0e 94 89 02 	call	0x512	; 0x512 <USART_0_init>
     3e4:	08 95       	ret

000003e6 <TIMER_0_initialization>:
     3e6:	25 9a       	sbi	0x04, 5	; 4
     3e8:	2d 98       	cbi	0x05, 5	; 5
     3ea:	e0 e0       	ldi	r30, 0x00	; 0
     3ec:	f2 e0       	ldi	r31, 0x02	; 2
     3ee:	82 81       	ldd	r24, Z+2	; 0x02
     3f0:	84 60       	ori	r24, 0x04	; 4
     3f2:	82 83       	std	Z+2, r24	; 0x02
     3f4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <TIMER_0_init>
     3f8:	08 95       	ret

000003fa <DIGITAL_GLUE_LOGIC_0_initialization>:
     3fa:	24 9a       	sbi	0x04, 4	; 4
     3fc:	2c 98       	cbi	0x05, 4	; 5
     3fe:	e0 e0       	ldi	r30, 0x00	; 0
     400:	f2 e0       	ldi	r31, 0x02	; 2
     402:	80 81       	ld	r24, Z
     404:	80 61       	ori	r24, 0x10	; 16
     406:	80 83       	st	Z, r24
     408:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIGITAL_GLUE_LOGIC_0_init>
     40c:	08 95       	ret

0000040e <SPI_0_initialization>:
     40e:	02 98       	cbi	0x00, 2	; 0
     410:	e2 e1       	ldi	r30, 0x12	; 18
     412:	f4 e0       	ldi	r31, 0x04	; 4
     414:	80 81       	ld	r24, Z
     416:	87 7f       	andi	r24, 0xF7	; 247
     418:	80 83       	st	Z, r24
     41a:	01 9a       	sbi	0x00, 1	; 0
     41c:	09 98       	cbi	0x01, 1	; 1
     41e:	03 9a       	sbi	0x00, 3	; 0
     420:	0b 98       	cbi	0x01, 3	; 1
     422:	04 9a       	sbi	0x00, 4	; 0
     424:	0c 98       	cbi	0x01, 4	; 1
     426:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_0_init>
     42a:	08 95       	ret

0000042c <DAC_0_initialization>:
     42c:	e6 e1       	ldi	r30, 0x16	; 22
     42e:	f4 e0       	ldi	r31, 0x04	; 4
     430:	80 81       	ld	r24, Z
     432:	88 7f       	andi	r24, 0xF8	; 248
     434:	84 60       	ori	r24, 0x04	; 4
     436:	80 83       	st	Z, r24
     438:	80 81       	ld	r24, Z
     43a:	87 7f       	andi	r24, 0xF7	; 247
     43c:	80 83       	st	Z, r24
     43e:	0e 94 83 01 	call	0x306	; 0x306 <DAC_0_init>
     442:	08 95       	ret

00000444 <system_init>:
     444:	0e 94 9c 01 	call	0x338	; 0x338 <mcu_init>
     448:	26 98       	cbi	0x04, 6	; 4
     44a:	e6 e3       	ldi	r30, 0x36	; 54
     44c:	f4 e0       	ldi	r31, 0x04	; 4
     44e:	80 81       	ld	r24, Z
     450:	87 7f       	andi	r24, 0xF7	; 247
     452:	80 83       	st	Z, r24
     454:	27 98       	cbi	0x04, 7	; 4
     456:	e7 e3       	ldi	r30, 0x37	; 55
     458:	f4 e0       	ldi	r31, 0x04	; 4
     45a:	80 81       	ld	r24, Z
     45c:	87 7f       	andi	r24, 0xF7	; 247
     45e:	80 83       	st	Z, r24
     460:	42 98       	cbi	0x08, 2	; 8
     462:	e2 e5       	ldi	r30, 0x52	; 82
     464:	f4 e0       	ldi	r31, 0x04	; 4
     466:	80 81       	ld	r24, Z
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	80 83       	st	Z, r24
     46c:	45 9a       	sbi	0x08, 5	; 8
     46e:	4d 9a       	sbi	0x09, 5	; 9
     470:	0e 94 72 01 	call	0x2e4	; 0x2e4 <CLKCTRL_init>
     474:	0e 94 53 02 	call	0x4a6	; 0x4a6 <RTC_0_init>
     478:	0e 94 b8 01 	call	0x370	; 0x370 <ADC_0_initialization>
     47c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <USART_0_initialization>
     480:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <TIMER_0_initialization>
     484:	0e 94 fd 01 	call	0x3fa	; 0x3fa <DIGITAL_GLUE_LOGIC_0_initialization>
     488:	0e 94 07 02 	call	0x40e	; 0x40e <SPI_0_initialization>
     48c:	0e 94 16 02 	call	0x42c	; 0x42c <DAC_0_initialization>
     490:	0e 94 80 01 	call	0x300	; 0x300 <CPUINT_init>
     494:	0e 94 6f 02 	call	0x4de	; 0x4de <SLPCTRL_init>
     498:	0e 94 5f 01 	call	0x2be	; 0x2be <BOD_init>
     49c:	08 95       	ret

0000049e <protected_write_io>:
     49e:	fc 01       	movw	r30, r24
     4a0:	64 bf       	out	0x34, r22	; 52
     4a2:	40 83       	st	Z, r20
     4a4:	08 95       	ret

000004a6 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     4a6:	e0 e4       	ldi	r30, 0x40	; 64
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	81 81       	ldd	r24, Z+1	; 0x01
     4ac:	81 11       	cpse	r24, r1
     4ae:	fd cf       	rjmp	.-6      	; 0x4aa <RTC_0_init+0x4>
	}

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	RTC.CNT = 0x20; /* Counter: 0x20 */
     4b0:	e0 e4       	ldi	r30, 0x40	; 64
     4b2:	f1 e0       	ldi	r31, 0x01	; 1
     4b4:	80 e2       	ldi	r24, 0x20	; 32
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	80 87       	std	Z+8, r24	; 0x08
     4ba:	91 87       	std	Z+9, r25	; 0x09

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     4bc:	81 e8       	ldi	r24, 0x81	; 129
     4be:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x20 / TIMESCALE; /* Period: 0x20 */
     4c0:	80 e8       	ldi	r24, 0x80	; 128
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	82 87       	std	Z+10, r24	; 0x0a
     4c6:	93 87       	std	Z+11, r25	; 0x0b

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	RTC.DBGCTRL = 1 << RTC_DBGRUN_bp; /* Run in debug: enabled */
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	85 83       	std	Z+5, r24	; 0x05

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
     4cc:	82 83       	std	Z+2, r24	; 0x02
	              | 1 << RTC_OVF_bp; /* Overflow Interrupt enable: enabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     4ce:	81 89       	ldd	r24, Z+17	; 0x11
     4d0:	81 11       	cpse	r24, r1
     4d2:	fd cf       	rjmp	.-6      	; 0x4ce <RTC_0_init+0x28>
	}

	RTC.PITCTRLA = RTC_PERIOD_OFF_gc    /* Off */
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	08 95       	ret

000004de <SLPCTRL_init>:
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	08 95       	ret

000004e2 <SPI_0_init>:
     4e2:	e0 e2       	ldi	r30, 0x20	; 32
     4e4:	f8 e0       	ldi	r31, 0x08	; 8
     4e6:	83 e2       	ldi	r24, 0x23	; 35
     4e8:	80 83       	st	Z, r24
     4ea:	84 e0       	ldi	r24, 0x04	; 4
     4ec:	81 83       	std	Z+1, r24	; 0x01
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	08 95       	ret

000004f2 <TIMER_0_init>:
     4f2:	e0 e0       	ldi	r30, 0x00	; 0
     4f4:	fa e0       	ldi	r31, 0x0A	; 10
     4f6:	84 e0       	ldi	r24, 0x04	; 4
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	84 a7       	std	Z+44, r24	; 0x2c
     4fc:	95 a7       	std	Z+45, r25	; 0x2d
     4fe:	83 e4       	ldi	r24, 0x43	; 67
     500:	81 83       	std	Z+1, r24	; 0x01
     502:	84 e0       	ldi	r24, 0x04	; 4
     504:	82 83       	std	Z+2, r24	; 0x02
     506:	87 e0       	ldi	r24, 0x07	; 7
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	86 a3       	std	Z+38, r24	; 0x26
     50c:	97 a3       	std	Z+39, r25	; 0x27
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	08 95       	ret

00000512 <USART_0_init>:
     512:	e0 e0       	ldi	r30, 0x00	; 0
     514:	f8 e0       	ldi	r31, 0x08	; 8
     516:	8b e5       	ldi	r24, 0x5B	; 91
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	80 87       	std	Z+8, r24	; 0x08
     51c:	91 87       	std	Z+9, r25	; 0x09
     51e:	80 ec       	ldi	r24, 0xC0	; 192
     520:	86 83       	std	Z+6, r24	; 0x06
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	98 e3       	ldi	r25, 0x38	; 56
     526:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <__iob+0x2>
     52a:	90 93 68 38 	sts	0x3868, r25	; 0x803868 <__iob+0x3>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	08 95       	ret

00000532 <USART_0_write>:
     532:	e0 e0       	ldi	r30, 0x00	; 0
     534:	f8 e0       	ldi	r31, 0x08	; 8
     536:	94 81       	ldd	r25, Z+4	; 0x04
     538:	95 ff       	sbrs	r25, 5
     53a:	fd cf       	rjmp	.-6      	; 0x536 <USART_0_write+0x4>
     53c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     540:	08 95       	ret

00000542 <USART_0_printCHAR>:
     542:	0e 94 99 02 	call	0x532	; 0x532 <USART_0_write>
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	08 95       	ret

0000054c <tinyAxon_add_pulse>:
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
	{
		if(pulse_queue[i] == 0){
     54c:	20 91 16 38 	lds	r18, 0x3816	; 0x803816 <__data_end>
     550:	30 91 17 38 	lds	r19, 0x3817	; 0x803817 <__data_end+0x1>
     554:	23 2b       	or	r18, r19
     556:	51 f0       	breq	.+20     	; 0x56c <tinyAxon_add_pulse+0x20>
     558:	e8 e1       	ldi	r30, 0x18	; 24
     55a:	f8 e3       	ldi	r31, 0x38	; 56
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	b9 01       	movw	r22, r18
     562:	41 91       	ld	r20, Z+
     564:	51 91       	ld	r21, Z+
     566:	45 2b       	or	r20, r21
     568:	81 f4       	brne	.+32     	; 0x58a <tinyAxon_add_pulse+0x3e>
     56a:	02 c0       	rjmp	.+4      	; 0x570 <tinyAxon_add_pulse+0x24>
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
			pulse_queue[i] = new_pulse;
     570:	66 0f       	add	r22, r22
     572:	77 1f       	adc	r23, r23
     574:	fb 01       	movw	r30, r22
     576:	ea 5e       	subi	r30, 0xEA	; 234
     578:	f7 4c       	sbci	r31, 0xC7	; 199
     57a:	80 83       	st	Z, r24
     57c:	91 83       	std	Z+1, r25	; 0x01
			pulses_in_queue++;
     57e:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     582:	8f 5f       	subi	r24, 0xFF	; 255
     584:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <pulses_in_queue>
			// We return so we only ever add one
			break;
     588:	08 95       	ret
     58a:	2f 5f       	subi	r18, 0xFF	; 255
     58c:	3f 4f       	sbci	r19, 0xFF	; 255
*/
static void tinyAxon_add_pulse(uint16_t new_pulse)
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     58e:	2a 30       	cpi	r18, 0x0A	; 10
     590:	31 05       	cpc	r19, r1
     592:	31 f7       	brne	.-52     	; 0x560 <tinyAxon_add_pulse+0x14>
     594:	08 95       	ret

00000596 <tinyAxon_is_firing>:
// DAC has no DAC_0_get_output, so we keep track of this here.
uint8_t axonOutputValue = 0;


_Bool tinyAxon_is_firing(){
	return axonOutputValue != NO_SIGNAL_OUTPUT;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <axonOutputValue>
     59c:	91 11       	cpse	r25, r1
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <tinyAxon_is_firing+0xc>
     5a0:	80 e0       	ldi	r24, 0x00	; 0
}
     5a2:	08 95       	ret

000005a4 <find_newest_pulse>:
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
     5a4:	40 91 16 38 	lds	r20, 0x3816	; 0x803816 <__data_end>
     5a8:	50 91 17 38 	lds	r21, 0x3817	; 0x803817 <__data_end+0x1>
     5ac:	e8 e1       	ldi	r30, 0x18	; 24
     5ae:	f8 e3       	ldi	r31, 0x38	; 56
	
// This function will be used with pulse_queue to find the newest pulse
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
     5b0:	80 e0       	ldi	r24, 0x00	; 0
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     5b2:	91 e0       	ldi	r25, 0x01	; 1
		if (pulse_queue[current_index] > max) {
     5b4:	21 91       	ld	r18, Z+
     5b6:	31 91       	ld	r19, Z+
     5b8:	42 17       	cp	r20, r18
     5ba:	53 07       	cpc	r21, r19
     5bc:	10 f4       	brcc	.+4      	; 0x5c2 <find_newest_pulse+0x1e>
     5be:	89 2f       	mov	r24, r25
			return_index = current_index;
			max = pulse_queue[current_index];
     5c0:	a9 01       	movw	r20, r18
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     5c2:	9f 5f       	subi	r25, 0xFF	; 255
     5c4:	9a 30       	cpi	r25, 0x0A	; 10
     5c6:	b1 f7       	brne	.-20     	; 0x5b4 <find_newest_pulse+0x10>
			return_index = current_index;
			max = pulse_queue[current_index];
		}
	}
	return return_index;
}
     5c8:	08 95       	ret

000005ca <tinyAxon_stop_sending_pulse>:
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
}

void tinyAxon_stop_sending_pulse()
{
	DAC_0_set_output(NO_SIGNAL_OUTPUT);
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 99 01 	call	0x332	; 0x332 <DAC_0_set_output>
	axonOutputValue=NO_SIGNAL_OUTPUT;
     5d2:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <axonOutputValue>
     5d6:	08 95       	ret

000005d8 <tinyAxon_remove_pulse>:

/*
If the potential is very low, we want to try to remove a pulse.
*/
bool tinyAxon_remove_pulse(void)
{
     5d8:	cf 93       	push	r28
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
     5da:	c0 91 2a 38 	lds	r28, 0x382A	; 0x80382a <pulses_in_queue>
     5de:	cc 23       	and	r28, r28
     5e0:	c9 f0       	breq	.+50     	; 0x614 <tinyAxon_remove_pulse+0x3c>
		//There was no pulse to remove.
		return false;
	}
	else{
		// If we are to remove a pulse, we want to remove the one that will fire last.
		uint8_t pulse_index = find_newest_pulse();
     5e2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <find_newest_pulse>
		uint16_t newest_pulse = pulse_queue[pulse_index];
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	fc 01       	movw	r30, r24
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	ea 5e       	subi	r30, 0xEA	; 234
     5f0:	f7 4c       	sbci	r31, 0xC7	; 199
	
		// Now we want to check if the pulse is too far away to be affected by the low potential, or close enough that we decide to remove it.
		// (When we say that the pulse is too far away, it refers to the biological process of how the potential spreads from Dendrites to axon).
		if(newest_pulse > PULSE_NO_RETURN_TIME){
     5f2:	20 81       	ld	r18, Z
     5f4:	31 81       	ldd	r19, Z+1	; 0x01
     5f6:	2d 33       	cpi	r18, 0x3D	; 61
     5f8:	31 05       	cpc	r19, r1
     5fa:	70 f0       	brcs	.+28     	; 0x618 <tinyAxon_remove_pulse+0x40>
			// We decided to remove the pulse
			pulse_queue[pulse_index] = 0;
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	fc 01       	movw	r30, r24
     602:	ea 5e       	subi	r30, 0xEA	; 234
     604:	f7 4c       	sbci	r31, 0xC7	; 199
     606:	10 82       	st	Z, r1
     608:	11 82       	std	Z+1, r1	; 0x01
			pulses_in_queue--;
     60a:	c1 50       	subi	r28, 0x01	; 1
     60c:	c0 93 2a 38 	sts	0x382A, r28	; 0x80382a <pulses_in_queue>
			return true;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	03 c0       	rjmp	.+6      	; 0x61a <tinyAxon_remove_pulse+0x42>
bool tinyAxon_remove_pulse(void)
{
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
		//There was no pulse to remove.
		return false;
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	01 c0       	rjmp	.+2      	; 0x61a <tinyAxon_remove_pulse+0x42>
			pulses_in_queue--;
			return true;
		}
		// Here we have found that there is a pulse queued, but it is old enough to let pass anyway, so now we need to put it back into the queue.
		else{
			return false;
     618:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <tinyAxon_update_potential>:
/*
Decides whether or not the axon should fire
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	6b 01       	movw	r12, r22
     628:	7c 01       	movw	r14, r24
	//While the neuron has enough potential to fire, we want to fire more
	while (potential >= THRESHOLD_POTENTIAL)
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	48 ec       	ldi	r20, 0xC8	; 200
     630:	51 e4       	ldi	r21, 0x41	; 65
     632:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__gesf2>
     636:	88 23       	and	r24, r24
     638:	bc f1       	brlt	.+110    	; 0x6a8 <tinyAxon_update_potential+0x8a>
	{
		// We have to check if there are already queued pulses, so that the frequency never exceeds FIRE_DELAY
		if(pulses_in_queue>0){
     63a:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     63e:	88 23       	and	r24, r24
     640:	b1 f0       	breq	.+44     	; 0x66e <tinyAxon_update_potential+0x50>
			uint16_t newest_pulse = pulse_queue[find_newest_pulse()];
     642:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <find_newest_pulse>
     646:	e8 2f       	mov	r30, r24
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	ea 5e       	subi	r30, 0xEA	; 234
     650:	f7 4c       	sbci	r31, 0xC7	; 199
			
			// There is at least one pulse in the queue, and it is "so close", that we need to offset the new pulse, so that we keep at least
			// one FIRE_DELAY between each pulse
			if(newest_pulse + FIRE_DELAY > TRAVLE_DELAY){
     652:	80 81       	ld	r24, Z
     654:	91 81       	ldd	r25, Z+1	; 0x01
     656:	0a 96       	adiw	r24, 0x0a	; 10
     658:	85 36       	cpi	r24, 0x65	; 101
     65a:	91 05       	cpc	r25, r1
     65c:	18 f0       	brcs	.+6      	; 0x664 <tinyAxon_update_potential+0x46>
				tinyAxon_add_pulse(newest_pulse + FIRE_DELAY);
     65e:	0e 94 a6 02 	call	0x54c	; 0x54c <tinyAxon_add_pulse>
     662:	09 c0       	rjmp	.+18     	; 0x676 <tinyAxon_update_potential+0x58>
			}
			// There is at least one pulse in the queue, but it's "far enough away" to ignore
			else{
				tinyAxon_add_pulse(TRAVLE_DELAY);
     664:	84 e6       	ldi	r24, 0x64	; 100
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 a6 02 	call	0x54c	; 0x54c <tinyAxon_add_pulse>
     66c:	04 c0       	rjmp	.+8      	; 0x676 <tinyAxon_update_potential+0x58>
			}
		}
		// There are no pulses in the queue, so we add a pulse as normal
		else{
			tinyAxon_add_pulse(TRAVLE_DELAY);		
     66e:	84 e6       	ldi	r24, 0x64	; 100
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 a6 02 	call	0x54c	; 0x54c <tinyAxon_add_pulse>
		}
		
		potential += POSTFIRE_POTENTIAL_REACTION; // This is usually defined as a negative value, don't be confused by the +=
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	48 ec       	ldi	r20, 0xC8	; 200
     67c:	51 e4       	ldi	r21, 0x41	; 65
     67e:	c7 01       	movw	r24, r14
     680:	b6 01       	movw	r22, r12
     682:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__subsf3>
     686:	6b 01       	movw	r12, r22
     688:	7c 01       	movw	r14, r24
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     68a:	44 e0       	ldi	r20, 0x04	; 4
     68c:	63 e0       	ldi	r22, 0x03	; 3
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 74 06 	call	0xce8	; 0xce8 <tinyLED_set_color_mode>
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
	//While the neuron has enough potential to fire, we want to fire more
	while (potential >= THRESHOLD_POTENTIAL)
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	48 ec       	ldi	r20, 0xC8	; 200
     69a:	51 e4       	ldi	r21, 0x41	; 65
     69c:	c7 01       	movw	r24, r14
     69e:	b6 01       	movw	r22, r12
     6a0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__gesf2>
     6a4:	88 23       	and	r24, r24
     6a6:	4c f6       	brge	.-110    	; 0x63a <tinyAxon_update_potential+0x1c>
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
	}
	
	// If the neuron has a very low potential, we want to remove a pulse from the queue (if there is one)
	if(potential < -THRESHOLD_POTENTIAL)
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	48 ec       	ldi	r20, 0xC8	; 200
     6ae:	51 ec       	ldi	r21, 0xC1	; 193
     6b0:	c7 01       	movw	r24, r14
     6b2:	b6 01       	movw	r22, r12
     6b4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__cmpsf2>
     6b8:	88 23       	and	r24, r24
     6ba:	0c f0       	brlt	.+2      	; 0x6be <tinyAxon_update_potential+0xa0>
     6bc:	46 c0       	rjmp	.+140    	; 0x74a <tinyAxon_update_potential+0x12c>
	{
		if(pulses_in_queue > 0) // Perhaps this should be a separate variable? For now, we will just simply use -THRESHOLD_POTENTIAL
     6be:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     6c2:	88 23       	and	r24, r24
     6c4:	11 f1       	breq	.+68     	; 0x70a <tinyAxon_update_potential+0xec>
		{
			// The neurons potential is low enough to attempt to remove a queued fire (Fire less)
			if(tinyAxon_remove_pulse())
     6c6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <tinyAxon_remove_pulse>
     6ca:	88 23       	and	r24, r24
     6cc:	f1 f1       	breq	.+124    	; 0x74a <tinyAxon_update_potential+0x12c>
			{
				// The potential has evened out a bit
				potential += THRESHOLD_POTENTIAL;
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	48 ec       	ldi	r20, 0xC8	; 200
     6d4:	51 e4       	ldi	r21, 0x41	; 65
     6d6:	c7 01       	movw	r24, r14
     6d8:	b6 01       	movw	r22, r12
     6da:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__addsf3>
     6de:	6b 01       	movw	r12, r22
     6e0:	7c 01       	movw	r14, r24
     6e2:	33 c0       	rjmp	.+102    	; 0x74a <tinyAxon_update_potential+0x12c>
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
		{
			if(pulse_queue[i] != 0){
     6e4:	80 81       	ld	r24, Z
     6e6:	91 81       	ldd	r25, Z+1	; 0x01
     6e8:	00 97       	sbiw	r24, 0x00	; 0
     6ea:	39 f0       	breq	.+14     	; 0x6fa <tinyAxon_update_potential+0xdc>
				pulse_queue[i]--;
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	80 83       	st	Z, r24
     6f0:	91 83       	std	Z+1, r25	; 0x01
				
				// If the time went from 1 to 0, we fire the axon
				if(pulse_queue[i] == 0){
     6f2:	89 2b       	or	r24, r25
     6f4:	11 f4       	brne	.+4      	; 0x6fa <tinyAxon_update_potential+0xdc>
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
	pulses_in_queue--;
     6f6:	41 50       	subi	r20, 0x01	; 1
Function to set firing.
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
     6f8:	51 e0       	ldi	r21, 0x01	; 1
     6fa:	32 96       	adiw	r30, 0x02	; 2
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     6fc:	e2 17       	cp	r30, r18
     6fe:	f3 07       	cpc	r31, r19
     700:	89 f7       	brne	.-30     	; 0x6e4 <tinyAxon_update_potential+0xc6>
     702:	50 93 2c 38 	sts	0x382C, r21	; 0x80382c <tinyAxon_should_fire>
     706:	40 93 2a 38 	sts	0x382A, r20	; 0x80382a <pulses_in_queue>
The function should set the DAC to fire for two
update cycles once the pulse flag is set high.
*/
static void tinyAxon_update_pulse_transmitter(void)
{
	if (tinyAxon_should_fire)
     70a:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <tinyAxon_should_fire>
     70e:	88 23       	and	r24, r24
     710:	91 f0       	breq	.+36     	; 0x736 <tinyAxon_update_potential+0x118>
	{
		tinyAxon_should_fire = false;
     712:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <tinyAxon_should_fire>
*/
static void tinyAxon_start_sending_pulse()
{
	if (NEURONTYPE == EXCITATORY_NEURON)
	{
		DAC_0_set_output(EXCITATORY_NEURON_OUTPUT);
     716:	86 ee       	ldi	r24, 0xE6	; 230
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 99 01 	call	0x332	; 0x332 <DAC_0_set_output>
		axonOutputValue=EXCITATORY_NEURON_OUTPUT;
     71e:	86 ee       	ldi	r24, 0xE6	; 230
     720:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <axonOutputValue>
	{
		DAC_0_set_output(INHIBITORY_NEURON_OUTPUT);
		axonOutputValue=INHIBITORY_NEURON_OUTPUT;
	}
	
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
     724:	44 e0       	ldi	r20, 0x04	; 4
     726:	65 e0       	ldi	r22, 0x05	; 5
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	0e 94 74 06 	call	0xce8	; 0xce8 <tinyLED_set_color_mode>
{
	if (tinyAxon_should_fire)
	{
		tinyAxon_should_fire = false;
		tinyAxon_start_sending_pulse();
		tinyAxon_has_just_fired = true;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <tinyAxon_has_just_fired>
     734:	15 c0       	rjmp	.+42     	; 0x760 <tinyAxon_update_potential+0x142>
		
	}
	else if (tinyAxon_has_just_fired)
     736:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <tinyAxon_has_just_fired>
     73a:	88 23       	and	r24, r24
     73c:	19 f0       	breq	.+6      	; 0x744 <tinyAxon_update_potential+0x126>
	{
		tinyAxon_has_just_fired = false;
     73e:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <tinyAxon_has_just_fired>
     742:	0e c0       	rjmp	.+28     	; 0x760 <tinyAxon_update_potential+0x142>
	}
	else if (!tinyAxon_has_just_fired && !tinyAxon_should_fire)
	{
		tinyAxon_stop_sending_pulse();
     744:	0e 94 e5 02 	call	0x5ca	; 0x5ca <tinyAxon_stop_sending_pulse>
     748:	0b c0       	rjmp	.+22     	; 0x760 <tinyAxon_update_potential+0x142>
			}
		}
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
     74a:	40 91 2a 38 	lds	r20, 0x382A	; 0x80382a <pulses_in_queue>
     74e:	44 23       	and	r20, r20
     750:	e1 f2       	breq	.-72     	; 0x70a <tinyAxon_update_potential+0xec>
     752:	50 91 2c 38 	lds	r21, 0x382C	; 0x80382c <tinyAxon_should_fire>
     756:	e6 e1       	ldi	r30, 0x16	; 22
     758:	f8 e3       	ldi	r31, 0x38	; 56
     75a:	2a e2       	ldi	r18, 0x2A	; 42
     75c:	38 e3       	ldi	r19, 0x38	; 56
     75e:	c2 cf       	rjmp	.-124    	; 0x6e4 <tinyAxon_update_potential+0xc6>
	}
	
	// Here we set the actual output of the DAC (Digital to Analog Converter)
	tinyAxon_update_pulse_transmitter();
	
	tinyDebugger_send_uint8("Axon", axonOutputValue);
     760:	60 91 2b 38 	lds	r22, 0x382B	; 0x80382b <axonOutputValue>
     764:	85 e2       	ldi	r24, 0x25	; 37
     766:	95 ea       	ldi	r25, 0xA5	; 165
     768:	0e 94 b1 04 	call	0x962	; 0x962 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("Pulses", pulses_in_queue);
     76c:	60 91 2a 38 	lds	r22, 0x382A	; 0x80382a <pulses_in_queue>
     770:	8a e2       	ldi	r24, 0x2A	; 42
     772:	95 ea       	ldi	r25, 0xA5	; 165
     774:	0e 94 b1 04 	call	0x962	; 0x962 <tinyDebugger_send_uint8>
	
	
	return potential;
}
     778:	c7 01       	movw	r24, r14
     77a:	b6 01       	movw	r22, r12
     77c:	ff 90       	pop	r15
     77e:	ef 90       	pop	r14
     780:	df 90       	pop	r13
     782:	cf 90       	pop	r12
     784:	08 95       	ret

00000786 <tinyAxon_check_charge_level>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     786:	66 b1       	in	r22, 0x06	; 6

_Bool tinyAxon_check_charge_level(void)
{
	// We check the AXON_CHECK_PIN. If it is hight while the axon is not firing, it must be connected to a charger
	
	tinyDebugger_send_uint8("Pulses", AXON_CHECK_PIN_get_level());
     788:	66 1f       	adc	r22, r22
     78a:	66 27       	eor	r22, r22
     78c:	66 1f       	adc	r22, r22
     78e:	8a e2       	ldi	r24, 0x2A	; 42
     790:	95 ea       	ldi	r25, 0xA5	; 165
     792:	0e 94 b1 04 	call	0x962	; 0x962 <tinyDebugger_send_uint8>
	return (AXON_CHECK_PIN_get_level() && !tinyAxon_has_just_fired);
     796:	37 9b       	sbis	0x06, 7	; 6
     798:	05 c0       	rjmp	.+10     	; 0x7a4 <tinyAxon_check_charge_level+0x1e>
     79a:	90 91 2d 38 	lds	r25, 0x382D	; 0x80382d <tinyAxon_has_just_fired>
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	89 27       	eor	r24, r25
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <tinyAxon_check_charge_level+0x22>
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	81 70       	andi	r24, 0x01	; 1
     7aa:	08 95       	ret

000007ac <tinyButton_update>:
/*
If the button has been let go, we change button_press to true. This only lasts one cycle, before it is set to false again.
If the button is held down for longer than PULSEMODE_BUTTON_PRESS_TIME, we toggle the pulse mode state.
*/
void tinyButton_update(void)
{
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
	button_press = false;
     7b4:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <button_press>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return VPORTC.IN & (1 << pin);
     7b8:	8a b1       	in	r24, 0x0a	; 10
	_Bool button_is_pushed_down = !BUTTON_PIN_get_level(); // The digital port will be read as low if the button is pushed down.
     7ba:	d1 e0       	ldi	r29, 0x01	; 1
     7bc:	c8 2f       	mov	r28, r24
     7be:	c4 70       	andi	r28, 0x04	; 4
     7c0:	82 fd       	sbrc	r24, 2
     7c2:	d0 e0       	ldi	r29, 0x00	; 0

	if (button_is_pushed_down && !button_was_pushed_down)
     7c4:	c1 11       	cpse	r28, r1
     7c6:	36 c0       	rjmp	.+108    	; 0x834 <tinyButton_update+0x88>
     7c8:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <button_was_pushed_down>
     7cc:	81 11       	cpse	r24, r1
     7ce:	0e c0       	rjmp	.+28     	; 0x7ec <tinyButton_update+0x40>
	{
		tinyButton_start_time = tinyTime_now();
     7d0:	0e 94 73 09 	call	0x12e6	; 0x12e6 <tinyTime_now>
     7d4:	60 93 2e 38 	sts	0x382E, r22	; 0x80382e <tinyButton_start_time>
     7d8:	70 93 2f 38 	sts	0x382F, r23	; 0x80382f <tinyButton_start_time+0x1>
     7dc:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <tinyButton_start_time+0x2>
     7e0:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <tinyButton_start_time+0x3>
	}
	if (button_is_pushed_down && button_was_pushed_down)
     7e4:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <button_was_pushed_down>
     7e8:	88 23       	and	r24, r24
     7ea:	69 f1       	breq	.+90     	; 0x846 <tinyButton_update+0x9a>
	{
		if ((tinyTime_now() - tinyButton_start_time) > PULSEMODE_BUTTON_PRESS_TIME)
     7ec:	0e 94 73 09 	call	0x12e6	; 0x12e6 <tinyTime_now>
     7f0:	00 91 2e 38 	lds	r16, 0x382E	; 0x80382e <tinyButton_start_time>
     7f4:	10 91 2f 38 	lds	r17, 0x382F	; 0x80382f <tinyButton_start_time+0x1>
     7f8:	20 91 30 38 	lds	r18, 0x3830	; 0x803830 <tinyButton_start_time+0x2>
     7fc:	30 91 31 38 	lds	r19, 0x3831	; 0x803831 <tinyButton_start_time+0x3>
     800:	60 1b       	sub	r22, r16
     802:	71 0b       	sbc	r23, r17
     804:	82 0b       	sbc	r24, r18
     806:	93 0b       	sbc	r25, r19
     808:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__floatunsisf>
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	48 ec       	ldi	r20, 0xC8	; 200
     812:	52 e4       	ldi	r21, 0x42	; 66
     814:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__gesf2>
     818:	18 16       	cp	r1, r24
     81a:	64 f4       	brge	.+24     	; 0x834 <tinyButton_update+0x88>
		{
			tinyPulse_toggle_pulse_mode();
     81c:	0e 94 20 09 	call	0x1240	; 0x1240 <tinyPulse_toggle_pulse_mode>
			tinyButton_start_time = tinyTime_now();
     820:	0e 94 73 09 	call	0x12e6	; 0x12e6 <tinyTime_now>
     824:	60 93 2e 38 	sts	0x382E, r22	; 0x80382e <tinyButton_start_time>
     828:	70 93 2f 38 	sts	0x382F, r23	; 0x80382f <tinyButton_start_time+0x1>
     82c:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <tinyButton_start_time+0x2>
     830:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <tinyButton_start_time+0x3>
		}
	}
	if (!button_is_pushed_down && button_was_pushed_down)
     834:	cc 23       	and	r28, r28
     836:	39 f0       	breq	.+14     	; 0x846 <tinyButton_update+0x9a>
     838:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <button_was_pushed_down>
     83c:	88 23       	and	r24, r24
     83e:	19 f0       	breq	.+6      	; 0x846 <tinyButton_update+0x9a>
	{
		button_press = true;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <button_press>
	}
	button_was_pushed_down = button_is_pushed_down;
     846:	d0 93 33 38 	sts	0x3833, r29	; 0x803833 <button_was_pushed_down>
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	08 95       	ret

00000854 <tinyButton_update_potential>:

double tinyButton_update_potential(double potential){
	if(button_press){
     854:	20 91 32 38 	lds	r18, 0x3832	; 0x803832 <button_press>
     858:	22 23       	and	r18, r18
     85a:	31 f0       	breq	.+12     	; 0x868 <tinyButton_update_potential+0x14>
		potential += BUTTON_PRESS_REACTION;
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	40 ed       	ldi	r20, 0xD0	; 208
     862:	51 e4       	ldi	r21, 0x41	; 65
     864:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__addsf3>
	}
	return potential;
}
     868:	08 95       	ret

0000086a <tinyCharge_is_connected_to_charger>:
*/
uint8_t charge_counter = 0; 

_Bool tinyCharge_is_connected_to_charger(){
	return connected_to_charger;
}
     86a:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <connected_to_charger>
     86e:	08 95       	ret

00000870 <tinyCharge_is_fully_charged>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     870:	86 b1       	in	r24, 0x06	; 6

_Bool tinyCharge_is_fully_charged(){
	return CHARGING_STATUS_PIN_get_level();
}
     872:	86 fb       	bst	r24, 6
     874:	88 27       	eor	r24, r24
     876:	80 f9       	bld	r24, 0
     878:	08 95       	ret

0000087a <tinyCharge_DAC_dissable>:
void tinyCharge_DAC_dissable(){
	
	// We need some way to disable the DAC to prevent huge current draw when charging (64mA). When there is no code uploaded to the attiny, there is no problem.
	// We're going to try to enable the pin as a dendrite, since they seem to be doing fine. Completely uninitializing the pin probably caused a microchip to be fried.
	
	DAC_0_uninit();
     87a:	0e 94 88 01 	call	0x310	; 0x310 <DAC_0_uninit>
	DAC_0_disable();
     87e:	0e 94 93 01 	call	0x326	; 0x326 <DAC_0_disable>
     882:	08 95       	ret

00000884 <tinyCharge_DAC_enable>:
void tinyCharge_DAC_enable(){
	
	// We need some way to disable the DAC to prevent huge current draw when charging (64mA). When there is no code uploaded to the attiny, there is no problem.
	// We're going to try to enable the pin as a dendrite, since they seem to be doing fine. Completely uninitializing the pin probably caused a microchip to be fried.
	
	DAC_0_init();
     884:	0e 94 83 01 	call	0x306	; 0x306 <DAC_0_init>
	DAC_0_enable();
     888:	0e 94 8d 01 	call	0x31a	; 0x31a <DAC_0_enable>
     88c:	08 95       	ret

0000088e <tinyCharge_switch_mode>:
}


void tinyCharge_switch_mode(){
	
	if(connected_to_charger){
     88e:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <connected_to_charger>
     892:	88 23       	and	r24, r24
     894:	71 f0       	breq	.+28     	; 0x8b2 <tinyCharge_switch_mode+0x24>
		// Switch from main to charging mode
		
		// Set LED
		tinyLED_set_color_mode(OUT_LED, CHARGING_COLOR, SWING);
     896:	42 e0       	ldi	r20, 0x02	; 2
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	0e 94 74 06 	call	0xce8	; 0xce8 <tinyLED_set_color_mode>
		tinyLED_set_color(INN_LED, OFF);
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	0e 94 63 06 	call	0xcc6	; 0xcc6 <tinyLED_set_color>


		// Stop axon from firing
		// (There is a small chance that the neuron is put into charging mode as it is firing. The axon is then never told to stop firing)
		tinyAxon_stop_sending_pulse();
     8a8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <tinyAxon_stop_sending_pulse>

		// disable DAC
		tinyCharge_DAC_dissable();
     8ac:	0e 94 3d 04 	call	0x87a	; 0x87a <tinyCharge_DAC_dissable>
     8b0:	08 95       	ret
	}
	else{
		// Switch from charge to main mode
		
		// Set LED
		tinyLED_set_color(OUT_LED, OFF);
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	0e 94 63 06 	call	0xcc6	; 0xcc6 <tinyLED_set_color>
		tinyLED_set_color(INN_LED, OFF);
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	0e 94 63 06 	call	0xcc6	; 0xcc6 <tinyLED_set_color>
		
		// enable DAC
		tinyCharge_DAC_enable();
     8c2:	0e 94 42 04 	call	0x884	; 0x884 <tinyCharge_DAC_enable>
     8c6:	08 95       	ret

000008c8 <tinyCharge_set_charging_mode>:
	}
}

void tinyCharge_set_charging_mode(_Bool charging_status){
	if(charging_status != connected_to_charger){
     8c8:	90 91 58 38 	lds	r25, 0x3858	; 0x803858 <connected_to_charger>
     8cc:	98 17       	cp	r25, r24
     8ce:	21 f0       	breq	.+8      	; 0x8d8 <tinyCharge_set_charging_mode+0x10>
		connected_to_charger = charging_status;
     8d0:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <connected_to_charger>
		tinyCharge_switch_mode();
     8d4:	0e 94 47 04 	call	0x88e	; 0x88e <tinyCharge_switch_mode>
     8d8:	08 95       	ret

000008da <tinyCharge_update_charging_mode>:
*/
void tinyCharge_update_charging_mode(){
	// For complicated reasons, the axon_check_level will be high even when the charger is not connected
	// WHEN the neuron is in charging mode, hence we ignore the axon level when the neuron is in charging mode
	_Bool charging;
	if(connected_to_charger){
     8da:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <connected_to_charger>
     8de:	88 23       	and	r24, r24
     8e0:	19 f0       	breq	.+6      	; 0x8e8 <tinyCharge_update_charging_mode+0xe>
		charging = tinyDendrite_check_charge_level();
     8e2:	0e 94 38 05 	call	0xa70	; 0xa70 <tinyDendrite_check_charge_level>
     8e6:	0a c0       	rjmp	.+20     	; 0x8fc <tinyCharge_update_charging_mode+0x22>
	} else{
		charging = tinyDendrite_check_charge_level() || tinyAxon_check_charge_level();
     8e8:	0e 94 38 05 	call	0xa70	; 0xa70 <tinyDendrite_check_charge_level>
     8ec:	81 11       	cpse	r24, r1
     8ee:	03 c0       	rjmp	.+6      	; 0x8f6 <tinyCharge_update_charging_mode+0x1c>
     8f0:	0e 94 c3 03 	call	0x786	; 0x786 <tinyAxon_check_charge_level>
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <tinyCharge_update_charging_mode+0x20>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	81 70       	andi	r24, 0x01	; 1
	}
	
	// In order to prevent the axon from stimulating itself, we only switch into charging mode when the conditions have been right for several cycles
	if(!connected_to_charger && charging){
     8fc:	90 91 58 38 	lds	r25, 0x3858	; 0x803858 <connected_to_charger>
     900:	91 11       	cpse	r25, r1
     902:	11 c0       	rjmp	.+34     	; 0x926 <tinyCharge_update_charging_mode+0x4c>
     904:	88 23       	and	r24, r24
     906:	79 f0       	breq	.+30     	; 0x926 <tinyCharge_update_charging_mode+0x4c>
		charge_counter++;
     908:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <charge_counter>
     90c:	8f 5f       	subi	r24, 0xFF	; 255
		if(charge_counter > CYCLES_REQUIRED_FOR_CHARGING_MODE_SWITCH){
     90e:	8b 30       	cpi	r24, 0x0B	; 11
     910:	18 f4       	brcc	.+6      	; 0x918 <tinyCharge_update_charging_mode+0x3e>
		charging = tinyDendrite_check_charge_level() || tinyAxon_check_charge_level();
	}
	
	// In order to prevent the axon from stimulating itself, we only switch into charging mode when the conditions have been right for several cycles
	if(!connected_to_charger && charging){
		charge_counter++;
     912:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <charge_counter>
     916:	08 95       	ret
		if(charge_counter > CYCLES_REQUIRED_FOR_CHARGING_MODE_SWITCH){
			charge_counter = 0;
     918:	10 92 34 38 	sts	0x3834, r1	; 0x803834 <charge_counter>
			tinyCharge_set_charging_mode(charging);
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 64 04 	call	0x8c8	; 0x8c8 <tinyCharge_set_charging_mode>
     924:	08 95       	ret
		}
	}
	else{
		tinyCharge_set_charging_mode(charging);
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 64 04 	call	0x8c8	; 0x8c8 <tinyCharge_set_charging_mode>
     92c:	08 95       	ret

0000092e <tinyCharge_set_transistors>:
	}
}


void tinyCharge_set_transistors(){
	if(connected_to_charger){
     92e:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <connected_to_charger>
     932:	88 23       	and	r24, r24
     934:	11 f0       	breq	.+4      	; 0x93a <tinyCharge_set_transistors+0xc>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     936:	4d 98       	cbi	0x09, 5	; 9
     938:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     93a:	4d 9a       	sbi	0x09, 5	; 9
     93c:	08 95       	ret

0000093e <tinyDebugger_send_uint32>:
}
void tinyDebugger_send_string(const char* name, char * value){
	if(DEBUGGING){
		printf("%s:%s\t", name, value);
	}
}
     93e:	7f 93       	push	r23
     940:	6f 93       	push	r22
     942:	5f 93       	push	r21
     944:	4f 93       	push	r20
     946:	9f 93       	push	r25
     948:	8f 93       	push	r24
     94a:	89 e3       	ldi	r24, 0x39	; 57
     94c:	95 ea       	ldi	r25, 0xA5	; 165
     94e:	9f 93       	push	r25
     950:	8f 93       	push	r24
     952:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <printf>
     956:	8d b7       	in	r24, 0x3d	; 61
     958:	9e b7       	in	r25, 0x3e	; 62
     95a:	08 96       	adiw	r24, 0x08	; 8
     95c:	8d bf       	out	0x3d, r24	; 61
     95e:	9e bf       	out	0x3e, r25	; 62
     960:	08 95       	ret

00000962 <tinyDebugger_send_uint8>:
     962:	1f 92       	push	r1
     964:	6f 93       	push	r22
     966:	9f 93       	push	r25
     968:	8f 93       	push	r24
     96a:	82 e4       	ldi	r24, 0x42	; 66
     96c:	95 ea       	ldi	r25, 0xA5	; 165
     96e:	9f 93       	push	r25
     970:	8f 93       	push	r24
     972:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <printf>
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	08 95       	ret

00000984 <tinyDebugger_send_double>:
     984:	cf 92       	push	r12
     986:	df 92       	push	r13
     988:	ef 92       	push	r14
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	64 97       	sbiw	r28, 0x14	; 20
     99a:	cd bf       	out	0x3d, r28	; 61
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	d8 2e       	mov	r13, r24
     9a0:	c9 2e       	mov	r12, r25
     9a2:	cb 01       	movw	r24, r22
     9a4:	ba 01       	movw	r22, r20
     9a6:	9e 01       	movw	r18, r28
     9a8:	2f 5f       	subi	r18, 0xFF	; 255
     9aa:	3f 4f       	sbci	r19, 0xFF	; 255
     9ac:	79 01       	movw	r14, r18
     9ae:	89 01       	movw	r16, r18
     9b0:	21 e0       	ldi	r18, 0x01	; 1
     9b2:	41 e0       	ldi	r20, 0x01	; 1
     9b4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <dtostrf>
     9b8:	ff 92       	push	r15
     9ba:	ef 92       	push	r14
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	8a e4       	ldi	r24, 0x4A	; 74
     9c2:	95 ea       	ldi	r25, 0xA5	; 165
     9c4:	9f 93       	push	r25
     9c6:	8f 93       	push	r24
     9c8:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <printf>
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	64 96       	adiw	r28, 0x14	; 20
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	cf 90       	pop	r12
     9ee:	08 95       	ret

000009f0 <tinyDebugger_end_line>:
void tinyDebugger_end_line(){
	if(DEBUGGING){
		printf("\r\n");
     9f0:	89 e5       	ldi	r24, 0x59	; 89
     9f2:	95 ea       	ldi	r25, 0xA5	; 165
     9f4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <puts>
     9f8:	08 95       	ret

000009fa <tinyDendrite_read_signals>:

/*
This function reads the voltage at the Dendrite inputs with the ADC
*/
static void tinyDendrite_read_signals(void)
{
     9fa:	ef 92       	push	r14
     9fc:	ff 92       	push	r15
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	ce e0       	ldi	r28, 0x0E	; 14
     a08:	d8 e3       	ldi	r29, 0x38	; 56
     a0a:	0f e3       	ldi	r16, 0x3F	; 63
     a0c:	18 e3       	ldi	r17, 0x38	; 56
     a0e:	0f 2e       	mov	r0, r31
     a10:	f3 e1       	ldi	r31, 0x13	; 19
     a12:	ef 2e       	mov	r14, r31
     a14:	f8 e3       	ldi	r31, 0x38	; 56
     a16:	ff 2e       	mov	r15, r31
     a18:	f0 2d       	mov	r31, r0
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_values[i] = ADC_0_get_conversion(Dendrite_ports[i]);
     a1a:	89 91       	ld	r24, Y+
     a1c:	0e 94 4d 01 	call	0x29a	; 0x29a <ADC_0_get_conversion>
     a20:	f8 01       	movw	r30, r16
     a22:	81 93       	st	Z+, r24
     a24:	8f 01       	movw	r16, r30
/*
This function reads the voltage at the Dendrite inputs with the ADC
*/
static void tinyDendrite_read_signals(void)
{
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
     a26:	ce 15       	cp	r28, r14
     a28:	df 05       	cpc	r29, r15
     a2a:	b9 f7       	brne	.-18     	; 0xa1a <tinyDendrite_read_signals+0x20>
	{
		tinyDendrite_values[i] = ADC_0_get_conversion(Dendrite_ports[i]);
	}
	tinyDebugger_send_uint8("D1", tinyDendrite_values[0]);
     a2c:	cf e3       	ldi	r28, 0x3F	; 63
     a2e:	d8 e3       	ldi	r29, 0x38	; 56
     a30:	68 81       	ld	r22, Y
     a32:	8b e5       	ldi	r24, 0x5B	; 91
     a34:	95 ea       	ldi	r25, 0xA5	; 165
     a36:	0e 94 b1 04 	call	0x962	; 0x962 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D2", tinyDendrite_values[1]);
     a3a:	69 81       	ldd	r22, Y+1	; 0x01
     a3c:	8e e5       	ldi	r24, 0x5E	; 94
     a3e:	95 ea       	ldi	r25, 0xA5	; 165
     a40:	0e 94 b1 04 	call	0x962	; 0x962 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D3", tinyDendrite_values[2]);
     a44:	6a 81       	ldd	r22, Y+2	; 0x02
     a46:	81 e6       	ldi	r24, 0x61	; 97
     a48:	95 ea       	ldi	r25, 0xA5	; 165
     a4a:	0e 94 b1 04 	call	0x962	; 0x962 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
     a4e:	6b 81       	ldd	r22, Y+3	; 0x03
     a50:	84 e6       	ldi	r24, 0x64	; 100
     a52:	95 ea       	ldi	r25, 0xA5	; 165
     a54:	0e 94 b1 04 	call	0x962	; 0x962 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
     a58:	6c 81       	ldd	r22, Y+4	; 0x04
     a5a:	87 e6       	ldi	r24, 0x67	; 103
     a5c:	95 ea       	ldi	r25, 0xA5	; 165
     a5e:	0e 94 b1 04 	call	0x962	; 0x962 <tinyDebugger_send_uint8>
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	08 95       	ret

00000a70 <tinyDendrite_check_charge_level>:

_Bool tinyDendrite_check_charge_level(void)
{
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
	_Bool charging = false;
	
	tinyDendrite_read_signals();
     a74:	0e 94 fd 04 	call	0x9fa	; 0x9fa <tinyDendrite_read_signals>
     a78:	ea e3       	ldi	r30, 0x3A	; 58
     a7a:	f8 e3       	ldi	r31, 0x38	; 56
     a7c:	c5 e3       	ldi	r28, 0x35	; 53
     a7e:	d8 e3       	ldi	r29, 0x38	; 56
     a80:	af e3       	ldi	r26, 0x3F	; 63
     a82:	b8 e3       	ldi	r27, 0x38	; 56
     a84:	2f e3       	ldi	r18, 0x3F	; 63
     a86:	38 e3       	ldi	r19, 0x38	; 56
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
}

_Bool tinyDendrite_check_charge_level(void)
{
	_Bool charging = false;
     a88:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     a8a:	47 e0       	ldi	r20, 0x07	; 7
	_Bool charging = false;
	
	tinyDendrite_read_signals();
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     a8c:	90 81       	ld	r25, Z
     a8e:	99 93       	st	Y+, r25
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     a90:	9d 91       	ld	r25, X+
     a92:	99 3e       	cpi	r25, 0xE9	; 233
     a94:	10 f0       	brcs	.+4      	; 0xa9a <tinyDendrite_check_charge_level+0x2a>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     a96:	40 83       	st	Z, r20
			charging = true;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	31 96       	adiw	r30, 0x01	; 1
_Bool tinyDendrite_check_charge_level(void)
{
	_Bool charging = false;
	
	tinyDendrite_read_signals();
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     a9c:	e2 17       	cp	r30, r18
     a9e:	f3 07       	cpc	r31, r19
     aa0:	a9 f7       	brne	.-22     	; 0xa8c <tinyDendrite_check_charge_level+0x1c>
			tinyDendrite_current_signals[i] = CHARGING;
			charging = true;
		}
	}
	return charging;
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <tinyDendrite_update_signals>:

/*
This function converts the 8 bit value from the ADC into one of the signal types defined in DendriteSignal
*/
void tinyDendrite_update_signals(void)
{
     aa8:	af 92       	push	r10
     aaa:	bf 92       	push	r11
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
	
	//Read the analog voltage values on each of the Dendrites
	//Since read_signals is called in check_charge_level, and check_charge_level is called at the beginning
	//of every loop, it's probably unnecessary to read the signals again, but I'll leave it inn for now.
	tinyDendrite_read_signals();
     aba:	0e 94 fd 04 	call	0x9fa	; 0x9fa <tinyDendrite_read_signals>
     abe:	ea e3       	ldi	r30, 0x3A	; 58
     ac0:	f8 e3       	ldi	r31, 0x38	; 56
     ac2:	25 e3       	ldi	r18, 0x35	; 53
     ac4:	38 e3       	ldi	r19, 0x38	; 56
     ac6:	cf e3       	ldi	r28, 0x3F	; 63
     ac8:	d8 e3       	ldi	r29, 0x38	; 56
     aca:	4f e3       	ldi	r20, 0x3F	; 63
     acc:	58 e3       	ldi	r21, 0x38	; 56
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     ace:	dd 24       	eor	r13, r13
     ad0:	d3 94       	inc	r13
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     ad2:	0f 2e       	mov	r0, r31
     ad4:	f3 e0       	ldi	r31, 0x03	; 3
     ad6:	ef 2e       	mov	r14, r31
     ad8:	f0 2d       	mov	r31, r0
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     ada:	68 94       	set
     adc:	ff 24       	eor	r15, r15
     ade:	f1 f8       	bld	r15, 1
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     ae0:	04 e0       	ldi	r16, 0x04	; 4
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     ae2:	16 e0       	ldi	r17, 0x06	; 6
			// been moved to tinyDendrite_check_charging.
			//charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     ae4:	75 e0       	ldi	r23, 0x05	; 5
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     ae6:	67 e0       	ldi	r22, 0x07	; 7
     ae8:	5f 01       	movw	r10, r30
	//of every loop, it's probably unnecessary to read the signals again, but I'll leave it inn for now.
	tinyDendrite_read_signals();
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     aea:	80 81       	ld	r24, Z
     aec:	d9 01       	movw	r26, r18
     aee:	8d 93       	st	X+, r24
     af0:	9d 01       	movw	r18, r26
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     af2:	99 91       	ld	r25, Y+
     af4:	99 3e       	cpi	r25, 0xE9	; 233
     af6:	10 f0       	brcs	.+4      	; 0xafc <tinyDendrite_update_signals+0x54>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     af8:	60 83       	st	Z, r22
     afa:	19 c0       	rjmp	.+50     	; 0xb2e <tinyDendrite_update_signals+0x86>
			// Previously, we used this function to check charging, but this has now
			// been moved to tinyDendrite_check_charging.
			//charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
     afc:	98 3c       	cpi	r25, 0xC8	; 200
     afe:	10 f0       	brcs	.+4      	; 0xb04 <tinyDendrite_update_signals+0x5c>
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     b00:	70 83       	st	Z, r23
     b02:	15 c0       	rjmp	.+42     	; 0xb2e <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
     b04:	97 3a       	cpi	r25, 0xA7	; 167
     b06:	10 f0       	brcs	.+4      	; 0xb0c <tinyDendrite_update_signals+0x64>
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     b08:	10 83       	st	Z, r17
     b0a:	11 c0       	rjmp	.+34     	; 0xb2e <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
     b0c:	95 38       	cpi	r25, 0x85	; 133
     b0e:	10 f0       	brcs	.+4      	; 0xb14 <tinyDendrite_update_signals+0x6c>
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     b10:	00 83       	st	Z, r16
     b12:	0d c0       	rjmp	.+26     	; 0xb2e <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
     b14:	94 36       	cpi	r25, 0x64	; 100
     b16:	10 f0       	brcs	.+4      	; 0xb1c <tinyDendrite_update_signals+0x74>
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     b18:	f0 82       	st	Z, r15
     b1a:	09 c0       	rjmp	.+18     	; 0xb2e <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
     b1c:	93 34       	cpi	r25, 0x43	; 67
     b1e:	10 f0       	brcs	.+4      	; 0xb24 <tinyDendrite_update_signals+0x7c>
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     b20:	e0 82       	st	Z, r14
     b22:	05 c0       	rjmp	.+10     	; 0xb2e <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
     b24:	92 32       	cpi	r25, 0x22	; 34
     b26:	10 f0       	brcs	.+4      	; 0xb2c <tinyDendrite_update_signals+0x84>
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     b28:	d0 82       	st	Z, r13
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <tinyDendrite_update_signals+0x86>
		}
		else
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     b2c:	10 82       	st	Z, r1
		}
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
     b2e:	d5 01       	movw	r26, r10
     b30:	9c 91       	ld	r25, X
     b32:	89 13       	cpse	r24, r25
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <tinyDendrite_update_signals+0x90>
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     b36:	1c 92       	st	X, r1
     b38:	31 96       	adiw	r30, 0x01	; 1
	//Read the analog voltage values on each of the Dendrites
	//Since read_signals is called in check_charge_level, and check_charge_level is called at the beginning
	//of every loop, it's probably unnecessary to read the signals again, but I'll leave it inn for now.
	tinyDendrite_read_signals();
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     b3a:	e4 17       	cp	r30, r20
     b3c:	f5 07       	cpc	r31, r21
     b3e:	a1 f6       	brne	.-88     	; 0xae8 <tinyDendrite_update_signals+0x40>
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
		}
	}
}
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	bf 90       	pop	r11
     b50:	af 90       	pop	r10
     b52:	08 95       	ret

00000b54 <tinyDendrite_get_potential>:
/*
This is the master function of the module that is callable from
outside. It uses the previously declared functions to return the potential.
*/
int16_t tinyDendrite_get_potential()
{
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
	if(tinyAxon_is_firing() && IGNORE_INPUT_WHILE_FIRING){
     b60:	0e 94 cb 02 	call	0x596	; 0x596 <tinyAxon_is_firing>
		
		return NO_SIGNAL_REACTION;
	}
	
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
     b64:	0e 94 54 05 	call	0xaa8	; 0xaa8 <tinyDendrite_update_signals>
     b68:	ca e3       	ldi	r28, 0x3A	; 58
     b6a:	d8 e3       	ldi	r29, 0x38	; 56
     b6c:	0f 2e       	mov	r0, r31
     b6e:	ff e3       	ldi	r31, 0x3F	; 63
     b70:	ef 2e       	mov	r14, r31
     b72:	f8 e3       	ldi	r31, 0x38	; 56
     b74:	ff 2e       	mov	r15, r31
     b76:	f0 2d       	mov	r31, r0
	
	int16_t return_potential_val = 0;
     b78:	00 e0       	ldi	r16, 0x00	; 0
     b7a:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		switch(tinyDendrite_current_signals[i])
     b7c:	89 91       	ld	r24, Y+
     b7e:	83 30       	cpi	r24, 0x03	; 3
     b80:	19 f1       	breq	.+70     	; 0xbc8 <tinyDendrite_get_potential+0x74>
     b82:	28 f4       	brcc	.+10     	; 0xb8e <tinyDendrite_get_potential+0x3a>
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	81 f1       	breq	.+96     	; 0xbe8 <tinyDendrite_get_potential+0x94>
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	31 f1       	breq	.+76     	; 0xbd8 <tinyDendrite_get_potential+0x84>
     b8c:	34 c0       	rjmp	.+104    	; 0xbf6 <tinyDendrite_get_potential+0xa2>
     b8e:	85 30       	cpi	r24, 0x05	; 5
     b90:	59 f0       	breq	.+22     	; 0xba8 <tinyDendrite_get_potential+0x54>
     b92:	90 f0       	brcs	.+36     	; 0xbb8 <tinyDendrite_get_potential+0x64>
     b94:	86 30       	cpi	r24, 0x06	; 6
     b96:	79 f5       	brne	.+94     	; 0xbf6 <tinyDendrite_get_potential+0xa2>
		{
			case NO_SIGNAL:
				return_potential_val += NO_SIGNAL_REACTION;
				break;
			case HIGH_EXCITE:
				return_potential_val += HIGH_EXCITE_REACTION;
     b98:	0c 5c       	subi	r16, 0xCC	; 204
     b9a:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     b9c:	44 e0       	ldi	r20, 0x04	; 4
     b9e:	63 e0       	ldi	r22, 0x03	; 3
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 74 06 	call	0xce8	; 0xce8 <tinyLED_set_color_mode>
				break;
     ba6:	27 c0       	rjmp	.+78     	; 0xbf6 <tinyDendrite_get_potential+0xa2>
			case NORMAL_EXCITE:
				return_potential_val += NORMAL_EXCITE_REACTION;
     ba8:	07 5e       	subi	r16, 0xE7	; 231
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     bac:	44 e0       	ldi	r20, 0x04	; 4
     bae:	63 e0       	ldi	r22, 0x03	; 3
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	0e 94 74 06 	call	0xce8	; 0xce8 <tinyLED_set_color_mode>
				break;
     bb6:	1f c0       	rjmp	.+62     	; 0xbf6 <tinyDendrite_get_potential+0xa2>
			case LOW_EXCITE:
				return_potential_val += LOW_EXCITE_REACTION;
     bb8:	0c 5e       	subi	r16, 0xEC	; 236
     bba:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     bbc:	44 e0       	ldi	r20, 0x04	; 4
     bbe:	63 e0       	ldi	r22, 0x03	; 3
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	0e 94 74 06 	call	0xce8	; 0xce8 <tinyLED_set_color_mode>
				break;
     bc6:	17 c0       	rjmp	.+46     	; 0xbf6 <tinyDendrite_get_potential+0xa2>
			case HIGH_INHIB:
				return_potential_val += HIGH_INHIB_REACTION;
     bc8:	02 53       	subi	r16, 0x32	; 50
     bca:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     bcc:	44 e0       	ldi	r20, 0x04	; 4
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	0e 94 74 06 	call	0xce8	; 0xce8 <tinyLED_set_color_mode>
				break;
     bd6:	0f c0       	rjmp	.+30     	; 0xbf6 <tinyDendrite_get_potential+0xa2>
			case NORMAL_INHIB:
				return_potential_val += NORMAL_INHIB_REACTION;
     bd8:	09 51       	subi	r16, 0x19	; 25
     bda:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     bdc:	44 e0       	ldi	r20, 0x04	; 4
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	0e 94 74 06 	call	0xce8	; 0xce8 <tinyLED_set_color_mode>
				break;
     be6:	07 c0       	rjmp	.+14     	; 0xbf6 <tinyDendrite_get_potential+0xa2>
			case LOW_INHIB:
				return_potential_val += LOW_INHIB_REACTION;
     be8:	04 51       	subi	r16, 0x14	; 20
     bea:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     bec:	44 e0       	ldi	r20, 0x04	; 4
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	0e 94 74 06 	call	0xce8	; 0xce8 <tinyLED_set_color_mode>
	
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
	
	int16_t return_potential_val = 0;
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     bf6:	ce 15       	cp	r28, r14
     bf8:	df 05       	cpc	r29, r15
     bfa:	09 f0       	breq	.+2      	; 0xbfe <tinyDendrite_get_potential+0xaa>
     bfc:	bf cf       	rjmp	.-130    	; 0xb7c <tinyDendrite_get_potential+0x28>
		}
	}
	
	return return_potential_val;
	
}
     bfe:	c8 01       	movw	r24, r16
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	08 95       	ret

00000c0e <tinyDendrite_update_potential>:

double tinyDendrite_update_potential(double potential){
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	6b 01       	movw	r12, r22
     c18:	7c 01       	movw	r14, r24
	
	int16_t potential_change = tinyDendrite_get_potential();
     c1a:	0e 94 aa 05 	call	0xb54	; 0xb54 <tinyDendrite_get_potential>
	potential += potential_change;
	return potential;
     c1e:	bc 01       	movw	r22, r24
     c20:	99 0f       	add	r25, r25
     c22:	88 0b       	sbc	r24, r24
     c24:	99 0b       	sbc	r25, r25
     c26:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__floatsisf>
     c2a:	a7 01       	movw	r20, r14
     c2c:	96 01       	movw	r18, r12
     c2e:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__addsf3>
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	df 90       	pop	r13
     c38:	cf 90       	pop	r12
     c3a:	08 95       	ret

00000c3c <__vector_6>:
     c3c:	1f 92       	push	r1
     c3e:	0f 92       	push	r0
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	0f 92       	push	r0
     c44:	11 24       	eor	r1, r1
     c46:	2f 93       	push	r18
     c48:	3f 93       	push	r19
     c4a:	4f 93       	push	r20
     c4c:	5f 93       	push	r21
     c4e:	6f 93       	push	r22
     c50:	7f 93       	push	r23
     c52:	8f 93       	push	r24
     c54:	9f 93       	push	r25
     c56:	af 93       	push	r26
     c58:	bf 93       	push	r27
     c5a:	cf 93       	push	r28
     c5c:	ef 93       	push	r30
     c5e:	ff 93       	push	r31
     c60:	c1 e0       	ldi	r28, 0x01	; 1
     c62:	c0 93 44 38 	sts	0x3844, r28	; 0x803844 <tinyISR_interrupt_flag>
     c66:	0e 94 5f 09 	call	0x12be	; 0x12be <tinyTime_counter_increment>
     c6a:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	cf 91       	pop	r28
     c74:	bf 91       	pop	r27
     c76:	af 91       	pop	r26
     c78:	9f 91       	pop	r25
     c7a:	8f 91       	pop	r24
     c7c:	7f 91       	pop	r23
     c7e:	6f 91       	pop	r22
     c80:	5f 91       	pop	r21
     c82:	4f 91       	pop	r20
     c84:	3f 91       	pop	r19
     c86:	2f 91       	pop	r18
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <tinyISR_setflag>:
     c92:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <tinyISR_interrupt_flag>
     c96:	08 95       	ret

00000c98 <tinyISR_getflag>:
     c98:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <tinyISR_interrupt_flag>
     c9c:	08 95       	ret

00000c9e <tinyLED_SPIWriteByte>:
Function used to send a byte over SPI, which in turn gets
translated to the bit-sequence required by the LEDs over the CCL.
*/
static void tinyLED_SPIWriteByte(uint8_t byte)
{
	SPI0.INTFLAGS = SPI0_INTFLAGS; // clear the write collision flag to allow writing
     c9e:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
     ca2:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
	TCA0.SINGLE.CNT = 0; // reset TCA counter register to ensure the first rising edge of the PWM is predictable
     ca6:	e0 e0       	ldi	r30, 0x00	; 0
     ca8:	fa e0       	ldi	r31, 0x0A	; 10
     caa:	10 a2       	std	Z+32, r1	; 0x20
     cac:	11 a2       	std	Z+33, r1	; 0x21
	
	// start TCA
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 1 << TCA_SPLIT_ENABLE_bp;
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	90 83       	st	Z, r25
	SPI0_DATA = byte;
     cb2:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>

	while((SPI0.INTFLAGS & SPI_RXCIE_bm) == 0){} // wait for transfer to complete
     cb6:	e0 e2       	ldi	r30, 0x20	; 32
     cb8:	f8 e0       	ldi	r31, 0x08	; 8
     cba:	83 81       	ldd	r24, Z+3	; 0x03
     cbc:	88 23       	and	r24, r24
     cbe:	ec f7       	brge	.-6      	; 0xcba <tinyLED_SPIWriteByte+0x1c>
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
     cc0:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     cc4:	08 95       	ret

00000cc6 <tinyLED_set_color>:
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color_mode(uint8_t LED_id, enum Colors color, enum ColorModes mode)
{
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_colors[LED_id] = setting;
     cc6:	e8 2f       	mov	r30, r24
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	ef 59       	subi	r30, 0x9F	; 159
     cd0:	f7 4c       	sbci	r31, 0xC7	; 199
     cd2:	60 83       	st	Z, r22
     cd4:	11 82       	std	Z+1, r1	; 0x01
     cd6:	08 95       	ret

00000cd8 <tinyLED_get_color>:
	tinyLED_set_color_mode(LED_id, color, STABLE);
}

enum Colors tinyLED_get_color(uint8_t LED_id)
{
	return tinyLED_colors[LED_id].color;
     cd8:	e8 2f       	mov	r30, r24
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	ee 0f       	add	r30, r30
     cde:	ff 1f       	adc	r31, r31
     ce0:	ef 59       	subi	r30, 0x9F	; 159
     ce2:	f7 4c       	sbci	r31, 0xC7	; 199
}
     ce4:	80 81       	ld	r24, Z
     ce6:	08 95       	ret

00000ce8 <tinyLED_set_color_mode>:
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color_mode(uint8_t LED_id, enum Colors color, enum ColorModes mode)
{
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_colors[LED_id] = setting;
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	fc 01       	movw	r30, r24
     cec:	ee 0f       	add	r30, r30
     cee:	ff 1f       	adc	r31, r31
     cf0:	ef 59       	subi	r30, 0x9F	; 159
     cf2:	f7 4c       	sbci	r31, 0xC7	; 199
     cf4:	60 83       	st	Z, r22
     cf6:	41 83       	std	Z+1, r20	; 0x01
	if (mode == FLASH_ONCE)
     cf8:	44 30       	cpi	r20, 0x04	; 4
     cfa:	29 f4       	brne	.+10     	; 0xd06 <tinyLED_set_color_mode+0x1e>
	{
		tinyLED_flash_once_time[LED_id] = 1000*FLASH_TIME;
     cfc:	fc 01       	movw	r30, r24
     cfe:	e7 5a       	subi	r30, 0xA7	; 167
     d00:	f7 4c       	sbci	r31, 0xC7	; 199
     d02:	2a e0       	ldi	r18, 0x0A	; 10
     d04:	20 83       	st	Z, r18
     d06:	08 95       	ret

00000d08 <tinyLED_RGB_Color_Compare>:
	return rgb_color;
			
};
// This might be cause of strange light behavior?
//Message		expected 'struct RGB_Color *' but argument is of type 'struct RGB_Color (*)[2]'	Hjernebyggesett_V4	C:\Users\Elias Lundheim\Documents\GitHub\neural\Hjernebyggesett_V4\Hjernebyggesett_V4\tinyLED\tinyLED.c	121
_Bool tinyLED_RGB_Color_Compare(struct RGB_Color (*a)[NUMBER_OF_LEDS], struct RGB_Color (*b)[NUMBER_OF_LEDS]){
     d08:	dc 01       	movw	r26, r24
     d0a:	fb 01       	movw	r30, r22
	for (int i=0; i<NUMBER_OF_LEDS; i++)
	{
		if(!((*a)[i].red==(*b)[i].red && (*a)[i].green==(*b)[i].green && (*a)[i].blue==(*b)[i].blue)){
     d0c:	9c 91       	ld	r25, X
     d0e:	80 81       	ld	r24, Z
     d10:	98 13       	cpse	r25, r24
     d12:	20 c0       	rjmp	.+64     	; 0xd54 <tinyLED_RGB_Color_Compare+0x4c>
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 91       	ld	r25, X
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	98 13       	cpse	r25, r24
     d1e:	1c c0       	rjmp	.+56     	; 0xd58 <tinyLED_RGB_Color_Compare+0x50>
     d20:	12 96       	adiw	r26, 0x02	; 2
     d22:	9c 91       	ld	r25, X
     d24:	12 97       	sbiw	r26, 0x02	; 2
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	98 13       	cpse	r25, r24
     d2a:	18 c0       	rjmp	.+48     	; 0xd5c <tinyLED_RGB_Color_Compare+0x54>
     d2c:	13 96       	adiw	r26, 0x03	; 3
     d2e:	9c 91       	ld	r25, X
     d30:	13 97       	sbiw	r26, 0x03	; 3
     d32:	83 81       	ldd	r24, Z+3	; 0x03
     d34:	98 13       	cpse	r25, r24
     d36:	14 c0       	rjmp	.+40     	; 0xd60 <tinyLED_RGB_Color_Compare+0x58>
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	9c 91       	ld	r25, X
     d3c:	14 97       	sbiw	r26, 0x04	; 4
     d3e:	84 81       	ldd	r24, Z+4	; 0x04
     d40:	98 13       	cpse	r25, r24
     d42:	10 c0       	rjmp	.+32     	; 0xd64 <tinyLED_RGB_Color_Compare+0x5c>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	15 96       	adiw	r26, 0x05	; 5
     d48:	2c 91       	ld	r18, X
     d4a:	95 81       	ldd	r25, Z+5	; 0x05
     d4c:	29 17       	cp	r18, r25
     d4e:	59 f0       	breq	.+22     	; 0xd66 <tinyLED_RGB_Color_Compare+0x5e>
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	08 95       	ret
			return false;
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	08 95       	ret
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	08 95       	ret
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	08 95       	ret
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	08 95       	ret
     d64:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
     d66:	08 95       	ret

00000d68 <tinyLED_update>:
/*
function to write the current LED-array on to the LEDs and
effectively update the values stored in the LEDs to the values stored in the MCU.
*/
void tinyLED_update(void)
{
     d68:	2f 92       	push	r2
     d6a:	3f 92       	push	r3
     d6c:	4f 92       	push	r4
     d6e:	5f 92       	push	r5
     d70:	6f 92       	push	r6
     d72:	7f 92       	push	r7
     d74:	8f 92       	push	r8
     d76:	9f 92       	push	r9
     d78:	af 92       	push	r10
     d7a:	bf 92       	push	r11
     d7c:	cf 92       	push	r12
     d7e:	df 92       	push	r13
     d80:	ef 92       	push	r14
     d82:	ff 92       	push	r15
     d84:	0f 93       	push	r16
     d86:	1f 93       	push	r17
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	6e 97       	sbiw	r28, 0x1e	; 30
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	de bf       	out	0x3e, r29	; 62
			
	uint32_t now = tinyTime_now();
     d96:	0e 94 73 09 	call	0x12e6	; 0x12e6 <tinyTime_now>
     d9a:	6b 01       	movw	r12, r22
     d9c:	7c 01       	movw	r14, r24
	
	// This is a sin curve, but between 0 and 1 instead of -1 and 1
	double sinValue = 0.5+sin((double)now/(100*M_PI/SWING_RATE))/2;
     d9e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__floatunsisf>
     da2:	22 ed       	ldi	r18, 0xD2	; 210
     da4:	33 e5       	ldi	r19, 0x53	; 83
     da6:	4b ef       	ldi	r20, 0xFB	; 251
     da8:	51 e4       	ldi	r21, 0x41	; 65
     daa:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     dae:	0e 94 a9 0c 	call	0x1952	; 0x1952 <sin>
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	5f e3       	ldi	r21, 0x3F	; 63
     dba:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	5f e3       	ldi	r21, 0x3F	; 63
     dc6:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__addsf3>
     dca:	69 87       	std	Y+9, r22	; 0x09
     dcc:	7a 87       	std	Y+10, r23	; 0x0a
     dce:	8b 87       	std	Y+11, r24	; 0x0b
     dd0:	9c 87       	std	Y+12, r25	; 0x0c
	
	// If FLASH_RATE is one, then that means that the left side of the "<" will just count from 0 to 1000, and flash_on will be true for half of the time
	_Bool flash_on = now%(uint32_t)(1000/FLASH_RATE)  <   500/FLASH_RATE;
     dd2:	c7 01       	movw	r24, r14
     dd4:	b6 01       	movw	r22, r12
     dd6:	22 e3       	ldi	r18, 0x32	; 50
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__udivmodsi4>
     de2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__floatunsisf>
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	48 ec       	ldi	r20, 0xC8	; 200
     dec:	51 e4       	ldi	r21, 0x41	; 65
     dee:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__cmpsf2>
     df2:	88 1f       	adc	r24, r24
     df4:	88 27       	eor	r24, r24
     df6:	88 1f       	adc	r24, r24
     df8:	8f 83       	std	Y+7, r24	; 0x07
	
	// PING_RATE is usually small, so the left side counts to some large number. Since flash_time usually is also quite small,
	// the left side will usually be larger than the right
	_Bool ping_on =  now%(uint32_t)(1000/PING_RATE)   <   1000*FLASH_TIME;
     dfa:	c7 01       	movw	r24, r14
     dfc:	b6 01       	movw	r22, r12
     dfe:	24 ef       	ldi	r18, 0xF4	; 244
     e00:	31 e0       	ldi	r19, 0x01	; 1
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__udivmodsi4>
     e0a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__floatunsisf>
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e2       	ldi	r20, 0x20	; 32
     e14:	51 e4       	ldi	r21, 0x41	; 65
     e16:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__cmpsf2>
     e1a:	88 1f       	adc	r24, r24
     e1c:	88 27       	eor	r24, r24
     e1e:	88 1f       	adc	r24, r24
     e20:	01 e6       	ldi	r16, 0x61	; 97
     e22:	18 e3       	ldi	r17, 0x38	; 56
     e24:	9e 01       	movw	r18, r28
     e26:	2f 5f       	subi	r18, 0xFF	; 255
     e28:	3f 4f       	sbci	r19, 0xFF	; 255
     e2a:	0f 2e       	mov	r0, r31
     e2c:	f9 e5       	ldi	r31, 0x59	; 89
     e2e:	4f 2e       	mov	r4, r31
     e30:	f8 e3       	ldi	r31, 0x38	; 56
     e32:	5f 2e       	mov	r5, r31
     e34:	f0 2d       	mov	r31, r0
     e36:	0f 2e       	mov	r0, r31
     e38:	f5 e6       	ldi	r31, 0x65	; 101
     e3a:	6f 2e       	mov	r6, r31
     e3c:	f8 e3       	ldi	r31, 0x38	; 56
     e3e:	7f 2e       	mov	r7, r31
     e40:	f0 2d       	mov	r31, r0
     e42:	19 01       	movw	r2, r18
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
				break;
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     e44:	88 2e       	mov	r8, r24
     e46:	91 2c       	mov	r9, r1
     e48:	a1 2c       	mov	r10, r1
     e4a:	b1 2c       	mov	r11, r1
     e4c:	2d 87       	std	Y+13, r18	; 0x0d
     e4e:	3e 87       	std	Y+14, r19	; 0x0e
     e50:	df 80       	ldd	r13, Y+7	; 0x07
     e52:	f8 01       	movw	r30, r16
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
}

static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
     e54:	80 81       	ld	r24, Z
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	79 f0       	breq	.+30     	; 0xe78 <tinyLED_update+0x110>
     e5a:	28 f4       	brcc	.+10     	; 0xe66 <tinyLED_update+0xfe>
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	41 f0       	breq	.+16     	; 0xe70 <tinyLED_update+0x108>
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	89 f0       	breq	.+34     	; 0xe86 <tinyLED_update+0x11e>
     e64:	28 c0       	rjmp	.+80     	; 0xeb6 <tinyLED_update+0x14e>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	a9 f0       	breq	.+42     	; 0xe94 <tinyLED_update+0x12c>
     e6a:	85 30       	cpi	r24, 0x05	; 5
     e6c:	d1 f0       	breq	.+52     	; 0xea2 <tinyLED_update+0x13a>
     e6e:	23 c0       	rjmp	.+70     	; 0xeb6 <tinyLED_update+0x14e>
	{
		case OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
			break;
		case RED:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 0, 0};
     e70:	f1 2c       	mov	r15, r1
     e72:	e1 2c       	mov	r14, r1
     e74:	69 e1       	ldi	r22, 0x19	; 25
     e76:	22 c0       	rjmp	.+68     	; 0xebc <tinyLED_update+0x154>
			break;
		case GREEN:
			rgb_color = (struct RGB_Color){0, 255*LED_BRIGHTNESS, 0};
     e78:	f1 2c       	mov	r15, r1
     e7a:	0f 2e       	mov	r0, r31
     e7c:	f9 e1       	ldi	r31, 0x19	; 25
     e7e:	ef 2e       	mov	r14, r31
     e80:	f0 2d       	mov	r31, r0
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	1b c0       	rjmp	.+54     	; 0xebc <tinyLED_update+0x154>
			break;
		case BLUE:
			rgb_color = (struct RGB_Color){0, 0, 255*LED_BRIGHTNESS};
     e86:	0f 2e       	mov	r0, r31
     e88:	f9 e1       	ldi	r31, 0x19	; 25
     e8a:	ff 2e       	mov	r15, r31
     e8c:	f0 2d       	mov	r31, r0
     e8e:	e1 2c       	mov	r14, r1
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	14 c0       	rjmp	.+40     	; 0xebc <tinyLED_update+0x154>
			break;
		case YELLOW:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 0};
     e94:	f1 2c       	mov	r15, r1
     e96:	0f 2e       	mov	r0, r31
     e98:	f9 e1       	ldi	r31, 0x19	; 25
     e9a:	ef 2e       	mov	r14, r31
     e9c:	f0 2d       	mov	r31, r0
     e9e:	69 e1       	ldi	r22, 0x19	; 25
     ea0:	0d c0       	rjmp	.+26     	; 0xebc <tinyLED_update+0x154>
			// Should the /3 be there? This requires testing.
			// After testing, findings were that at 0.1 brightness, one would see the three LEDs instead of one white led
			// We try with /2 instead.
			// We find that the best results come from not dividing by anything. At leasts in the lower brightness settings, and that
			// is where we suspect it will be most of the time. When we divide, the LEDs are so weak, that they appear as three lights instead of one.
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS};
     ea2:	0f 2e       	mov	r0, r31
     ea4:	f9 e1       	ldi	r31, 0x19	; 25
     ea6:	ff 2e       	mov	r15, r31
     ea8:	f0 2d       	mov	r31, r0
     eaa:	0f 2e       	mov	r0, r31
     eac:	f9 e1       	ldi	r31, 0x19	; 25
     eae:	ef 2e       	mov	r14, r31
     eb0:	f0 2d       	mov	r31, r0
     eb2:	69 e1       	ldi	r22, 0x19	; 25
     eb4:	03 c0       	rjmp	.+6      	; 0xebc <tinyLED_update+0x154>
static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
	{
		case OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
     eb6:	f1 2c       	mov	r15, r1
     eb8:	e1 2c       	mov	r14, r1
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	2f 82       	std	Y+7, r2	; 0x07
     ebe:	38 86       	std	Y+8, r3	; 0x08
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
	{		
		// Convert enum to RGB_Color
		rgb_colors[i] = tinyLED_enum_to_RGB_Color(tinyLED_colors[i].color);
     ec0:	d1 01       	movw	r26, r2
     ec2:	6c 93       	st	X, r22
     ec4:	11 96       	adiw	r26, 0x01	; 1
     ec6:	ec 92       	st	X, r14
     ec8:	11 97       	sbiw	r26, 0x01	; 1
     eca:	12 96       	adiw	r26, 0x02	; 2
     ecc:	fc 92       	st	X, r15
			
		// Adjust colors according to mode
		switch(tinyLED_colors[i].mode)
     ece:	81 81       	ldd	r24, Z+1	; 0x01
     ed0:	82 30       	cpi	r24, 0x02	; 2
     ed2:	d1 f0       	breq	.+52     	; 0xf08 <tinyLED_update+0x1a0>
     ed4:	18 f4       	brcc	.+6      	; 0xedc <tinyLED_update+0x174>
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	41 f0       	breq	.+16     	; 0xeea <tinyLED_update+0x182>
     eda:	cd c0       	rjmp	.+410    	; 0x1076 <tinyLED_update+0x30e>
     edc:	83 30       	cpi	r24, 0x03	; 3
     ede:	09 f4       	brne	.+2      	; 0xee2 <tinyLED_update+0x17a>
     ee0:	44 c0       	rjmp	.+136    	; 0xf6a <tinyLED_update+0x202>
     ee2:	84 30       	cpi	r24, 0x04	; 4
     ee4:	09 f4       	brne	.+2      	; 0xee8 <tinyLED_update+0x180>
     ee6:	bf c0       	rjmp	.+382    	; 0x1066 <tinyLED_update+0x2fe>
     ee8:	c6 c0       	rjmp	.+396    	; 0x1076 <tinyLED_update+0x30e>
		{
			case STABLE:
				break;
			case FLASH:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*flash_on, rgb_colors[i].green*flash_on, rgb_colors[i].blue*flash_on};
     eea:	d6 9e       	mul	r13, r22
     eec:	60 2d       	mov	r22, r0
     eee:	11 24       	eor	r1, r1
     ef0:	ef 81       	ldd	r30, Y+7	; 0x07
     ef2:	f8 85       	ldd	r31, Y+8	; 0x08
     ef4:	60 83       	st	Z, r22
     ef6:	de 9c       	mul	r13, r14
     ef8:	e0 2c       	mov	r14, r0
     efa:	11 24       	eor	r1, r1
     efc:	e1 82       	std	Z+1, r14	; 0x01
     efe:	df 9c       	mul	r13, r15
     f00:	f0 2c       	mov	r15, r0
     f02:	11 24       	eor	r1, r1
     f04:	f2 82       	std	Z+2, r15	; 0x02
				break;
     f06:	b7 c0       	rjmp	.+366    	; 0x1076 <tinyLED_update+0x30e>
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__floatsisf>
     f12:	29 85       	ldd	r18, Y+9	; 0x09
     f14:	3a 85       	ldd	r19, Y+10	; 0x0a
     f16:	4b 85       	ldd	r20, Y+11	; 0x0b
     f18:	5c 85       	ldd	r21, Y+12	; 0x0c
     f1a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
     f1e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__fixunssfsi>
     f22:	d1 01       	movw	r26, r2
     f24:	6c 93       	st	X, r22
     f26:	6e 2d       	mov	r22, r14
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__floatsisf>
     f32:	29 85       	ldd	r18, Y+9	; 0x09
     f34:	3a 85       	ldd	r19, Y+10	; 0x0a
     f36:	4b 85       	ldd	r20, Y+11	; 0x0b
     f38:	5c 85       	ldd	r21, Y+12	; 0x0c
     f3a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
     f3e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__fixunssfsi>
     f42:	f1 01       	movw	r30, r2
     f44:	61 83       	std	Z+1, r22	; 0x01
     f46:	6f 2d       	mov	r22, r15
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__floatsisf>
     f52:	29 85       	ldd	r18, Y+9	; 0x09
     f54:	3a 85       	ldd	r19, Y+10	; 0x0a
     f56:	4b 85       	ldd	r20, Y+11	; 0x0b
     f58:	5c 85       	ldd	r21, Y+12	; 0x0c
     f5a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
     f5e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__fixunssfsi>
     f62:	d1 01       	movw	r26, r2
     f64:	12 96       	adiw	r26, 0x02	; 2
     f66:	6c 93       	st	X, r22
				break;
     f68:	86 c0       	rjmp	.+268    	; 0x1076 <tinyLED_update+0x30e>
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__floatunsisf>
     f74:	9b 01       	movw	r18, r22
     f76:	ac 01       	movw	r20, r24
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	80 e8       	ldi	r24, 0x80	; 128
     f7e:	9f e3       	ldi	r25, 0x3F	; 63
     f80:	0e 94 06 0b 	call	0x160c	; 0x160c <fmin>
     f84:	6b 8b       	std	Y+19, r22	; 0x13
     f86:	7c 8b       	std	Y+20, r23	; 0x14
     f88:	8d 8b       	std	Y+21, r24	; 0x15
     f8a:	9e 8b       	std	Y+22, r25	; 0x16
     f8c:	c5 01       	movw	r24, r10
     f8e:	b4 01       	movw	r22, r8
     f90:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__floatsisf>
     f94:	6f 87       	std	Y+15, r22	; 0x0f
     f96:	78 8b       	std	Y+16, r23	; 0x10
     f98:	89 8b       	std	Y+17, r24	; 0x11
     f9a:	9a 8b       	std	Y+18, r25	; 0x12
     f9c:	6e 2d       	mov	r22, r14
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__floatunsisf>
     fa8:	9b 01       	movw	r18, r22
     faa:	ac 01       	movw	r20, r24
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	80 e8       	ldi	r24, 0x80	; 128
     fb2:	9f e3       	ldi	r25, 0x3F	; 63
     fb4:	0e 94 06 0b 	call	0x160c	; 0x160c <fmin>
     fb8:	6f 8b       	std	Y+23, r22	; 0x17
     fba:	78 8f       	std	Y+24, r23	; 0x18
     fbc:	89 8f       	std	Y+25, r24	; 0x19
     fbe:	9a 8f       	std	Y+26, r25	; 0x1a
     fc0:	6f 2d       	mov	r22, r15
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__floatunsisf>
     fcc:	9b 01       	movw	r18, r22
     fce:	ac 01       	movw	r20, r24
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	80 e8       	ldi	r24, 0x80	; 128
     fd6:	9f e3       	ldi	r25, 0x3F	; 63
     fd8:	0e 94 06 0b 	call	0x160c	; 0x160c <fmin>
     fdc:	6b 8f       	std	Y+27, r22	; 0x1b
     fde:	7c 8f       	std	Y+28, r23	; 0x1c
     fe0:	8d 8f       	std	Y+29, r24	; 0x1d
     fe2:	9e 8f       	std	Y+30, r25	; 0x1e
     fe4:	23 e3       	ldi	r18, 0x33	; 51
     fe6:	33 e3       	ldi	r19, 0x33	; 51
     fe8:	43 ea       	ldi	r20, 0xA3	; 163
     fea:	50 e4       	ldi	r21, 0x40	; 64
     fec:	6b 89       	ldd	r22, Y+19	; 0x13
     fee:	7c 89       	ldd	r23, Y+20	; 0x14
     ff0:	8d 89       	ldd	r24, Y+21	; 0x15
     ff2:	9e 89       	ldd	r25, Y+22	; 0x16
     ff4:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
     ff8:	2f 85       	ldd	r18, Y+15	; 0x0f
     ffa:	38 89       	ldd	r19, Y+16	; 0x10
     ffc:	49 89       	ldd	r20, Y+17	; 0x11
     ffe:	5a 89       	ldd	r21, Y+18	; 0x12
    1000:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
    1004:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__fixunssfsi>
    1008:	ef 81       	ldd	r30, Y+7	; 0x07
    100a:	f8 85       	ldd	r31, Y+8	; 0x08
    100c:	60 83       	st	Z, r22
    100e:	23 e3       	ldi	r18, 0x33	; 51
    1010:	33 e3       	ldi	r19, 0x33	; 51
    1012:	43 ea       	ldi	r20, 0xA3	; 163
    1014:	50 e4       	ldi	r21, 0x40	; 64
    1016:	6f 89       	ldd	r22, Y+23	; 0x17
    1018:	78 8d       	ldd	r23, Y+24	; 0x18
    101a:	89 8d       	ldd	r24, Y+25	; 0x19
    101c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    101e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
    1022:	2f 85       	ldd	r18, Y+15	; 0x0f
    1024:	38 89       	ldd	r19, Y+16	; 0x10
    1026:	49 89       	ldd	r20, Y+17	; 0x11
    1028:	5a 89       	ldd	r21, Y+18	; 0x12
    102a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
    102e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__fixunssfsi>
    1032:	af 81       	ldd	r26, Y+7	; 0x07
    1034:	b8 85       	ldd	r27, Y+8	; 0x08
    1036:	11 96       	adiw	r26, 0x01	; 1
    1038:	6c 93       	st	X, r22
    103a:	23 e3       	ldi	r18, 0x33	; 51
    103c:	33 e3       	ldi	r19, 0x33	; 51
    103e:	43 ea       	ldi	r20, 0xA3	; 163
    1040:	50 e4       	ldi	r21, 0x40	; 64
    1042:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1044:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1046:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1048:	9e 8d       	ldd	r25, Y+30	; 0x1e
    104a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
    104e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1050:	38 89       	ldd	r19, Y+16	; 0x10
    1052:	49 89       	ldd	r20, Y+17	; 0x11
    1054:	5a 89       	ldd	r21, Y+18	; 0x12
    1056:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
    105a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__fixunssfsi>
    105e:	ef 81       	ldd	r30, Y+7	; 0x07
    1060:	f8 85       	ldd	r31, Y+8	; 0x08
    1062:	62 83       	std	Z+2, r22	; 0x02
				break;
    1064:	08 c0       	rjmp	.+16     	; 0x1076 <tinyLED_update+0x30e>
			case FLASH_ONCE:
				if(tinyLED_flash_once_time[i]>0){
    1066:	d2 01       	movw	r26, r4
    1068:	8c 91       	ld	r24, X
    106a:	88 23       	and	r24, r24
    106c:	19 f0       	breq	.+6      	; 0x1074 <tinyLED_update+0x30c>
					rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red, rgb_colors[i].green, rgb_colors[i].blue};
					tinyLED_flash_once_time[i]--;
    106e:	81 50       	subi	r24, 0x01	; 1
    1070:	8c 93       	st	X, r24
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <tinyLED_update+0x30e>
				}
				else{
					tinyLED_colors[i].color = OFF;
    1074:	10 82       	st	Z, r1
    1076:	0e 5f       	subi	r16, 0xFE	; 254
    1078:	1f 4f       	sbci	r17, 0xFF	; 255
    107a:	b3 e0       	ldi	r27, 0x03	; 3
    107c:	2b 0e       	add	r2, r27
    107e:	31 1c       	adc	r3, r1
    1080:	ef ef       	ldi	r30, 0xFF	; 255
    1082:	4e 1a       	sub	r4, r30
    1084:	5e 0a       	sbc	r5, r30
	
	// This is where we store all the actual color values we want to send to the LED
	struct RGB_Color rgb_colors[NUMBER_OF_LEDS];
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
    1086:	06 15       	cp	r16, r6
    1088:	17 05       	cpc	r17, r7
    108a:	09 f0       	breq	.+2      	; 0x108e <tinyLED_update+0x326>
    108c:	e2 ce       	rjmp	.-572    	; 0xe52 <tinyLED_update+0xea>
    108e:	cd 84       	ldd	r12, Y+13	; 0x0d
    1090:	de 84       	ldd	r13, Y+14	; 0x0e
				break;
		}
	}
	
	// We only write to the LEDs if there is something to change. (eg. in SWING mode, we update the LEDs almost every cycle)
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
    1092:	6b e5       	ldi	r22, 0x5B	; 91
    1094:	78 e3       	ldi	r23, 0x38	; 56
    1096:	ce 01       	movw	r24, r28
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	0e 94 84 06 	call	0xd08	; 0xd08 <tinyLED_RGB_Color_Compare>
    109e:	81 11       	cpse	r24, r1
    10a0:	2f c0       	rjmp	.+94     	; 0x1100 <tinyLED_update+0x398>
    10a2:	0b e5       	ldi	r16, 0x5B	; 91
    10a4:	18 e3       	ldi	r17, 0x38	; 56
    10a6:	7e 01       	movw	r14, r28
    10a8:	f7 e0       	ldi	r31, 0x07	; 7
    10aa:	ef 0e       	add	r14, r31
    10ac:	f1 1c       	adc	r15, r1
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
		{
			// Write to LEDs
			//For some reason, the data-bus to the LEDs is serialized as GRB
			//which means the 24-bit data-bus will look like [Green[0:7], Red[0:7], Blue[0:7]]
			tinyLED_SPIWriteByte(rgb_colors[i].green);
    10ae:	d6 01       	movw	r26, r12
    10b0:	11 96       	adiw	r26, 0x01	; 1
    10b2:	8c 91       	ld	r24, X
    10b4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].red);
    10b8:	f6 01       	movw	r30, r12
    10ba:	80 81       	ld	r24, Z
    10bc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
    10c0:	d6 01       	movw	r26, r12
    10c2:	12 96       	adiw	r26, 0x02	; 2
    10c4:	8c 91       	ld	r24, X
    10c6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <tinyLED_SPIWriteByte>
			tinyLED_old_colors[i] = rgb_colors[i];
    10ca:	f6 01       	movw	r30, r12
    10cc:	81 91       	ld	r24, Z+
    10ce:	91 91       	ld	r25, Z+
    10d0:	a1 91       	ld	r26, Z+
    10d2:	6f 01       	movw	r12, r30
    10d4:	f8 01       	movw	r30, r16
    10d6:	81 93       	st	Z+, r24
    10d8:	91 93       	st	Z+, r25
    10da:	a1 93       	st	Z+, r26
    10dc:	8f 01       	movw	r16, r30
		}
	}
	
	// We only write to the LEDs if there is something to change. (eg. in SWING mode, we update the LEDs almost every cycle)
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
    10de:	ce 14       	cp	r12, r14
    10e0:	df 04       	cpc	r13, r15
    10e2:	29 f7       	brne	.-54     	; 0x10ae <tinyLED_update+0x346>
			tinyLED_SPIWriteByte(rgb_colors[i].green);
			tinyLED_SPIWriteByte(rgb_colors[i].red);
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
			tinyLED_old_colors[i] = rgb_colors[i];
		}
		tinyDebugger_send_uint8("LED1 color", tinyLED_colors[0].color);
    10e4:	01 e6       	ldi	r16, 0x61	; 97
    10e6:	18 e3       	ldi	r17, 0x38	; 56
    10e8:	d8 01       	movw	r26, r16
    10ea:	6c 91       	ld	r22, X
    10ec:	8a e6       	ldi	r24, 0x6A	; 106
    10ee:	95 ea       	ldi	r25, 0xA5	; 165
    10f0:	0e 94 b1 04 	call	0x962	; 0x962 <tinyDebugger_send_uint8>
		tinyDebugger_send_uint8("LED2 color", tinyLED_colors[1].color);
    10f4:	f8 01       	movw	r30, r16
    10f6:	62 81       	ldd	r22, Z+2	; 0x02
    10f8:	85 e7       	ldi	r24, 0x75	; 117
    10fa:	95 ea       	ldi	r25, 0xA5	; 165
    10fc:	0e 94 b1 04 	call	0x962	; 0x962 <tinyDebugger_send_uint8>
	}
}
    1100:	6e 96       	adiw	r28, 0x1e	; 30
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	df 90       	pop	r13
    1114:	cf 90       	pop	r12
    1116:	bf 90       	pop	r11
    1118:	af 90       	pop	r10
    111a:	9f 90       	pop	r9
    111c:	8f 90       	pop	r8
    111e:	7f 90       	pop	r7
    1120:	6f 90       	pop	r6
    1122:	5f 90       	pop	r5
    1124:	4f 90       	pop	r4
    1126:	3f 90       	pop	r3
    1128:	2f 90       	pop	r2
    112a:	08 95       	ret

0000112c <tinyPotential_update>:

/*
Update the potential
*/
void tinyPotential_update()
{
    112c:	cf 92       	push	r12
    112e:	df 92       	push	r13
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
Function to decay the potential towards 0
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
    1134:	0e 94 73 09 	call	0x12e6	; 0x12e6 <tinyTime_now>
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    1138:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <previous_update_time>
    113c:	68 1b       	sub	r22, r24
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__floatunsisf>
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	48 ec       	ldi	r20, 0xC8	; 200
    114e:	52 e4       	ldi	r21, 0x42	; 66
    1150:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
    1154:	90 58       	subi	r25, 0x80	; 128
    1156:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <exp>
    115a:	20 91 49 38 	lds	r18, 0x3849	; 0x803849 <tinyPotential_potential>
    115e:	30 91 4a 38 	lds	r19, 0x384A	; 0x80384a <tinyPotential_potential+0x1>
    1162:	40 91 4b 38 	lds	r20, 0x384B	; 0x80384b <tinyPotential_potential+0x2>
    1166:	50 91 4c 38 	lds	r21, 0x384C	; 0x80384c <tinyPotential_potential+0x3>
    116a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
    116e:	6b 01       	movw	r12, r22
    1170:	7c 01       	movw	r14, r24
	if(fabs(tinyPotential_potential)<0.1){
    1172:	9f 77       	andi	r25, 0x7F	; 127
    1174:	2d ec       	ldi	r18, 0xCD	; 205
    1176:	3c ec       	ldi	r19, 0xCC	; 204
    1178:	4c ec       	ldi	r20, 0xCC	; 204
    117a:	5d e3       	ldi	r21, 0x3D	; 61
    117c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__cmpsf2>
    1180:	88 23       	and	r24, r24
    1182:	4c f0       	brlt	.+18     	; 0x1196 <tinyPotential_update+0x6a>
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    1184:	c0 92 49 38 	sts	0x3849, r12	; 0x803849 <tinyPotential_potential>
    1188:	d0 92 4a 38 	sts	0x384A, r13	; 0x80384a <tinyPotential_potential+0x1>
    118c:	e0 92 4b 38 	sts	0x384B, r14	; 0x80384b <tinyPotential_potential+0x2>
    1190:	f0 92 4c 38 	sts	0x384C, r15	; 0x80384c <tinyPotential_potential+0x3>
    1194:	08 c0       	rjmp	.+16     	; 0x11a6 <tinyPotential_update+0x7a>
	if(fabs(tinyPotential_potential)<0.1){
		tinyPotential_potential=0;
    1196:	10 92 49 38 	sts	0x3849, r1	; 0x803849 <tinyPotential_potential>
    119a:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <tinyPotential_potential+0x1>
    119e:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <tinyPotential_potential+0x2>
    11a2:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <tinyPotential_potential+0x3>
	}
	previous_update_time = tinyTime_now();
    11a6:	0e 94 73 09 	call	0x12e6	; 0x12e6 <tinyTime_now>
    11aa:	60 93 45 38 	sts	0x3845, r22	; 0x803845 <previous_update_time>
    11ae:	70 93 46 38 	sts	0x3846, r23	; 0x803846 <previous_update_time+0x1>
    11b2:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <previous_update_time+0x2>
    11b6:	90 93 48 38 	sts	0x3848, r25	; 0x803848 <previous_update_time+0x3>
void tinyPotential_update()
{
	//Some of the potential in the neuron has decayed away
	tinyPotential_decay();
	// Update potential with values from Dendrites
	tinyPotential_potential = tinyDendrite_update_potential(tinyPotential_potential);
    11ba:	60 91 49 38 	lds	r22, 0x3849	; 0x803849 <tinyPotential_potential>
    11be:	70 91 4a 38 	lds	r23, 0x384A	; 0x80384a <tinyPotential_potential+0x1>
    11c2:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <tinyPotential_potential+0x2>
    11c6:	90 91 4c 38 	lds	r25, 0x384C	; 0x80384c <tinyPotential_potential+0x3>
    11ca:	0e 94 07 06 	call	0xc0e	; 0xc0e <tinyDendrite_update_potential>
    11ce:	60 93 49 38 	sts	0x3849, r22	; 0x803849 <tinyPotential_potential>
    11d2:	70 93 4a 38 	sts	0x384A, r23	; 0x80384a <tinyPotential_potential+0x1>
    11d6:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <tinyPotential_potential+0x2>
    11da:	90 93 4c 38 	sts	0x384C, r25	; 0x80384c <tinyPotential_potential+0x3>
	
	// Update potential from button press
	tinyPotential_potential = tinyButton_update_potential(tinyPotential_potential);
    11de:	0e 94 2a 04 	call	0x854	; 0x854 <tinyButton_update_potential>
    11e2:	60 93 49 38 	sts	0x3849, r22	; 0x803849 <tinyPotential_potential>
    11e6:	70 93 4a 38 	sts	0x384A, r23	; 0x80384a <tinyPotential_potential+0x1>
    11ea:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <tinyPotential_potential+0x2>
    11ee:	90 93 4c 38 	sts	0x384C, r25	; 0x80384c <tinyPotential_potential+0x3>
	
	// Update potential with values from spontaneous pulse.
	tinyPotential_potential = tinyPulse_update_potential(tinyPotential_potential);
    11f2:	0e 94 27 09 	call	0x124e	; 0x124e <tinyPulse_update_potential>
    11f6:	ab 01       	movw	r20, r22
    11f8:	bc 01       	movw	r22, r24
    11fa:	40 93 49 38 	sts	0x3849, r20	; 0x803849 <tinyPotential_potential>
    11fe:	50 93 4a 38 	sts	0x384A, r21	; 0x80384a <tinyPotential_potential+0x1>
    1202:	60 93 4b 38 	sts	0x384B, r22	; 0x80384b <tinyPotential_potential+0x2>
    1206:	70 93 4c 38 	sts	0x384C, r23	; 0x80384c <tinyPotential_potential+0x3>
	
	tinyDebugger_send_double("Potential", tinyPotential_potential);
    120a:	80 e8       	ldi	r24, 0x80	; 128
    120c:	95 ea       	ldi	r25, 0xA5	; 165
    120e:	0e 94 c2 04 	call	0x984	; 0x984 <tinyDebugger_send_double>
	
	
	// Let the axon affect the potential
	// This is also where we decide whether or not the axon should fire
	tinyPotential_potential = tinyAxon_update_potential(tinyPotential_potential);
    1212:	60 91 49 38 	lds	r22, 0x3849	; 0x803849 <tinyPotential_potential>
    1216:	70 91 4a 38 	lds	r23, 0x384A	; 0x80384a <tinyPotential_potential+0x1>
    121a:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <tinyPotential_potential+0x2>
    121e:	90 91 4c 38 	lds	r25, 0x384C	; 0x80384c <tinyPotential_potential+0x3>
    1222:	0e 94 0f 03 	call	0x61e	; 0x61e <tinyAxon_update_potential>
    1226:	60 93 49 38 	sts	0x3849, r22	; 0x803849 <tinyPotential_potential>
    122a:	70 93 4a 38 	sts	0x384A, r23	; 0x80384a <tinyPotential_potential+0x1>
    122e:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <tinyPotential_potential+0x2>
    1232:	90 93 4c 38 	sts	0x384C, r25	; 0x80384c <tinyPotential_potential+0x3>
}
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	df 90       	pop	r13
    123c:	cf 90       	pop	r12
    123e:	08 95       	ret

00001240 <tinyPulse_toggle_pulse_mode>:
uint32_t time_of_last_pulse = 0;
uint16_t time_since_last_pulse = 0;
uint16_t ideal_time_between_pulses = 1000/PULSEMODE_FREQUENCY;

void tinyPulse_toggle_pulse_mode(){
	pulse_mode = !pulse_mode;
    1240:	90 91 53 38 	lds	r25, 0x3853	; 0x803853 <pulse_mode>
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	89 27       	eor	r24, r25
    1248:	80 93 53 38 	sts	0x3853, r24	; 0x803853 <pulse_mode>
    124c:	08 95       	ret

0000124e <tinyPulse_update_potential>:
}

double tinyPulse_update_potential(double potential){
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	6b 01       	movw	r12, r22
    1258:	7c 01       	movw	r14, r24
	if(pulse_mode){
    125a:	80 91 53 38 	lds	r24, 0x3853	; 0x803853 <pulse_mode>
    125e:	88 23       	and	r24, r24
    1260:	39 f1       	breq	.+78     	; 0x12b0 <tinyPulse_update_potential+0x62>
		
		time_since_last_pulse = tinyTime_now() - time_of_last_pulse;
    1262:	0e 94 73 09 	call	0x12e6	; 0x12e6 <tinyTime_now>
    1266:	20 91 4f 38 	lds	r18, 0x384F	; 0x80384f <time_of_last_pulse>
    126a:	30 91 50 38 	lds	r19, 0x3850	; 0x803850 <time_of_last_pulse+0x1>
    126e:	62 1b       	sub	r22, r18
    1270:	73 0b       	sbc	r23, r19
    1272:	60 93 4d 38 	sts	0x384D, r22	; 0x80384d <time_since_last_pulse>
    1276:	70 93 4e 38 	sts	0x384E, r23	; 0x80384e <time_since_last_pulse+0x1>
		
		if(time_since_last_pulse >= ideal_time_between_pulses){
    127a:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <ideal_time_between_pulses>
    127e:	90 91 14 38 	lds	r25, 0x3814	; 0x803814 <ideal_time_between_pulses+0x1>
    1282:	68 17       	cp	r22, r24
    1284:	79 07       	cpc	r23, r25
    1286:	a0 f0       	brcs	.+40     	; 0x12b0 <tinyPulse_update_potential+0x62>
			// This isn't actually a button press. You could have a separate variable for this, but it seems unnecessary.
			potential += BUTTON_PRESS_REACTION;
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 ed       	ldi	r20, 0xD0	; 208
    128e:	51 e4       	ldi	r21, 0x41	; 65
    1290:	c7 01       	movw	r24, r14
    1292:	b6 01       	movw	r22, r12
    1294:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__addsf3>
    1298:	6b 01       	movw	r12, r22
    129a:	7c 01       	movw	r14, r24
			time_of_last_pulse = tinyTime_now();			
    129c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <tinyTime_now>
    12a0:	60 93 4f 38 	sts	0x384F, r22	; 0x80384f <time_of_last_pulse>
    12a4:	70 93 50 38 	sts	0x3850, r23	; 0x803850 <time_of_last_pulse+0x1>
    12a8:	80 93 51 38 	sts	0x3851, r24	; 0x803851 <time_of_last_pulse+0x2>
    12ac:	90 93 52 38 	sts	0x3852, r25	; 0x803852 <time_of_last_pulse+0x3>
		}
	}
	return potential;
}
    12b0:	c7 01       	movw	r24, r14
    12b2:	b6 01       	movw	r22, r12
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	08 95       	ret

000012be <tinyTime_counter_increment>:
    12be:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <time_counter>
    12c2:	90 91 55 38 	lds	r25, 0x3855	; 0x803855 <time_counter+0x1>
    12c6:	a0 91 56 38 	lds	r26, 0x3856	; 0x803856 <time_counter+0x2>
    12ca:	b0 91 57 38 	lds	r27, 0x3857	; 0x803857 <time_counter+0x3>
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	a1 1d       	adc	r26, r1
    12d2:	b1 1d       	adc	r27, r1
    12d4:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <time_counter>
    12d8:	90 93 55 38 	sts	0x3855, r25	; 0x803855 <time_counter+0x1>
    12dc:	a0 93 56 38 	sts	0x3856, r26	; 0x803856 <time_counter+0x2>
    12e0:	b0 93 57 38 	sts	0x3857, r27	; 0x803857 <time_counter+0x3>
    12e4:	08 95       	ret

000012e6 <tinyTime_now>:
    12e6:	60 91 54 38 	lds	r22, 0x3854	; 0x803854 <time_counter>
    12ea:	70 91 55 38 	lds	r23, 0x3855	; 0x803855 <time_counter+0x1>
    12ee:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <time_counter+0x2>
    12f2:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <time_counter+0x3>
    12f6:	08 95       	ret

000012f8 <__subsf3>:
    12f8:	50 58       	subi	r21, 0x80	; 128

000012fa <__addsf3>:
    12fa:	bb 27       	eor	r27, r27
    12fc:	aa 27       	eor	r26, r26
    12fe:	0e 94 94 09 	call	0x1328	; 0x1328 <__addsf3x>
    1302:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__fp_round>
    1306:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__fp_pscA>
    130a:	38 f0       	brcs	.+14     	; 0x131a <__addsf3+0x20>
    130c:	0e 94 80 0b 	call	0x1700	; 0x1700 <__fp_pscB>
    1310:	20 f0       	brcs	.+8      	; 0x131a <__addsf3+0x20>
    1312:	39 f4       	brne	.+14     	; 0x1322 <__addsf3+0x28>
    1314:	9f 3f       	cpi	r25, 0xFF	; 255
    1316:	19 f4       	brne	.+6      	; 0x131e <__addsf3+0x24>
    1318:	26 f4       	brtc	.+8      	; 0x1322 <__addsf3+0x28>
    131a:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__fp_nan>
    131e:	0e f4       	brtc	.+2      	; 0x1322 <__addsf3+0x28>
    1320:	e0 95       	com	r30
    1322:	e7 fb       	bst	r30, 7
    1324:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__fp_inf>

00001328 <__addsf3x>:
    1328:	e9 2f       	mov	r30, r25
    132a:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fp_split3>
    132e:	58 f3       	brcs	.-42     	; 0x1306 <__addsf3+0xc>
    1330:	ba 17       	cp	r27, r26
    1332:	62 07       	cpc	r22, r18
    1334:	73 07       	cpc	r23, r19
    1336:	84 07       	cpc	r24, r20
    1338:	95 07       	cpc	r25, r21
    133a:	20 f0       	brcs	.+8      	; 0x1344 <__addsf3x+0x1c>
    133c:	79 f4       	brne	.+30     	; 0x135c <__addsf3x+0x34>
    133e:	a6 f5       	brtc	.+104    	; 0x13a8 <__addsf3x+0x80>
    1340:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__fp_zero>
    1344:	0e f4       	brtc	.+2      	; 0x1348 <__addsf3x+0x20>
    1346:	e0 95       	com	r30
    1348:	0b 2e       	mov	r0, r27
    134a:	ba 2f       	mov	r27, r26
    134c:	a0 2d       	mov	r26, r0
    134e:	0b 01       	movw	r0, r22
    1350:	b9 01       	movw	r22, r18
    1352:	90 01       	movw	r18, r0
    1354:	0c 01       	movw	r0, r24
    1356:	ca 01       	movw	r24, r20
    1358:	a0 01       	movw	r20, r0
    135a:	11 24       	eor	r1, r1
    135c:	ff 27       	eor	r31, r31
    135e:	59 1b       	sub	r21, r25
    1360:	99 f0       	breq	.+38     	; 0x1388 <__addsf3x+0x60>
    1362:	59 3f       	cpi	r21, 0xF9	; 249
    1364:	50 f4       	brcc	.+20     	; 0x137a <__addsf3x+0x52>
    1366:	50 3e       	cpi	r21, 0xE0	; 224
    1368:	68 f1       	brcs	.+90     	; 0x13c4 <__addsf3x+0x9c>
    136a:	1a 16       	cp	r1, r26
    136c:	f0 40       	sbci	r31, 0x00	; 0
    136e:	a2 2f       	mov	r26, r18
    1370:	23 2f       	mov	r18, r19
    1372:	34 2f       	mov	r19, r20
    1374:	44 27       	eor	r20, r20
    1376:	58 5f       	subi	r21, 0xF8	; 248
    1378:	f3 cf       	rjmp	.-26     	; 0x1360 <__addsf3x+0x38>
    137a:	46 95       	lsr	r20
    137c:	37 95       	ror	r19
    137e:	27 95       	ror	r18
    1380:	a7 95       	ror	r26
    1382:	f0 40       	sbci	r31, 0x00	; 0
    1384:	53 95       	inc	r21
    1386:	c9 f7       	brne	.-14     	; 0x137a <__addsf3x+0x52>
    1388:	7e f4       	brtc	.+30     	; 0x13a8 <__addsf3x+0x80>
    138a:	1f 16       	cp	r1, r31
    138c:	ba 0b       	sbc	r27, r26
    138e:	62 0b       	sbc	r22, r18
    1390:	73 0b       	sbc	r23, r19
    1392:	84 0b       	sbc	r24, r20
    1394:	ba f0       	brmi	.+46     	; 0x13c4 <__addsf3x+0x9c>
    1396:	91 50       	subi	r25, 0x01	; 1
    1398:	a1 f0       	breq	.+40     	; 0x13c2 <__addsf3x+0x9a>
    139a:	ff 0f       	add	r31, r31
    139c:	bb 1f       	adc	r27, r27
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	88 1f       	adc	r24, r24
    13a4:	c2 f7       	brpl	.-16     	; 0x1396 <__addsf3x+0x6e>
    13a6:	0e c0       	rjmp	.+28     	; 0x13c4 <__addsf3x+0x9c>
    13a8:	ba 0f       	add	r27, r26
    13aa:	62 1f       	adc	r22, r18
    13ac:	73 1f       	adc	r23, r19
    13ae:	84 1f       	adc	r24, r20
    13b0:	48 f4       	brcc	.+18     	; 0x13c4 <__addsf3x+0x9c>
    13b2:	87 95       	ror	r24
    13b4:	77 95       	ror	r23
    13b6:	67 95       	ror	r22
    13b8:	b7 95       	ror	r27
    13ba:	f7 95       	ror	r31
    13bc:	9e 3f       	cpi	r25, 0xFE	; 254
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <__addsf3x+0x9a>
    13c0:	b0 cf       	rjmp	.-160    	; 0x1322 <__addsf3+0x28>
    13c2:	93 95       	inc	r25
    13c4:	88 0f       	add	r24, r24
    13c6:	08 f0       	brcs	.+2      	; 0x13ca <__addsf3x+0xa2>
    13c8:	99 27       	eor	r25, r25
    13ca:	ee 0f       	add	r30, r30
    13cc:	97 95       	ror	r25
    13ce:	87 95       	ror	r24
    13d0:	08 95       	ret

000013d2 <__cmpsf2>:
    13d2:	0e 94 25 0b 	call	0x164a	; 0x164a <__fp_cmp>
    13d6:	08 f4       	brcc	.+2      	; 0x13da <__cmpsf2+0x8>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	08 95       	ret

000013dc <__divsf3>:
    13dc:	0e 94 02 0a 	call	0x1404	; 0x1404 <__divsf3x>
    13e0:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__fp_round>
    13e4:	0e 94 80 0b 	call	0x1700	; 0x1700 <__fp_pscB>
    13e8:	58 f0       	brcs	.+22     	; 0x1400 <__divsf3+0x24>
    13ea:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__fp_pscA>
    13ee:	40 f0       	brcs	.+16     	; 0x1400 <__divsf3+0x24>
    13f0:	29 f4       	brne	.+10     	; 0x13fc <__divsf3+0x20>
    13f2:	5f 3f       	cpi	r21, 0xFF	; 255
    13f4:	29 f0       	breq	.+10     	; 0x1400 <__divsf3+0x24>
    13f6:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__fp_inf>
    13fa:	51 11       	cpse	r21, r1
    13fc:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__fp_szero>
    1400:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__fp_nan>

00001404 <__divsf3x>:
    1404:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fp_split3>
    1408:	68 f3       	brcs	.-38     	; 0x13e4 <__divsf3+0x8>

0000140a <__divsf3_pse>:
    140a:	99 23       	and	r25, r25
    140c:	b1 f3       	breq	.-20     	; 0x13fa <__divsf3+0x1e>
    140e:	55 23       	and	r21, r21
    1410:	91 f3       	breq	.-28     	; 0x13f6 <__divsf3+0x1a>
    1412:	95 1b       	sub	r25, r21
    1414:	55 0b       	sbc	r21, r21
    1416:	bb 27       	eor	r27, r27
    1418:	aa 27       	eor	r26, r26
    141a:	62 17       	cp	r22, r18
    141c:	73 07       	cpc	r23, r19
    141e:	84 07       	cpc	r24, r20
    1420:	38 f0       	brcs	.+14     	; 0x1430 <__divsf3_pse+0x26>
    1422:	9f 5f       	subi	r25, 0xFF	; 255
    1424:	5f 4f       	sbci	r21, 0xFF	; 255
    1426:	22 0f       	add	r18, r18
    1428:	33 1f       	adc	r19, r19
    142a:	44 1f       	adc	r20, r20
    142c:	aa 1f       	adc	r26, r26
    142e:	a9 f3       	breq	.-22     	; 0x141a <__divsf3_pse+0x10>
    1430:	35 d0       	rcall	.+106    	; 0x149c <__divsf3_pse+0x92>
    1432:	0e 2e       	mov	r0, r30
    1434:	3a f0       	brmi	.+14     	; 0x1444 <__divsf3_pse+0x3a>
    1436:	e0 e8       	ldi	r30, 0x80	; 128
    1438:	32 d0       	rcall	.+100    	; 0x149e <__divsf3_pse+0x94>
    143a:	91 50       	subi	r25, 0x01	; 1
    143c:	50 40       	sbci	r21, 0x00	; 0
    143e:	e6 95       	lsr	r30
    1440:	00 1c       	adc	r0, r0
    1442:	ca f7       	brpl	.-14     	; 0x1436 <__divsf3_pse+0x2c>
    1444:	2b d0       	rcall	.+86     	; 0x149c <__divsf3_pse+0x92>
    1446:	fe 2f       	mov	r31, r30
    1448:	29 d0       	rcall	.+82     	; 0x149c <__divsf3_pse+0x92>
    144a:	66 0f       	add	r22, r22
    144c:	77 1f       	adc	r23, r23
    144e:	88 1f       	adc	r24, r24
    1450:	bb 1f       	adc	r27, r27
    1452:	26 17       	cp	r18, r22
    1454:	37 07       	cpc	r19, r23
    1456:	48 07       	cpc	r20, r24
    1458:	ab 07       	cpc	r26, r27
    145a:	b0 e8       	ldi	r27, 0x80	; 128
    145c:	09 f0       	breq	.+2      	; 0x1460 <__divsf3_pse+0x56>
    145e:	bb 0b       	sbc	r27, r27
    1460:	80 2d       	mov	r24, r0
    1462:	bf 01       	movw	r22, r30
    1464:	ff 27       	eor	r31, r31
    1466:	93 58       	subi	r25, 0x83	; 131
    1468:	5f 4f       	sbci	r21, 0xFF	; 255
    146a:	3a f0       	brmi	.+14     	; 0x147a <__divsf3_pse+0x70>
    146c:	9e 3f       	cpi	r25, 0xFE	; 254
    146e:	51 05       	cpc	r21, r1
    1470:	78 f0       	brcs	.+30     	; 0x1490 <__divsf3_pse+0x86>
    1472:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__fp_inf>
    1476:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__fp_szero>
    147a:	5f 3f       	cpi	r21, 0xFF	; 255
    147c:	e4 f3       	brlt	.-8      	; 0x1476 <__divsf3_pse+0x6c>
    147e:	98 3e       	cpi	r25, 0xE8	; 232
    1480:	d4 f3       	brlt	.-12     	; 0x1476 <__divsf3_pse+0x6c>
    1482:	86 95       	lsr	r24
    1484:	77 95       	ror	r23
    1486:	67 95       	ror	r22
    1488:	b7 95       	ror	r27
    148a:	f7 95       	ror	r31
    148c:	9f 5f       	subi	r25, 0xFF	; 255
    148e:	c9 f7       	brne	.-14     	; 0x1482 <__divsf3_pse+0x78>
    1490:	88 0f       	add	r24, r24
    1492:	91 1d       	adc	r25, r1
    1494:	96 95       	lsr	r25
    1496:	87 95       	ror	r24
    1498:	97 f9       	bld	r25, 7
    149a:	08 95       	ret
    149c:	e1 e0       	ldi	r30, 0x01	; 1
    149e:	66 0f       	add	r22, r22
    14a0:	77 1f       	adc	r23, r23
    14a2:	88 1f       	adc	r24, r24
    14a4:	bb 1f       	adc	r27, r27
    14a6:	62 17       	cp	r22, r18
    14a8:	73 07       	cpc	r23, r19
    14aa:	84 07       	cpc	r24, r20
    14ac:	ba 07       	cpc	r27, r26
    14ae:	20 f0       	brcs	.+8      	; 0x14b8 <__divsf3_pse+0xae>
    14b0:	62 1b       	sub	r22, r18
    14b2:	73 0b       	sbc	r23, r19
    14b4:	84 0b       	sbc	r24, r20
    14b6:	ba 0b       	sbc	r27, r26
    14b8:	ee 1f       	adc	r30, r30
    14ba:	88 f7       	brcc	.-30     	; 0x149e <__divsf3_pse+0x94>
    14bc:	e0 95       	com	r30
    14be:	08 95       	ret
    14c0:	29 f4       	brne	.+10     	; 0x14cc <__divsf3_pse+0xc2>
    14c2:	16 f0       	brts	.+4      	; 0x14c8 <__divsf3_pse+0xbe>
    14c4:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__fp_inf>
    14c8:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__fp_zero>
    14cc:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__fp_nan>

000014d0 <exp>:
    14d0:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__fp_splitA>
    14d4:	a8 f3       	brcs	.-22     	; 0x14c0 <__divsf3_pse+0xb6>
    14d6:	96 38       	cpi	r25, 0x86	; 134
    14d8:	a0 f7       	brcc	.-24     	; 0x14c2 <__divsf3_pse+0xb8>
    14da:	07 f8       	bld	r0, 7
    14dc:	0f 92       	push	r0
    14de:	e8 94       	clt
    14e0:	2b e3       	ldi	r18, 0x3B	; 59
    14e2:	3a ea       	ldi	r19, 0xAA	; 170
    14e4:	48 eb       	ldi	r20, 0xB8	; 184
    14e6:	5f e7       	ldi	r21, 0x7F	; 127
    14e8:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsf3_pse>
    14ec:	0f 92       	push	r0
    14ee:	0f 92       	push	r0
    14f0:	0f 92       	push	r0
    14f2:	4d b7       	in	r20, 0x3d	; 61
    14f4:	5e b7       	in	r21, 0x3e	; 62
    14f6:	0f 92       	push	r0
    14f8:	0e 94 08 0c 	call	0x1810	; 0x1810 <modf>
    14fc:	ec e7       	ldi	r30, 0x7C	; 124
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fp_powser>
    1504:	4f 91       	pop	r20
    1506:	5f 91       	pop	r21
    1508:	ef 91       	pop	r30
    150a:	ff 91       	pop	r31
    150c:	e5 95       	asr	r30
    150e:	ee 1f       	adc	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	49 f0       	breq	.+18     	; 0x1526 <exp+0x56>
    1514:	fe 57       	subi	r31, 0x7E	; 126
    1516:	e0 68       	ori	r30, 0x80	; 128
    1518:	44 27       	eor	r20, r20
    151a:	ee 0f       	add	r30, r30
    151c:	44 1f       	adc	r20, r20
    151e:	fa 95       	dec	r31
    1520:	e1 f7       	brne	.-8      	; 0x151a <exp+0x4a>
    1522:	41 95       	neg	r20
    1524:	55 0b       	sbc	r21, r21
    1526:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <ldexp>
    152a:	0f 90       	pop	r0
    152c:	07 fe       	sbrs	r0, 7
    152e:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <inverse>
    1532:	08 95       	ret

00001534 <__fixunssfsi>:
    1534:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__fp_splitA>
    1538:	88 f0       	brcs	.+34     	; 0x155c <__fixunssfsi+0x28>
    153a:	9f 57       	subi	r25, 0x7F	; 127
    153c:	98 f0       	brcs	.+38     	; 0x1564 <__fixunssfsi+0x30>
    153e:	b9 2f       	mov	r27, r25
    1540:	99 27       	eor	r25, r25
    1542:	b7 51       	subi	r27, 0x17	; 23
    1544:	b0 f0       	brcs	.+44     	; 0x1572 <__fixunssfsi+0x3e>
    1546:	e1 f0       	breq	.+56     	; 0x1580 <__fixunssfsi+0x4c>
    1548:	66 0f       	add	r22, r22
    154a:	77 1f       	adc	r23, r23
    154c:	88 1f       	adc	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	1a f0       	brmi	.+6      	; 0x1558 <__fixunssfsi+0x24>
    1552:	ba 95       	dec	r27
    1554:	c9 f7       	brne	.-14     	; 0x1548 <__fixunssfsi+0x14>
    1556:	14 c0       	rjmp	.+40     	; 0x1580 <__fixunssfsi+0x4c>
    1558:	b1 30       	cpi	r27, 0x01	; 1
    155a:	91 f0       	breq	.+36     	; 0x1580 <__fixunssfsi+0x4c>
    155c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fp_zero>
    1560:	b1 e0       	ldi	r27, 0x01	; 1
    1562:	08 95       	ret
    1564:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__fp_zero>
    1568:	67 2f       	mov	r22, r23
    156a:	78 2f       	mov	r23, r24
    156c:	88 27       	eor	r24, r24
    156e:	b8 5f       	subi	r27, 0xF8	; 248
    1570:	39 f0       	breq	.+14     	; 0x1580 <__fixunssfsi+0x4c>
    1572:	b9 3f       	cpi	r27, 0xF9	; 249
    1574:	cc f3       	brlt	.-14     	; 0x1568 <__fixunssfsi+0x34>
    1576:	86 95       	lsr	r24
    1578:	77 95       	ror	r23
    157a:	67 95       	ror	r22
    157c:	b3 95       	inc	r27
    157e:	d9 f7       	brne	.-10     	; 0x1576 <__fixunssfsi+0x42>
    1580:	3e f4       	brtc	.+14     	; 0x1590 <__fixunssfsi+0x5c>
    1582:	90 95       	com	r25
    1584:	80 95       	com	r24
    1586:	70 95       	com	r23
    1588:	61 95       	neg	r22
    158a:	7f 4f       	sbci	r23, 0xFF	; 255
    158c:	8f 4f       	sbci	r24, 0xFF	; 255
    158e:	9f 4f       	sbci	r25, 0xFF	; 255
    1590:	08 95       	ret

00001592 <__floatunsisf>:
    1592:	e8 94       	clt
    1594:	09 c0       	rjmp	.+18     	; 0x15a8 <__floatsisf+0x12>

00001596 <__floatsisf>:
    1596:	97 fb       	bst	r25, 7
    1598:	3e f4       	brtc	.+14     	; 0x15a8 <__floatsisf+0x12>
    159a:	90 95       	com	r25
    159c:	80 95       	com	r24
    159e:	70 95       	com	r23
    15a0:	61 95       	neg	r22
    15a2:	7f 4f       	sbci	r23, 0xFF	; 255
    15a4:	8f 4f       	sbci	r24, 0xFF	; 255
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	99 23       	and	r25, r25
    15aa:	a9 f0       	breq	.+42     	; 0x15d6 <__floatsisf+0x40>
    15ac:	f9 2f       	mov	r31, r25
    15ae:	96 e9       	ldi	r25, 0x96	; 150
    15b0:	bb 27       	eor	r27, r27
    15b2:	93 95       	inc	r25
    15b4:	f6 95       	lsr	r31
    15b6:	87 95       	ror	r24
    15b8:	77 95       	ror	r23
    15ba:	67 95       	ror	r22
    15bc:	b7 95       	ror	r27
    15be:	f1 11       	cpse	r31, r1
    15c0:	f8 cf       	rjmp	.-16     	; 0x15b2 <__floatsisf+0x1c>
    15c2:	fa f4       	brpl	.+62     	; 0x1602 <__floatsisf+0x6c>
    15c4:	bb 0f       	add	r27, r27
    15c6:	11 f4       	brne	.+4      	; 0x15cc <__floatsisf+0x36>
    15c8:	60 ff       	sbrs	r22, 0
    15ca:	1b c0       	rjmp	.+54     	; 0x1602 <__floatsisf+0x6c>
    15cc:	6f 5f       	subi	r22, 0xFF	; 255
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255
    15d0:	8f 4f       	sbci	r24, 0xFF	; 255
    15d2:	9f 4f       	sbci	r25, 0xFF	; 255
    15d4:	16 c0       	rjmp	.+44     	; 0x1602 <__floatsisf+0x6c>
    15d6:	88 23       	and	r24, r24
    15d8:	11 f0       	breq	.+4      	; 0x15de <__floatsisf+0x48>
    15da:	96 e9       	ldi	r25, 0x96	; 150
    15dc:	11 c0       	rjmp	.+34     	; 0x1600 <__floatsisf+0x6a>
    15de:	77 23       	and	r23, r23
    15e0:	21 f0       	breq	.+8      	; 0x15ea <__floatsisf+0x54>
    15e2:	9e e8       	ldi	r25, 0x8E	; 142
    15e4:	87 2f       	mov	r24, r23
    15e6:	76 2f       	mov	r23, r22
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <__floatsisf+0x5e>
    15ea:	66 23       	and	r22, r22
    15ec:	71 f0       	breq	.+28     	; 0x160a <__floatsisf+0x74>
    15ee:	96 e8       	ldi	r25, 0x86	; 134
    15f0:	86 2f       	mov	r24, r22
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	2a f0       	brmi	.+10     	; 0x1602 <__floatsisf+0x6c>
    15f8:	9a 95       	dec	r25
    15fa:	66 0f       	add	r22, r22
    15fc:	77 1f       	adc	r23, r23
    15fe:	88 1f       	adc	r24, r24
    1600:	da f7       	brpl	.-10     	; 0x15f8 <__floatsisf+0x62>
    1602:	88 0f       	add	r24, r24
    1604:	96 95       	lsr	r25
    1606:	87 95       	ror	r24
    1608:	97 f9       	bld	r25, 7
    160a:	08 95       	ret

0000160c <fmin>:
    160c:	99 0f       	add	r25, r25
    160e:	bb 0b       	sbc	r27, r27
    1610:	55 0f       	add	r21, r21
    1612:	aa 0b       	sbc	r26, r26
    1614:	e0 e8       	ldi	r30, 0x80	; 128
    1616:	fe ef       	ldi	r31, 0xFE	; 254
    1618:	16 16       	cp	r1, r22
    161a:	17 06       	cpc	r1, r23
    161c:	e8 07       	cpc	r30, r24
    161e:	f9 07       	cpc	r31, r25
    1620:	70 f0       	brcs	.+28     	; 0x163e <fmin+0x32>
    1622:	12 16       	cp	r1, r18
    1624:	13 06       	cpc	r1, r19
    1626:	e4 07       	cpc	r30, r20
    1628:	f5 07       	cpc	r31, r21
    162a:	60 f0       	brcs	.+24     	; 0x1644 <fmin+0x38>
    162c:	ba 17       	cp	r27, r26
    162e:	54 f0       	brlt	.+20     	; 0x1644 <fmin+0x38>
    1630:	31 f4       	brne	.+12     	; 0x163e <fmin+0x32>
    1632:	26 17       	cp	r18, r22
    1634:	37 07       	cpc	r19, r23
    1636:	48 07       	cpc	r20, r24
    1638:	59 07       	cpc	r21, r25
    163a:	a7 95       	ror	r26
    163c:	1b f4       	brvc	.+6      	; 0x1644 <fmin+0x38>
    163e:	b9 01       	movw	r22, r18
    1640:	ca 01       	movw	r24, r20
    1642:	ba 2f       	mov	r27, r26
    1644:	b6 95       	lsr	r27
    1646:	97 95       	ror	r25
    1648:	08 95       	ret

0000164a <__fp_cmp>:
    164a:	99 0f       	add	r25, r25
    164c:	00 08       	sbc	r0, r0
    164e:	55 0f       	add	r21, r21
    1650:	aa 0b       	sbc	r26, r26
    1652:	e0 e8       	ldi	r30, 0x80	; 128
    1654:	fe ef       	ldi	r31, 0xFE	; 254
    1656:	16 16       	cp	r1, r22
    1658:	17 06       	cpc	r1, r23
    165a:	e8 07       	cpc	r30, r24
    165c:	f9 07       	cpc	r31, r25
    165e:	c0 f0       	brcs	.+48     	; 0x1690 <__fp_cmp+0x46>
    1660:	12 16       	cp	r1, r18
    1662:	13 06       	cpc	r1, r19
    1664:	e4 07       	cpc	r30, r20
    1666:	f5 07       	cpc	r31, r21
    1668:	98 f0       	brcs	.+38     	; 0x1690 <__fp_cmp+0x46>
    166a:	62 1b       	sub	r22, r18
    166c:	73 0b       	sbc	r23, r19
    166e:	84 0b       	sbc	r24, r20
    1670:	95 0b       	sbc	r25, r21
    1672:	39 f4       	brne	.+14     	; 0x1682 <__fp_cmp+0x38>
    1674:	0a 26       	eor	r0, r26
    1676:	61 f0       	breq	.+24     	; 0x1690 <__fp_cmp+0x46>
    1678:	23 2b       	or	r18, r19
    167a:	24 2b       	or	r18, r20
    167c:	25 2b       	or	r18, r21
    167e:	21 f4       	brne	.+8      	; 0x1688 <__fp_cmp+0x3e>
    1680:	08 95       	ret
    1682:	0a 26       	eor	r0, r26
    1684:	09 f4       	brne	.+2      	; 0x1688 <__fp_cmp+0x3e>
    1686:	a1 40       	sbci	r26, 0x01	; 1
    1688:	a6 95       	lsr	r26
    168a:	8f ef       	ldi	r24, 0xFF	; 255
    168c:	81 1d       	adc	r24, r1
    168e:	81 1d       	adc	r24, r1
    1690:	08 95       	ret

00001692 <__fp_inf>:
    1692:	97 f9       	bld	r25, 7
    1694:	9f 67       	ori	r25, 0x7F	; 127
    1696:	80 e8       	ldi	r24, 0x80	; 128
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	08 95       	ret

0000169e <__fp_nan>:
    169e:	9f ef       	ldi	r25, 0xFF	; 255
    16a0:	80 ec       	ldi	r24, 0xC0	; 192
    16a2:	08 95       	ret

000016a4 <__fp_powser>:
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	1f 93       	push	r17
    16aa:	0f 93       	push	r16
    16ac:	ff 92       	push	r15
    16ae:	ef 92       	push	r14
    16b0:	df 92       	push	r13
    16b2:	7b 01       	movw	r14, r22
    16b4:	8c 01       	movw	r16, r24
    16b6:	68 94       	set
    16b8:	06 c0       	rjmp	.+12     	; 0x16c6 <__fp_powser+0x22>
    16ba:	da 2e       	mov	r13, r26
    16bc:	ef 01       	movw	r28, r30
    16be:	0e 94 4f 0c 	call	0x189e	; 0x189e <__mulsf3x>
    16c2:	fe 01       	movw	r30, r28
    16c4:	e8 94       	clt
    16c6:	a5 91       	lpm	r26, Z+
    16c8:	25 91       	lpm	r18, Z+
    16ca:	35 91       	lpm	r19, Z+
    16cc:	45 91       	lpm	r20, Z+
    16ce:	55 91       	lpm	r21, Z+
    16d0:	a6 f3       	brts	.-24     	; 0x16ba <__fp_powser+0x16>
    16d2:	ef 01       	movw	r28, r30
    16d4:	0e 94 94 09 	call	0x1328	; 0x1328 <__addsf3x>
    16d8:	fe 01       	movw	r30, r28
    16da:	97 01       	movw	r18, r14
    16dc:	a8 01       	movw	r20, r16
    16de:	da 94       	dec	r13
    16e0:	69 f7       	brne	.-38     	; 0x16bc <__fp_powser+0x18>
    16e2:	df 90       	pop	r13
    16e4:	ef 90       	pop	r14
    16e6:	ff 90       	pop	r15
    16e8:	0f 91       	pop	r16
    16ea:	1f 91       	pop	r17
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <__fp_pscA>:
    16f2:	00 24       	eor	r0, r0
    16f4:	0a 94       	dec	r0
    16f6:	16 16       	cp	r1, r22
    16f8:	17 06       	cpc	r1, r23
    16fa:	18 06       	cpc	r1, r24
    16fc:	09 06       	cpc	r0, r25
    16fe:	08 95       	ret

00001700 <__fp_pscB>:
    1700:	00 24       	eor	r0, r0
    1702:	0a 94       	dec	r0
    1704:	12 16       	cp	r1, r18
    1706:	13 06       	cpc	r1, r19
    1708:	14 06       	cpc	r1, r20
    170a:	05 06       	cpc	r0, r21
    170c:	08 95       	ret

0000170e <__fp_round>:
    170e:	09 2e       	mov	r0, r25
    1710:	03 94       	inc	r0
    1712:	00 0c       	add	r0, r0
    1714:	11 f4       	brne	.+4      	; 0x171a <__fp_round+0xc>
    1716:	88 23       	and	r24, r24
    1718:	52 f0       	brmi	.+20     	; 0x172e <__fp_round+0x20>
    171a:	bb 0f       	add	r27, r27
    171c:	40 f4       	brcc	.+16     	; 0x172e <__fp_round+0x20>
    171e:	bf 2b       	or	r27, r31
    1720:	11 f4       	brne	.+4      	; 0x1726 <__fp_round+0x18>
    1722:	60 ff       	sbrs	r22, 0
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__fp_round+0x20>
    1726:	6f 5f       	subi	r22, 0xFF	; 255
    1728:	7f 4f       	sbci	r23, 0xFF	; 255
    172a:	8f 4f       	sbci	r24, 0xFF	; 255
    172c:	9f 4f       	sbci	r25, 0xFF	; 255
    172e:	08 95       	ret

00001730 <__fp_split3>:
    1730:	57 fd       	sbrc	r21, 7
    1732:	90 58       	subi	r25, 0x80	; 128
    1734:	44 0f       	add	r20, r20
    1736:	55 1f       	adc	r21, r21
    1738:	59 f0       	breq	.+22     	; 0x1750 <__fp_splitA+0x10>
    173a:	5f 3f       	cpi	r21, 0xFF	; 255
    173c:	71 f0       	breq	.+28     	; 0x175a <__fp_splitA+0x1a>
    173e:	47 95       	ror	r20

00001740 <__fp_splitA>:
    1740:	88 0f       	add	r24, r24
    1742:	97 fb       	bst	r25, 7
    1744:	99 1f       	adc	r25, r25
    1746:	61 f0       	breq	.+24     	; 0x1760 <__fp_splitA+0x20>
    1748:	9f 3f       	cpi	r25, 0xFF	; 255
    174a:	79 f0       	breq	.+30     	; 0x176a <__fp_splitA+0x2a>
    174c:	87 95       	ror	r24
    174e:	08 95       	ret
    1750:	12 16       	cp	r1, r18
    1752:	13 06       	cpc	r1, r19
    1754:	14 06       	cpc	r1, r20
    1756:	55 1f       	adc	r21, r21
    1758:	f2 cf       	rjmp	.-28     	; 0x173e <__fp_split3+0xe>
    175a:	46 95       	lsr	r20
    175c:	f1 df       	rcall	.-30     	; 0x1740 <__fp_splitA>
    175e:	08 c0       	rjmp	.+16     	; 0x1770 <__fp_splitA+0x30>
    1760:	16 16       	cp	r1, r22
    1762:	17 06       	cpc	r1, r23
    1764:	18 06       	cpc	r1, r24
    1766:	99 1f       	adc	r25, r25
    1768:	f1 cf       	rjmp	.-30     	; 0x174c <__fp_splitA+0xc>
    176a:	86 95       	lsr	r24
    176c:	71 05       	cpc	r23, r1
    176e:	61 05       	cpc	r22, r1
    1770:	08 94       	sec
    1772:	08 95       	ret

00001774 <__fp_zero>:
    1774:	e8 94       	clt

00001776 <__fp_szero>:
    1776:	bb 27       	eor	r27, r27
    1778:	66 27       	eor	r22, r22
    177a:	77 27       	eor	r23, r23
    177c:	cb 01       	movw	r24, r22
    177e:	97 f9       	bld	r25, 7
    1780:	08 95       	ret

00001782 <__gesf2>:
    1782:	0e 94 25 0b 	call	0x164a	; 0x164a <__fp_cmp>
    1786:	08 f4       	brcc	.+2      	; 0x178a <__gesf2+0x8>
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	08 95       	ret

0000178c <inverse>:
    178c:	9b 01       	movw	r18, r22
    178e:	ac 01       	movw	r20, r24
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	80 e8       	ldi	r24, 0x80	; 128
    1796:	9f e3       	ldi	r25, 0x3F	; 63
    1798:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__divsf3>
    179c:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__fp_inf>
    17a0:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__fp_mpack>

000017a4 <ldexp>:
    17a4:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__fp_splitA>
    17a8:	d8 f3       	brcs	.-10     	; 0x17a0 <inverse+0x14>
    17aa:	99 23       	and	r25, r25
    17ac:	c9 f3       	breq	.-14     	; 0x17a0 <inverse+0x14>
    17ae:	94 0f       	add	r25, r20
    17b0:	51 1d       	adc	r21, r1
    17b2:	a3 f3       	brvs	.-24     	; 0x179c <inverse+0x10>
    17b4:	91 50       	subi	r25, 0x01	; 1
    17b6:	50 40       	sbci	r21, 0x00	; 0
    17b8:	94 f0       	brlt	.+36     	; 0x17de <ldexp+0x3a>
    17ba:	59 f0       	breq	.+22     	; 0x17d2 <ldexp+0x2e>
    17bc:	88 23       	and	r24, r24
    17be:	32 f0       	brmi	.+12     	; 0x17cc <ldexp+0x28>
    17c0:	66 0f       	add	r22, r22
    17c2:	77 1f       	adc	r23, r23
    17c4:	88 1f       	adc	r24, r24
    17c6:	91 50       	subi	r25, 0x01	; 1
    17c8:	50 40       	sbci	r21, 0x00	; 0
    17ca:	c1 f7       	brne	.-16     	; 0x17bc <ldexp+0x18>
    17cc:	9e 3f       	cpi	r25, 0xFE	; 254
    17ce:	51 05       	cpc	r21, r1
    17d0:	2c f7       	brge	.-54     	; 0x179c <inverse+0x10>
    17d2:	88 0f       	add	r24, r24
    17d4:	91 1d       	adc	r25, r1
    17d6:	96 95       	lsr	r25
    17d8:	87 95       	ror	r24
    17da:	97 f9       	bld	r25, 7
    17dc:	08 95       	ret
    17de:	5f 3f       	cpi	r21, 0xFF	; 255
    17e0:	ac f0       	brlt	.+42     	; 0x180c <ldexp+0x68>
    17e2:	98 3e       	cpi	r25, 0xE8	; 232
    17e4:	9c f0       	brlt	.+38     	; 0x180c <ldexp+0x68>
    17e6:	bb 27       	eor	r27, r27
    17e8:	86 95       	lsr	r24
    17ea:	77 95       	ror	r23
    17ec:	67 95       	ror	r22
    17ee:	b7 95       	ror	r27
    17f0:	08 f4       	brcc	.+2      	; 0x17f4 <ldexp+0x50>
    17f2:	b1 60       	ori	r27, 0x01	; 1
    17f4:	93 95       	inc	r25
    17f6:	c1 f7       	brne	.-16     	; 0x17e8 <ldexp+0x44>
    17f8:	bb 0f       	add	r27, r27
    17fa:	58 f7       	brcc	.-42     	; 0x17d2 <ldexp+0x2e>
    17fc:	11 f4       	brne	.+4      	; 0x1802 <ldexp+0x5e>
    17fe:	60 ff       	sbrs	r22, 0
    1800:	e8 cf       	rjmp	.-48     	; 0x17d2 <ldexp+0x2e>
    1802:	6f 5f       	subi	r22, 0xFF	; 255
    1804:	7f 4f       	sbci	r23, 0xFF	; 255
    1806:	8f 4f       	sbci	r24, 0xFF	; 255
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	e3 cf       	rjmp	.-58     	; 0x17d2 <ldexp+0x2e>
    180c:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__fp_szero>

00001810 <modf>:
    1810:	fa 01       	movw	r30, r20
    1812:	dc 01       	movw	r26, r24
    1814:	aa 0f       	add	r26, r26
    1816:	bb 1f       	adc	r27, r27
    1818:	9b 01       	movw	r18, r22
    181a:	ac 01       	movw	r20, r24
    181c:	bf 57       	subi	r27, 0x7F	; 127
    181e:	28 f4       	brcc	.+10     	; 0x182a <modf+0x1a>
    1820:	22 27       	eor	r18, r18
    1822:	33 27       	eor	r19, r19
    1824:	44 27       	eor	r20, r20
    1826:	50 78       	andi	r21, 0x80	; 128
    1828:	20 c0       	rjmp	.+64     	; 0x186a <modf+0x5a>
    182a:	b7 51       	subi	r27, 0x17	; 23
    182c:	90 f4       	brcc	.+36     	; 0x1852 <modf+0x42>
    182e:	ab 2f       	mov	r26, r27
    1830:	00 24       	eor	r0, r0
    1832:	46 95       	lsr	r20
    1834:	37 95       	ror	r19
    1836:	27 95       	ror	r18
    1838:	01 1c       	adc	r0, r1
    183a:	a3 95       	inc	r26
    183c:	d2 f3       	brmi	.-12     	; 0x1832 <modf+0x22>
    183e:	00 20       	and	r0, r0
    1840:	71 f0       	breq	.+28     	; 0x185e <modf+0x4e>
    1842:	22 0f       	add	r18, r18
    1844:	33 1f       	adc	r19, r19
    1846:	44 1f       	adc	r20, r20
    1848:	b3 95       	inc	r27
    184a:	da f3       	brmi	.-10     	; 0x1842 <modf+0x32>
    184c:	0e d0       	rcall	.+28     	; 0x186a <modf+0x5a>
    184e:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__subsf3>
    1852:	61 30       	cpi	r22, 0x01	; 1
    1854:	71 05       	cpc	r23, r1
    1856:	a0 e8       	ldi	r26, 0x80	; 128
    1858:	8a 07       	cpc	r24, r26
    185a:	b9 46       	sbci	r27, 0x69	; 105
    185c:	30 f4       	brcc	.+12     	; 0x186a <modf+0x5a>
    185e:	9b 01       	movw	r18, r22
    1860:	ac 01       	movw	r20, r24
    1862:	66 27       	eor	r22, r22
    1864:	77 27       	eor	r23, r23
    1866:	88 27       	eor	r24, r24
    1868:	90 78       	andi	r25, 0x80	; 128
    186a:	30 96       	adiw	r30, 0x00	; 0
    186c:	21 f0       	breq	.+8      	; 0x1876 <modf+0x66>
    186e:	20 83       	st	Z, r18
    1870:	31 83       	std	Z+1, r19	; 0x01
    1872:	42 83       	std	Z+2, r20	; 0x02
    1874:	53 83       	std	Z+3, r21	; 0x03
    1876:	08 95       	ret

00001878 <__mulsf3>:
    1878:	0e 94 4f 0c 	call	0x189e	; 0x189e <__mulsf3x>
    187c:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__fp_round>
    1880:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__fp_pscA>
    1884:	38 f0       	brcs	.+14     	; 0x1894 <__mulsf3+0x1c>
    1886:	0e 94 80 0b 	call	0x1700	; 0x1700 <__fp_pscB>
    188a:	20 f0       	brcs	.+8      	; 0x1894 <__mulsf3+0x1c>
    188c:	95 23       	and	r25, r21
    188e:	11 f0       	breq	.+4      	; 0x1894 <__mulsf3+0x1c>
    1890:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__fp_inf>
    1894:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__fp_nan>
    1898:	11 24       	eor	r1, r1
    189a:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__fp_szero>

0000189e <__mulsf3x>:
    189e:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fp_split3>
    18a2:	70 f3       	brcs	.-36     	; 0x1880 <__mulsf3+0x8>

000018a4 <__mulsf3_pse>:
    18a4:	95 9f       	mul	r25, r21
    18a6:	c1 f3       	breq	.-16     	; 0x1898 <__mulsf3+0x20>
    18a8:	95 0f       	add	r25, r21
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	55 1f       	adc	r21, r21
    18ae:	62 9f       	mul	r22, r18
    18b0:	f0 01       	movw	r30, r0
    18b2:	72 9f       	mul	r23, r18
    18b4:	bb 27       	eor	r27, r27
    18b6:	f0 0d       	add	r31, r0
    18b8:	b1 1d       	adc	r27, r1
    18ba:	63 9f       	mul	r22, r19
    18bc:	aa 27       	eor	r26, r26
    18be:	f0 0d       	add	r31, r0
    18c0:	b1 1d       	adc	r27, r1
    18c2:	aa 1f       	adc	r26, r26
    18c4:	64 9f       	mul	r22, r20
    18c6:	66 27       	eor	r22, r22
    18c8:	b0 0d       	add	r27, r0
    18ca:	a1 1d       	adc	r26, r1
    18cc:	66 1f       	adc	r22, r22
    18ce:	82 9f       	mul	r24, r18
    18d0:	22 27       	eor	r18, r18
    18d2:	b0 0d       	add	r27, r0
    18d4:	a1 1d       	adc	r26, r1
    18d6:	62 1f       	adc	r22, r18
    18d8:	73 9f       	mul	r23, r19
    18da:	b0 0d       	add	r27, r0
    18dc:	a1 1d       	adc	r26, r1
    18de:	62 1f       	adc	r22, r18
    18e0:	83 9f       	mul	r24, r19
    18e2:	a0 0d       	add	r26, r0
    18e4:	61 1d       	adc	r22, r1
    18e6:	22 1f       	adc	r18, r18
    18e8:	74 9f       	mul	r23, r20
    18ea:	33 27       	eor	r19, r19
    18ec:	a0 0d       	add	r26, r0
    18ee:	61 1d       	adc	r22, r1
    18f0:	23 1f       	adc	r18, r19
    18f2:	84 9f       	mul	r24, r20
    18f4:	60 0d       	add	r22, r0
    18f6:	21 1d       	adc	r18, r1
    18f8:	82 2f       	mov	r24, r18
    18fa:	76 2f       	mov	r23, r22
    18fc:	6a 2f       	mov	r22, r26
    18fe:	11 24       	eor	r1, r1
    1900:	9f 57       	subi	r25, 0x7F	; 127
    1902:	50 40       	sbci	r21, 0x00	; 0
    1904:	9a f0       	brmi	.+38     	; 0x192c <__mulsf3_pse+0x88>
    1906:	f1 f0       	breq	.+60     	; 0x1944 <__mulsf3_pse+0xa0>
    1908:	88 23       	and	r24, r24
    190a:	4a f0       	brmi	.+18     	; 0x191e <__mulsf3_pse+0x7a>
    190c:	ee 0f       	add	r30, r30
    190e:	ff 1f       	adc	r31, r31
    1910:	bb 1f       	adc	r27, r27
    1912:	66 1f       	adc	r22, r22
    1914:	77 1f       	adc	r23, r23
    1916:	88 1f       	adc	r24, r24
    1918:	91 50       	subi	r25, 0x01	; 1
    191a:	50 40       	sbci	r21, 0x00	; 0
    191c:	a9 f7       	brne	.-22     	; 0x1908 <__mulsf3_pse+0x64>
    191e:	9e 3f       	cpi	r25, 0xFE	; 254
    1920:	51 05       	cpc	r21, r1
    1922:	80 f0       	brcs	.+32     	; 0x1944 <__mulsf3_pse+0xa0>
    1924:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__fp_inf>
    1928:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__fp_szero>
    192c:	5f 3f       	cpi	r21, 0xFF	; 255
    192e:	e4 f3       	brlt	.-8      	; 0x1928 <__mulsf3_pse+0x84>
    1930:	98 3e       	cpi	r25, 0xE8	; 232
    1932:	d4 f3       	brlt	.-12     	; 0x1928 <__mulsf3_pse+0x84>
    1934:	86 95       	lsr	r24
    1936:	77 95       	ror	r23
    1938:	67 95       	ror	r22
    193a:	b7 95       	ror	r27
    193c:	f7 95       	ror	r31
    193e:	e7 95       	ror	r30
    1940:	9f 5f       	subi	r25, 0xFF	; 255
    1942:	c1 f7       	brne	.-16     	; 0x1934 <__mulsf3_pse+0x90>
    1944:	fe 2b       	or	r31, r30
    1946:	88 0f       	add	r24, r24
    1948:	91 1d       	adc	r25, r1
    194a:	96 95       	lsr	r25
    194c:	87 95       	ror	r24
    194e:	97 f9       	bld	r25, 7
    1950:	08 95       	ret

00001952 <sin>:
    1952:	9f 93       	push	r25
    1954:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__fp_rempio2>
    1958:	0f 90       	pop	r0
    195a:	07 fc       	sbrc	r0, 7
    195c:	ee 5f       	subi	r30, 0xFE	; 254
    195e:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__fp_sinus>

00001962 <__fp_mpack>:
    1962:	9f 3f       	cpi	r25, 0xFF	; 255
    1964:	31 f0       	breq	.+12     	; 0x1972 <__fp_mpack_finite+0xc>

00001966 <__fp_mpack_finite>:
    1966:	91 50       	subi	r25, 0x01	; 1
    1968:	20 f4       	brcc	.+8      	; 0x1972 <__fp_mpack_finite+0xc>
    196a:	87 95       	ror	r24
    196c:	77 95       	ror	r23
    196e:	67 95       	ror	r22
    1970:	b7 95       	ror	r27
    1972:	88 0f       	add	r24, r24
    1974:	91 1d       	adc	r25, r1
    1976:	96 95       	lsr	r25
    1978:	87 95       	ror	r24
    197a:	97 f9       	bld	r25, 7
    197c:	08 95       	ret
    197e:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__fp_nan>

00001982 <__fp_rempio2>:
    1982:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__fp_splitA>
    1986:	d8 f3       	brcs	.-10     	; 0x197e <__fp_mpack_finite+0x18>
    1988:	e8 94       	clt
    198a:	e0 e0       	ldi	r30, 0x00	; 0
    198c:	bb 27       	eor	r27, r27
    198e:	9f 57       	subi	r25, 0x7F	; 127
    1990:	f0 f0       	brcs	.+60     	; 0x19ce <__fp_rempio2+0x4c>
    1992:	2a ed       	ldi	r18, 0xDA	; 218
    1994:	3f e0       	ldi	r19, 0x0F	; 15
    1996:	49 ec       	ldi	r20, 0xC9	; 201
    1998:	06 c0       	rjmp	.+12     	; 0x19a6 <__fp_rempio2+0x24>
    199a:	ee 0f       	add	r30, r30
    199c:	bb 0f       	add	r27, r27
    199e:	66 1f       	adc	r22, r22
    19a0:	77 1f       	adc	r23, r23
    19a2:	88 1f       	adc	r24, r24
    19a4:	28 f0       	brcs	.+10     	; 0x19b0 <__fp_rempio2+0x2e>
    19a6:	b2 3a       	cpi	r27, 0xA2	; 162
    19a8:	62 07       	cpc	r22, r18
    19aa:	73 07       	cpc	r23, r19
    19ac:	84 07       	cpc	r24, r20
    19ae:	28 f0       	brcs	.+10     	; 0x19ba <__fp_rempio2+0x38>
    19b0:	b2 5a       	subi	r27, 0xA2	; 162
    19b2:	62 0b       	sbc	r22, r18
    19b4:	73 0b       	sbc	r23, r19
    19b6:	84 0b       	sbc	r24, r20
    19b8:	e3 95       	inc	r30
    19ba:	9a 95       	dec	r25
    19bc:	72 f7       	brpl	.-36     	; 0x199a <__fp_rempio2+0x18>
    19be:	80 38       	cpi	r24, 0x80	; 128
    19c0:	30 f4       	brcc	.+12     	; 0x19ce <__fp_rempio2+0x4c>
    19c2:	9a 95       	dec	r25
    19c4:	bb 0f       	add	r27, r27
    19c6:	66 1f       	adc	r22, r22
    19c8:	77 1f       	adc	r23, r23
    19ca:	88 1f       	adc	r24, r24
    19cc:	d2 f7       	brpl	.-12     	; 0x19c2 <__fp_rempio2+0x40>
    19ce:	90 48       	sbci	r25, 0x80	; 128
    19d0:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__fp_mpack_finite>

000019d4 <__fp_sinus>:
    19d4:	ef 93       	push	r30
    19d6:	e0 ff       	sbrs	r30, 0
    19d8:	07 c0       	rjmp	.+14     	; 0x19e8 <__fp_sinus+0x14>
    19da:	a2 ea       	ldi	r26, 0xA2	; 162
    19dc:	2a ed       	ldi	r18, 0xDA	; 218
    19de:	3f e0       	ldi	r19, 0x0F	; 15
    19e0:	49 ec       	ldi	r20, 0xC9	; 201
    19e2:	5f eb       	ldi	r21, 0xBF	; 191
    19e4:	0e 94 94 09 	call	0x1328	; 0x1328 <__addsf3x>
    19e8:	0e 94 87 0b 	call	0x170e	; 0x170e <__fp_round>
    19ec:	0f 90       	pop	r0
    19ee:	03 94       	inc	r0
    19f0:	01 fc       	sbrc	r0, 1
    19f2:	90 58       	subi	r25, 0x80	; 128
    19f4:	e4 ea       	ldi	r30, 0xA4	; 164
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__fp_powsodd>

000019fc <__fp_powsodd>:
    19fc:	9f 93       	push	r25
    19fe:	8f 93       	push	r24
    1a00:	7f 93       	push	r23
    1a02:	6f 93       	push	r22
    1a04:	ff 93       	push	r31
    1a06:	ef 93       	push	r30
    1a08:	9b 01       	movw	r18, r22
    1a0a:	ac 01       	movw	r20, r24
    1a0c:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
    1a10:	ef 91       	pop	r30
    1a12:	ff 91       	pop	r31
    1a14:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fp_powser>
    1a18:	2f 91       	pop	r18
    1a1a:	3f 91       	pop	r19
    1a1c:	4f 91       	pop	r20
    1a1e:	5f 91       	pop	r21
    1a20:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <__mulsf3>

00001a24 <__udivmodsi4>:
    1a24:	a1 e2       	ldi	r26, 0x21	; 33
    1a26:	1a 2e       	mov	r1, r26
    1a28:	aa 1b       	sub	r26, r26
    1a2a:	bb 1b       	sub	r27, r27
    1a2c:	fd 01       	movw	r30, r26
    1a2e:	0d c0       	rjmp	.+26     	; 0x1a4a <__udivmodsi4_ep>

00001a30 <__udivmodsi4_loop>:
    1a30:	aa 1f       	adc	r26, r26
    1a32:	bb 1f       	adc	r27, r27
    1a34:	ee 1f       	adc	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	a2 17       	cp	r26, r18
    1a3a:	b3 07       	cpc	r27, r19
    1a3c:	e4 07       	cpc	r30, r20
    1a3e:	f5 07       	cpc	r31, r21
    1a40:	20 f0       	brcs	.+8      	; 0x1a4a <__udivmodsi4_ep>
    1a42:	a2 1b       	sub	r26, r18
    1a44:	b3 0b       	sbc	r27, r19
    1a46:	e4 0b       	sbc	r30, r20
    1a48:	f5 0b       	sbc	r31, r21

00001a4a <__udivmodsi4_ep>:
    1a4a:	66 1f       	adc	r22, r22
    1a4c:	77 1f       	adc	r23, r23
    1a4e:	88 1f       	adc	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	1a 94       	dec	r1
    1a54:	69 f7       	brne	.-38     	; 0x1a30 <__udivmodsi4_loop>
    1a56:	60 95       	com	r22
    1a58:	70 95       	com	r23
    1a5a:	80 95       	com	r24
    1a5c:	90 95       	com	r25
    1a5e:	9b 01       	movw	r18, r22
    1a60:	ac 01       	movw	r20, r24
    1a62:	bd 01       	movw	r22, r26
    1a64:	cf 01       	movw	r24, r30
    1a66:	08 95       	ret

00001a68 <dtostrf>:
    1a68:	ef 92       	push	r14
    1a6a:	0f 93       	push	r16
    1a6c:	1f 93       	push	r17
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	e8 01       	movw	r28, r16
    1a74:	47 fd       	sbrc	r20, 7
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <dtostrf+0x14>
    1a78:	34 e0       	ldi	r19, 0x04	; 4
    1a7a:	01 c0       	rjmp	.+2      	; 0x1a7e <dtostrf+0x16>
    1a7c:	34 e1       	ldi	r19, 0x14	; 20
    1a7e:	04 2e       	mov	r0, r20
    1a80:	00 0c       	add	r0, r0
    1a82:	55 0b       	sbc	r21, r21
    1a84:	57 ff       	sbrs	r21, 7
    1a86:	03 c0       	rjmp	.+6      	; 0x1a8e <dtostrf+0x26>
    1a88:	51 95       	neg	r21
    1a8a:	41 95       	neg	r20
    1a8c:	51 09       	sbc	r21, r1
    1a8e:	e3 2e       	mov	r14, r19
    1a90:	02 2f       	mov	r16, r18
    1a92:	24 2f       	mov	r18, r20
    1a94:	ae 01       	movw	r20, r28
    1a96:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <dtoa_prf>
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	ef 90       	pop	r14
    1aa6:	08 95       	ret

00001aa8 <printf>:
    1aa8:	a0 e0       	ldi	r26, 0x00	; 0
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	ea e5       	ldi	r30, 0x5A	; 90
    1aae:	fd e0       	ldi	r31, 0x0D	; 13
    1ab0:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__prologue_saves__+0x20>
    1ab4:	ae 01       	movw	r20, r28
    1ab6:	4b 5f       	subi	r20, 0xFB	; 251
    1ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    1aba:	fa 01       	movw	r30, r20
    1abc:	61 91       	ld	r22, Z+
    1abe:	71 91       	ld	r23, Z+
    1ac0:	af 01       	movw	r20, r30
    1ac2:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <__iob+0x2>
    1ac6:	90 91 68 38 	lds	r25, 0x3868	; 0x803868 <__iob+0x3>
    1aca:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <vfprintf>
    1ace:	e2 e0       	ldi	r30, 0x02	; 2
    1ad0:	0c 94 86 12 	jmp	0x250c	; 0x250c <__epilogue_restores__+0x20>

00001ad4 <puts>:
    1ad4:	0f 93       	push	r16
    1ad6:	1f 93       	push	r17
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	e0 91 67 38 	lds	r30, 0x3867	; 0x803867 <__iob+0x2>
    1ae0:	f0 91 68 38 	lds	r31, 0x3868	; 0x803868 <__iob+0x3>
    1ae4:	23 81       	ldd	r18, Z+3	; 0x03
    1ae6:	21 ff       	sbrs	r18, 1
    1ae8:	1b c0       	rjmp	.+54     	; 0x1b20 <puts+0x4c>
    1aea:	8c 01       	movw	r16, r24
    1aec:	d0 e0       	ldi	r29, 0x00	; 0
    1aee:	c0 e0       	ldi	r28, 0x00	; 0
    1af0:	f8 01       	movw	r30, r16
    1af2:	81 91       	ld	r24, Z+
    1af4:	8f 01       	movw	r16, r30
    1af6:	60 91 67 38 	lds	r22, 0x3867	; 0x803867 <__iob+0x2>
    1afa:	70 91 68 38 	lds	r23, 0x3868	; 0x803868 <__iob+0x3>
    1afe:	db 01       	movw	r26, r22
    1b00:	18 96       	adiw	r26, 0x08	; 8
    1b02:	ed 91       	ld	r30, X+
    1b04:	fc 91       	ld	r31, X
    1b06:	19 97       	sbiw	r26, 0x09	; 9
    1b08:	88 23       	and	r24, r24
    1b0a:	31 f0       	breq	.+12     	; 0x1b18 <puts+0x44>
    1b0c:	09 95       	icall
    1b0e:	89 2b       	or	r24, r25
    1b10:	79 f3       	breq	.-34     	; 0x1af0 <puts+0x1c>
    1b12:	df ef       	ldi	r29, 0xFF	; 255
    1b14:	cf ef       	ldi	r28, 0xFF	; 255
    1b16:	ec cf       	rjmp	.-40     	; 0x1af0 <puts+0x1c>
    1b18:	8a e0       	ldi	r24, 0x0A	; 10
    1b1a:	09 95       	icall
    1b1c:	89 2b       	or	r24, r25
    1b1e:	19 f0       	breq	.+6      	; 0x1b26 <puts+0x52>
    1b20:	8f ef       	ldi	r24, 0xFF	; 255
    1b22:	9f ef       	ldi	r25, 0xFF	; 255
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <puts+0x56>
    1b26:	8d 2f       	mov	r24, r29
    1b28:	9c 2f       	mov	r25, r28
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	08 95       	ret

00001b34 <vfprintf>:
    1b34:	ab e0       	ldi	r26, 0x0B	; 11
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e0 ea       	ldi	r30, 0xA0	; 160
    1b3a:	fd e0       	ldi	r31, 0x0D	; 13
    1b3c:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__prologue_saves__>
    1b40:	6c 01       	movw	r12, r24
    1b42:	7b 01       	movw	r14, r22
    1b44:	8a 01       	movw	r16, r20
    1b46:	fc 01       	movw	r30, r24
    1b48:	16 82       	std	Z+6, r1	; 0x06
    1b4a:	17 82       	std	Z+7, r1	; 0x07
    1b4c:	83 81       	ldd	r24, Z+3	; 0x03
    1b4e:	81 ff       	sbrs	r24, 1
    1b50:	cc c1       	rjmp	.+920    	; 0x1eea <vfprintf+0x3b6>
    1b52:	ce 01       	movw	r24, r28
    1b54:	01 96       	adiw	r24, 0x01	; 1
    1b56:	3c 01       	movw	r6, r24
    1b58:	f6 01       	movw	r30, r12
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	f7 01       	movw	r30, r14
    1b5e:	93 fd       	sbrc	r25, 3
    1b60:	85 91       	lpm	r24, Z+
    1b62:	93 ff       	sbrs	r25, 3
    1b64:	81 91       	ld	r24, Z+
    1b66:	7f 01       	movw	r14, r30
    1b68:	88 23       	and	r24, r24
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <vfprintf+0x3a>
    1b6c:	ba c1       	rjmp	.+884    	; 0x1ee2 <vfprintf+0x3ae>
    1b6e:	85 32       	cpi	r24, 0x25	; 37
    1b70:	39 f4       	brne	.+14     	; 0x1b80 <vfprintf+0x4c>
    1b72:	93 fd       	sbrc	r25, 3
    1b74:	85 91       	lpm	r24, Z+
    1b76:	93 ff       	sbrs	r25, 3
    1b78:	81 91       	ld	r24, Z+
    1b7a:	7f 01       	movw	r14, r30
    1b7c:	85 32       	cpi	r24, 0x25	; 37
    1b7e:	29 f4       	brne	.+10     	; 0x1b8a <vfprintf+0x56>
    1b80:	b6 01       	movw	r22, r12
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0e 94 c3 11 	call	0x2386	; 0x2386 <fputc>
    1b88:	e7 cf       	rjmp	.-50     	; 0x1b58 <vfprintf+0x24>
    1b8a:	91 2c       	mov	r9, r1
    1b8c:	21 2c       	mov	r2, r1
    1b8e:	31 2c       	mov	r3, r1
    1b90:	ff e1       	ldi	r31, 0x1F	; 31
    1b92:	f3 15       	cp	r31, r3
    1b94:	d8 f0       	brcs	.+54     	; 0x1bcc <vfprintf+0x98>
    1b96:	8b 32       	cpi	r24, 0x2B	; 43
    1b98:	79 f0       	breq	.+30     	; 0x1bb8 <vfprintf+0x84>
    1b9a:	38 f4       	brcc	.+14     	; 0x1baa <vfprintf+0x76>
    1b9c:	80 32       	cpi	r24, 0x20	; 32
    1b9e:	79 f0       	breq	.+30     	; 0x1bbe <vfprintf+0x8a>
    1ba0:	83 32       	cpi	r24, 0x23	; 35
    1ba2:	a1 f4       	brne	.+40     	; 0x1bcc <vfprintf+0x98>
    1ba4:	23 2d       	mov	r18, r3
    1ba6:	20 61       	ori	r18, 0x10	; 16
    1ba8:	1d c0       	rjmp	.+58     	; 0x1be4 <vfprintf+0xb0>
    1baa:	8d 32       	cpi	r24, 0x2D	; 45
    1bac:	61 f0       	breq	.+24     	; 0x1bc6 <vfprintf+0x92>
    1bae:	80 33       	cpi	r24, 0x30	; 48
    1bb0:	69 f4       	brne	.+26     	; 0x1bcc <vfprintf+0x98>
    1bb2:	23 2d       	mov	r18, r3
    1bb4:	21 60       	ori	r18, 0x01	; 1
    1bb6:	16 c0       	rjmp	.+44     	; 0x1be4 <vfprintf+0xb0>
    1bb8:	83 2d       	mov	r24, r3
    1bba:	82 60       	ori	r24, 0x02	; 2
    1bbc:	38 2e       	mov	r3, r24
    1bbe:	e3 2d       	mov	r30, r3
    1bc0:	e4 60       	ori	r30, 0x04	; 4
    1bc2:	3e 2e       	mov	r3, r30
    1bc4:	2a c0       	rjmp	.+84     	; 0x1c1a <vfprintf+0xe6>
    1bc6:	f3 2d       	mov	r31, r3
    1bc8:	f8 60       	ori	r31, 0x08	; 8
    1bca:	1d c0       	rjmp	.+58     	; 0x1c06 <vfprintf+0xd2>
    1bcc:	37 fc       	sbrc	r3, 7
    1bce:	2d c0       	rjmp	.+90     	; 0x1c2a <vfprintf+0xf6>
    1bd0:	20 ed       	ldi	r18, 0xD0	; 208
    1bd2:	28 0f       	add	r18, r24
    1bd4:	2a 30       	cpi	r18, 0x0A	; 10
    1bd6:	40 f0       	brcs	.+16     	; 0x1be8 <vfprintf+0xb4>
    1bd8:	8e 32       	cpi	r24, 0x2E	; 46
    1bda:	b9 f4       	brne	.+46     	; 0x1c0a <vfprintf+0xd6>
    1bdc:	36 fc       	sbrc	r3, 6
    1bde:	81 c1       	rjmp	.+770    	; 0x1ee2 <vfprintf+0x3ae>
    1be0:	23 2d       	mov	r18, r3
    1be2:	20 64       	ori	r18, 0x40	; 64
    1be4:	32 2e       	mov	r3, r18
    1be6:	19 c0       	rjmp	.+50     	; 0x1c1a <vfprintf+0xe6>
    1be8:	36 fe       	sbrs	r3, 6
    1bea:	06 c0       	rjmp	.+12     	; 0x1bf8 <vfprintf+0xc4>
    1bec:	8a e0       	ldi	r24, 0x0A	; 10
    1bee:	98 9e       	mul	r9, r24
    1bf0:	20 0d       	add	r18, r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	92 2e       	mov	r9, r18
    1bf6:	11 c0       	rjmp	.+34     	; 0x1c1a <vfprintf+0xe6>
    1bf8:	ea e0       	ldi	r30, 0x0A	; 10
    1bfa:	2e 9e       	mul	r2, r30
    1bfc:	20 0d       	add	r18, r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	22 2e       	mov	r2, r18
    1c02:	f3 2d       	mov	r31, r3
    1c04:	f0 62       	ori	r31, 0x20	; 32
    1c06:	3f 2e       	mov	r3, r31
    1c08:	08 c0       	rjmp	.+16     	; 0x1c1a <vfprintf+0xe6>
    1c0a:	8c 36       	cpi	r24, 0x6C	; 108
    1c0c:	21 f4       	brne	.+8      	; 0x1c16 <vfprintf+0xe2>
    1c0e:	83 2d       	mov	r24, r3
    1c10:	80 68       	ori	r24, 0x80	; 128
    1c12:	38 2e       	mov	r3, r24
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <vfprintf+0xe6>
    1c16:	88 36       	cpi	r24, 0x68	; 104
    1c18:	41 f4       	brne	.+16     	; 0x1c2a <vfprintf+0xf6>
    1c1a:	f7 01       	movw	r30, r14
    1c1c:	93 fd       	sbrc	r25, 3
    1c1e:	85 91       	lpm	r24, Z+
    1c20:	93 ff       	sbrs	r25, 3
    1c22:	81 91       	ld	r24, Z+
    1c24:	7f 01       	movw	r14, r30
    1c26:	81 11       	cpse	r24, r1
    1c28:	b3 cf       	rjmp	.-154    	; 0x1b90 <vfprintf+0x5c>
    1c2a:	98 2f       	mov	r25, r24
    1c2c:	9f 7d       	andi	r25, 0xDF	; 223
    1c2e:	95 54       	subi	r25, 0x45	; 69
    1c30:	93 30       	cpi	r25, 0x03	; 3
    1c32:	28 f4       	brcc	.+10     	; 0x1c3e <vfprintf+0x10a>
    1c34:	0c 5f       	subi	r16, 0xFC	; 252
    1c36:	1f 4f       	sbci	r17, 0xFF	; 255
    1c38:	9f e3       	ldi	r25, 0x3F	; 63
    1c3a:	99 83       	std	Y+1, r25	; 0x01
    1c3c:	0d c0       	rjmp	.+26     	; 0x1c58 <vfprintf+0x124>
    1c3e:	83 36       	cpi	r24, 0x63	; 99
    1c40:	31 f0       	breq	.+12     	; 0x1c4e <vfprintf+0x11a>
    1c42:	83 37       	cpi	r24, 0x73	; 115
    1c44:	71 f0       	breq	.+28     	; 0x1c62 <vfprintf+0x12e>
    1c46:	83 35       	cpi	r24, 0x53	; 83
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <vfprintf+0x118>
    1c4a:	59 c0       	rjmp	.+178    	; 0x1cfe <vfprintf+0x1ca>
    1c4c:	21 c0       	rjmp	.+66     	; 0x1c90 <vfprintf+0x15c>
    1c4e:	f8 01       	movw	r30, r16
    1c50:	80 81       	ld	r24, Z
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	0e 5f       	subi	r16, 0xFE	; 254
    1c56:	1f 4f       	sbci	r17, 0xFF	; 255
    1c58:	88 24       	eor	r8, r8
    1c5a:	83 94       	inc	r8
    1c5c:	91 2c       	mov	r9, r1
    1c5e:	53 01       	movw	r10, r6
    1c60:	13 c0       	rjmp	.+38     	; 0x1c88 <vfprintf+0x154>
    1c62:	28 01       	movw	r4, r16
    1c64:	f2 e0       	ldi	r31, 0x02	; 2
    1c66:	4f 0e       	add	r4, r31
    1c68:	51 1c       	adc	r5, r1
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	a0 80       	ld	r10, Z
    1c6e:	b1 80       	ldd	r11, Z+1	; 0x01
    1c70:	36 fe       	sbrs	r3, 6
    1c72:	03 c0       	rjmp	.+6      	; 0x1c7a <vfprintf+0x146>
    1c74:	69 2d       	mov	r22, r9
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <vfprintf+0x14a>
    1c7a:	6f ef       	ldi	r22, 0xFF	; 255
    1c7c:	7f ef       	ldi	r23, 0xFF	; 255
    1c7e:	c5 01       	movw	r24, r10
    1c80:	0e 94 b8 11 	call	0x2370	; 0x2370 <strnlen>
    1c84:	4c 01       	movw	r8, r24
    1c86:	82 01       	movw	r16, r4
    1c88:	f3 2d       	mov	r31, r3
    1c8a:	ff 77       	andi	r31, 0x7F	; 127
    1c8c:	3f 2e       	mov	r3, r31
    1c8e:	16 c0       	rjmp	.+44     	; 0x1cbc <vfprintf+0x188>
    1c90:	28 01       	movw	r4, r16
    1c92:	22 e0       	ldi	r18, 0x02	; 2
    1c94:	42 0e       	add	r4, r18
    1c96:	51 1c       	adc	r5, r1
    1c98:	f8 01       	movw	r30, r16
    1c9a:	a0 80       	ld	r10, Z
    1c9c:	b1 80       	ldd	r11, Z+1	; 0x01
    1c9e:	36 fe       	sbrs	r3, 6
    1ca0:	03 c0       	rjmp	.+6      	; 0x1ca8 <vfprintf+0x174>
    1ca2:	69 2d       	mov	r22, r9
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <vfprintf+0x178>
    1ca8:	6f ef       	ldi	r22, 0xFF	; 255
    1caa:	7f ef       	ldi	r23, 0xFF	; 255
    1cac:	c5 01       	movw	r24, r10
    1cae:	0e 94 ad 11 	call	0x235a	; 0x235a <strnlen_P>
    1cb2:	4c 01       	movw	r8, r24
    1cb4:	f3 2d       	mov	r31, r3
    1cb6:	f0 68       	ori	r31, 0x80	; 128
    1cb8:	3f 2e       	mov	r3, r31
    1cba:	82 01       	movw	r16, r4
    1cbc:	33 fc       	sbrc	r3, 3
    1cbe:	1b c0       	rjmp	.+54     	; 0x1cf6 <vfprintf+0x1c2>
    1cc0:	82 2d       	mov	r24, r2
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	88 16       	cp	r8, r24
    1cc6:	99 06       	cpc	r9, r25
    1cc8:	b0 f4       	brcc	.+44     	; 0x1cf6 <vfprintf+0x1c2>
    1cca:	b6 01       	movw	r22, r12
    1ccc:	80 e2       	ldi	r24, 0x20	; 32
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 94 c3 11 	call	0x2386	; 0x2386 <fputc>
    1cd4:	2a 94       	dec	r2
    1cd6:	f4 cf       	rjmp	.-24     	; 0x1cc0 <vfprintf+0x18c>
    1cd8:	f5 01       	movw	r30, r10
    1cda:	37 fc       	sbrc	r3, 7
    1cdc:	85 91       	lpm	r24, Z+
    1cde:	37 fe       	sbrs	r3, 7
    1ce0:	81 91       	ld	r24, Z+
    1ce2:	5f 01       	movw	r10, r30
    1ce4:	b6 01       	movw	r22, r12
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 c3 11 	call	0x2386	; 0x2386 <fputc>
    1cec:	21 10       	cpse	r2, r1
    1cee:	2a 94       	dec	r2
    1cf0:	21 e0       	ldi	r18, 0x01	; 1
    1cf2:	82 1a       	sub	r8, r18
    1cf4:	91 08       	sbc	r9, r1
    1cf6:	81 14       	cp	r8, r1
    1cf8:	91 04       	cpc	r9, r1
    1cfa:	71 f7       	brne	.-36     	; 0x1cd8 <vfprintf+0x1a4>
    1cfc:	e8 c0       	rjmp	.+464    	; 0x1ece <vfprintf+0x39a>
    1cfe:	84 36       	cpi	r24, 0x64	; 100
    1d00:	11 f0       	breq	.+4      	; 0x1d06 <vfprintf+0x1d2>
    1d02:	89 36       	cpi	r24, 0x69	; 105
    1d04:	41 f5       	brne	.+80     	; 0x1d56 <vfprintf+0x222>
    1d06:	f8 01       	movw	r30, r16
    1d08:	37 fe       	sbrs	r3, 7
    1d0a:	07 c0       	rjmp	.+14     	; 0x1d1a <vfprintf+0x1e6>
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	0c 5f       	subi	r16, 0xFC	; 252
    1d16:	1f 4f       	sbci	r17, 0xFF	; 255
    1d18:	08 c0       	rjmp	.+16     	; 0x1d2a <vfprintf+0x1f6>
    1d1a:	60 81       	ld	r22, Z
    1d1c:	71 81       	ldd	r23, Z+1	; 0x01
    1d1e:	07 2e       	mov	r0, r23
    1d20:	00 0c       	add	r0, r0
    1d22:	88 0b       	sbc	r24, r24
    1d24:	99 0b       	sbc	r25, r25
    1d26:	0e 5f       	subi	r16, 0xFE	; 254
    1d28:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2a:	f3 2d       	mov	r31, r3
    1d2c:	ff 76       	andi	r31, 0x6F	; 111
    1d2e:	3f 2e       	mov	r3, r31
    1d30:	97 ff       	sbrs	r25, 7
    1d32:	09 c0       	rjmp	.+18     	; 0x1d46 <vfprintf+0x212>
    1d34:	90 95       	com	r25
    1d36:	80 95       	com	r24
    1d38:	70 95       	com	r23
    1d3a:	61 95       	neg	r22
    1d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d40:	9f 4f       	sbci	r25, 0xFF	; 255
    1d42:	f0 68       	ori	r31, 0x80	; 128
    1d44:	3f 2e       	mov	r3, r31
    1d46:	2a e0       	ldi	r18, 0x0A	; 10
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	a3 01       	movw	r20, r6
    1d4c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__ultoa_invert>
    1d50:	88 2e       	mov	r8, r24
    1d52:	86 18       	sub	r8, r6
    1d54:	45 c0       	rjmp	.+138    	; 0x1de0 <vfprintf+0x2ac>
    1d56:	85 37       	cpi	r24, 0x75	; 117
    1d58:	31 f4       	brne	.+12     	; 0x1d66 <vfprintf+0x232>
    1d5a:	23 2d       	mov	r18, r3
    1d5c:	2f 7e       	andi	r18, 0xEF	; 239
    1d5e:	b2 2e       	mov	r11, r18
    1d60:	2a e0       	ldi	r18, 0x0A	; 10
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	25 c0       	rjmp	.+74     	; 0x1db0 <vfprintf+0x27c>
    1d66:	93 2d       	mov	r25, r3
    1d68:	99 7f       	andi	r25, 0xF9	; 249
    1d6a:	b9 2e       	mov	r11, r25
    1d6c:	8f 36       	cpi	r24, 0x6F	; 111
    1d6e:	c1 f0       	breq	.+48     	; 0x1da0 <vfprintf+0x26c>
    1d70:	18 f4       	brcc	.+6      	; 0x1d78 <vfprintf+0x244>
    1d72:	88 35       	cpi	r24, 0x58	; 88
    1d74:	79 f0       	breq	.+30     	; 0x1d94 <vfprintf+0x260>
    1d76:	b5 c0       	rjmp	.+362    	; 0x1ee2 <vfprintf+0x3ae>
    1d78:	80 37       	cpi	r24, 0x70	; 112
    1d7a:	19 f0       	breq	.+6      	; 0x1d82 <vfprintf+0x24e>
    1d7c:	88 37       	cpi	r24, 0x78	; 120
    1d7e:	21 f0       	breq	.+8      	; 0x1d88 <vfprintf+0x254>
    1d80:	b0 c0       	rjmp	.+352    	; 0x1ee2 <vfprintf+0x3ae>
    1d82:	e9 2f       	mov	r30, r25
    1d84:	e0 61       	ori	r30, 0x10	; 16
    1d86:	be 2e       	mov	r11, r30
    1d88:	b4 fe       	sbrs	r11, 4
    1d8a:	0d c0       	rjmp	.+26     	; 0x1da6 <vfprintf+0x272>
    1d8c:	fb 2d       	mov	r31, r11
    1d8e:	f4 60       	ori	r31, 0x04	; 4
    1d90:	bf 2e       	mov	r11, r31
    1d92:	09 c0       	rjmp	.+18     	; 0x1da6 <vfprintf+0x272>
    1d94:	34 fe       	sbrs	r3, 4
    1d96:	0a c0       	rjmp	.+20     	; 0x1dac <vfprintf+0x278>
    1d98:	29 2f       	mov	r18, r25
    1d9a:	26 60       	ori	r18, 0x06	; 6
    1d9c:	b2 2e       	mov	r11, r18
    1d9e:	06 c0       	rjmp	.+12     	; 0x1dac <vfprintf+0x278>
    1da0:	28 e0       	ldi	r18, 0x08	; 8
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	05 c0       	rjmp	.+10     	; 0x1db0 <vfprintf+0x27c>
    1da6:	20 e1       	ldi	r18, 0x10	; 16
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <vfprintf+0x27c>
    1dac:	20 e1       	ldi	r18, 0x10	; 16
    1dae:	32 e0       	ldi	r19, 0x02	; 2
    1db0:	f8 01       	movw	r30, r16
    1db2:	b7 fe       	sbrs	r11, 7
    1db4:	07 c0       	rjmp	.+14     	; 0x1dc4 <vfprintf+0x290>
    1db6:	60 81       	ld	r22, Z
    1db8:	71 81       	ldd	r23, Z+1	; 0x01
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	93 81       	ldd	r25, Z+3	; 0x03
    1dbe:	0c 5f       	subi	r16, 0xFC	; 252
    1dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc2:	06 c0       	rjmp	.+12     	; 0x1dd0 <vfprintf+0x29c>
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	0e 5f       	subi	r16, 0xFE	; 254
    1dce:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd0:	a3 01       	movw	r20, r6
    1dd2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__ultoa_invert>
    1dd6:	88 2e       	mov	r8, r24
    1dd8:	86 18       	sub	r8, r6
    1dda:	fb 2d       	mov	r31, r11
    1ddc:	ff 77       	andi	r31, 0x7F	; 127
    1dde:	3f 2e       	mov	r3, r31
    1de0:	36 fe       	sbrs	r3, 6
    1de2:	0d c0       	rjmp	.+26     	; 0x1dfe <vfprintf+0x2ca>
    1de4:	23 2d       	mov	r18, r3
    1de6:	2e 7f       	andi	r18, 0xFE	; 254
    1de8:	a2 2e       	mov	r10, r18
    1dea:	89 14       	cp	r8, r9
    1dec:	58 f4       	brcc	.+22     	; 0x1e04 <vfprintf+0x2d0>
    1dee:	34 fe       	sbrs	r3, 4
    1df0:	0b c0       	rjmp	.+22     	; 0x1e08 <vfprintf+0x2d4>
    1df2:	32 fc       	sbrc	r3, 2
    1df4:	09 c0       	rjmp	.+18     	; 0x1e08 <vfprintf+0x2d4>
    1df6:	83 2d       	mov	r24, r3
    1df8:	8e 7e       	andi	r24, 0xEE	; 238
    1dfa:	a8 2e       	mov	r10, r24
    1dfc:	05 c0       	rjmp	.+10     	; 0x1e08 <vfprintf+0x2d4>
    1dfe:	b8 2c       	mov	r11, r8
    1e00:	a3 2c       	mov	r10, r3
    1e02:	03 c0       	rjmp	.+6      	; 0x1e0a <vfprintf+0x2d6>
    1e04:	b8 2c       	mov	r11, r8
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <vfprintf+0x2d6>
    1e08:	b9 2c       	mov	r11, r9
    1e0a:	a4 fe       	sbrs	r10, 4
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <vfprintf+0x2f8>
    1e0e:	fe 01       	movw	r30, r28
    1e10:	e8 0d       	add	r30, r8
    1e12:	f1 1d       	adc	r31, r1
    1e14:	80 81       	ld	r24, Z
    1e16:	80 33       	cpi	r24, 0x30	; 48
    1e18:	21 f4       	brne	.+8      	; 0x1e22 <vfprintf+0x2ee>
    1e1a:	9a 2d       	mov	r25, r10
    1e1c:	99 7e       	andi	r25, 0xE9	; 233
    1e1e:	a9 2e       	mov	r10, r25
    1e20:	09 c0       	rjmp	.+18     	; 0x1e34 <vfprintf+0x300>
    1e22:	a2 fe       	sbrs	r10, 2
    1e24:	06 c0       	rjmp	.+12     	; 0x1e32 <vfprintf+0x2fe>
    1e26:	b3 94       	inc	r11
    1e28:	b3 94       	inc	r11
    1e2a:	04 c0       	rjmp	.+8      	; 0x1e34 <vfprintf+0x300>
    1e2c:	8a 2d       	mov	r24, r10
    1e2e:	86 78       	andi	r24, 0x86	; 134
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <vfprintf+0x300>
    1e32:	b3 94       	inc	r11
    1e34:	a3 fc       	sbrc	r10, 3
    1e36:	11 c0       	rjmp	.+34     	; 0x1e5a <vfprintf+0x326>
    1e38:	a0 fe       	sbrs	r10, 0
    1e3a:	06 c0       	rjmp	.+12     	; 0x1e48 <vfprintf+0x314>
    1e3c:	b2 14       	cp	r11, r2
    1e3e:	88 f4       	brcc	.+34     	; 0x1e62 <vfprintf+0x32e>
    1e40:	28 0c       	add	r2, r8
    1e42:	92 2c       	mov	r9, r2
    1e44:	9b 18       	sub	r9, r11
    1e46:	0e c0       	rjmp	.+28     	; 0x1e64 <vfprintf+0x330>
    1e48:	b2 14       	cp	r11, r2
    1e4a:	60 f4       	brcc	.+24     	; 0x1e64 <vfprintf+0x330>
    1e4c:	b6 01       	movw	r22, r12
    1e4e:	80 e2       	ldi	r24, 0x20	; 32
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 c3 11 	call	0x2386	; 0x2386 <fputc>
    1e56:	b3 94       	inc	r11
    1e58:	f7 cf       	rjmp	.-18     	; 0x1e48 <vfprintf+0x314>
    1e5a:	b2 14       	cp	r11, r2
    1e5c:	18 f4       	brcc	.+6      	; 0x1e64 <vfprintf+0x330>
    1e5e:	2b 18       	sub	r2, r11
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <vfprintf+0x332>
    1e62:	98 2c       	mov	r9, r8
    1e64:	21 2c       	mov	r2, r1
    1e66:	a4 fe       	sbrs	r10, 4
    1e68:	10 c0       	rjmp	.+32     	; 0x1e8a <vfprintf+0x356>
    1e6a:	b6 01       	movw	r22, r12
    1e6c:	80 e3       	ldi	r24, 0x30	; 48
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	0e 94 c3 11 	call	0x2386	; 0x2386 <fputc>
    1e74:	a2 fe       	sbrs	r10, 2
    1e76:	17 c0       	rjmp	.+46     	; 0x1ea6 <vfprintf+0x372>
    1e78:	a1 fc       	sbrc	r10, 1
    1e7a:	03 c0       	rjmp	.+6      	; 0x1e82 <vfprintf+0x34e>
    1e7c:	88 e7       	ldi	r24, 0x78	; 120
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <vfprintf+0x352>
    1e82:	88 e5       	ldi	r24, 0x58	; 88
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	b6 01       	movw	r22, r12
    1e88:	0c c0       	rjmp	.+24     	; 0x1ea2 <vfprintf+0x36e>
    1e8a:	8a 2d       	mov	r24, r10
    1e8c:	86 78       	andi	r24, 0x86	; 134
    1e8e:	59 f0       	breq	.+22     	; 0x1ea6 <vfprintf+0x372>
    1e90:	a1 fe       	sbrs	r10, 1
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <vfprintf+0x364>
    1e94:	8b e2       	ldi	r24, 0x2B	; 43
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <vfprintf+0x366>
    1e98:	80 e2       	ldi	r24, 0x20	; 32
    1e9a:	a7 fc       	sbrc	r10, 7
    1e9c:	8d e2       	ldi	r24, 0x2D	; 45
    1e9e:	b6 01       	movw	r22, r12
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 c3 11 	call	0x2386	; 0x2386 <fputc>
    1ea6:	89 14       	cp	r8, r9
    1ea8:	38 f4       	brcc	.+14     	; 0x1eb8 <vfprintf+0x384>
    1eaa:	b6 01       	movw	r22, r12
    1eac:	80 e3       	ldi	r24, 0x30	; 48
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	0e 94 c3 11 	call	0x2386	; 0x2386 <fputc>
    1eb4:	9a 94       	dec	r9
    1eb6:	f7 cf       	rjmp	.-18     	; 0x1ea6 <vfprintf+0x372>
    1eb8:	8a 94       	dec	r8
    1eba:	f3 01       	movw	r30, r6
    1ebc:	e8 0d       	add	r30, r8
    1ebe:	f1 1d       	adc	r31, r1
    1ec0:	80 81       	ld	r24, Z
    1ec2:	b6 01       	movw	r22, r12
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	0e 94 c3 11 	call	0x2386	; 0x2386 <fputc>
    1eca:	81 10       	cpse	r8, r1
    1ecc:	f5 cf       	rjmp	.-22     	; 0x1eb8 <vfprintf+0x384>
    1ece:	22 20       	and	r2, r2
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <vfprintf+0x3a0>
    1ed2:	42 ce       	rjmp	.-892    	; 0x1b58 <vfprintf+0x24>
    1ed4:	b6 01       	movw	r22, r12
    1ed6:	80 e2       	ldi	r24, 0x20	; 32
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 c3 11 	call	0x2386	; 0x2386 <fputc>
    1ede:	2a 94       	dec	r2
    1ee0:	f6 cf       	rjmp	.-20     	; 0x1ece <vfprintf+0x39a>
    1ee2:	f6 01       	movw	r30, r12
    1ee4:	86 81       	ldd	r24, Z+6	; 0x06
    1ee6:	97 81       	ldd	r25, Z+7	; 0x07
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <vfprintf+0x3ba>
    1eea:	8f ef       	ldi	r24, 0xFF	; 255
    1eec:	9f ef       	ldi	r25, 0xFF	; 255
    1eee:	2b 96       	adiw	r28, 0x0b	; 11
    1ef0:	e2 e1       	ldi	r30, 0x12	; 18
    1ef2:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__epilogue_restores__>

00001ef6 <dtoa_prf>:
    1ef6:	a9 e0       	ldi	r26, 0x09	; 9
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e1 e8       	ldi	r30, 0x81	; 129
    1efc:	ff e0       	ldi	r31, 0x0F	; 15
    1efe:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__prologue_saves__+0xc>
    1f02:	6a 01       	movw	r12, r20
    1f04:	12 2f       	mov	r17, r18
    1f06:	b0 2e       	mov	r11, r16
    1f08:	2b e3       	ldi	r18, 0x3B	; 59
    1f0a:	20 17       	cp	r18, r16
    1f0c:	20 f0       	brcs	.+8      	; 0x1f16 <dtoa_prf+0x20>
    1f0e:	ff 24       	eor	r15, r15
    1f10:	f3 94       	inc	r15
    1f12:	f0 0e       	add	r15, r16
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <dtoa_prf+0x24>
    1f16:	2c e3       	ldi	r18, 0x3C	; 60
    1f18:	f2 2e       	mov	r15, r18
    1f1a:	0f 2d       	mov	r16, r15
    1f1c:	27 e0       	ldi	r18, 0x07	; 7
    1f1e:	ae 01       	movw	r20, r28
    1f20:	4f 5f       	subi	r20, 0xFF	; 255
    1f22:	5f 4f       	sbci	r21, 0xFF	; 255
    1f24:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__ftoa_engine>
    1f28:	bc 01       	movw	r22, r24
    1f2a:	49 81       	ldd	r20, Y+1	; 0x01
    1f2c:	84 2f       	mov	r24, r20
    1f2e:	89 70       	andi	r24, 0x09	; 9
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	31 f0       	breq	.+12     	; 0x1f40 <dtoa_prf+0x4a>
    1f34:	e1 fc       	sbrc	r14, 1
    1f36:	06 c0       	rjmp	.+12     	; 0x1f44 <dtoa_prf+0x4e>
    1f38:	e0 fe       	sbrs	r14, 0
    1f3a:	06 c0       	rjmp	.+12     	; 0x1f48 <dtoa_prf+0x52>
    1f3c:	90 e2       	ldi	r25, 0x20	; 32
    1f3e:	05 c0       	rjmp	.+10     	; 0x1f4a <dtoa_prf+0x54>
    1f40:	9d e2       	ldi	r25, 0x2D	; 45
    1f42:	03 c0       	rjmp	.+6      	; 0x1f4a <dtoa_prf+0x54>
    1f44:	9b e2       	ldi	r25, 0x2B	; 43
    1f46:	01 c0       	rjmp	.+2      	; 0x1f4a <dtoa_prf+0x54>
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	5e 2d       	mov	r21, r14
    1f4c:	50 71       	andi	r21, 0x10	; 16
    1f4e:	43 ff       	sbrs	r20, 3
    1f50:	3c c0       	rjmp	.+120    	; 0x1fca <dtoa_prf+0xd4>
    1f52:	91 11       	cpse	r25, r1
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <dtoa_prf+0x64>
    1f56:	83 e0       	ldi	r24, 0x03	; 3
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <dtoa_prf+0x66>
    1f5a:	84 e0       	ldi	r24, 0x04	; 4
    1f5c:	81 17       	cp	r24, r17
    1f5e:	18 f4       	brcc	.+6      	; 0x1f66 <dtoa_prf+0x70>
    1f60:	21 2f       	mov	r18, r17
    1f62:	28 1b       	sub	r18, r24
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <dtoa_prf+0x72>
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	51 11       	cpse	r21, r1
    1f6a:	0b c0       	rjmp	.+22     	; 0x1f82 <dtoa_prf+0x8c>
    1f6c:	f6 01       	movw	r30, r12
    1f6e:	82 2f       	mov	r24, r18
    1f70:	30 e2       	ldi	r19, 0x20	; 32
    1f72:	88 23       	and	r24, r24
    1f74:	19 f0       	breq	.+6      	; 0x1f7c <dtoa_prf+0x86>
    1f76:	31 93       	st	Z+, r19
    1f78:	81 50       	subi	r24, 0x01	; 1
    1f7a:	fb cf       	rjmp	.-10     	; 0x1f72 <dtoa_prf+0x7c>
    1f7c:	c2 0e       	add	r12, r18
    1f7e:	d1 1c       	adc	r13, r1
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	99 23       	and	r25, r25
    1f84:	29 f0       	breq	.+10     	; 0x1f90 <dtoa_prf+0x9a>
    1f86:	d6 01       	movw	r26, r12
    1f88:	9c 93       	st	X, r25
    1f8a:	f6 01       	movw	r30, r12
    1f8c:	31 96       	adiw	r30, 0x01	; 1
    1f8e:	6f 01       	movw	r12, r30
    1f90:	c6 01       	movw	r24, r12
    1f92:	03 96       	adiw	r24, 0x03	; 3
    1f94:	e2 fe       	sbrs	r14, 2
    1f96:	0a c0       	rjmp	.+20     	; 0x1fac <dtoa_prf+0xb6>
    1f98:	3e e4       	ldi	r19, 0x4E	; 78
    1f9a:	d6 01       	movw	r26, r12
    1f9c:	3c 93       	st	X, r19
    1f9e:	41 e4       	ldi	r20, 0x41	; 65
    1fa0:	11 96       	adiw	r26, 0x01	; 1
    1fa2:	4c 93       	st	X, r20
    1fa4:	11 97       	sbiw	r26, 0x01	; 1
    1fa6:	12 96       	adiw	r26, 0x02	; 2
    1fa8:	3c 93       	st	X, r19
    1faa:	06 c0       	rjmp	.+12     	; 0x1fb8 <dtoa_prf+0xc2>
    1fac:	3e e6       	ldi	r19, 0x6E	; 110
    1fae:	f6 01       	movw	r30, r12
    1fb0:	30 83       	st	Z, r19
    1fb2:	41 e6       	ldi	r20, 0x61	; 97
    1fb4:	41 83       	std	Z+1, r20	; 0x01
    1fb6:	32 83       	std	Z+2, r19	; 0x02
    1fb8:	fc 01       	movw	r30, r24
    1fba:	32 2f       	mov	r19, r18
    1fbc:	40 e2       	ldi	r20, 0x20	; 32
    1fbe:	33 23       	and	r19, r19
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <dtoa_prf+0xce>
    1fc2:	42 c0       	rjmp	.+132    	; 0x2048 <dtoa_prf+0x152>
    1fc4:	41 93       	st	Z+, r20
    1fc6:	31 50       	subi	r19, 0x01	; 1
    1fc8:	fa cf       	rjmp	.-12     	; 0x1fbe <dtoa_prf+0xc8>
    1fca:	42 ff       	sbrs	r20, 2
    1fcc:	44 c0       	rjmp	.+136    	; 0x2056 <dtoa_prf+0x160>
    1fce:	91 11       	cpse	r25, r1
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <dtoa_prf+0xe0>
    1fd2:	83 e0       	ldi	r24, 0x03	; 3
    1fd4:	01 c0       	rjmp	.+2      	; 0x1fd8 <dtoa_prf+0xe2>
    1fd6:	84 e0       	ldi	r24, 0x04	; 4
    1fd8:	81 17       	cp	r24, r17
    1fda:	18 f4       	brcc	.+6      	; 0x1fe2 <dtoa_prf+0xec>
    1fdc:	21 2f       	mov	r18, r17
    1fde:	28 1b       	sub	r18, r24
    1fe0:	01 c0       	rjmp	.+2      	; 0x1fe4 <dtoa_prf+0xee>
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	51 11       	cpse	r21, r1
    1fe6:	0b c0       	rjmp	.+22     	; 0x1ffe <dtoa_prf+0x108>
    1fe8:	f6 01       	movw	r30, r12
    1fea:	82 2f       	mov	r24, r18
    1fec:	30 e2       	ldi	r19, 0x20	; 32
    1fee:	88 23       	and	r24, r24
    1ff0:	19 f0       	breq	.+6      	; 0x1ff8 <dtoa_prf+0x102>
    1ff2:	31 93       	st	Z+, r19
    1ff4:	81 50       	subi	r24, 0x01	; 1
    1ff6:	fb cf       	rjmp	.-10     	; 0x1fee <dtoa_prf+0xf8>
    1ff8:	c2 0e       	add	r12, r18
    1ffa:	d1 1c       	adc	r13, r1
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	99 23       	and	r25, r25
    2000:	29 f0       	breq	.+10     	; 0x200c <dtoa_prf+0x116>
    2002:	d6 01       	movw	r26, r12
    2004:	9c 93       	st	X, r25
    2006:	f6 01       	movw	r30, r12
    2008:	31 96       	adiw	r30, 0x01	; 1
    200a:	6f 01       	movw	r12, r30
    200c:	c6 01       	movw	r24, r12
    200e:	03 96       	adiw	r24, 0x03	; 3
    2010:	e2 fe       	sbrs	r14, 2
    2012:	0b c0       	rjmp	.+22     	; 0x202a <dtoa_prf+0x134>
    2014:	39 e4       	ldi	r19, 0x49	; 73
    2016:	d6 01       	movw	r26, r12
    2018:	3c 93       	st	X, r19
    201a:	3e e4       	ldi	r19, 0x4E	; 78
    201c:	11 96       	adiw	r26, 0x01	; 1
    201e:	3c 93       	st	X, r19
    2020:	11 97       	sbiw	r26, 0x01	; 1
    2022:	36 e4       	ldi	r19, 0x46	; 70
    2024:	12 96       	adiw	r26, 0x02	; 2
    2026:	3c 93       	st	X, r19
    2028:	07 c0       	rjmp	.+14     	; 0x2038 <dtoa_prf+0x142>
    202a:	39 e6       	ldi	r19, 0x69	; 105
    202c:	f6 01       	movw	r30, r12
    202e:	30 83       	st	Z, r19
    2030:	3e e6       	ldi	r19, 0x6E	; 110
    2032:	31 83       	std	Z+1, r19	; 0x01
    2034:	36 e6       	ldi	r19, 0x66	; 102
    2036:	32 83       	std	Z+2, r19	; 0x02
    2038:	fc 01       	movw	r30, r24
    203a:	32 2f       	mov	r19, r18
    203c:	40 e2       	ldi	r20, 0x20	; 32
    203e:	33 23       	and	r19, r19
    2040:	19 f0       	breq	.+6      	; 0x2048 <dtoa_prf+0x152>
    2042:	41 93       	st	Z+, r20
    2044:	31 50       	subi	r19, 0x01	; 1
    2046:	fb cf       	rjmp	.-10     	; 0x203e <dtoa_prf+0x148>
    2048:	fc 01       	movw	r30, r24
    204a:	e2 0f       	add	r30, r18
    204c:	f1 1d       	adc	r31, r1
    204e:	10 82       	st	Z, r1
    2050:	8e ef       	ldi	r24, 0xFE	; 254
    2052:	9f ef       	ldi	r25, 0xFF	; 255
    2054:	a6 c0       	rjmp	.+332    	; 0x21a2 <dtoa_prf+0x2ac>
    2056:	21 e0       	ldi	r18, 0x01	; 1
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	91 11       	cpse	r25, r1
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <dtoa_prf+0x16c>
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	16 16       	cp	r1, r22
    2064:	17 06       	cpc	r1, r23
    2066:	1c f4       	brge	.+6      	; 0x206e <dtoa_prf+0x178>
    2068:	fb 01       	movw	r30, r22
    206a:	31 96       	adiw	r30, 0x01	; 1
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <dtoa_prf+0x17c>
    206e:	e1 e0       	ldi	r30, 0x01	; 1
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	2e 0f       	add	r18, r30
    2074:	3f 1f       	adc	r19, r31
    2076:	bb 20       	and	r11, r11
    2078:	21 f0       	breq	.+8      	; 0x2082 <dtoa_prf+0x18c>
    207a:	eb 2d       	mov	r30, r11
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	31 96       	adiw	r30, 0x01	; 1
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <dtoa_prf+0x190>
    2082:	e0 e0       	ldi	r30, 0x00	; 0
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	2e 0f       	add	r18, r30
    2088:	3f 1f       	adc	r19, r31
    208a:	e1 2f       	mov	r30, r17
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	2e 17       	cp	r18, r30
    2090:	3f 07       	cpc	r19, r31
    2092:	1c f4       	brge	.+6      	; 0x209a <dtoa_prf+0x1a4>
    2094:	12 1b       	sub	r17, r18
    2096:	21 2f       	mov	r18, r17
    2098:	01 c0       	rjmp	.+2      	; 0x209c <dtoa_prf+0x1a6>
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	8e 2d       	mov	r24, r14
    209e:	88 71       	andi	r24, 0x18	; 24
    20a0:	59 f4       	brne	.+22     	; 0x20b8 <dtoa_prf+0x1c2>
    20a2:	f6 01       	movw	r30, r12
    20a4:	82 2f       	mov	r24, r18
    20a6:	30 e2       	ldi	r19, 0x20	; 32
    20a8:	88 23       	and	r24, r24
    20aa:	19 f0       	breq	.+6      	; 0x20b2 <dtoa_prf+0x1bc>
    20ac:	31 93       	st	Z+, r19
    20ae:	81 50       	subi	r24, 0x01	; 1
    20b0:	fb cf       	rjmp	.-10     	; 0x20a8 <dtoa_prf+0x1b2>
    20b2:	c2 0e       	add	r12, r18
    20b4:	d1 1c       	adc	r13, r1
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	99 23       	and	r25, r25
    20ba:	29 f0       	breq	.+10     	; 0x20c6 <dtoa_prf+0x1d0>
    20bc:	d6 01       	movw	r26, r12
    20be:	9c 93       	st	X, r25
    20c0:	f6 01       	movw	r30, r12
    20c2:	31 96       	adiw	r30, 0x01	; 1
    20c4:	6f 01       	movw	r12, r30
    20c6:	51 11       	cpse	r21, r1
    20c8:	0b c0       	rjmp	.+22     	; 0x20e0 <dtoa_prf+0x1ea>
    20ca:	f6 01       	movw	r30, r12
    20cc:	82 2f       	mov	r24, r18
    20ce:	90 e3       	ldi	r25, 0x30	; 48
    20d0:	88 23       	and	r24, r24
    20d2:	19 f0       	breq	.+6      	; 0x20da <dtoa_prf+0x1e4>
    20d4:	91 93       	st	Z+, r25
    20d6:	81 50       	subi	r24, 0x01	; 1
    20d8:	fb cf       	rjmp	.-10     	; 0x20d0 <dtoa_prf+0x1da>
    20da:	c2 0e       	add	r12, r18
    20dc:	d1 1c       	adc	r13, r1
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	0f 2d       	mov	r16, r15
    20e2:	06 0f       	add	r16, r22
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	34 2f       	mov	r19, r20
    20e8:	30 71       	andi	r19, 0x10	; 16
    20ea:	44 ff       	sbrs	r20, 4
    20ec:	03 c0       	rjmp	.+6      	; 0x20f4 <dtoa_prf+0x1fe>
    20ee:	91 33       	cpi	r25, 0x31	; 49
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <dtoa_prf+0x1fe>
    20f2:	01 50       	subi	r16, 0x01	; 1
    20f4:	10 16       	cp	r1, r16
    20f6:	24 f4       	brge	.+8      	; 0x2100 <dtoa_prf+0x20a>
    20f8:	09 30       	cpi	r16, 0x09	; 9
    20fa:	18 f0       	brcs	.+6      	; 0x2102 <dtoa_prf+0x20c>
    20fc:	08 e0       	ldi	r16, 0x08	; 8
    20fe:	01 c0       	rjmp	.+2      	; 0x2102 <dtoa_prf+0x20c>
    2100:	01 e0       	ldi	r16, 0x01	; 1
    2102:	ab 01       	movw	r20, r22
    2104:	77 ff       	sbrs	r23, 7
    2106:	02 c0       	rjmp	.+4      	; 0x210c <dtoa_prf+0x216>
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	fb 01       	movw	r30, r22
    210e:	e4 1b       	sub	r30, r20
    2110:	f5 0b       	sbc	r31, r21
    2112:	a1 e0       	ldi	r26, 0x01	; 1
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	ac 0f       	add	r26, r28
    2118:	bd 1f       	adc	r27, r29
    211a:	ea 0f       	add	r30, r26
    211c:	fb 1f       	adc	r31, r27
    211e:	8e e2       	ldi	r24, 0x2E	; 46
    2120:	a8 2e       	mov	r10, r24
    2122:	4b 01       	movw	r8, r22
    2124:	80 1a       	sub	r8, r16
    2126:	91 08       	sbc	r9, r1
    2128:	0b 2d       	mov	r16, r11
    212a:	10 e0       	ldi	r17, 0x00	; 0
    212c:	11 95       	neg	r17
    212e:	01 95       	neg	r16
    2130:	11 09       	sbc	r17, r1
    2132:	4f 3f       	cpi	r20, 0xFF	; 255
    2134:	bf ef       	ldi	r27, 0xFF	; 255
    2136:	5b 07       	cpc	r21, r27
    2138:	21 f4       	brne	.+8      	; 0x2142 <dtoa_prf+0x24c>
    213a:	d6 01       	movw	r26, r12
    213c:	ac 92       	st	X, r10
    213e:	11 96       	adiw	r26, 0x01	; 1
    2140:	6d 01       	movw	r12, r26
    2142:	64 17       	cp	r22, r20
    2144:	75 07       	cpc	r23, r21
    2146:	2c f0       	brlt	.+10     	; 0x2152 <dtoa_prf+0x25c>
    2148:	84 16       	cp	r8, r20
    214a:	95 06       	cpc	r9, r21
    214c:	14 f4       	brge	.+4      	; 0x2152 <dtoa_prf+0x25c>
    214e:	81 81       	ldd	r24, Z+1	; 0x01
    2150:	01 c0       	rjmp	.+2      	; 0x2154 <dtoa_prf+0x25e>
    2152:	80 e3       	ldi	r24, 0x30	; 48
    2154:	41 50       	subi	r20, 0x01	; 1
    2156:	51 09       	sbc	r21, r1
    2158:	31 96       	adiw	r30, 0x01	; 1
    215a:	d6 01       	movw	r26, r12
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	7d 01       	movw	r14, r26
    2160:	40 17       	cp	r20, r16
    2162:	51 07       	cpc	r21, r17
    2164:	24 f0       	brlt	.+8      	; 0x216e <dtoa_prf+0x278>
    2166:	d6 01       	movw	r26, r12
    2168:	8c 93       	st	X, r24
    216a:	67 01       	movw	r12, r14
    216c:	e2 cf       	rjmp	.-60     	; 0x2132 <dtoa_prf+0x23c>
    216e:	64 17       	cp	r22, r20
    2170:	75 07       	cpc	r23, r21
    2172:	39 f4       	brne	.+14     	; 0x2182 <dtoa_prf+0x28c>
    2174:	96 33       	cpi	r25, 0x36	; 54
    2176:	20 f4       	brcc	.+8      	; 0x2180 <dtoa_prf+0x28a>
    2178:	95 33       	cpi	r25, 0x35	; 53
    217a:	19 f4       	brne	.+6      	; 0x2182 <dtoa_prf+0x28c>
    217c:	31 11       	cpse	r19, r1
    217e:	01 c0       	rjmp	.+2      	; 0x2182 <dtoa_prf+0x28c>
    2180:	81 e3       	ldi	r24, 0x31	; 49
    2182:	f6 01       	movw	r30, r12
    2184:	80 83       	st	Z, r24
    2186:	f7 01       	movw	r30, r14
    2188:	82 2f       	mov	r24, r18
    218a:	90 e2       	ldi	r25, 0x20	; 32
    218c:	88 23       	and	r24, r24
    218e:	19 f0       	breq	.+6      	; 0x2196 <dtoa_prf+0x2a0>
    2190:	91 93       	st	Z+, r25
    2192:	81 50       	subi	r24, 0x01	; 1
    2194:	fb cf       	rjmp	.-10     	; 0x218c <dtoa_prf+0x296>
    2196:	f7 01       	movw	r30, r14
    2198:	e2 0f       	add	r30, r18
    219a:	f1 1d       	adc	r31, r1
    219c:	10 82       	st	Z, r1
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	29 96       	adiw	r28, 0x09	; 9
    21a4:	ec e0       	ldi	r30, 0x0C	; 12
    21a6:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__epilogue_restores__+0xc>

000021aa <__ftoa_engine>:
    21aa:	28 30       	cpi	r18, 0x08	; 8
    21ac:	08 f0       	brcs	.+2      	; 0x21b0 <__ftoa_engine+0x6>
    21ae:	27 e0       	ldi	r18, 0x07	; 7
    21b0:	33 27       	eor	r19, r19
    21b2:	da 01       	movw	r26, r20
    21b4:	99 0f       	add	r25, r25
    21b6:	31 1d       	adc	r19, r1
    21b8:	87 fd       	sbrc	r24, 7
    21ba:	91 60       	ori	r25, 0x01	; 1
    21bc:	00 96       	adiw	r24, 0x00	; 0
    21be:	61 05       	cpc	r22, r1
    21c0:	71 05       	cpc	r23, r1
    21c2:	39 f4       	brne	.+14     	; 0x21d2 <__ftoa_engine+0x28>
    21c4:	32 60       	ori	r19, 0x02	; 2
    21c6:	2e 5f       	subi	r18, 0xFE	; 254
    21c8:	3d 93       	st	X+, r19
    21ca:	30 e3       	ldi	r19, 0x30	; 48
    21cc:	2a 95       	dec	r18
    21ce:	e1 f7       	brne	.-8      	; 0x21c8 <__ftoa_engine+0x1e>
    21d0:	08 95       	ret
    21d2:	9f 3f       	cpi	r25, 0xFF	; 255
    21d4:	30 f0       	brcs	.+12     	; 0x21e2 <__ftoa_engine+0x38>
    21d6:	80 38       	cpi	r24, 0x80	; 128
    21d8:	71 05       	cpc	r23, r1
    21da:	61 05       	cpc	r22, r1
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <__ftoa_engine+0x36>
    21de:	3c 5f       	subi	r19, 0xFC	; 252
    21e0:	3c 5f       	subi	r19, 0xFC	; 252
    21e2:	3d 93       	st	X+, r19
    21e4:	91 30       	cpi	r25, 0x01	; 1
    21e6:	08 f0       	brcs	.+2      	; 0x21ea <__ftoa_engine+0x40>
    21e8:	80 68       	ori	r24, 0x80	; 128
    21ea:	91 1d       	adc	r25, r1
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	1f 93       	push	r17
    21f2:	0f 93       	push	r16
    21f4:	ff 92       	push	r15
    21f6:	ef 92       	push	r14
    21f8:	19 2f       	mov	r17, r25
    21fa:	98 7f       	andi	r25, 0xF8	; 248
    21fc:	96 95       	lsr	r25
    21fe:	e9 2f       	mov	r30, r25
    2200:	96 95       	lsr	r25
    2202:	96 95       	lsr	r25
    2204:	e9 0f       	add	r30, r25
    2206:	ff 27       	eor	r31, r31
    2208:	e4 5e       	subi	r30, 0xE4	; 228
    220a:	fe 4f       	sbci	r31, 0xFE	; 254
    220c:	99 27       	eor	r25, r25
    220e:	33 27       	eor	r19, r19
    2210:	ee 24       	eor	r14, r14
    2212:	ff 24       	eor	r15, r15
    2214:	a7 01       	movw	r20, r14
    2216:	e7 01       	movw	r28, r14
    2218:	05 90       	lpm	r0, Z+
    221a:	08 94       	sec
    221c:	07 94       	ror	r0
    221e:	28 f4       	brcc	.+10     	; 0x222a <__ftoa_engine+0x80>
    2220:	36 0f       	add	r19, r22
    2222:	e7 1e       	adc	r14, r23
    2224:	f8 1e       	adc	r15, r24
    2226:	49 1f       	adc	r20, r25
    2228:	51 1d       	adc	r21, r1
    222a:	66 0f       	add	r22, r22
    222c:	77 1f       	adc	r23, r23
    222e:	88 1f       	adc	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	06 94       	lsr	r0
    2234:	a1 f7       	brne	.-24     	; 0x221e <__ftoa_engine+0x74>
    2236:	05 90       	lpm	r0, Z+
    2238:	07 94       	ror	r0
    223a:	28 f4       	brcc	.+10     	; 0x2246 <__ftoa_engine+0x9c>
    223c:	e7 0e       	add	r14, r23
    223e:	f8 1e       	adc	r15, r24
    2240:	49 1f       	adc	r20, r25
    2242:	56 1f       	adc	r21, r22
    2244:	c1 1d       	adc	r28, r1
    2246:	77 0f       	add	r23, r23
    2248:	88 1f       	adc	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	66 1f       	adc	r22, r22
    224e:	06 94       	lsr	r0
    2250:	a1 f7       	brne	.-24     	; 0x223a <__ftoa_engine+0x90>
    2252:	05 90       	lpm	r0, Z+
    2254:	07 94       	ror	r0
    2256:	28 f4       	brcc	.+10     	; 0x2262 <__ftoa_engine+0xb8>
    2258:	f8 0e       	add	r15, r24
    225a:	49 1f       	adc	r20, r25
    225c:	56 1f       	adc	r21, r22
    225e:	c7 1f       	adc	r28, r23
    2260:	d1 1d       	adc	r29, r1
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	66 1f       	adc	r22, r22
    2268:	77 1f       	adc	r23, r23
    226a:	06 94       	lsr	r0
    226c:	a1 f7       	brne	.-24     	; 0x2256 <__ftoa_engine+0xac>
    226e:	05 90       	lpm	r0, Z+
    2270:	07 94       	ror	r0
    2272:	20 f4       	brcc	.+8      	; 0x227c <__ftoa_engine+0xd2>
    2274:	49 0f       	add	r20, r25
    2276:	56 1f       	adc	r21, r22
    2278:	c7 1f       	adc	r28, r23
    227a:	d8 1f       	adc	r29, r24
    227c:	99 0f       	add	r25, r25
    227e:	66 1f       	adc	r22, r22
    2280:	77 1f       	adc	r23, r23
    2282:	88 1f       	adc	r24, r24
    2284:	06 94       	lsr	r0
    2286:	a9 f7       	brne	.-22     	; 0x2272 <__ftoa_engine+0xc8>
    2288:	84 91       	lpm	r24, Z
    228a:	10 95       	com	r17
    228c:	17 70       	andi	r17, 0x07	; 7
    228e:	41 f0       	breq	.+16     	; 0x22a0 <__ftoa_engine+0xf6>
    2290:	d6 95       	lsr	r29
    2292:	c7 95       	ror	r28
    2294:	57 95       	ror	r21
    2296:	47 95       	ror	r20
    2298:	f7 94       	ror	r15
    229a:	e7 94       	ror	r14
    229c:	1a 95       	dec	r17
    229e:	c1 f7       	brne	.-16     	; 0x2290 <__ftoa_engine+0xe6>
    22a0:	e2 ec       	ldi	r30, 0xC2	; 194
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	68 94       	set
    22a6:	15 90       	lpm	r1, Z+
    22a8:	15 91       	lpm	r17, Z+
    22aa:	35 91       	lpm	r19, Z+
    22ac:	65 91       	lpm	r22, Z+
    22ae:	95 91       	lpm	r25, Z+
    22b0:	05 90       	lpm	r0, Z+
    22b2:	7f e2       	ldi	r23, 0x2F	; 47
    22b4:	73 95       	inc	r23
    22b6:	e1 18       	sub	r14, r1
    22b8:	f1 0a       	sbc	r15, r17
    22ba:	43 0b       	sbc	r20, r19
    22bc:	56 0b       	sbc	r21, r22
    22be:	c9 0b       	sbc	r28, r25
    22c0:	d0 09       	sbc	r29, r0
    22c2:	c0 f7       	brcc	.-16     	; 0x22b4 <__ftoa_engine+0x10a>
    22c4:	e1 0c       	add	r14, r1
    22c6:	f1 1e       	adc	r15, r17
    22c8:	43 1f       	adc	r20, r19
    22ca:	56 1f       	adc	r21, r22
    22cc:	c9 1f       	adc	r28, r25
    22ce:	d0 1d       	adc	r29, r0
    22d0:	7e f4       	brtc	.+30     	; 0x22f0 <__ftoa_engine+0x146>
    22d2:	70 33       	cpi	r23, 0x30	; 48
    22d4:	11 f4       	brne	.+4      	; 0x22da <__ftoa_engine+0x130>
    22d6:	8a 95       	dec	r24
    22d8:	e6 cf       	rjmp	.-52     	; 0x22a6 <__ftoa_engine+0xfc>
    22da:	e8 94       	clt
    22dc:	01 50       	subi	r16, 0x01	; 1
    22de:	30 f0       	brcs	.+12     	; 0x22ec <__ftoa_engine+0x142>
    22e0:	08 0f       	add	r16, r24
    22e2:	0a f4       	brpl	.+2      	; 0x22e6 <__ftoa_engine+0x13c>
    22e4:	00 27       	eor	r16, r16
    22e6:	02 17       	cp	r16, r18
    22e8:	08 f4       	brcc	.+2      	; 0x22ec <__ftoa_engine+0x142>
    22ea:	20 2f       	mov	r18, r16
    22ec:	23 95       	inc	r18
    22ee:	02 2f       	mov	r16, r18
    22f0:	7a 33       	cpi	r23, 0x3A	; 58
    22f2:	28 f0       	brcs	.+10     	; 0x22fe <__ftoa_engine+0x154>
    22f4:	79 e3       	ldi	r23, 0x39	; 57
    22f6:	7d 93       	st	X+, r23
    22f8:	2a 95       	dec	r18
    22fa:	e9 f7       	brne	.-6      	; 0x22f6 <__ftoa_engine+0x14c>
    22fc:	10 c0       	rjmp	.+32     	; 0x231e <__ftoa_engine+0x174>
    22fe:	7d 93       	st	X+, r23
    2300:	2a 95       	dec	r18
    2302:	89 f6       	brne	.-94     	; 0x22a6 <__ftoa_engine+0xfc>
    2304:	06 94       	lsr	r0
    2306:	97 95       	ror	r25
    2308:	67 95       	ror	r22
    230a:	37 95       	ror	r19
    230c:	17 95       	ror	r17
    230e:	17 94       	ror	r1
    2310:	e1 18       	sub	r14, r1
    2312:	f1 0a       	sbc	r15, r17
    2314:	43 0b       	sbc	r20, r19
    2316:	56 0b       	sbc	r21, r22
    2318:	c9 0b       	sbc	r28, r25
    231a:	d0 09       	sbc	r29, r0
    231c:	98 f0       	brcs	.+38     	; 0x2344 <__ftoa_engine+0x19a>
    231e:	23 95       	inc	r18
    2320:	7e 91       	ld	r23, -X
    2322:	73 95       	inc	r23
    2324:	7a 33       	cpi	r23, 0x3A	; 58
    2326:	08 f0       	brcs	.+2      	; 0x232a <__ftoa_engine+0x180>
    2328:	70 e3       	ldi	r23, 0x30	; 48
    232a:	7c 93       	st	X, r23
    232c:	20 13       	cpse	r18, r16
    232e:	b8 f7       	brcc	.-18     	; 0x231e <__ftoa_engine+0x174>
    2330:	7e 91       	ld	r23, -X
    2332:	70 61       	ori	r23, 0x10	; 16
    2334:	7d 93       	st	X+, r23
    2336:	30 f0       	brcs	.+12     	; 0x2344 <__ftoa_engine+0x19a>
    2338:	83 95       	inc	r24
    233a:	71 e3       	ldi	r23, 0x31	; 49
    233c:	7d 93       	st	X+, r23
    233e:	70 e3       	ldi	r23, 0x30	; 48
    2340:	2a 95       	dec	r18
    2342:	e1 f7       	brne	.-8      	; 0x233c <__ftoa_engine+0x192>
    2344:	11 24       	eor	r1, r1
    2346:	ef 90       	pop	r14
    2348:	ff 90       	pop	r15
    234a:	0f 91       	pop	r16
    234c:	1f 91       	pop	r17
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	99 27       	eor	r25, r25
    2354:	87 fd       	sbrc	r24, 7
    2356:	90 95       	com	r25
    2358:	08 95       	ret

0000235a <strnlen_P>:
    235a:	fc 01       	movw	r30, r24
    235c:	05 90       	lpm	r0, Z+
    235e:	61 50       	subi	r22, 0x01	; 1
    2360:	70 40       	sbci	r23, 0x00	; 0
    2362:	01 10       	cpse	r0, r1
    2364:	d8 f7       	brcc	.-10     	; 0x235c <strnlen_P+0x2>
    2366:	80 95       	com	r24
    2368:	90 95       	com	r25
    236a:	8e 0f       	add	r24, r30
    236c:	9f 1f       	adc	r25, r31
    236e:	08 95       	ret

00002370 <strnlen>:
    2370:	fc 01       	movw	r30, r24
    2372:	61 50       	subi	r22, 0x01	; 1
    2374:	70 40       	sbci	r23, 0x00	; 0
    2376:	01 90       	ld	r0, Z+
    2378:	01 10       	cpse	r0, r1
    237a:	d8 f7       	brcc	.-10     	; 0x2372 <strnlen+0x2>
    237c:	80 95       	com	r24
    237e:	90 95       	com	r25
    2380:	8e 0f       	add	r24, r30
    2382:	9f 1f       	adc	r25, r31
    2384:	08 95       	ret

00002386 <fputc>:
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	fb 01       	movw	r30, r22
    2390:	23 81       	ldd	r18, Z+3	; 0x03
    2392:	21 fd       	sbrc	r18, 1
    2394:	03 c0       	rjmp	.+6      	; 0x239c <fputc+0x16>
    2396:	8f ef       	ldi	r24, 0xFF	; 255
    2398:	9f ef       	ldi	r25, 0xFF	; 255
    239a:	2c c0       	rjmp	.+88     	; 0x23f4 <fputc+0x6e>
    239c:	22 ff       	sbrs	r18, 2
    239e:	16 c0       	rjmp	.+44     	; 0x23cc <fputc+0x46>
    23a0:	46 81       	ldd	r20, Z+6	; 0x06
    23a2:	57 81       	ldd	r21, Z+7	; 0x07
    23a4:	24 81       	ldd	r18, Z+4	; 0x04
    23a6:	35 81       	ldd	r19, Z+5	; 0x05
    23a8:	42 17       	cp	r20, r18
    23aa:	53 07       	cpc	r21, r19
    23ac:	44 f4       	brge	.+16     	; 0x23be <fputc+0x38>
    23ae:	a0 81       	ld	r26, Z
    23b0:	b1 81       	ldd	r27, Z+1	; 0x01
    23b2:	9d 01       	movw	r18, r26
    23b4:	2f 5f       	subi	r18, 0xFF	; 255
    23b6:	3f 4f       	sbci	r19, 0xFF	; 255
    23b8:	20 83       	st	Z, r18
    23ba:	31 83       	std	Z+1, r19	; 0x01
    23bc:	8c 93       	st	X, r24
    23be:	26 81       	ldd	r18, Z+6	; 0x06
    23c0:	37 81       	ldd	r19, Z+7	; 0x07
    23c2:	2f 5f       	subi	r18, 0xFF	; 255
    23c4:	3f 4f       	sbci	r19, 0xFF	; 255
    23c6:	26 83       	std	Z+6, r18	; 0x06
    23c8:	37 83       	std	Z+7, r19	; 0x07
    23ca:	14 c0       	rjmp	.+40     	; 0x23f4 <fputc+0x6e>
    23cc:	8b 01       	movw	r16, r22
    23ce:	ec 01       	movw	r28, r24
    23d0:	fb 01       	movw	r30, r22
    23d2:	00 84       	ldd	r0, Z+8	; 0x08
    23d4:	f1 85       	ldd	r31, Z+9	; 0x09
    23d6:	e0 2d       	mov	r30, r0
    23d8:	09 95       	icall
    23da:	89 2b       	or	r24, r25
    23dc:	e1 f6       	brne	.-72     	; 0x2396 <fputc+0x10>
    23de:	d8 01       	movw	r26, r16
    23e0:	16 96       	adiw	r26, 0x06	; 6
    23e2:	8d 91       	ld	r24, X+
    23e4:	9c 91       	ld	r25, X
    23e6:	17 97       	sbiw	r26, 0x07	; 7
    23e8:	01 96       	adiw	r24, 0x01	; 1
    23ea:	16 96       	adiw	r26, 0x06	; 6
    23ec:	8d 93       	st	X+, r24
    23ee:	9c 93       	st	X, r25
    23f0:	17 97       	sbiw	r26, 0x07	; 7
    23f2:	ce 01       	movw	r24, r28
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	1f 91       	pop	r17
    23fa:	0f 91       	pop	r16
    23fc:	08 95       	ret

000023fe <__ultoa_invert>:
    23fe:	fa 01       	movw	r30, r20
    2400:	aa 27       	eor	r26, r26
    2402:	28 30       	cpi	r18, 0x08	; 8
    2404:	51 f1       	breq	.+84     	; 0x245a <__ultoa_invert+0x5c>
    2406:	20 31       	cpi	r18, 0x10	; 16
    2408:	81 f1       	breq	.+96     	; 0x246a <__ultoa_invert+0x6c>
    240a:	e8 94       	clt
    240c:	6f 93       	push	r22
    240e:	6e 7f       	andi	r22, 0xFE	; 254
    2410:	6e 5f       	subi	r22, 0xFE	; 254
    2412:	7f 4f       	sbci	r23, 0xFF	; 255
    2414:	8f 4f       	sbci	r24, 0xFF	; 255
    2416:	9f 4f       	sbci	r25, 0xFF	; 255
    2418:	af 4f       	sbci	r26, 0xFF	; 255
    241a:	b1 e0       	ldi	r27, 0x01	; 1
    241c:	3e d0       	rcall	.+124    	; 0x249a <__ultoa_invert+0x9c>
    241e:	b4 e0       	ldi	r27, 0x04	; 4
    2420:	3c d0       	rcall	.+120    	; 0x249a <__ultoa_invert+0x9c>
    2422:	67 0f       	add	r22, r23
    2424:	78 1f       	adc	r23, r24
    2426:	89 1f       	adc	r24, r25
    2428:	9a 1f       	adc	r25, r26
    242a:	a1 1d       	adc	r26, r1
    242c:	68 0f       	add	r22, r24
    242e:	79 1f       	adc	r23, r25
    2430:	8a 1f       	adc	r24, r26
    2432:	91 1d       	adc	r25, r1
    2434:	a1 1d       	adc	r26, r1
    2436:	6a 0f       	add	r22, r26
    2438:	71 1d       	adc	r23, r1
    243a:	81 1d       	adc	r24, r1
    243c:	91 1d       	adc	r25, r1
    243e:	a1 1d       	adc	r26, r1
    2440:	20 d0       	rcall	.+64     	; 0x2482 <__ultoa_invert+0x84>
    2442:	09 f4       	brne	.+2      	; 0x2446 <__ultoa_invert+0x48>
    2444:	68 94       	set
    2446:	3f 91       	pop	r19
    2448:	2a e0       	ldi	r18, 0x0A	; 10
    244a:	26 9f       	mul	r18, r22
    244c:	11 24       	eor	r1, r1
    244e:	30 19       	sub	r19, r0
    2450:	30 5d       	subi	r19, 0xD0	; 208
    2452:	31 93       	st	Z+, r19
    2454:	de f6       	brtc	.-74     	; 0x240c <__ultoa_invert+0xe>
    2456:	cf 01       	movw	r24, r30
    2458:	08 95       	ret
    245a:	46 2f       	mov	r20, r22
    245c:	47 70       	andi	r20, 0x07	; 7
    245e:	40 5d       	subi	r20, 0xD0	; 208
    2460:	41 93       	st	Z+, r20
    2462:	b3 e0       	ldi	r27, 0x03	; 3
    2464:	0f d0       	rcall	.+30     	; 0x2484 <__ultoa_invert+0x86>
    2466:	c9 f7       	brne	.-14     	; 0x245a <__ultoa_invert+0x5c>
    2468:	f6 cf       	rjmp	.-20     	; 0x2456 <__ultoa_invert+0x58>
    246a:	46 2f       	mov	r20, r22
    246c:	4f 70       	andi	r20, 0x0F	; 15
    246e:	40 5d       	subi	r20, 0xD0	; 208
    2470:	4a 33       	cpi	r20, 0x3A	; 58
    2472:	18 f0       	brcs	.+6      	; 0x247a <__ultoa_invert+0x7c>
    2474:	49 5d       	subi	r20, 0xD9	; 217
    2476:	31 fd       	sbrc	r19, 1
    2478:	40 52       	subi	r20, 0x20	; 32
    247a:	41 93       	st	Z+, r20
    247c:	02 d0       	rcall	.+4      	; 0x2482 <__ultoa_invert+0x84>
    247e:	a9 f7       	brne	.-22     	; 0x246a <__ultoa_invert+0x6c>
    2480:	ea cf       	rjmp	.-44     	; 0x2456 <__ultoa_invert+0x58>
    2482:	b4 e0       	ldi	r27, 0x04	; 4
    2484:	a6 95       	lsr	r26
    2486:	97 95       	ror	r25
    2488:	87 95       	ror	r24
    248a:	77 95       	ror	r23
    248c:	67 95       	ror	r22
    248e:	ba 95       	dec	r27
    2490:	c9 f7       	brne	.-14     	; 0x2484 <__ultoa_invert+0x86>
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	61 05       	cpc	r22, r1
    2496:	71 05       	cpc	r23, r1
    2498:	08 95       	ret
    249a:	9b 01       	movw	r18, r22
    249c:	ac 01       	movw	r20, r24
    249e:	0a 2e       	mov	r0, r26
    24a0:	06 94       	lsr	r0
    24a2:	57 95       	ror	r21
    24a4:	47 95       	ror	r20
    24a6:	37 95       	ror	r19
    24a8:	27 95       	ror	r18
    24aa:	ba 95       	dec	r27
    24ac:	c9 f7       	brne	.-14     	; 0x24a0 <__ultoa_invert+0xa2>
    24ae:	62 0f       	add	r22, r18
    24b0:	73 1f       	adc	r23, r19
    24b2:	84 1f       	adc	r24, r20
    24b4:	95 1f       	adc	r25, r21
    24b6:	a0 1d       	adc	r26, r0
    24b8:	08 95       	ret

000024ba <__prologue_saves__>:
    24ba:	2f 92       	push	r2
    24bc:	3f 92       	push	r3
    24be:	4f 92       	push	r4
    24c0:	5f 92       	push	r5
    24c2:	6f 92       	push	r6
    24c4:	7f 92       	push	r7
    24c6:	8f 92       	push	r8
    24c8:	9f 92       	push	r9
    24ca:	af 92       	push	r10
    24cc:	bf 92       	push	r11
    24ce:	cf 92       	push	r12
    24d0:	df 92       	push	r13
    24d2:	ef 92       	push	r14
    24d4:	ff 92       	push	r15
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	ca 1b       	sub	r28, r26
    24e4:	db 0b       	sbc	r29, r27
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	09 94       	ijmp

000024ec <__epilogue_restores__>:
    24ec:	2a 88       	ldd	r2, Y+18	; 0x12
    24ee:	39 88       	ldd	r3, Y+17	; 0x11
    24f0:	48 88       	ldd	r4, Y+16	; 0x10
    24f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    24f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    24f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    24f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    24fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    24fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    24fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2500:	c8 84       	ldd	r12, Y+8	; 0x08
    2502:	df 80       	ldd	r13, Y+7	; 0x07
    2504:	ee 80       	ldd	r14, Y+6	; 0x06
    2506:	fd 80       	ldd	r15, Y+5	; 0x05
    2508:	0c 81       	ldd	r16, Y+4	; 0x04
    250a:	1b 81       	ldd	r17, Y+3	; 0x03
    250c:	aa 81       	ldd	r26, Y+2	; 0x02
    250e:	b9 81       	ldd	r27, Y+1	; 0x01
    2510:	ce 0f       	add	r28, r30
    2512:	d1 1d       	adc	r29, r1
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	ed 01       	movw	r28, r26
    251a:	08 95       	ret

0000251c <_exit>:
    251c:	f8 94       	cli

0000251e <__stop_program>:
    251e:	ff cf       	rjmp	.-2      	; 0x251e <__stop_program>
