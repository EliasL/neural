
Hjernebyggesett_V4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00803800  00002188  0000223c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020ea  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009e  0000a0ea  000020ea  0000219e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000005a  00803816  00803816  00002252  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002252  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022b0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000550  00000000  00000000  000022f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008d03  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000382a  00000000  00000000  0000b543  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002c09  00000000  00000000  0000ed6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000098c  00000000  00000000  00011978  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000036f1  00000000  00000000  00012304  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001768  00000000  00000000  000159f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000400  00000000  00000000  0001715d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 56 05 	jmp	0xaac	; 0xaac <__vector_6>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	05 a8       	ldd	r0, Z+53	; 0x35
      a6:	4c cd       	rjmp	.-1384   	; 0xfffffb40 <__eeprom_end+0xff7efb40>
      a8:	b2 d4       	rcall	.+2404   	; 0xa0e <tinyDendrite_get_potential+0x4a>
      aa:	4e b9       	out	0x0e, r20	; 14
      ac:	38 36       	cpi	r19, 0x68	; 104
      ae:	a9 02       	muls	r26, r25
      b0:	0c 50       	subi	r16, 0x0C	; 12
      b2:	b9 91       	ld	r27, Y+
      b4:	86 88       	ldd	r8, Z+22	; 0x16
      b6:	08 3c       	cpi	r16, 0xC8	; 200
      b8:	a6 aa       	std	Z+54, r10	; 0x36
      ba:	aa 2a       	or	r10, r26
      bc:	be 00       	.word	0x00be	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	cd bf       	out	0x3d, r28	; 61
      ca:	df e3       	ldi	r29, 0x3F	; 63
      cc:	de bf       	out	0x3e, r29	; 62

000000ce <__do_copy_data>:
      ce:	18 e3       	ldi	r17, 0x38	; 56
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b8 e3       	ldi	r27, 0x38	; 56
      d4:	e8 e8       	ldi	r30, 0x88	; 136
      d6:	f1 e2       	ldi	r31, 0x21	; 33
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a6 31       	cpi	r26, 0x16	; 22
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	28 e3       	ldi	r18, 0x38	; 56
      e6:	a6 e1       	ldi	r26, 0x16	; 22
      e8:	b8 e3       	ldi	r27, 0x38	; 56
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a0 37       	cpi	r26, 0x70	; 112
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 83 00 	call	0x106	; 0x106 <main>
      f8:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <atmel_start_init>:
     100:	0e 94 a7 01 	call	0x34e	; 0x34e <system_init>
     104:	08 95       	ret

00000106 <main>:

int main(void)
{	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     106:	0e 94 80 00 	call	0x100	; 0x100 <atmel_start_init>
	For some reason, instead of the reference voltage being 4.32v, it is 3.3v. 
	A plausible explanation is that the microchip does not up the voltage, so that if the microchip is only ever 
	supplied with 3.3v, it will output 3.3v as the max.
	*/
	
	VREF.CTRLA |= VREF_DAC0REFSEL_4V34_gc;
     10a:	e0 ea       	ldi	r30, 0xA0	; 160
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	83 60       	ori	r24, 0x03	; 3
     112:	80 83       	st	Z, r24
	
	tinyTester_test();
     114:	0e 94 72 09 	call	0x12e4	; 0x12e4 <tinyTester_test>
	
	while (1)
	{
		// We don't want to update the neuron too often because of various reasons. The tinyISR_getflag is set every ms, and so the loop is only run once every ms.  
		if(tinyISR_getflag())
     118:	0e 94 84 05 	call	0xb08	; 0xb08 <tinyISR_getflag>
     11c:	88 23       	and	r24, r24
     11e:	e1 f3       	breq	.-8      	; 0x118 <main+0x12>
		{
			tinyCharge_update_charging_mode();
     120:	0e 94 ff 03 	call	0x7fe	; 0x7fe <tinyCharge_update_charging_mode>
			
			if(tinyCharge_is_connected_to_charger()){
     124:	0e 94 c4 03 	call	0x788	; 0x788 <tinyCharge_is_connected_to_charger>
     128:	88 23       	and	r24, r24
     12a:	b9 f0       	breq	.+46     	; 0x15a <main+0x54>
				// Charge loop
				
				if(tinyCharge_is_fully_charged()){
     12c:	0e 94 c7 03 	call	0x78e	; 0x78e <tinyCharge_is_fully_charged>
     130:	88 23       	and	r24, r24
     132:	49 f0       	breq	.+18     	; 0x146 <main+0x40>
					// When the neuron is connected to a charger, and fully charged:
					tinyLED_set_color(INN_LED, CHARGING_DONE_COLOR);
     134:	63 e0       	ldi	r22, 0x03	; 3
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	0e 94 c7 05 	call	0xb8e	; 0xb8e <tinyLED_set_color>
					tinyLED_set_color(OUT_LED, LED_OFF);
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	0e 94 c7 05 	call	0xb8e	; 0xb8e <tinyLED_set_color>
     144:	11 c0       	rjmp	.+34     	; 0x168 <main+0x62>
				}
				else{
					// When the neuron is charging and is not fully charged
					tinyLED_set_color_mode(OUT_LED, CHARGING_COLOR, SWING);
     146:	43 e0       	ldi	r20, 0x03	; 3
     148:	61 e0       	ldi	r22, 0x01	; 1
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	0e 94 a3 05 	call	0xb46	; 0xb46 <tinyLED_set_color_mode>
					tinyLED_set_color(INN_LED, LED_OFF);
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	0e 94 c7 05 	call	0xb8e	; 0xb8e <tinyLED_set_color>
     158:	07 c0       	rjmp	.+14     	; 0x168 <main+0x62>
				// Main loop			
				
				// Set LED
				// If the out led is turned LED_OFF, and the ping color is not disabled,
				// we turn on ping mode
				if(tinyLED_get_color(OUT_LED) == LED_OFF && PING_COLOR != LED_OFF){
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 9b 05 	call	0xb36	; 0xb36 <tinyLED_get_color>
					tinyLED_set_color_mode(OUT_LED, PING_COLOR, PING);
				}				
				
				// Update button	
				tinyButton_update();
     160:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <tinyButton_update>
				
				// Update the potential (This is where most of the important stuff happens)
				tinyPotential_update();
     164:	0e 94 11 08 	call	0x1022	; 0x1022 <tinyPotential_update>
			}
			// Update LED
			tinyLED_update();
     168:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <tinyLED_update>
				
			// Switch transistors
			tinyCharge_set_transistors();
     16c:	0e 94 27 04 	call	0x84e	; 0x84e <tinyCharge_set_transistors>
			
			// Prepare for next cycle
			tinyISR_setflag(false);
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	0e 94 81 05 	call	0xb02	; 0xb02 <tinyISR_setflag>
			tinyDebugger_send_uint32("time", tinyTime_now());
     176:	0e 94 aa 09 	call	0x1354	; 0x1354 <tinyTime_now>
     17a:	ab 01       	movw	r20, r22
     17c:	bc 01       	movw	r22, r24
     17e:	84 ef       	ldi	r24, 0xF4	; 244
     180:	90 ea       	ldi	r25, 0xA0	; 160
     182:	0e 94 2f 04 	call	0x85e	; 0x85e <tinyDebugger_send_uint32>
			tinyDebugger_end_line();
     186:	0e 94 32 04 	call	0x864	; 0x864 <tinyDebugger_end_line>
     18a:	c6 cf       	rjmp	.-116    	; 0x118 <main+0x12>

0000018c <ADC_0_init>:
     18c:	e0 e4       	ldi	r30, 0x40	; 64
     18e:	f6 e0       	ldi	r31, 0x06	; 6
     190:	80 e1       	ldi	r24, 0x10	; 16
     192:	82 83       	std	Z+2, r24	; 0x02
     194:	85 e0       	ldi	r24, 0x05	; 5
     196:	80 83       	st	Z, r24
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	08 95       	ret

0000019c <ADC_0_is_conversion_done>:
     19c:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     1a0:	81 70       	andi	r24, 0x01	; 1
     1a2:	08 95       	ret

000001a4 <ADC_0_get_conversion>:
     1a4:	e0 e4       	ldi	r30, 0x40	; 64
     1a6:	f6 e0       	ldi	r31, 0x06	; 6
     1a8:	86 83       	std	Z+6, r24	; 0x06
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	80 87       	std	Z+8, r24	; 0x08
     1ae:	0e 94 ce 00 	call	0x19c	; 0x19c <ADC_0_is_conversion_done>
     1b2:	88 23       	and	r24, r24
     1b4:	e1 f3       	breq	.-8      	; 0x1ae <ADC_0_get_conversion+0xa>
     1b6:	e0 e4       	ldi	r30, 0x40	; 64
     1b8:	f6 e0       	ldi	r31, 0x06	; 6
     1ba:	20 89       	ldd	r18, Z+16	; 0x10
     1bc:	31 89       	ldd	r19, Z+17	; 0x11
     1be:	93 85       	ldd	r25, Z+11	; 0x0b
     1c0:	91 60       	ori	r25, 0x01	; 1
     1c2:	93 87       	std	Z+11, r25	; 0x0b
     1c4:	c9 01       	movw	r24, r18
     1c6:	08 95       	ret

000001c8 <BOD_init>:
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	08 95       	ret

000001cc <DIGITAL_GLUE_LOGIC_0_init>:
     1cc:	e0 ec       	ldi	r30, 0xC0	; 192
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	28 ea       	ldi	r18, 0xA8	; 168
     1d2:	20 87       	std	Z+8, r18	; 0x08
     1d4:	98 e0       	ldi	r25, 0x08	; 8
     1d6:	97 83       	std	Z+7, r25	; 0x07
     1d8:	8b eb       	ldi	r24, 0xBB	; 187
     1da:	86 83       	std	Z+6, r24	; 0x06
     1dc:	39 e0       	ldi	r19, 0x09	; 9
     1de:	35 83       	std	Z+5, r19	; 0x05
     1e0:	24 87       	std	Z+12, r18	; 0x0c
     1e2:	93 87       	std	Z+11, r25	; 0x0b
     1e4:	82 87       	std	Z+10, r24	; 0x0a
     1e6:	81 e4       	ldi	r24, 0x41	; 65
     1e8:	80 83       	st	Z, r24
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	08 95       	ret

000001ee <CLKCTRL_init>:
     1ee:	47 e0       	ldi	r20, 0x07	; 7
     1f0:	68 ed       	ldi	r22, 0xD8	; 216
     1f2:	8c e7       	ldi	r24, 0x7C	; 124
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <protected_write_io>
     1fa:	41 e0       	ldi	r20, 0x01	; 1
     1fc:	68 ed       	ldi	r22, 0xD8	; 216
     1fe:	81 e6       	ldi	r24, 0x61	; 97
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <protected_write_io>
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	08 95       	ret

0000020a <CPUINT_init>:
     20a:	78 94       	sei
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	08 95       	ret

00000210 <DAC_0_init>:
     210:	81 e4       	ldi	r24, 0x41	; 65
     212:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	08 95       	ret

0000021a <DAC_0_uninit>:
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	08 95       	ret

00000224 <DAC_0_enable>:
     224:	e0 ea       	ldi	r30, 0xA0	; 160
     226:	f6 e0       	ldi	r31, 0x06	; 6
     228:	80 81       	ld	r24, Z
     22a:	81 60       	ori	r24, 0x01	; 1
     22c:	80 83       	st	Z, r24
     22e:	08 95       	ret

00000230 <DAC_0_disable>:
     230:	e0 ea       	ldi	r30, 0xA0	; 160
     232:	f6 e0       	ldi	r31, 0x06	; 6
     234:	80 81       	ld	r24, Z
     236:	8e 7f       	andi	r24, 0xFE	; 254
     238:	80 83       	st	Z, r24
     23a:	08 95       	ret

0000023c <DAC_0_set_output>:
     23c:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     240:	08 95       	ret

00000242 <mcu_init>:
     242:	e0 e1       	ldi	r30, 0x10	; 16
     244:	f4 e0       	ldi	r31, 0x04	; 4
     246:	80 81       	ld	r24, Z
     248:	88 60       	ori	r24, 0x08	; 8
     24a:	81 93       	st	Z+, r24
     24c:	e8 31       	cpi	r30, 0x18	; 24
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	f8 07       	cpc	r31, r24
     252:	c9 f7       	brne	.-14     	; 0x246 <mcu_init+0x4>
     254:	e0 e3       	ldi	r30, 0x30	; 48
     256:	f4 e0       	ldi	r31, 0x04	; 4
     258:	80 81       	ld	r24, Z
     25a:	88 60       	ori	r24, 0x08	; 8
     25c:	81 93       	st	Z+, r24
     25e:	e8 33       	cpi	r30, 0x38	; 56
     260:	84 e0       	ldi	r24, 0x04	; 4
     262:	f8 07       	cpc	r31, r24
     264:	c9 f7       	brne	.-14     	; 0x258 <mcu_init+0x16>
     266:	e0 e5       	ldi	r30, 0x50	; 80
     268:	f4 e0       	ldi	r31, 0x04	; 4
     26a:	80 81       	ld	r24, Z
     26c:	88 60       	ori	r24, 0x08	; 8
     26e:	81 93       	st	Z+, r24
     270:	e8 35       	cpi	r30, 0x58	; 88
     272:	84 e0       	ldi	r24, 0x04	; 4
     274:	f8 07       	cpc	r31, r24
     276:	c9 f7       	brne	.-14     	; 0x26a <mcu_init+0x28>
     278:	08 95       	ret

0000027a <ADC_0_initialization>:
     27a:	e5 e1       	ldi	r30, 0x15	; 21
     27c:	f4 e0       	ldi	r31, 0x04	; 4
     27e:	80 81       	ld	r24, Z
     280:	88 7f       	andi	r24, 0xF8	; 248
     282:	84 60       	ori	r24, 0x04	; 4
     284:	80 83       	st	Z, r24
     286:	80 81       	ld	r24, Z
     288:	87 7f       	andi	r24, 0xF7	; 247
     28a:	80 83       	st	Z, r24
     28c:	e7 e1       	ldi	r30, 0x17	; 23
     28e:	f4 e0       	ldi	r31, 0x04	; 4
     290:	80 81       	ld	r24, Z
     292:	88 7f       	andi	r24, 0xF8	; 248
     294:	84 60       	ori	r24, 0x04	; 4
     296:	80 83       	st	Z, r24
     298:	80 81       	ld	r24, Z
     29a:	87 7f       	andi	r24, 0xF7	; 247
     29c:	80 83       	st	Z, r24
     29e:	e0 e5       	ldi	r30, 0x50	; 80
     2a0:	f4 e0       	ldi	r31, 0x04	; 4
     2a2:	80 81       	ld	r24, Z
     2a4:	88 7f       	andi	r24, 0xF8	; 248
     2a6:	84 60       	ori	r24, 0x04	; 4
     2a8:	80 83       	st	Z, r24
     2aa:	80 81       	ld	r24, Z
     2ac:	87 7f       	andi	r24, 0xF7	; 247
     2ae:	80 83       	st	Z, r24
     2b0:	e1 e5       	ldi	r30, 0x51	; 81
     2b2:	f4 e0       	ldi	r31, 0x04	; 4
     2b4:	80 81       	ld	r24, Z
     2b6:	88 7f       	andi	r24, 0xF8	; 248
     2b8:	84 60       	ori	r24, 0x04	; 4
     2ba:	80 83       	st	Z, r24
     2bc:	80 81       	ld	r24, Z
     2be:	87 7f       	andi	r24, 0xF7	; 247
     2c0:	80 83       	st	Z, r24
     2c2:	e3 e5       	ldi	r30, 0x53	; 83
     2c4:	f4 e0       	ldi	r31, 0x04	; 4
     2c6:	80 81       	ld	r24, Z
     2c8:	88 7f       	andi	r24, 0xF8	; 248
     2ca:	84 60       	ori	r24, 0x04	; 4
     2cc:	80 83       	st	Z, r24
     2ce:	80 81       	ld	r24, Z
     2d0:	87 7f       	andi	r24, 0xF7	; 247
     2d2:	80 83       	st	Z, r24
     2d4:	0e 94 c6 00 	call	0x18c	; 0x18c <ADC_0_init>
     2d8:	08 95       	ret

000002da <USART_0_initialization>:
     2da:	23 98       	cbi	0x04, 3	; 4
     2dc:	e3 e3       	ldi	r30, 0x33	; 51
     2de:	f4 e0       	ldi	r31, 0x04	; 4
     2e0:	80 81       	ld	r24, Z
     2e2:	87 7f       	andi	r24, 0xF7	; 247
     2e4:	80 83       	st	Z, r24
     2e6:	22 9a       	sbi	0x04, 2	; 4
     2e8:	2a 98       	cbi	0x05, 2	; 5
     2ea:	0e 94 0e 02 	call	0x41c	; 0x41c <USART_0_init>
     2ee:	08 95       	ret

000002f0 <TIMER_0_initialization>:
     2f0:	25 9a       	sbi	0x04, 5	; 4
     2f2:	2d 98       	cbi	0x05, 5	; 5
     2f4:	e0 e0       	ldi	r30, 0x00	; 0
     2f6:	f2 e0       	ldi	r31, 0x02	; 2
     2f8:	82 81       	ldd	r24, Z+2	; 0x02
     2fa:	84 60       	ori	r24, 0x04	; 4
     2fc:	82 83       	std	Z+2, r24	; 0x02
     2fe:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TIMER_0_init>
     302:	08 95       	ret

00000304 <DIGITAL_GLUE_LOGIC_0_initialization>:
     304:	24 9a       	sbi	0x04, 4	; 4
     306:	2c 98       	cbi	0x05, 4	; 5
     308:	e0 e0       	ldi	r30, 0x00	; 0
     30a:	f2 e0       	ldi	r31, 0x02	; 2
     30c:	80 81       	ld	r24, Z
     30e:	80 61       	ori	r24, 0x10	; 16
     310:	80 83       	st	Z, r24
     312:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIGITAL_GLUE_LOGIC_0_init>
     316:	08 95       	ret

00000318 <SPI_0_initialization>:
     318:	02 98       	cbi	0x00, 2	; 0
     31a:	e2 e1       	ldi	r30, 0x12	; 18
     31c:	f4 e0       	ldi	r31, 0x04	; 4
     31e:	80 81       	ld	r24, Z
     320:	87 7f       	andi	r24, 0xF7	; 247
     322:	80 83       	st	Z, r24
     324:	01 9a       	sbi	0x00, 1	; 0
     326:	09 98       	cbi	0x01, 1	; 1
     328:	03 9a       	sbi	0x00, 3	; 0
     32a:	0b 98       	cbi	0x01, 3	; 1
     32c:	04 9a       	sbi	0x00, 4	; 0
     32e:	0c 98       	cbi	0x01, 4	; 1
     330:	0e 94 f6 01 	call	0x3ec	; 0x3ec <SPI_0_init>
     334:	08 95       	ret

00000336 <DAC_0_initialization>:
     336:	e6 e1       	ldi	r30, 0x16	; 22
     338:	f4 e0       	ldi	r31, 0x04	; 4
     33a:	80 81       	ld	r24, Z
     33c:	88 7f       	andi	r24, 0xF8	; 248
     33e:	84 60       	ori	r24, 0x04	; 4
     340:	80 83       	st	Z, r24
     342:	80 81       	ld	r24, Z
     344:	87 7f       	andi	r24, 0xF7	; 247
     346:	80 83       	st	Z, r24
     348:	0e 94 08 01 	call	0x210	; 0x210 <DAC_0_init>
     34c:	08 95       	ret

0000034e <system_init>:
     34e:	0e 94 21 01 	call	0x242	; 0x242 <mcu_init>
     352:	26 98       	cbi	0x04, 6	; 4
     354:	e6 e3       	ldi	r30, 0x36	; 54
     356:	f4 e0       	ldi	r31, 0x04	; 4
     358:	80 81       	ld	r24, Z
     35a:	87 7f       	andi	r24, 0xF7	; 247
     35c:	80 83       	st	Z, r24
     35e:	27 98       	cbi	0x04, 7	; 4
     360:	e7 e3       	ldi	r30, 0x37	; 55
     362:	f4 e0       	ldi	r31, 0x04	; 4
     364:	80 81       	ld	r24, Z
     366:	87 7f       	andi	r24, 0xF7	; 247
     368:	80 83       	st	Z, r24
     36a:	42 98       	cbi	0x08, 2	; 8
     36c:	e2 e5       	ldi	r30, 0x52	; 82
     36e:	f4 e0       	ldi	r31, 0x04	; 4
     370:	80 81       	ld	r24, Z
     372:	88 60       	ori	r24, 0x08	; 8
     374:	80 83       	st	Z, r24
     376:	45 9a       	sbi	0x08, 5	; 8
     378:	4d 9a       	sbi	0x09, 5	; 9
     37a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <CLKCTRL_init>
     37e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <RTC_0_init>
     382:	0e 94 3d 01 	call	0x27a	; 0x27a <ADC_0_initialization>
     386:	0e 94 6d 01 	call	0x2da	; 0x2da <USART_0_initialization>
     38a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <TIMER_0_initialization>
     38e:	0e 94 82 01 	call	0x304	; 0x304 <DIGITAL_GLUE_LOGIC_0_initialization>
     392:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_0_initialization>
     396:	0e 94 9b 01 	call	0x336	; 0x336 <DAC_0_initialization>
     39a:	0e 94 05 01 	call	0x20a	; 0x20a <CPUINT_init>
     39e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <SLPCTRL_init>
     3a2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <BOD_init>
     3a6:	08 95       	ret

000003a8 <protected_write_io>:
     3a8:	fc 01       	movw	r30, r24
     3aa:	64 bf       	out	0x34, r22	; 52
     3ac:	40 83       	st	Z, r20
     3ae:	08 95       	ret

000003b0 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     3b0:	e0 e4       	ldi	r30, 0x40	; 64
     3b2:	f1 e0       	ldi	r31, 0x01	; 1
     3b4:	81 81       	ldd	r24, Z+1	; 0x01
     3b6:	81 11       	cpse	r24, r1
     3b8:	fd cf       	rjmp	.-6      	; 0x3b4 <RTC_0_init+0x4>
	}

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	RTC.CNT = 0x20; /* Counter: 0x20 */
     3ba:	e0 e4       	ldi	r30, 0x40	; 64
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	80 e2       	ldi	r24, 0x20	; 32
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	80 87       	std	Z+8, r24	; 0x08
     3c4:	91 87       	std	Z+9, r25	; 0x09

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     3c6:	81 e8       	ldi	r24, 0x81	; 129
     3c8:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x20 / TIMESCALE; /* Period: 0x20 */
     3ca:	80 e8       	ldi	r24, 0x80	; 128
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	82 87       	std	Z+10, r24	; 0x0a
     3d0:	93 87       	std	Z+11, r25	; 0x0b

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	RTC.DBGCTRL = 1 << RTC_DBGRUN_bp; /* Run in debug: enabled */
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	85 83       	std	Z+5, r24	; 0x05

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
     3d6:	82 83       	std	Z+2, r24	; 0x02
	              | 1 << RTC_OVF_bp; /* Overflow Interrupt enable: enabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     3d8:	81 89       	ldd	r24, Z+17	; 0x11
     3da:	81 11       	cpse	r24, r1
     3dc:	fd cf       	rjmp	.-6      	; 0x3d8 <RTC_0_init+0x28>
	}

	RTC.PITCTRLA = RTC_PERIOD_OFF_gc    /* Off */
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	08 95       	ret

000003e8 <SLPCTRL_init>:
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	08 95       	ret

000003ec <SPI_0_init>:
     3ec:	e0 e2       	ldi	r30, 0x20	; 32
     3ee:	f8 e0       	ldi	r31, 0x08	; 8
     3f0:	83 e2       	ldi	r24, 0x23	; 35
     3f2:	80 83       	st	Z, r24
     3f4:	84 e0       	ldi	r24, 0x04	; 4
     3f6:	81 83       	std	Z+1, r24	; 0x01
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	08 95       	ret

000003fc <TIMER_0_init>:
     3fc:	e0 e0       	ldi	r30, 0x00	; 0
     3fe:	fa e0       	ldi	r31, 0x0A	; 10
     400:	84 e0       	ldi	r24, 0x04	; 4
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	84 a7       	std	Z+44, r24	; 0x2c
     406:	95 a7       	std	Z+45, r25	; 0x2d
     408:	83 e4       	ldi	r24, 0x43	; 67
     40a:	81 83       	std	Z+1, r24	; 0x01
     40c:	84 e0       	ldi	r24, 0x04	; 4
     40e:	82 83       	std	Z+2, r24	; 0x02
     410:	87 e0       	ldi	r24, 0x07	; 7
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	86 a3       	std	Z+38, r24	; 0x26
     416:	97 a3       	std	Z+39, r25	; 0x27
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	08 95       	ret

0000041c <USART_0_init>:
     41c:	e0 e0       	ldi	r30, 0x00	; 0
     41e:	f8 e0       	ldi	r31, 0x08	; 8
     420:	8b e5       	ldi	r24, 0x5B	; 91
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	80 87       	std	Z+8, r24	; 0x08
     426:	91 87       	std	Z+9, r25	; 0x09
     428:	80 ec       	ldi	r24, 0xC0	; 192
     42a:	86 83       	std	Z+6, r24	; 0x06
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	98 e3       	ldi	r25, 0x38	; 56
     430:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <__iob+0x2>
     434:	90 93 6d 38 	sts	0x386D, r25	; 0x80386d <__iob+0x3>
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	08 95       	ret

0000043c <USART_0_write>:
     43c:	e0 e0       	ldi	r30, 0x00	; 0
     43e:	f8 e0       	ldi	r31, 0x08	; 8
     440:	94 81       	ldd	r25, Z+4	; 0x04
     442:	95 ff       	sbrs	r25, 5
     444:	fd cf       	rjmp	.-6      	; 0x440 <USART_0_write+0x4>
     446:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     44a:	08 95       	ret

0000044c <USART_0_printCHAR>:
     44c:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_0_write>
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	08 95       	ret

00000456 <tinyAxon_add_pulse>:
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
	{
		if(pulse_queue[i] == 0){
     456:	20 91 16 38 	lds	r18, 0x3816	; 0x803816 <__data_end>
     45a:	30 91 17 38 	lds	r19, 0x3817	; 0x803817 <__data_end+0x1>
     45e:	23 2b       	or	r18, r19
     460:	51 f0       	breq	.+20     	; 0x476 <tinyAxon_add_pulse+0x20>
     462:	e8 e1       	ldi	r30, 0x18	; 24
     464:	f8 e3       	ldi	r31, 0x38	; 56
     466:	21 e0       	ldi	r18, 0x01	; 1
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	b9 01       	movw	r22, r18
     46c:	41 91       	ld	r20, Z+
     46e:	51 91       	ld	r21, Z+
     470:	45 2b       	or	r20, r21
     472:	81 f4       	brne	.+32     	; 0x494 <tinyAxon_add_pulse+0x3e>
     474:	02 c0       	rjmp	.+4      	; 0x47a <tinyAxon_add_pulse+0x24>
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	70 e0       	ldi	r23, 0x00	; 0
			pulse_queue[i] = new_pulse;
     47a:	66 0f       	add	r22, r22
     47c:	77 1f       	adc	r23, r23
     47e:	fb 01       	movw	r30, r22
     480:	ea 5e       	subi	r30, 0xEA	; 234
     482:	f7 4c       	sbci	r31, 0xC7	; 199
     484:	80 83       	st	Z, r24
     486:	91 83       	std	Z+1, r25	; 0x01
			pulses_in_queue++;
     488:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     48c:	8f 5f       	subi	r24, 0xFF	; 255
     48e:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <pulses_in_queue>
			// We return so we only ever add one
			break;
     492:	08 95       	ret
     494:	2f 5f       	subi	r18, 0xFF	; 255
     496:	3f 4f       	sbci	r19, 0xFF	; 255
*/
static void tinyAxon_add_pulse(uint16_t new_pulse)
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     498:	2a 30       	cpi	r18, 0x0A	; 10
     49a:	31 05       	cpc	r19, r1
     49c:	31 f7       	brne	.-52     	; 0x46a <tinyAxon_add_pulse+0x14>
     49e:	08 95       	ret

000004a0 <tinyAxon_is_firing>:
// DAC has no DAC_0_get_output, so we keep track of this here.
uint8_t axonOutputValue = 0;


_Bool tinyAxon_is_firing(){
	return axonOutputValue != NO_SIGNAL_OUTPUT;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <axonOutputValue>
     4a6:	91 11       	cpse	r25, r1
     4a8:	01 c0       	rjmp	.+2      	; 0x4ac <tinyAxon_is_firing+0xc>
     4aa:	80 e0       	ldi	r24, 0x00	; 0
}
     4ac:	08 95       	ret

000004ae <find_newest_pulse>:
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
     4ae:	40 91 16 38 	lds	r20, 0x3816	; 0x803816 <__data_end>
     4b2:	50 91 17 38 	lds	r21, 0x3817	; 0x803817 <__data_end+0x1>
     4b6:	e8 e1       	ldi	r30, 0x18	; 24
     4b8:	f8 e3       	ldi	r31, 0x38	; 56
	
// This function will be used with pulse_queue to find the newest pulse
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
     4ba:	80 e0       	ldi	r24, 0x00	; 0
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     4bc:	91 e0       	ldi	r25, 0x01	; 1
		if (pulse_queue[current_index] > max) {
     4be:	21 91       	ld	r18, Z+
     4c0:	31 91       	ld	r19, Z+
     4c2:	42 17       	cp	r20, r18
     4c4:	53 07       	cpc	r21, r19
     4c6:	10 f4       	brcc	.+4      	; 0x4cc <find_newest_pulse+0x1e>
     4c8:	89 2f       	mov	r24, r25
			return_index = current_index;
			max = pulse_queue[current_index];
     4ca:	a9 01       	movw	r20, r18
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     4cc:	9f 5f       	subi	r25, 0xFF	; 255
     4ce:	9a 30       	cpi	r25, 0x0A	; 10
     4d0:	b1 f7       	brne	.-20     	; 0x4be <find_newest_pulse+0x10>
			return_index = current_index;
			max = pulse_queue[current_index];
		}
	}
	return return_index;
}
     4d2:	08 95       	ret

000004d4 <tinyAxon_stop_sending_pulse>:
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
}

void tinyAxon_stop_sending_pulse()
{
	DAC_0_set_output(NO_SIGNAL_OUTPUT);
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 1e 01 	call	0x23c	; 0x23c <DAC_0_set_output>
	axonOutputValue=NO_SIGNAL_OUTPUT;
     4dc:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <axonOutputValue>
     4e0:	08 95       	ret

000004e2 <tinyAxon_remove_pulse>:

/*
If the potential is very low, we want to try to remove a pulse.
*/
bool tinyAxon_remove_pulse(void)
{
     4e2:	cf 93       	push	r28
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
     4e4:	c0 91 2a 38 	lds	r28, 0x382A	; 0x80382a <pulses_in_queue>
     4e8:	cc 23       	and	r28, r28
     4ea:	c9 f0       	breq	.+50     	; 0x51e <tinyAxon_remove_pulse+0x3c>
		//There was no pulse to remove.
		return false;
	}
	else{
		// If we are to remove a pulse, we want to remove the one that will fire last.
		uint8_t pulse_index = find_newest_pulse();
     4ec:	0e 94 57 02 	call	0x4ae	; 0x4ae <find_newest_pulse>
		uint16_t newest_pulse = pulse_queue[pulse_index];
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	fc 01       	movw	r30, r24
     4f4:	ee 0f       	add	r30, r30
     4f6:	ff 1f       	adc	r31, r31
     4f8:	ea 5e       	subi	r30, 0xEA	; 234
     4fa:	f7 4c       	sbci	r31, 0xC7	; 199
	
		// Now we want to check if the pulse is too far away to be affected by the low potential, or close enough that we decide to remove it.
		// (When we say that the pulse is too far away, it refers to the biological process of how the potential spreads from Dendrites to axon).
		if(newest_pulse > PULSE_NO_RETURN_TIME){
     4fc:	20 81       	ld	r18, Z
     4fe:	31 81       	ldd	r19, Z+1	; 0x01
     500:	2d 33       	cpi	r18, 0x3D	; 61
     502:	31 05       	cpc	r19, r1
     504:	70 f0       	brcs	.+28     	; 0x522 <tinyAxon_remove_pulse+0x40>
			// We decided to remove the pulse
			pulse_queue[pulse_index] = 0;
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	fc 01       	movw	r30, r24
     50c:	ea 5e       	subi	r30, 0xEA	; 234
     50e:	f7 4c       	sbci	r31, 0xC7	; 199
     510:	10 82       	st	Z, r1
     512:	11 82       	std	Z+1, r1	; 0x01
			pulses_in_queue--;
     514:	c1 50       	subi	r28, 0x01	; 1
     516:	c0 93 2a 38 	sts	0x382A, r28	; 0x80382a <pulses_in_queue>
			return true;
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	03 c0       	rjmp	.+6      	; 0x524 <tinyAxon_remove_pulse+0x42>
bool tinyAxon_remove_pulse(void)
{
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
		//There was no pulse to remove.
		return false;
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	01 c0       	rjmp	.+2      	; 0x524 <tinyAxon_remove_pulse+0x42>
			pulses_in_queue--;
			return true;
		}
		// Here we have found that there is a pulse queued, but it is old enough to let pass anyway, so now we need to put it back into the queue.
		else{
			return false;
     522:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <tinyAxon_update_potential>:
/*
Decides whether or not the axon should fire
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
     528:	cf 92       	push	r12
     52a:	df 92       	push	r13
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	6b 01       	movw	r12, r22
     532:	7c 01       	movw	r14, r24
	//While the neuron has enough potential to fire, we want to fire more
	while (potential >= THRESHOLD_POTENTIAL)
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	48 ec       	ldi	r20, 0xC8	; 200
     53a:	51 e4       	ldi	r21, 0x41	; 65
     53c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__gesf2>
     540:	88 23       	and	r24, r24
     542:	bc f1       	brlt	.+110    	; 0x5b2 <tinyAxon_update_potential+0x8a>
	{
		// We have to check if there are already queued pulses, so that the frequency never exceeds FIRE_DELAY
		if(pulses_in_queue>0){
     544:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     548:	88 23       	and	r24, r24
     54a:	b1 f0       	breq	.+44     	; 0x578 <tinyAxon_update_potential+0x50>
			uint16_t newest_pulse = pulse_queue[find_newest_pulse()];
     54c:	0e 94 57 02 	call	0x4ae	; 0x4ae <find_newest_pulse>
     550:	e8 2f       	mov	r30, r24
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	ee 0f       	add	r30, r30
     556:	ff 1f       	adc	r31, r31
     558:	ea 5e       	subi	r30, 0xEA	; 234
     55a:	f7 4c       	sbci	r31, 0xC7	; 199
			
			// There is at least one pulse in the queue, and it is "so close", that we need to offset the new pulse, so that we keep at least
			// one FIRE_DELAY between each pulse
			if(newest_pulse + FIRE_DELAY > TRAVLE_DELAY){
     55c:	80 81       	ld	r24, Z
     55e:	91 81       	ldd	r25, Z+1	; 0x01
     560:	0a 96       	adiw	r24, 0x0a	; 10
     562:	85 36       	cpi	r24, 0x65	; 101
     564:	91 05       	cpc	r25, r1
     566:	18 f0       	brcs	.+6      	; 0x56e <tinyAxon_update_potential+0x46>
				tinyAxon_add_pulse(newest_pulse + FIRE_DELAY);
     568:	0e 94 2b 02 	call	0x456	; 0x456 <tinyAxon_add_pulse>
     56c:	09 c0       	rjmp	.+18     	; 0x580 <tinyAxon_update_potential+0x58>
			}
			// There is at least one pulse in the queue, but it's "far enough away" to ignore
			else{
				tinyAxon_add_pulse(TRAVLE_DELAY);
     56e:	84 e6       	ldi	r24, 0x64	; 100
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 2b 02 	call	0x456	; 0x456 <tinyAxon_add_pulse>
     576:	04 c0       	rjmp	.+8      	; 0x580 <tinyAxon_update_potential+0x58>
			}
		}
		// There are no pulses in the queue, so we add a pulse as normal
		else{
			tinyAxon_add_pulse(TRAVLE_DELAY);		
     578:	84 e6       	ldi	r24, 0x64	; 100
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 2b 02 	call	0x456	; 0x456 <tinyAxon_add_pulse>
		}
		
		potential += POSTFIRE_POTENTIAL_REACTION; // This is usually defined as a negative value, don't be confused by the +=
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	48 ec       	ldi	r20, 0xC8	; 200
     586:	51 e4       	ldi	r21, 0x41	; 65
     588:	c7 01       	movw	r24, r14
     58a:	b6 01       	movw	r22, r12
     58c:	0e 94 b3 09 	call	0x1366	; 0x1366 <__subsf3>
     590:	6b 01       	movw	r12, r22
     592:	7c 01       	movw	r14, r24
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     594:	45 e0       	ldi	r20, 0x05	; 5
     596:	63 e0       	ldi	r22, 0x03	; 3
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	0e 94 a3 05 	call	0xb46	; 0xb46 <tinyLED_set_color_mode>
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
	//While the neuron has enough potential to fire, we want to fire more
	while (potential >= THRESHOLD_POTENTIAL)
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	48 ec       	ldi	r20, 0xC8	; 200
     5a4:	51 e4       	ldi	r21, 0x41	; 65
     5a6:	c7 01       	movw	r24, r14
     5a8:	b6 01       	movw	r22, r12
     5aa:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__gesf2>
     5ae:	88 23       	and	r24, r24
     5b0:	4c f6       	brge	.-110    	; 0x544 <tinyAxon_update_potential+0x1c>
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
	}
	
	// If the neuron has a very low potential, we want to remove a pulse from the queue (if there is one)
	if(potential < -THRESHOLD_POTENTIAL)
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	48 ec       	ldi	r20, 0xC8	; 200
     5b8:	51 ec       	ldi	r21, 0xC1	; 193
     5ba:	c7 01       	movw	r24, r14
     5bc:	b6 01       	movw	r22, r12
     5be:	0e 94 20 0a 	call	0x1440	; 0x1440 <__cmpsf2>
     5c2:	88 23       	and	r24, r24
     5c4:	0c f0       	brlt	.+2      	; 0x5c8 <tinyAxon_update_potential+0xa0>
     5c6:	46 c0       	rjmp	.+140    	; 0x654 <tinyAxon_update_potential+0x12c>
	{
		if(pulses_in_queue > 0) // Perhaps this should be a separate variable? For now, we will just simply use -THRESHOLD_POTENTIAL
     5c8:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     5cc:	88 23       	and	r24, r24
     5ce:	11 f1       	breq	.+68     	; 0x614 <tinyAxon_update_potential+0xec>
		{
			// The neurons potential is low enough to attempt to remove a queued fire (Fire less)
			if(tinyAxon_remove_pulse())
     5d0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <tinyAxon_remove_pulse>
     5d4:	88 23       	and	r24, r24
     5d6:	f1 f1       	breq	.+124    	; 0x654 <tinyAxon_update_potential+0x12c>
			{
				// The potential has evened out a bit
				potential += THRESHOLD_POTENTIAL;
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	48 ec       	ldi	r20, 0xC8	; 200
     5de:	51 e4       	ldi	r21, 0x41	; 65
     5e0:	c7 01       	movw	r24, r14
     5e2:	b6 01       	movw	r22, r12
     5e4:	0e 94 b4 09 	call	0x1368	; 0x1368 <__addsf3>
     5e8:	6b 01       	movw	r12, r22
     5ea:	7c 01       	movw	r14, r24
     5ec:	33 c0       	rjmp	.+102    	; 0x654 <tinyAxon_update_potential+0x12c>
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
		{
			if(pulse_queue[i] != 0){
     5ee:	80 81       	ld	r24, Z
     5f0:	91 81       	ldd	r25, Z+1	; 0x01
     5f2:	00 97       	sbiw	r24, 0x00	; 0
     5f4:	39 f0       	breq	.+14     	; 0x604 <tinyAxon_update_potential+0xdc>
				pulse_queue[i]--;
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	80 83       	st	Z, r24
     5fa:	91 83       	std	Z+1, r25	; 0x01
				
				// If the time went from 1 to 0, we fire the axon
				if(pulse_queue[i] == 0){
     5fc:	89 2b       	or	r24, r25
     5fe:	11 f4       	brne	.+4      	; 0x604 <tinyAxon_update_potential+0xdc>
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
	pulses_in_queue--;
     600:	41 50       	subi	r20, 0x01	; 1
Function to set firing.
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
     602:	51 e0       	ldi	r21, 0x01	; 1
     604:	32 96       	adiw	r30, 0x02	; 2
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     606:	e2 17       	cp	r30, r18
     608:	f3 07       	cpc	r31, r19
     60a:	89 f7       	brne	.-30     	; 0x5ee <tinyAxon_update_potential+0xc6>
     60c:	50 93 2c 38 	sts	0x382C, r21	; 0x80382c <tinyAxon_should_fire>
     610:	40 93 2a 38 	sts	0x382A, r20	; 0x80382a <pulses_in_queue>
The function should set the DAC to fire for two
update cycles once the pulse flag is set high.
*/
static void tinyAxon_update_pulse_transmitter(void)
{
	if (tinyAxon_should_fire)
     614:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <tinyAxon_should_fire>
     618:	88 23       	and	r24, r24
     61a:	91 f0       	breq	.+36     	; 0x640 <tinyAxon_update_potential+0x118>
	{
		tinyAxon_should_fire = false;
     61c:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <tinyAxon_should_fire>
*/
static void tinyAxon_start_sending_pulse()
{
	if (NEURONTYPE == EXCITATORY_NEURON)
	{
		DAC_0_set_output(EXCITATORY_NEURON_OUTPUT);
     620:	80 e8       	ldi	r24, 0x80	; 128
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 1e 01 	call	0x23c	; 0x23c <DAC_0_set_output>
		axonOutputValue=EXCITATORY_NEURON_OUTPUT;
     628:	80 e8       	ldi	r24, 0x80	; 128
     62a:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <axonOutputValue>
	{
		DAC_0_set_output(INHIBITORY_NEURON_OUTPUT);
		axonOutputValue=INHIBITORY_NEURON_OUTPUT;
	}
	
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
     62e:	45 e0       	ldi	r20, 0x05	; 5
     630:	65 e0       	ldi	r22, 0x05	; 5
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	0e 94 a3 05 	call	0xb46	; 0xb46 <tinyLED_set_color_mode>
{
	if (tinyAxon_should_fire)
	{
		tinyAxon_should_fire = false;
		tinyAxon_start_sending_pulse();
		tinyAxon_has_just_fired = true;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <tinyAxon_has_just_fired>
     63e:	15 c0       	rjmp	.+42     	; 0x66a <tinyAxon_update_potential+0x142>
		
	}
	else if (tinyAxon_has_just_fired)
     640:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <tinyAxon_has_just_fired>
     644:	88 23       	and	r24, r24
     646:	19 f0       	breq	.+6      	; 0x64e <tinyAxon_update_potential+0x126>
	{
		tinyAxon_has_just_fired = false;
     648:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <tinyAxon_has_just_fired>
     64c:	0e c0       	rjmp	.+28     	; 0x66a <tinyAxon_update_potential+0x142>
	}
	else if (!tinyAxon_has_just_fired && !tinyAxon_should_fire)
	{
		tinyAxon_stop_sending_pulse();
     64e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <tinyAxon_stop_sending_pulse>
     652:	0b c0       	rjmp	.+22     	; 0x66a <tinyAxon_update_potential+0x142>
			}
		}
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
     654:	40 91 2a 38 	lds	r20, 0x382A	; 0x80382a <pulses_in_queue>
     658:	44 23       	and	r20, r20
     65a:	e1 f2       	breq	.-72     	; 0x614 <tinyAxon_update_potential+0xec>
     65c:	50 91 2c 38 	lds	r21, 0x382C	; 0x80382c <tinyAxon_should_fire>
     660:	e6 e1       	ldi	r30, 0x16	; 22
     662:	f8 e3       	ldi	r31, 0x38	; 56
     664:	2a e2       	ldi	r18, 0x2A	; 42
     666:	38 e3       	ldi	r19, 0x38	; 56
     668:	c2 cf       	rjmp	.-124    	; 0x5ee <tinyAxon_update_potential+0xc6>
	}
	
	// Here we set the actual output of the DAC (Digital to Analog Converter)
	tinyAxon_update_pulse_transmitter();
	
	tinyDebugger_send_uint8("Axon", axonOutputValue);
     66a:	60 91 2b 38 	lds	r22, 0x382B	; 0x80382b <axonOutputValue>
     66e:	89 ef       	ldi	r24, 0xF9	; 249
     670:	90 ea       	ldi	r25, 0xA0	; 160
     672:	0e 94 30 04 	call	0x860	; 0x860 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("Pulses", pulses_in_queue);
     676:	60 91 2a 38 	lds	r22, 0x382A	; 0x80382a <pulses_in_queue>
     67a:	8e ef       	ldi	r24, 0xFE	; 254
     67c:	90 ea       	ldi	r25, 0xA0	; 160
     67e:	0e 94 30 04 	call	0x860	; 0x860 <tinyDebugger_send_uint8>
	
	
	return potential;
}
     682:	c7 01       	movw	r24, r14
     684:	b6 01       	movw	r22, r12
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	08 95       	ret

00000690 <tinyAxon_check_charge_level>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     690:	66 b1       	in	r22, 0x06	; 6

_Bool tinyAxon_check_charge_level(void)
{
	// We check the AXON_CHECK_PIN. If it is hight while the axon is not firing, it must be connected to a charger
	
	tinyDebugger_send_uint8("Pulses", AXON_CHECK_PIN_get_level());
     692:	66 1f       	adc	r22, r22
     694:	66 27       	eor	r22, r22
     696:	66 1f       	adc	r22, r22
     698:	8e ef       	ldi	r24, 0xFE	; 254
     69a:	90 ea       	ldi	r25, 0xA0	; 160
     69c:	0e 94 30 04 	call	0x860	; 0x860 <tinyDebugger_send_uint8>
	return (AXON_CHECK_PIN_get_level() && !tinyAxon_has_just_fired);
     6a0:	37 9b       	sbis	0x06, 7	; 6
     6a2:	05 c0       	rjmp	.+10     	; 0x6ae <tinyAxon_check_charge_level+0x1e>
     6a4:	90 91 2d 38 	lds	r25, 0x382D	; 0x80382d <tinyAxon_has_just_fired>
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	89 27       	eor	r24, r25
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <tinyAxon_check_charge_level+0x22>
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	81 70       	andi	r24, 0x01	; 1
     6b4:	08 95       	ret

000006b6 <tinyButton_update>:
/*
If the button has been let go, we change button_press to true. This only lasts one cycle, before it is set to false again.
If the button is held down for longer than PULSEMODE_BUTTON_PRESS_TIME, we toggle the pulse mode state.
*/
void tinyButton_update(void)
{
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
	button_press = false;
     6be:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <button_press>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return VPORTC.IN & (1 << pin);
     6c2:	8a b1       	in	r24, 0x0a	; 10
	_Bool button_is_pushed_down = !BUTTON_PIN_get_level(); // The digital port will be read as low if the button is pushed down.
     6c4:	d1 e0       	ldi	r29, 0x01	; 1
     6c6:	c8 2f       	mov	r28, r24
     6c8:	c4 70       	andi	r28, 0x04	; 4
     6ca:	82 fd       	sbrc	r24, 2
     6cc:	d0 e0       	ldi	r29, 0x00	; 0

	if (button_is_pushed_down && !button_was_pushed_down)
     6ce:	c1 11       	cpse	r28, r1
     6d0:	39 c0       	rjmp	.+114    	; 0x744 <tinyButton_update+0x8e>
     6d2:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <button_was_pushed_down>
     6d6:	81 11       	cpse	r24, r1
     6d8:	0e c0       	rjmp	.+28     	; 0x6f6 <tinyButton_update+0x40>
	{
		tinyButton_start_time = tinyTime_now();
     6da:	0e 94 aa 09 	call	0x1354	; 0x1354 <tinyTime_now>
     6de:	60 93 2e 38 	sts	0x382E, r22	; 0x80382e <tinyButton_start_time>
     6e2:	70 93 2f 38 	sts	0x382F, r23	; 0x80382f <tinyButton_start_time+0x1>
     6e6:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <tinyButton_start_time+0x2>
     6ea:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <tinyButton_start_time+0x3>
	}
	if (button_is_pushed_down && button_was_pushed_down)
     6ee:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <button_was_pushed_down>
     6f2:	88 23       	and	r24, r24
     6f4:	b9 f1       	breq	.+110    	; 0x764 <tinyButton_update+0xae>
	{
		if ((tinyTime_now() - tinyButton_start_time) > PULSEMODE_BUTTON_PRESS_TIME)
     6f6:	0e 94 aa 09 	call	0x1354	; 0x1354 <tinyTime_now>
     6fa:	00 91 2e 38 	lds	r16, 0x382E	; 0x80382e <tinyButton_start_time>
     6fe:	10 91 2f 38 	lds	r17, 0x382F	; 0x80382f <tinyButton_start_time+0x1>
     702:	20 91 30 38 	lds	r18, 0x3830	; 0x803830 <tinyButton_start_time+0x2>
     706:	30 91 31 38 	lds	r19, 0x3831	; 0x803831 <tinyButton_start_time+0x3>
     70a:	60 1b       	sub	r22, r16
     70c:	71 0b       	sbc	r23, r17
     70e:	82 0b       	sbc	r24, r18
     710:	93 0b       	sbc	r25, r19
     712:	0e 94 00 0b 	call	0x1600	; 0x1600 <__floatunsisf>
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	48 ec       	ldi	r20, 0xC8	; 200
     71c:	52 e4       	ldi	r21, 0x42	; 66
     71e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__gesf2>
     722:	18 16       	cp	r1, r24
     724:	7c f4       	brge	.+30     	; 0x744 <tinyButton_update+0x8e>
		{
			tinyPulse_toggle_pulse_mode();
     726:	0e 94 9b 08 	call	0x1136	; 0x1136 <tinyPulse_toggle_pulse_mode>
			tinyButton_start_time = tinyTime_now();
     72a:	0e 94 aa 09 	call	0x1354	; 0x1354 <tinyTime_now>
     72e:	60 93 2e 38 	sts	0x382E, r22	; 0x80382e <tinyButton_start_time>
     732:	70 93 2f 38 	sts	0x382F, r23	; 0x80382f <tinyButton_start_time+0x1>
     736:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <tinyButton_start_time+0x2>
     73a:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <tinyButton_start_time+0x3>
			// We don't want switching to pulse mode to count as a button press, so we ignore the next button press
			ignore_next_button_press = true;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <ignore_next_button_press>
		}
	}
	if (!button_is_pushed_down && button_was_pushed_down)
     744:	cc 23       	and	r28, r28
     746:	71 f0       	breq	.+28     	; 0x764 <tinyButton_update+0xae>
     748:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <button_was_pushed_down>
     74c:	88 23       	and	r24, r24
     74e:	51 f0       	breq	.+20     	; 0x764 <tinyButton_update+0xae>
	{
		if(!ignore_next_button_press){
     750:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <ignore_next_button_press>
     754:	81 11       	cpse	r24, r1
     756:	04 c0       	rjmp	.+8      	; 0x760 <tinyButton_update+0xaa>
			button_press = true;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <button_press>
     75e:	02 c0       	rjmp	.+4      	; 0x764 <tinyButton_update+0xae>
		}
		else{
			ignore_next_button_press = false;
     760:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <ignore_next_button_press>
		}
		
	}
	button_was_pushed_down = button_is_pushed_down;
     764:	d0 93 34 38 	sts	0x3834, r29	; 0x803834 <button_was_pushed_down>
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	08 95       	ret

00000772 <tinyButton_update_potential>:

double tinyButton_update_potential(double potential){
	if(button_press){
     772:	20 91 33 38 	lds	r18, 0x3833	; 0x803833 <button_press>
     776:	22 23       	and	r18, r18
     778:	31 f0       	breq	.+12     	; 0x786 <tinyButton_update_potential+0x14>
		potential += BUTTON_PRESS_REACTION;
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 ed       	ldi	r20, 0xD0	; 208
     780:	51 e4       	ldi	r21, 0x41	; 65
     782:	0e 94 b4 09 	call	0x1368	; 0x1368 <__addsf3>
	}
	return potential;
}
     786:	08 95       	ret

00000788 <tinyCharge_is_connected_to_charger>:
*/
uint8_t charge_counter = 0; 

_Bool tinyCharge_is_connected_to_charger(){
	return connected_to_charger;
}
     788:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     78c:	08 95       	ret

0000078e <tinyCharge_is_fully_charged>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     78e:	86 b1       	in	r24, 0x06	; 6

_Bool tinyCharge_is_fully_charged(){
	return CHARGING_STATUS_PIN_get_level();
}
     790:	86 fb       	bst	r24, 6
     792:	88 27       	eor	r24, r24
     794:	80 f9       	bld	r24, 0
     796:	08 95       	ret

00000798 <tinyCharge_DAC_dissable>:
void tinyCharge_DAC_dissable(){
	
	// We need some way to disable the DAC to prevent huge current draw when charging (64mA). When there is no code uploaded to the attiny, there is no problem.
	// We're going to try to enable the pin as a dendrite, since they seem to be doing fine. Completely uninitializing the pin probably caused a microchip to be fried.
	
	DAC_0_uninit();
     798:	0e 94 0d 01 	call	0x21a	; 0x21a <DAC_0_uninit>
	DAC_0_disable();
     79c:	0e 94 18 01 	call	0x230	; 0x230 <DAC_0_disable>
     7a0:	08 95       	ret

000007a2 <tinyCharge_DAC_enable>:
void tinyCharge_DAC_enable(){
	
	// We need some way to disable the DAC to prevent huge current draw when charging (64mA). When there is no code uploaded to the attiny, there is no problem.
	// We're going to try to enable the pin as a dendrite, since they seem to be doing fine. Completely uninitializing the pin probably caused a microchip to be fried.
	
	DAC_0_init();
     7a2:	0e 94 08 01 	call	0x210	; 0x210 <DAC_0_init>
	DAC_0_enable();
     7a6:	0e 94 12 01 	call	0x224	; 0x224 <DAC_0_enable>
     7aa:	08 95       	ret

000007ac <tinyCharge_switch_mode>:
}


void tinyCharge_switch_mode(){
	
	if(connected_to_charger){
     7ac:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     7b0:	88 23       	and	r24, r24
     7b2:	89 f0       	breq	.+34     	; 0x7d6 <tinyCharge_switch_mode+0x2a>
		// Switch from main to charging mode
		
		// Set LED
		tinyLED_set_color_mode(OUT_LED, CHARGING_COLOR, SWING);
     7b4:	43 e0       	ldi	r20, 0x03	; 3
     7b6:	61 e0       	ldi	r22, 0x01	; 1
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <tinyLED_set_color_mode>
		tinyLED_set_color(INN_LED, LED_OFF);
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <tinyLED_set_color>


		// Stop axon from firing
		// (There is a small chance that the neuron is put into charging mode as it is firing. The axon is then never told to stop firing)
		tinyAxon_stop_sending_pulse();
     7c6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <tinyAxon_stop_sending_pulse>

		// disable DAC
		tinyCharge_DAC_dissable();
     7ca:	0e 94 cc 03 	call	0x798	; 0x798 <tinyCharge_DAC_dissable>
		
		// We also turn off pulse mode, because it's confusing if it suddenly comes on
		// after it has been charging
		tinyPulse_set_pulse_mode(false);
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	0e 94 b7 08 	call	0x116e	; 0x116e <tinyPulse_set_pulse_mode>
     7d4:	08 95       	ret
	}
	else{
		// Switch from charge to main mode
		
		// Set LED
		tinyLED_set_color(OUT_LED, LED_OFF);
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	0e 94 c7 05 	call	0xb8e	; 0xb8e <tinyLED_set_color>
		tinyLED_set_color(INN_LED, LED_OFF);
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <tinyLED_set_color>
		
		// enable DAC
		tinyCharge_DAC_enable();
     7e6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <tinyCharge_DAC_enable>
     7ea:	08 95       	ret

000007ec <tinyCharge_set_charging_mode>:
	}
}

void tinyCharge_set_charging_mode(_Bool charging_status){
	if(charging_status != connected_to_charger){
     7ec:	90 91 59 38 	lds	r25, 0x3859	; 0x803859 <connected_to_charger>
     7f0:	98 17       	cp	r25, r24
     7f2:	21 f0       	breq	.+8      	; 0x7fc <tinyCharge_set_charging_mode+0x10>
		connected_to_charger = charging_status;
     7f4:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <connected_to_charger>
		tinyCharge_switch_mode();
     7f8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <tinyCharge_switch_mode>
     7fc:	08 95       	ret

000007fe <tinyCharge_update_charging_mode>:
*/
void tinyCharge_update_charging_mode(){
	// For complicated reasons, the axon_check_level will be high even when the charger is not connected
	// WHEN the neuron is in charging mode, hence we ignore the axon level when the neuron is in charging mode
	_Bool charging;
	if(connected_to_charger){
     7fe:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     802:	88 23       	and	r24, r24
     804:	19 f0       	breq	.+6      	; 0x80c <tinyCharge_update_charging_mode+0xe>
		charging = tinyDendrite_check_charge_level();
     806:	0e 94 59 04 	call	0x8b2	; 0x8b2 <tinyDendrite_check_charge_level>
     80a:	0a c0       	rjmp	.+20     	; 0x820 <tinyCharge_update_charging_mode+0x22>
	} else{
		charging = tinyDendrite_check_charge_level() || tinyAxon_check_charge_level();
     80c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <tinyDendrite_check_charge_level>
     810:	81 11       	cpse	r24, r1
     812:	03 c0       	rjmp	.+6      	; 0x81a <tinyCharge_update_charging_mode+0x1c>
     814:	0e 94 48 03 	call	0x690	; 0x690 <tinyAxon_check_charge_level>
     818:	02 c0       	rjmp	.+4      	; 0x81e <tinyCharge_update_charging_mode+0x20>
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	81 70       	andi	r24, 0x01	; 1
	}
	
	// In order to prevent the axon from stimulating itself, we only switch into charging mode when the conditions have been right for several cycles
	if(!connected_to_charger && charging){
     820:	90 91 59 38 	lds	r25, 0x3859	; 0x803859 <connected_to_charger>
     824:	91 11       	cpse	r25, r1
     826:	10 c0       	rjmp	.+32     	; 0x848 <tinyCharge_update_charging_mode+0x4a>
     828:	88 23       	and	r24, r24
     82a:	71 f0       	breq	.+28     	; 0x848 <tinyCharge_update_charging_mode+0x4a>
		charge_counter++;
     82c:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <charge_counter>
     830:	8f 5f       	subi	r24, 0xFF	; 255
		if(charge_counter > CYCLES_REQUIRED_FOR_CHARGING_MODE_SWITCH){
     832:	8b 30       	cpi	r24, 0x0B	; 11
     834:	18 f4       	brcc	.+6      	; 0x83c <tinyCharge_update_charging_mode+0x3e>
		charging = tinyDendrite_check_charge_level() || tinyAxon_check_charge_level();
	}
	
	// In order to prevent the axon from stimulating itself, we only switch into charging mode when the conditions have been right for several cycles
	if(!connected_to_charger && charging){
		charge_counter++;
     836:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <charge_counter>
     83a:	08 95       	ret
		if(charge_counter > CYCLES_REQUIRED_FOR_CHARGING_MODE_SWITCH){
			charge_counter = 0;
     83c:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <charge_counter>
			tinyCharge_set_charging_mode(charging);
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	0e 94 f6 03 	call	0x7ec	; 0x7ec <tinyCharge_set_charging_mode>
     846:	08 95       	ret
		}
	}
	else{
		tinyCharge_set_charging_mode(charging);
     848:	0e 94 f6 03 	call	0x7ec	; 0x7ec <tinyCharge_set_charging_mode>
     84c:	08 95       	ret

0000084e <tinyCharge_set_transistors>:
}



void tinyCharge_set_transistors(){
	if(connected_to_charger){
     84e:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <connected_to_charger>
     852:	88 23       	and	r24, r24
     854:	11 f0       	breq	.+4      	; 0x85a <tinyCharge_set_transistors+0xc>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     856:	4d 98       	cbi	0x09, 5	; 9
     858:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     85a:	4d 9a       	sbi	0x09, 5	; 9
     85c:	08 95       	ret

0000085e <tinyDebugger_send_uint32>:
		char number[20]; // Arbitrary max
		dtostrf(value,1,NUMBER_OF_DECIMALS, number);
		printf("%s:%5s\t", name, number);
	}
}
void tinyDebugger_send_string(const char* name, char * value){
     85e:	08 95       	ret

00000860 <tinyDebugger_send_uint8>:
     860:	08 95       	ret

00000862 <tinyDebugger_send_double>:
     862:	08 95       	ret

00000864 <tinyDebugger_end_line>:
	if(DEBUGGING){
		printf("%s:%s\t", name, value);
	}
}
void tinyDebugger_end_line(){
     864:	08 95       	ret

00000866 <tinyDendrite_read_signals>:

/*
This function reads the voltage at the Dendrite inputs with the ADC
*/
void tinyDendrite_read_signals(void)
{
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	ce e0       	ldi	r28, 0x0E	; 14
     874:	d8 e3       	ldi	r29, 0x38	; 56
     876:	00 e4       	ldi	r16, 0x40	; 64
     878:	18 e3       	ldi	r17, 0x38	; 56
     87a:	0f 2e       	mov	r0, r31
     87c:	f3 e1       	ldi	r31, 0x13	; 19
     87e:	ef 2e       	mov	r14, r31
     880:	f8 e3       	ldi	r31, 0x38	; 56
     882:	ff 2e       	mov	r15, r31
     884:	f0 2d       	mov	r31, r0
	for (int i = 0; i < DENDRITE_COUNT; i++)
	{
		tinyDendrite_values[i] = ADC_0_get_conversion(Dendrite_ports[i]);
     886:	89 91       	ld	r24, Y+
     888:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <ADC_0_get_conversion>
     88c:	f8 01       	movw	r30, r16
     88e:	81 93       	st	Z+, r24
     890:	8f 01       	movw	r16, r30
/*
This function reads the voltage at the Dendrite inputs with the ADC
*/
void tinyDendrite_read_signals(void)
{
	for (int i = 0; i < DENDRITE_COUNT; i++)
     892:	ce 15       	cp	r28, r14
     894:	df 05       	cpc	r29, r15
     896:	b9 f7       	brne	.-18     	; 0x886 <tinyDendrite_read_signals+0x20>
	{
		tinyDendrite_values[i] = ADC_0_get_conversion(Dendrite_ports[i]);
	}
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	08 95       	ret

000008a6 <tinyDendrite_get_value>:

uint8_t tinyDendrite_get_value(uint8_t dendrite_number){
	return tinyDendrite_values[dendrite_number];
     8a6:	e8 2f       	mov	r30, r24
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	e0 5c       	subi	r30, 0xC0	; 192
     8ac:	f7 4c       	sbci	r31, 0xC7	; 199
}
     8ae:	80 81       	ld	r24, Z
     8b0:	08 95       	ret

000008b2 <tinyDendrite_check_charge_level>:

_Bool tinyDendrite_check_charge_level(void)
{
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
	_Bool charging = false;
	
	tinyDendrite_read_signals();
     8b6:	0e 94 33 04 	call	0x866	; 0x866 <tinyDendrite_read_signals>
     8ba:	eb e3       	ldi	r30, 0x3B	; 59
     8bc:	f8 e3       	ldi	r31, 0x38	; 56
     8be:	c6 e3       	ldi	r28, 0x36	; 54
     8c0:	d8 e3       	ldi	r29, 0x38	; 56
     8c2:	a0 e4       	ldi	r26, 0x40	; 64
     8c4:	b8 e3       	ldi	r27, 0x38	; 56
     8c6:	20 e4       	ldi	r18, 0x40	; 64
     8c8:	38 e3       	ldi	r19, 0x38	; 56
	return tinyDendrite_values[dendrite_number];
}

_Bool tinyDendrite_check_charge_level(void)
{
	_Bool charging = false;
     8ca:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     8cc:	47 e0       	ldi	r20, 0x07	; 7
	_Bool charging = false;
	
	tinyDendrite_read_signals();
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     8ce:	90 81       	ld	r25, Z
     8d0:	99 93       	st	Y+, r25
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     8d2:	9d 91       	ld	r25, X+
     8d4:	99 3e       	cpi	r25, 0xE9	; 233
     8d6:	10 f0       	brcs	.+4      	; 0x8dc <tinyDendrite_check_charge_level+0x2a>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     8d8:	40 83       	st	Z, r20
			charging = true;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	31 96       	adiw	r30, 0x01	; 1
_Bool tinyDendrite_check_charge_level(void)
{
	_Bool charging = false;
	
	tinyDendrite_read_signals();
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
     8de:	e2 17       	cp	r30, r18
     8e0:	f3 07       	cpc	r31, r19
     8e2:	a9 f7       	brne	.-22     	; 0x8ce <tinyDendrite_check_charge_level+0x1c>
			tinyDendrite_current_signals[i] = CHARGING;
			charging = true;
		}
	}
	return charging;
}
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <tinyDendrite_update_signals>:

/*
This function converts the 8 bit value from the ADC into one of the signal types defined in DendriteSignal
*/
void tinyDendrite_update_signals(void)
{
     8ea:	af 92       	push	r10
     8ec:	bf 92       	push	r11
     8ee:	df 92       	push	r13
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
	
	// This function does not read the dendrite values! Read_signals must be called somewhere prior to this function!
	// As of writing this, the update_charging_mode function in main runs check_charge_level, so 
	// the tinyDendrite_values are updated when update_signals is called later
	
	tinyDebugger_send_uint8("D1", tinyDendrite_values[0]);
     8fc:	c0 e4       	ldi	r28, 0x40	; 64
     8fe:	d8 e3       	ldi	r29, 0x38	; 56
     900:	68 81       	ld	r22, Y
     902:	85 e0       	ldi	r24, 0x05	; 5
     904:	91 ea       	ldi	r25, 0xA1	; 161
     906:	0e 94 30 04 	call	0x860	; 0x860 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D2", tinyDendrite_values[1]);
     90a:	69 81       	ldd	r22, Y+1	; 0x01
     90c:	88 e0       	ldi	r24, 0x08	; 8
     90e:	91 ea       	ldi	r25, 0xA1	; 161
     910:	0e 94 30 04 	call	0x860	; 0x860 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D3", tinyDendrite_values[2]);
     914:	6a 81       	ldd	r22, Y+2	; 0x02
     916:	8b e0       	ldi	r24, 0x0B	; 11
     918:	91 ea       	ldi	r25, 0xA1	; 161
     91a:	0e 94 30 04 	call	0x860	; 0x860 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
     91e:	6b 81       	ldd	r22, Y+3	; 0x03
     920:	8e e0       	ldi	r24, 0x0E	; 14
     922:	91 ea       	ldi	r25, 0xA1	; 161
     924:	0e 94 30 04 	call	0x860	; 0x860 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
     928:	6c 81       	ldd	r22, Y+4	; 0x04
     92a:	81 e1       	ldi	r24, 0x11	; 17
     92c:	91 ea       	ldi	r25, 0xA1	; 161
     92e:	0e 94 30 04 	call	0x860	; 0x860 <tinyDebugger_send_uint8>
     932:	eb e3       	ldi	r30, 0x3B	; 59
     934:	f8 e3       	ldi	r31, 0x38	; 56
     936:	26 e3       	ldi	r18, 0x36	; 54
     938:	38 e3       	ldi	r19, 0x38	; 56
     93a:	40 e4       	ldi	r20, 0x40	; 64
     93c:	58 e3       	ldi	r21, 0x38	; 56
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     93e:	dd 24       	eor	r13, r13
     940:	d3 94       	inc	r13
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     942:	0f 2e       	mov	r0, r31
     944:	f3 e0       	ldi	r31, 0x03	; 3
     946:	ef 2e       	mov	r14, r31
     948:	f0 2d       	mov	r31, r0
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     94a:	68 94       	set
     94c:	ff 24       	eor	r15, r15
     94e:	f1 f8       	bld	r15, 1
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     950:	04 e0       	ldi	r16, 0x04	; 4
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     952:	16 e0       	ldi	r17, 0x06	; 6
			// been moved to tinyDendrite_check_charging.
			//charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     954:	75 e0       	ldi	r23, 0x05	; 5
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     956:	67 e0       	ldi	r22, 0x07	; 7
     958:	5f 01       	movw	r10, r30
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
	
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     95a:	80 81       	ld	r24, Z
     95c:	d9 01       	movw	r26, r18
     95e:	8d 93       	st	X+, r24
     960:	9d 01       	movw	r18, r26
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     962:	99 91       	ld	r25, Y+
     964:	99 3e       	cpi	r25, 0xE9	; 233
     966:	10 f0       	brcs	.+4      	; 0x96c <tinyDendrite_update_signals+0x82>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     968:	60 83       	st	Z, r22
     96a:	19 c0       	rjmp	.+50     	; 0x99e <tinyDendrite_update_signals+0xb4>
			// Previously, we used this function to check charging, but this has now
			// been moved to tinyDendrite_check_charging.
			//charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
     96c:	98 3c       	cpi	r25, 0xC8	; 200
     96e:	10 f0       	brcs	.+4      	; 0x974 <tinyDendrite_update_signals+0x8a>
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     970:	70 83       	st	Z, r23
     972:	15 c0       	rjmp	.+42     	; 0x99e <tinyDendrite_update_signals+0xb4>
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
     974:	97 3a       	cpi	r25, 0xA7	; 167
     976:	10 f0       	brcs	.+4      	; 0x97c <tinyDendrite_update_signals+0x92>
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     978:	10 83       	st	Z, r17
     97a:	11 c0       	rjmp	.+34     	; 0x99e <tinyDendrite_update_signals+0xb4>
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
     97c:	95 38       	cpi	r25, 0x85	; 133
     97e:	10 f0       	brcs	.+4      	; 0x984 <tinyDendrite_update_signals+0x9a>
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     980:	00 83       	st	Z, r16
     982:	0d c0       	rjmp	.+26     	; 0x99e <tinyDendrite_update_signals+0xb4>
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
     984:	94 36       	cpi	r25, 0x64	; 100
     986:	10 f0       	brcs	.+4      	; 0x98c <tinyDendrite_update_signals+0xa2>
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     988:	f0 82       	st	Z, r15
     98a:	09 c0       	rjmp	.+18     	; 0x99e <tinyDendrite_update_signals+0xb4>
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
     98c:	93 34       	cpi	r25, 0x43	; 67
     98e:	10 f0       	brcs	.+4      	; 0x994 <tinyDendrite_update_signals+0xaa>
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     990:	e0 82       	st	Z, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <tinyDendrite_update_signals+0xb4>
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
     994:	92 32       	cpi	r25, 0x22	; 34
     996:	10 f0       	brcs	.+4      	; 0x99c <tinyDendrite_update_signals+0xb2>
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     998:	d0 82       	st	Z, r13
     99a:	01 c0       	rjmp	.+2      	; 0x99e <tinyDendrite_update_signals+0xb4>
		}
		else
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     99c:	10 82       	st	Z, r1
		}
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
     99e:	d5 01       	movw	r26, r10
     9a0:	9c 91       	ld	r25, X
     9a2:	89 13       	cpse	r24, r25
     9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <tinyDendrite_update_signals+0xbe>
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     9a6:	1c 92       	st	X, r1
     9a8:	31 96       	adiw	r30, 0x01	; 1
	tinyDebugger_send_uint8("D2", tinyDendrite_values[1]);
	tinyDebugger_send_uint8("D3", tinyDendrite_values[2]);
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
	
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
     9aa:	e4 17       	cp	r30, r20
     9ac:	f5 07       	cpc	r31, r21
     9ae:	a1 f6       	brne	.-88     	; 0x958 <tinyDendrite_update_signals+0x6e>
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
		}
	}
}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	df 90       	pop	r13
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	08 95       	ret

000009c4 <tinyDendrite_get_potential>:
/*
This is the master function of the module that is callable from
outside. It uses the previously declared functions to return the potential.
*/
int16_t tinyDendrite_get_potential()
{
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
	if(tinyAxon_is_firing() && IGNORE_INPUT_WHILE_FIRING){
     9d0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <tinyAxon_is_firing>
		
		return NO_SIGNAL_REACTION;
	}
	
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
     9d4:	0e 94 75 04 	call	0x8ea	; 0x8ea <tinyDendrite_update_signals>
     9d8:	cb e3       	ldi	r28, 0x3B	; 59
     9da:	d8 e3       	ldi	r29, 0x38	; 56
     9dc:	0f 2e       	mov	r0, r31
     9de:	f0 e4       	ldi	r31, 0x40	; 64
     9e0:	ef 2e       	mov	r14, r31
     9e2:	f8 e3       	ldi	r31, 0x38	; 56
     9e4:	ff 2e       	mov	r15, r31
     9e6:	f0 2d       	mov	r31, r0
	
	int16_t return_potential_val = 0;
     9e8:	00 e0       	ldi	r16, 0x00	; 0
     9ea:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
	{
		switch(tinyDendrite_current_signals[i])
     9ec:	89 91       	ld	r24, Y+
     9ee:	83 30       	cpi	r24, 0x03	; 3
     9f0:	19 f1       	breq	.+70     	; 0xa38 <tinyDendrite_get_potential+0x74>
     9f2:	28 f4       	brcc	.+10     	; 0x9fe <tinyDendrite_get_potential+0x3a>
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	81 f1       	breq	.+96     	; 0xa58 <tinyDendrite_get_potential+0x94>
     9f8:	82 30       	cpi	r24, 0x02	; 2
     9fa:	31 f1       	breq	.+76     	; 0xa48 <tinyDendrite_get_potential+0x84>
     9fc:	34 c0       	rjmp	.+104    	; 0xa66 <tinyDendrite_get_potential+0xa2>
     9fe:	85 30       	cpi	r24, 0x05	; 5
     a00:	59 f0       	breq	.+22     	; 0xa18 <tinyDendrite_get_potential+0x54>
     a02:	90 f0       	brcs	.+36     	; 0xa28 <tinyDendrite_get_potential+0x64>
     a04:	86 30       	cpi	r24, 0x06	; 6
     a06:	79 f5       	brne	.+94     	; 0xa66 <tinyDendrite_get_potential+0xa2>
		{
			case NO_SIGNAL:
				return_potential_val += NO_SIGNAL_REACTION;
				break;
			case HIGH_EXCITE:
				return_potential_val += HIGH_EXCITE_REACTION;
     a08:	0c 5c       	subi	r16, 0xCC	; 204
     a0a:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     a0c:	45 e0       	ldi	r20, 0x05	; 5
     a0e:	63 e0       	ldi	r22, 0x03	; 3
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	0e 94 a3 05 	call	0xb46	; 0xb46 <tinyLED_set_color_mode>
				break;
     a16:	27 c0       	rjmp	.+78     	; 0xa66 <tinyDendrite_get_potential+0xa2>
			case NORMAL_EXCITE:
				return_potential_val += NORMAL_EXCITE_REACTION;
     a18:	07 5e       	subi	r16, 0xE7	; 231
     a1a:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     a1c:	45 e0       	ldi	r20, 0x05	; 5
     a1e:	63 e0       	ldi	r22, 0x03	; 3
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	0e 94 a3 05 	call	0xb46	; 0xb46 <tinyLED_set_color_mode>
				break;
     a26:	1f c0       	rjmp	.+62     	; 0xa66 <tinyDendrite_get_potential+0xa2>
			case LOW_EXCITE:
				return_potential_val += LOW_EXCITE_REACTION;
     a28:	0c 5e       	subi	r16, 0xEC	; 236
     a2a:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     a2c:	45 e0       	ldi	r20, 0x05	; 5
     a2e:	63 e0       	ldi	r22, 0x03	; 3
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	0e 94 a3 05 	call	0xb46	; 0xb46 <tinyLED_set_color_mode>
				break;
     a36:	17 c0       	rjmp	.+46     	; 0xa66 <tinyDendrite_get_potential+0xa2>
			case HIGH_INHIB:
				return_potential_val += HIGH_INHIB_REACTION;
     a38:	02 53       	subi	r16, 0x32	; 50
     a3a:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     a3c:	45 e0       	ldi	r20, 0x05	; 5
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	0e 94 a3 05 	call	0xb46	; 0xb46 <tinyLED_set_color_mode>
				break;
     a46:	0f c0       	rjmp	.+30     	; 0xa66 <tinyDendrite_get_potential+0xa2>
			case NORMAL_INHIB:
				return_potential_val += NORMAL_INHIB_REACTION;
     a48:	09 51       	subi	r16, 0x19	; 25
     a4a:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     a4c:	45 e0       	ldi	r20, 0x05	; 5
     a4e:	61 e0       	ldi	r22, 0x01	; 1
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	0e 94 a3 05 	call	0xb46	; 0xb46 <tinyLED_set_color_mode>
				break;
     a56:	07 c0       	rjmp	.+14     	; 0xa66 <tinyDendrite_get_potential+0xa2>
			case LOW_INHIB:
				return_potential_val += LOW_INHIB_REACTION;
     a58:	04 51       	subi	r16, 0x14	; 20
     a5a:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     a5c:	45 e0       	ldi	r20, 0x05	; 5
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	0e 94 a3 05 	call	0xb46	; 0xb46 <tinyLED_set_color_mode>
	
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
	
	int16_t return_potential_val = 0;
	for (uint8_t i = 0; i < DENDRITE_COUNT; i++)
     a66:	ce 15       	cp	r28, r14
     a68:	df 05       	cpc	r29, r15
     a6a:	09 f0       	breq	.+2      	; 0xa6e <tinyDendrite_get_potential+0xaa>
     a6c:	bf cf       	rjmp	.-130    	; 0x9ec <tinyDendrite_get_potential+0x28>
		}
	}
	
	return return_potential_val;
	
}
     a6e:	c8 01       	movw	r24, r16
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	08 95       	ret

00000a7e <tinyDendrite_update_potential>:

double tinyDendrite_update_potential(double potential){
     a7e:	cf 92       	push	r12
     a80:	df 92       	push	r13
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	6b 01       	movw	r12, r22
     a88:	7c 01       	movw	r14, r24
	
	int16_t potential_change = tinyDendrite_get_potential();
     a8a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <tinyDendrite_get_potential>
	potential += potential_change;
	return potential;
     a8e:	bc 01       	movw	r22, r24
     a90:	99 0f       	add	r25, r25
     a92:	88 0b       	sbc	r24, r24
     a94:	99 0b       	sbc	r25, r25
     a96:	0e 94 02 0b 	call	0x1604	; 0x1604 <__floatsisf>
     a9a:	a7 01       	movw	r20, r14
     a9c:	96 01       	movw	r18, r12
     a9e:	0e 94 b4 09 	call	0x1368	; 0x1368 <__addsf3>
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	08 95       	ret

00000aac <__vector_6>:
     aac:	1f 92       	push	r1
     aae:	0f 92       	push	r0
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	0f 92       	push	r0
     ab4:	11 24       	eor	r1, r1
     ab6:	2f 93       	push	r18
     ab8:	3f 93       	push	r19
     aba:	4f 93       	push	r20
     abc:	5f 93       	push	r21
     abe:	6f 93       	push	r22
     ac0:	7f 93       	push	r23
     ac2:	8f 93       	push	r24
     ac4:	9f 93       	push	r25
     ac6:	af 93       	push	r26
     ac8:	bf 93       	push	r27
     aca:	cf 93       	push	r28
     acc:	ef 93       	push	r30
     ace:	ff 93       	push	r31
     ad0:	c1 e0       	ldi	r28, 0x01	; 1
     ad2:	c0 93 45 38 	sts	0x3845, r28	; 0x803845 <tinyISR_interrupt_flag>
     ad6:	0e 94 96 09 	call	0x132c	; 0x132c <tinyTime_counter_increment>
     ada:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     ade:	ff 91       	pop	r31
     ae0:	ef 91       	pop	r30
     ae2:	cf 91       	pop	r28
     ae4:	bf 91       	pop	r27
     ae6:	af 91       	pop	r26
     ae8:	9f 91       	pop	r25
     aea:	8f 91       	pop	r24
     aec:	7f 91       	pop	r23
     aee:	6f 91       	pop	r22
     af0:	5f 91       	pop	r21
     af2:	4f 91       	pop	r20
     af4:	3f 91       	pop	r19
     af6:	2f 91       	pop	r18
     af8:	0f 90       	pop	r0
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	0f 90       	pop	r0
     afe:	1f 90       	pop	r1
     b00:	18 95       	reti

00000b02 <tinyISR_setflag>:
     b02:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <tinyISR_interrupt_flag>
     b06:	08 95       	ret

00000b08 <tinyISR_getflag>:
     b08:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <tinyISR_interrupt_flag>
     b0c:	08 95       	ret

00000b0e <tinyLED_SPIWriteByte>:
Function used to send a byte over SPI, which in turn gets
translated to the bit-sequence required by the LEDs over the CCL.
*/
static void tinyLED_SPIWriteByte(uint8_t byte)
{
	SPI0.INTFLAGS = SPI0_INTFLAGS; // clear the write collision flag to allow writing
     b0e:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
     b12:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
	TCA0.SINGLE.CNT = 0; // reset TCA counter register to ensure the first rising edge of the PWM is predictable
     b16:	e0 e0       	ldi	r30, 0x00	; 0
     b18:	fa e0       	ldi	r31, 0x0A	; 10
     b1a:	10 a2       	std	Z+32, r1	; 0x20
     b1c:	11 a2       	std	Z+33, r1	; 0x21
	
	// start TCA
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 1 << TCA_SPLIT_ENABLE_bp;
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	90 83       	st	Z, r25
	SPI0_DATA = byte;
     b22:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>

	while((SPI0.INTFLAGS & SPI_RXCIE_bm) == 0){} // wait for transfer to complete
     b26:	e0 e2       	ldi	r30, 0x20	; 32
     b28:	f8 e0       	ldi	r31, 0x08	; 8
     b2a:	83 81       	ldd	r24, Z+3	; 0x03
     b2c:	88 23       	and	r24, r24
     b2e:	ec f7       	brge	.-6      	; 0xb2a <tinyLED_SPIWriteByte+0x1c>
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
     b30:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     b34:	08 95       	ret

00000b36 <tinyLED_get_color>:
	tinyLED_set_color_mode(LED_id, color, STABLE);
}

enum Colors tinyLED_get_color(uint8_t LED_id)
{
	return tinyLED_settings[LED_id].color;
     b36:	e8 2f       	mov	r30, r24
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	ee 0f       	add	r30, r30
     b3c:	ff 1f       	adc	r31, r31
     b3e:	ee 59       	subi	r30, 0x9E	; 158
     b40:	f7 4c       	sbci	r31, 0xC7	; 199
}
     b42:	80 81       	ld	r24, Z
     b44:	08 95       	ret

00000b46 <tinyLED_set_color_mode>:
{
	// If we are in pulse mode, we want to stay in pulse mode after we have flashed a light.
	// We do this by storing the previous mode in old settings.
	// However, it can happen that two flashes comes very quickly after one another, that leads
	// to an infinite flash loop, therefore, we only store the settings if it is not flash mode.
	if(tinyLED_settings[LED_id].mode != FLASH_ONCE){
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	fc 01       	movw	r30, r24
     b4a:	ee 0f       	add	r30, r30
     b4c:	ff 1f       	adc	r31, r31
     b4e:	ee 59       	subi	r30, 0x9E	; 158
     b50:	f7 4c       	sbci	r31, 0xC7	; 199
     b52:	51 81       	ldd	r21, Z+1	; 0x01
     b54:	55 30       	cpi	r21, 0x05	; 5
     b56:	61 f0       	breq	.+24     	; 0xb70 <tinyLED_set_color_mode+0x2a>
		// We use two lines to avoid pointer trouble. (I'm not good with pointers)
		tinyLED_old_settings[LED_id].color = tinyLED_settings[LED_id].color;
     b58:	9c 01       	movw	r18, r24
     b5a:	22 0f       	add	r18, r18
     b5c:	33 1f       	adc	r19, r19
     b5e:	f9 01       	movw	r30, r18
     b60:	ea 59       	subi	r30, 0x9A	; 154
     b62:	f7 4c       	sbci	r31, 0xC7	; 199
     b64:	d9 01       	movw	r26, r18
     b66:	ae 59       	subi	r26, 0x9E	; 158
     b68:	b7 4c       	sbci	r27, 0xC7	; 199
     b6a:	2c 91       	ld	r18, X
     b6c:	20 83       	st	Z, r18
		tinyLED_old_settings[LED_id].mode = tinyLED_settings[LED_id].mode;
     b6e:	51 83       	std	Z+1, r21	; 0x01
	}
	
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_settings[LED_id] = setting;
     b70:	fc 01       	movw	r30, r24
     b72:	ee 0f       	add	r30, r30
     b74:	ff 1f       	adc	r31, r31
     b76:	ee 59       	subi	r30, 0x9E	; 158
     b78:	f7 4c       	sbci	r31, 0xC7	; 199
     b7a:	60 83       	st	Z, r22
     b7c:	41 83       	std	Z+1, r20	; 0x01
	if (mode == FLASH_ONCE)
     b7e:	45 30       	cpi	r20, 0x05	; 5
     b80:	29 f4       	brne	.+10     	; 0xb8c <tinyLED_set_color_mode+0x46>
	{
		tinyLED_flash_once_time[LED_id] = 1000*FLASH_TIME;
     b82:	fc 01       	movw	r30, r24
     b84:	e6 5a       	subi	r30, 0xA6	; 166
     b86:	f7 4c       	sbci	r31, 0xC7	; 199
     b88:	2a e0       	ldi	r18, 0x0A	; 10
     b8a:	20 83       	st	Z, r18
     b8c:	08 95       	ret

00000b8e <tinyLED_set_color>:
/*
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color(uint8_t LED_id, enum Colors color)
{
	tinyLED_set_color_mode(LED_id, color, STABLE);
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	0e 94 a3 05 	call	0xb46	; 0xb46 <tinyLED_set_color_mode>
     b94:	08 95       	ret

00000b96 <tinyLED_RGB_Color_Compare>:
	return rgb_color;
			
};
// This might be cause of strange light behavior?
//Message		expected 'struct RGB_Color *' but argument is of type 'struct RGB_Color (*)[2]'	Hjernebyggesett_V4	C:\Users\Elias Lundheim\Documents\GitHub\neural\Hjernebyggesett_V4\Hjernebyggesett_V4\tinyLED\tinyLED.c	121
_Bool tinyLED_RGB_Color_Compare(struct RGB_Color (*a)[NUMBER_OF_LEDS], struct RGB_Color (*b)[NUMBER_OF_LEDS]){
     b96:	dc 01       	movw	r26, r24
     b98:	fb 01       	movw	r30, r22
	for (int i=0; i<NUMBER_OF_LEDS; i++)
	{
		if(!((*a)[i].red==(*b)[i].red && (*a)[i].green==(*b)[i].green && (*a)[i].blue==(*b)[i].blue)){
     b9a:	9c 91       	ld	r25, X
     b9c:	80 81       	ld	r24, Z
     b9e:	98 13       	cpse	r25, r24
     ba0:	20 c0       	rjmp	.+64     	; 0xbe2 <tinyLED_RGB_Color_Compare+0x4c>
     ba2:	11 96       	adiw	r26, 0x01	; 1
     ba4:	9c 91       	ld	r25, X
     ba6:	11 97       	sbiw	r26, 0x01	; 1
     ba8:	81 81       	ldd	r24, Z+1	; 0x01
     baa:	98 13       	cpse	r25, r24
     bac:	1c c0       	rjmp	.+56     	; 0xbe6 <tinyLED_RGB_Color_Compare+0x50>
     bae:	12 96       	adiw	r26, 0x02	; 2
     bb0:	9c 91       	ld	r25, X
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	82 81       	ldd	r24, Z+2	; 0x02
     bb6:	98 13       	cpse	r25, r24
     bb8:	18 c0       	rjmp	.+48     	; 0xbea <tinyLED_RGB_Color_Compare+0x54>
     bba:	13 96       	adiw	r26, 0x03	; 3
     bbc:	9c 91       	ld	r25, X
     bbe:	13 97       	sbiw	r26, 0x03	; 3
     bc0:	83 81       	ldd	r24, Z+3	; 0x03
     bc2:	98 13       	cpse	r25, r24
     bc4:	14 c0       	rjmp	.+40     	; 0xbee <tinyLED_RGB_Color_Compare+0x58>
     bc6:	14 96       	adiw	r26, 0x04	; 4
     bc8:	9c 91       	ld	r25, X
     bca:	14 97       	sbiw	r26, 0x04	; 4
     bcc:	84 81       	ldd	r24, Z+4	; 0x04
     bce:	98 13       	cpse	r25, r24
     bd0:	10 c0       	rjmp	.+32     	; 0xbf2 <tinyLED_RGB_Color_Compare+0x5c>
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	15 96       	adiw	r26, 0x05	; 5
     bd6:	2c 91       	ld	r18, X
     bd8:	95 81       	ldd	r25, Z+5	; 0x05
     bda:	29 17       	cp	r18, r25
     bdc:	59 f0       	breq	.+22     	; 0xbf4 <tinyLED_RGB_Color_Compare+0x5e>
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	08 95       	ret
			return false;
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	08 95       	ret
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	08 95       	ret
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	08 95       	ret
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	08 95       	ret
     bf2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
     bf4:	08 95       	ret

00000bf6 <tinyLED_update>:
/*
function to write the current LED-array on to the LEDs and
effectively update the values stored in the LEDs to the values stored in the MCU.
*/
void tinyLED_update(void)
{
     bf6:	2f 92       	push	r2
     bf8:	3f 92       	push	r3
     bfa:	4f 92       	push	r4
     bfc:	5f 92       	push	r5
     bfe:	6f 92       	push	r6
     c00:	7f 92       	push	r7
     c02:	8f 92       	push	r8
     c04:	9f 92       	push	r9
     c06:	af 92       	push	r10
     c08:	bf 92       	push	r11
     c0a:	cf 92       	push	r12
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	6f 97       	sbiw	r28, 0x1f	; 31
     c20:	cd bf       	out	0x3d, r28	; 61
     c22:	de bf       	out	0x3e, r29	; 62
			
	uint32_t now = tinyTime_now();
     c24:	0e 94 aa 09 	call	0x1354	; 0x1354 <tinyTime_now>
     c28:	6b 01       	movw	r12, r22
     c2a:	7c 01       	movw	r14, r24
	
	// This is a sin curve, but between 0 and 1 instead of -1 and 1
	double sinValue = 0.5+sin((double)now/(100*M_PI/SWING_RATE))/2;
     c2c:	0e 94 00 0b 	call	0x1600	; 0x1600 <__floatunsisf>
     c30:	22 ed       	ldi	r18, 0xD2	; 210
     c32:	33 e5       	ldi	r19, 0x53	; 83
     c34:	4b ef       	ldi	r20, 0xFB	; 251
     c36:	51 e4       	ldi	r21, 0x41	; 65
     c38:	0e 94 25 0a 	call	0x144a	; 0x144a <__divsf3>
     c3c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <sin>
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	5f e3       	ldi	r21, 0x3F	; 63
     c48:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	5f e3       	ldi	r21, 0x3F	; 63
     c54:	0e 94 b4 09 	call	0x1368	; 0x1368 <__addsf3>
     c58:	6f 83       	std	Y+7, r22	; 0x07
     c5a:	78 87       	std	Y+8, r23	; 0x08
     c5c:	89 87       	std	Y+9, r24	; 0x09
     c5e:	9a 87       	std	Y+10, r25	; 0x0a
	
	// If FLASH_RATE is one, then that means that the left side of the "<" will just count from 0 to 1000, and flash_on will be true for half of the time
	_Bool flash_on = now%(uint32_t)(1000/FLASH_RATE)  <   500/FLASH_RATE;
     c60:	c7 01       	movw	r24, r14
     c62:	b6 01       	movw	r22, r12
     c64:	22 e3       	ldi	r18, 0x32	; 50
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__udivmodsi4>
     c70:	0e 94 00 0b 	call	0x1600	; 0x1600 <__floatunsisf>
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	48 ec       	ldi	r20, 0xC8	; 200
     c7a:	51 e4       	ldi	r21, 0x41	; 65
     c7c:	0e 94 20 0a 	call	0x1440	; 0x1440 <__cmpsf2>
     c80:	88 1f       	adc	r24, r24
     c82:	88 27       	eor	r24, r24
     c84:	88 1f       	adc	r24, r24
     c86:	8b 87       	std	Y+11, r24	; 0x0b
	
	// PING_RATE is usually small, so the left side counts to some large number. Since flash_time usually is also quite small,
	// the left side will usually be larger than the right
	_Bool ping_on =  now%(uint32_t)(1000/PING_RATE)   <   1000*FLASH_TIME;
     c88:	c7 01       	movw	r24, r14
     c8a:	b6 01       	movw	r22, r12
     c8c:	24 ef       	ldi	r18, 0xF4	; 244
     c8e:	31 e0       	ldi	r19, 0x01	; 1
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__udivmodsi4>
     c98:	0e 94 00 0b 	call	0x1600	; 0x1600 <__floatunsisf>
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e2       	ldi	r20, 0x20	; 32
     ca2:	51 e4       	ldi	r21, 0x41	; 65
     ca4:	0e 94 20 0a 	call	0x1440	; 0x1440 <__cmpsf2>
     ca8:	88 1f       	adc	r24, r24
     caa:	88 27       	eor	r24, r24
     cac:	88 1f       	adc	r24, r24
     cae:	0f 2e       	mov	r0, r31
     cb0:	f2 e6       	ldi	r31, 0x62	; 98
     cb2:	2f 2e       	mov	r2, r31
     cb4:	f8 e3       	ldi	r31, 0x38	; 56
     cb6:	3f 2e       	mov	r3, r31
     cb8:	f0 2d       	mov	r31, r0
     cba:	9e 01       	movw	r18, r28
     cbc:	2f 5f       	subi	r18, 0xFF	; 255
     cbe:	3f 4f       	sbci	r19, 0xFF	; 255
     cc0:	69 01       	movw	r12, r18
     cc2:	0f 2e       	mov	r0, r31
     cc4:	f6 e6       	ldi	r31, 0x66	; 102
     cc6:	af 2e       	mov	r10, r31
     cc8:	f8 e3       	ldi	r31, 0x38	; 56
     cca:	bf 2e       	mov	r11, r31
     ccc:	f0 2d       	mov	r31, r0
     cce:	0a e5       	ldi	r16, 0x5A	; 90
     cd0:	18 e3       	ldi	r17, 0x38	; 56
     cd2:	0f 2e       	mov	r0, r31
     cd4:	f6 e6       	ldi	r31, 0x66	; 102
     cd6:	4f 2e       	mov	r4, r31
     cd8:	f8 e3       	ldi	r31, 0x38	; 56
     cda:	5f 2e       	mov	r5, r31
     cdc:	f0 2d       	mov	r31, r0
     cde:	39 01       	movw	r6, r18
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
				break;
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	28 8b       	std	Y+16, r18	; 0x10
     cea:	39 8b       	std	Y+17, r19	; 0x11
     cec:	4a 8b       	std	Y+18, r20	; 0x12
     cee:	5b 8b       	std	Y+19, r21	; 0x13
     cf0:	f1 01       	movw	r30, r2
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
}

static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
     cf2:	80 81       	ld	r24, Z
     cf4:	83 30       	cpi	r24, 0x03	; 3
     cf6:	79 f0       	breq	.+30     	; 0xd16 <tinyLED_update+0x120>
     cf8:	28 f4       	brcc	.+10     	; 0xd04 <tinyLED_update+0x10e>
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	41 f0       	breq	.+16     	; 0xd0e <tinyLED_update+0x118>
     cfe:	82 30       	cpi	r24, 0x02	; 2
     d00:	89 f0       	breq	.+34     	; 0xd24 <tinyLED_update+0x12e>
     d02:	28 c0       	rjmp	.+80     	; 0xd54 <tinyLED_update+0x15e>
     d04:	84 30       	cpi	r24, 0x04	; 4
     d06:	a9 f0       	breq	.+42     	; 0xd32 <tinyLED_update+0x13c>
     d08:	85 30       	cpi	r24, 0x05	; 5
     d0a:	d1 f0       	breq	.+52     	; 0xd40 <tinyLED_update+0x14a>
     d0c:	23 c0       	rjmp	.+70     	; 0xd54 <tinyLED_update+0x15e>
	{
		case LED_OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
			break;
		case RED:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 0, 0};
     d0e:	f1 2c       	mov	r15, r1
     d10:	e1 2c       	mov	r14, r1
     d12:	69 e1       	ldi	r22, 0x19	; 25
     d14:	22 c0       	rjmp	.+68     	; 0xd5a <tinyLED_update+0x164>
			break;
		case GREEN:
			rgb_color = (struct RGB_Color){0, 255*LED_BRIGHTNESS, 0};
     d16:	f1 2c       	mov	r15, r1
     d18:	0f 2e       	mov	r0, r31
     d1a:	f9 e1       	ldi	r31, 0x19	; 25
     d1c:	ef 2e       	mov	r14, r31
     d1e:	f0 2d       	mov	r31, r0
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	1b c0       	rjmp	.+54     	; 0xd5a <tinyLED_update+0x164>
			break;
		case BLUE:
			rgb_color = (struct RGB_Color){0, 0, 255*LED_BRIGHTNESS};
     d24:	0f 2e       	mov	r0, r31
     d26:	f9 e1       	ldi	r31, 0x19	; 25
     d28:	ff 2e       	mov	r15, r31
     d2a:	f0 2d       	mov	r31, r0
     d2c:	e1 2c       	mov	r14, r1
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	14 c0       	rjmp	.+40     	; 0xd5a <tinyLED_update+0x164>
			break;
		case YELLOW:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 0};
     d32:	f1 2c       	mov	r15, r1
     d34:	0f 2e       	mov	r0, r31
     d36:	f9 e1       	ldi	r31, 0x19	; 25
     d38:	ef 2e       	mov	r14, r31
     d3a:	f0 2d       	mov	r31, r0
     d3c:	69 e1       	ldi	r22, 0x19	; 25
     d3e:	0d c0       	rjmp	.+26     	; 0xd5a <tinyLED_update+0x164>
			// Should the /3 be there? This requires testing.
			// After testing, findings were that at 0.1 brightness, one would see the three LEDs instead of one white led
			// We try with /2 instead.
			// We find that the best results come from not dividing by anything. At leasts in the lower brightness settings, and that
			// is where we suspect it will be most of the time. When we divide, the LEDs are so weak, that they appear as three lights instead of one.
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS};
     d40:	0f 2e       	mov	r0, r31
     d42:	f9 e1       	ldi	r31, 0x19	; 25
     d44:	ff 2e       	mov	r15, r31
     d46:	f0 2d       	mov	r31, r0
     d48:	0f 2e       	mov	r0, r31
     d4a:	f9 e1       	ldi	r31, 0x19	; 25
     d4c:	ef 2e       	mov	r14, r31
     d4e:	f0 2d       	mov	r31, r0
     d50:	69 e1       	ldi	r22, 0x19	; 25
     d52:	03 c0       	rjmp	.+6      	; 0xd5a <tinyLED_update+0x164>
static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
	{
		case LED_OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
     d54:	f1 2c       	mov	r15, r1
     d56:	e1 2c       	mov	r14, r1
     d58:	60 e0       	ldi	r22, 0x00	; 0
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
	{		
		// Convert enum to RGB_Color
		rgb_colors[i] = tinyLED_enum_to_RGB_Color(tinyLED_settings[i].color);
     d5a:	d3 01       	movw	r26, r6
     d5c:	6c 93       	st	X, r22
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	ec 92       	st	X, r14
     d62:	11 97       	sbiw	r26, 0x01	; 1
     d64:	12 96       	adiw	r26, 0x02	; 2
     d66:	fc 92       	st	X, r15
			
		// Adjust colors according to mode
		switch(tinyLED_settings[i].mode)
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	09 f4       	brne	.+2      	; 0xd70 <tinyLED_update+0x17a>
     d6e:	50 c0       	rjmp	.+160    	; 0xe10 <tinyLED_update+0x21a>
     d70:	28 f4       	brcc	.+10     	; 0xd7c <tinyLED_update+0x186>
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	51 f0       	breq	.+20     	; 0xd8a <tinyLED_update+0x194>
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	c9 f1       	breq	.+114    	; 0xdec <tinyLED_update+0x1f6>
     d7a:	05 c1       	rjmp	.+522    	; 0xf86 <tinyLED_update+0x390>
     d7c:	84 30       	cpi	r24, 0x04	; 4
     d7e:	09 f4       	brne	.+2      	; 0xd82 <tinyLED_update+0x18c>
     d80:	78 c0       	rjmp	.+240    	; 0xe72 <tinyLED_update+0x27c>
     d82:	85 30       	cpi	r24, 0x05	; 5
     d84:	09 f4       	brne	.+2      	; 0xd88 <tinyLED_update+0x192>
     d86:	f2 c0       	rjmp	.+484    	; 0xf6c <tinyLED_update+0x376>
     d88:	fe c0       	rjmp	.+508    	; 0xf86 <tinyLED_update+0x390>
		{
			case STABLE:
				break;
			case WEAK:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*WEAK_BRIGHTNESS, rgb_colors[i].green*WEAK_BRIGHTNESS, rgb_colors[i].blue*WEAK_BRIGHTNESS};
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 02 0b 	call	0x1604	; 0x1604 <__floatsisf>
     d94:	2d ec       	ldi	r18, 0xCD	; 205
     d96:	3c ec       	ldi	r19, 0xCC	; 204
     d98:	4c ec       	ldi	r20, 0xCC	; 204
     d9a:	5d e3       	ldi	r21, 0x3D	; 61
     d9c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
     da0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__fixunssfsi>
     da4:	f3 01       	movw	r30, r6
     da6:	60 83       	st	Z, r22
     da8:	6e 2d       	mov	r22, r14
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 02 0b 	call	0x1604	; 0x1604 <__floatsisf>
     db4:	2d ec       	ldi	r18, 0xCD	; 205
     db6:	3c ec       	ldi	r19, 0xCC	; 204
     db8:	4c ec       	ldi	r20, 0xCC	; 204
     dba:	5d e3       	ldi	r21, 0x3D	; 61
     dbc:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
     dc0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__fixunssfsi>
     dc4:	d3 01       	movw	r26, r6
     dc6:	11 96       	adiw	r26, 0x01	; 1
     dc8:	6c 93       	st	X, r22
     dca:	6f 2d       	mov	r22, r15
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 02 0b 	call	0x1604	; 0x1604 <__floatsisf>
     dd6:	2d ec       	ldi	r18, 0xCD	; 205
     dd8:	3c ec       	ldi	r19, 0xCC	; 204
     dda:	4c ec       	ldi	r20, 0xCC	; 204
     ddc:	5d e3       	ldi	r21, 0x3D	; 61
     dde:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
     de2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__fixunssfsi>
     de6:	f3 01       	movw	r30, r6
     de8:	62 83       	std	Z+2, r22	; 0x02
				break;
     dea:	cd c0       	rjmp	.+410    	; 0xf86 <tinyLED_update+0x390>
			case FLASH:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*flash_on, rgb_colors[i].green*flash_on, rgb_colors[i].blue*flash_on};
     dec:	fb 85       	ldd	r31, Y+11	; 0x0b
     dee:	f6 9f       	mul	r31, r22
     df0:	60 2d       	mov	r22, r0
     df2:	11 24       	eor	r1, r1
     df4:	d3 01       	movw	r26, r6
     df6:	6c 93       	st	X, r22
     df8:	fe 9d       	mul	r31, r14
     dfa:	e0 2c       	mov	r14, r0
     dfc:	11 24       	eor	r1, r1
     dfe:	11 96       	adiw	r26, 0x01	; 1
     e00:	ec 92       	st	X, r14
     e02:	11 97       	sbiw	r26, 0x01	; 1
     e04:	ff 9d       	mul	r31, r15
     e06:	f0 2c       	mov	r15, r0
     e08:	11 24       	eor	r1, r1
     e0a:	12 96       	adiw	r26, 0x02	; 2
     e0c:	fc 92       	st	X, r15
				break;
     e0e:	bb c0       	rjmp	.+374    	; 0xf86 <tinyLED_update+0x390>
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 02 0b 	call	0x1604	; 0x1604 <__floatsisf>
     e1a:	2f 81       	ldd	r18, Y+7	; 0x07
     e1c:	38 85       	ldd	r19, Y+8	; 0x08
     e1e:	49 85       	ldd	r20, Y+9	; 0x09
     e20:	5a 85       	ldd	r21, Y+10	; 0x0a
     e22:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
     e26:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__fixunssfsi>
     e2a:	f3 01       	movw	r30, r6
     e2c:	60 83       	st	Z, r22
     e2e:	6e 2d       	mov	r22, r14
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 02 0b 	call	0x1604	; 0x1604 <__floatsisf>
     e3a:	2f 81       	ldd	r18, Y+7	; 0x07
     e3c:	38 85       	ldd	r19, Y+8	; 0x08
     e3e:	49 85       	ldd	r20, Y+9	; 0x09
     e40:	5a 85       	ldd	r21, Y+10	; 0x0a
     e42:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
     e46:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__fixunssfsi>
     e4a:	d3 01       	movw	r26, r6
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	6c 93       	st	X, r22
     e50:	6f 2d       	mov	r22, r15
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 02 0b 	call	0x1604	; 0x1604 <__floatsisf>
     e5c:	2f 81       	ldd	r18, Y+7	; 0x07
     e5e:	38 85       	ldd	r19, Y+8	; 0x08
     e60:	49 85       	ldd	r20, Y+9	; 0x09
     e62:	5a 85       	ldd	r21, Y+10	; 0x0a
     e64:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
     e68:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__fixunssfsi>
     e6c:	f3 01       	movw	r30, r6
     e6e:	62 83       	std	Z+2, r22	; 0x02
				break;
     e70:	8a c0       	rjmp	.+276    	; 0xf86 <tinyLED_update+0x390>
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 00 0b 	call	0x1600	; 0x1600 <__floatunsisf>
     e7c:	9b 01       	movw	r18, r22
     e7e:	ac 01       	movw	r20, r24
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	80 e8       	ldi	r24, 0x80	; 128
     e86:	9f e3       	ldi	r25, 0x3F	; 63
     e88:	0e 94 3d 0b 	call	0x167a	; 0x167a <fmin>
     e8c:	6c 8b       	std	Y+20, r22	; 0x14
     e8e:	7d 8b       	std	Y+21, r23	; 0x15
     e90:	8e 8b       	std	Y+22, r24	; 0x16
     e92:	9f 8b       	std	Y+23, r25	; 0x17
     e94:	68 89       	ldd	r22, Y+16	; 0x10
     e96:	79 89       	ldd	r23, Y+17	; 0x11
     e98:	8a 89       	ldd	r24, Y+18	; 0x12
     e9a:	9b 89       	ldd	r25, Y+19	; 0x13
     e9c:	0e 94 02 0b 	call	0x1604	; 0x1604 <__floatsisf>
     ea0:	6c 87       	std	Y+12, r22	; 0x0c
     ea2:	7d 87       	std	Y+13, r23	; 0x0d
     ea4:	8e 87       	std	Y+14, r24	; 0x0e
     ea6:	9f 87       	std	Y+15, r25	; 0x0f
     ea8:	6e 2d       	mov	r22, r14
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 00 0b 	call	0x1600	; 0x1600 <__floatunsisf>
     eb4:	9b 01       	movw	r18, r22
     eb6:	ac 01       	movw	r20, r24
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	80 e8       	ldi	r24, 0x80	; 128
     ebe:	9f e3       	ldi	r25, 0x3F	; 63
     ec0:	0e 94 3d 0b 	call	0x167a	; 0x167a <fmin>
     ec4:	68 8f       	std	Y+24, r22	; 0x18
     ec6:	79 8f       	std	Y+25, r23	; 0x19
     ec8:	8a 8f       	std	Y+26, r24	; 0x1a
     eca:	9b 8f       	std	Y+27, r25	; 0x1b
     ecc:	6f 2d       	mov	r22, r15
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 00 0b 	call	0x1600	; 0x1600 <__floatunsisf>
     ed8:	9b 01       	movw	r18, r22
     eda:	ac 01       	movw	r20, r24
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	80 e8       	ldi	r24, 0x80	; 128
     ee2:	9f e3       	ldi	r25, 0x3F	; 63
     ee4:	0e 94 3d 0b 	call	0x167a	; 0x167a <fmin>
     ee8:	6c 8f       	std	Y+28, r22	; 0x1c
     eea:	7d 8f       	std	Y+29, r23	; 0x1d
     eec:	8e 8f       	std	Y+30, r24	; 0x1e
     eee:	9f 8f       	std	Y+31, r25	; 0x1f
     ef0:	23 e3       	ldi	r18, 0x33	; 51
     ef2:	33 e3       	ldi	r19, 0x33	; 51
     ef4:	43 ea       	ldi	r20, 0xA3	; 163
     ef6:	50 e4       	ldi	r21, 0x40	; 64
     ef8:	6c 89       	ldd	r22, Y+20	; 0x14
     efa:	7d 89       	ldd	r23, Y+21	; 0x15
     efc:	8e 89       	ldd	r24, Y+22	; 0x16
     efe:	9f 89       	ldd	r25, Y+23	; 0x17
     f00:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
     f04:	2c 85       	ldd	r18, Y+12	; 0x0c
     f06:	3d 85       	ldd	r19, Y+13	; 0x0d
     f08:	4e 85       	ldd	r20, Y+14	; 0x0e
     f0a:	5f 85       	ldd	r21, Y+15	; 0x0f
     f0c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
     f10:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__fixunssfsi>
     f14:	d3 01       	movw	r26, r6
     f16:	6c 93       	st	X, r22
     f18:	23 e3       	ldi	r18, 0x33	; 51
     f1a:	33 e3       	ldi	r19, 0x33	; 51
     f1c:	43 ea       	ldi	r20, 0xA3	; 163
     f1e:	50 e4       	ldi	r21, 0x40	; 64
     f20:	68 8d       	ldd	r22, Y+24	; 0x18
     f22:	79 8d       	ldd	r23, Y+25	; 0x19
     f24:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f26:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f28:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
     f2c:	2c 85       	ldd	r18, Y+12	; 0x0c
     f2e:	3d 85       	ldd	r19, Y+13	; 0x0d
     f30:	4e 85       	ldd	r20, Y+14	; 0x0e
     f32:	5f 85       	ldd	r21, Y+15	; 0x0f
     f34:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
     f38:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__fixunssfsi>
     f3c:	f3 01       	movw	r30, r6
     f3e:	61 83       	std	Z+1, r22	; 0x01
     f40:	23 e3       	ldi	r18, 0x33	; 51
     f42:	33 e3       	ldi	r19, 0x33	; 51
     f44:	43 ea       	ldi	r20, 0xA3	; 163
     f46:	50 e4       	ldi	r21, 0x40	; 64
     f48:	6c 8d       	ldd	r22, Y+28	; 0x1c
     f4a:	7d 8d       	ldd	r23, Y+29	; 0x1d
     f4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f4e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f50:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
     f54:	2c 85       	ldd	r18, Y+12	; 0x0c
     f56:	3d 85       	ldd	r19, Y+13	; 0x0d
     f58:	4e 85       	ldd	r20, Y+14	; 0x0e
     f5a:	5f 85       	ldd	r21, Y+15	; 0x0f
     f5c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
     f60:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__fixunssfsi>
     f64:	d3 01       	movw	r26, r6
     f66:	12 96       	adiw	r26, 0x02	; 2
     f68:	6c 93       	st	X, r22
				break;
     f6a:	0d c0       	rjmp	.+26     	; 0xf86 <tinyLED_update+0x390>
			case FLASH_ONCE:
				if(tinyLED_flash_once_time[i]>0){
     f6c:	d8 01       	movw	r26, r16
     f6e:	8c 91       	ld	r24, X
     f70:	88 23       	and	r24, r24
     f72:	19 f0       	breq	.+6      	; 0xf7a <tinyLED_update+0x384>
					rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red, rgb_colors[i].green, rgb_colors[i].blue};
					tinyLED_flash_once_time[i]--;
     f74:	81 50       	subi	r24, 0x01	; 1
     f76:	8c 93       	st	X, r24
     f78:	06 c0       	rjmp	.+12     	; 0xf86 <tinyLED_update+0x390>
				}
				else{
					// Here we return to the previous color and mode
					tinyLED_settings[i].color = tinyLED_old_settings[i].color;
     f7a:	d5 01       	movw	r26, r10
     f7c:	8c 91       	ld	r24, X
     f7e:	80 83       	st	Z, r24
					tinyLED_settings[i].mode = tinyLED_old_settings[i].mode;
     f80:	11 96       	adiw	r26, 0x01	; 1
     f82:	8c 91       	ld	r24, X
     f84:	81 83       	std	Z+1, r24	; 0x01
     f86:	b2 e0       	ldi	r27, 0x02	; 2
     f88:	2b 0e       	add	r2, r27
     f8a:	31 1c       	adc	r3, r1
     f8c:	e3 e0       	ldi	r30, 0x03	; 3
     f8e:	6e 0e       	add	r6, r30
     f90:	71 1c       	adc	r7, r1
     f92:	f2 e0       	ldi	r31, 0x02	; 2
     f94:	af 0e       	add	r10, r31
     f96:	b1 1c       	adc	r11, r1
     f98:	0f 5f       	subi	r16, 0xFF	; 255
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// This is where we store all the actual color values we want to send to the LED
	struct RGB_Color rgb_colors[NUMBER_OF_LEDS];
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
     f9c:	24 14       	cp	r2, r4
     f9e:	35 04       	cpc	r3, r5
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <tinyLED_update+0x3ae>
     fa2:	a6 ce       	rjmp	.-692    	; 0xcf0 <tinyLED_update+0xfa>
				break;
		}
	}
	
	// We only write to the LEDs if there is something to change. (eg. in SWING mode, we update the LEDs almost every cycle)
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
     fa4:	6c e5       	ldi	r22, 0x5C	; 92
     fa6:	78 e3       	ldi	r23, 0x38	; 56
     fa8:	ce 01       	movw	r24, r28
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	0e 94 cb 05 	call	0xb96	; 0xb96 <tinyLED_RGB_Color_Compare>
     fb0:	81 11       	cpse	r24, r1
     fb2:	21 c0       	rjmp	.+66     	; 0xff6 <tinyLED_update+0x400>
     fb4:	0c e5       	ldi	r16, 0x5C	; 92
     fb6:	18 e3       	ldi	r17, 0x38	; 56
     fb8:	7e 01       	movw	r14, r28
     fba:	27 e0       	ldi	r18, 0x07	; 7
     fbc:	e2 0e       	add	r14, r18
     fbe:	f1 1c       	adc	r15, r1
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
		{
			// Write to LEDs
			//For some reason, the data-bus to the LEDs is serialized as GRB
			//which means the 24-bit data-bus will look like [Green[0:7], Red[0:7], Blue[0:7]]
			tinyLED_SPIWriteByte(rgb_colors[i].green);
     fc0:	d6 01       	movw	r26, r12
     fc2:	11 96       	adiw	r26, 0x01	; 1
     fc4:	8c 91       	ld	r24, X
     fc6:	0e 94 87 05 	call	0xb0e	; 0xb0e <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].red);
     fca:	f6 01       	movw	r30, r12
     fcc:	80 81       	ld	r24, Z
     fce:	0e 94 87 05 	call	0xb0e	; 0xb0e <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
     fd2:	d6 01       	movw	r26, r12
     fd4:	12 96       	adiw	r26, 0x02	; 2
     fd6:	8c 91       	ld	r24, X
     fd8:	0e 94 87 05 	call	0xb0e	; 0xb0e <tinyLED_SPIWriteByte>
			tinyLED_old_colors[i] = rgb_colors[i];
     fdc:	f6 01       	movw	r30, r12
     fde:	81 91       	ld	r24, Z+
     fe0:	91 91       	ld	r25, Z+
     fe2:	a1 91       	ld	r26, Z+
     fe4:	6f 01       	movw	r12, r30
     fe6:	f8 01       	movw	r30, r16
     fe8:	81 93       	st	Z+, r24
     fea:	91 93       	st	Z+, r25
     fec:	a1 93       	st	Z+, r26
     fee:	8f 01       	movw	r16, r30
		}
	}
	
	// We only write to the LEDs if there is something to change. (eg. in SWING mode, we update the LEDs almost every cycle)
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
     ff0:	ce 14       	cp	r12, r14
     ff2:	df 04       	cpc	r13, r15
     ff4:	29 f7       	brne	.-54     	; 0xfc0 <tinyLED_update+0x3ca>
			tinyLED_old_colors[i] = rgb_colors[i];
		}
		//tinyDebugger_send_uint8("LED1 color", tinyLED_settings[0].color);
		//tinyDebugger_send_uint8("LED2 color", tinyLED_settings[1].color);
	}
}
     ff6:	6f 96       	adiw	r28, 0x1f	; 31
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	df 90       	pop	r13
    100a:	cf 90       	pop	r12
    100c:	bf 90       	pop	r11
    100e:	af 90       	pop	r10
    1010:	9f 90       	pop	r9
    1012:	8f 90       	pop	r8
    1014:	7f 90       	pop	r7
    1016:	6f 90       	pop	r6
    1018:	5f 90       	pop	r5
    101a:	4f 90       	pop	r4
    101c:	3f 90       	pop	r3
    101e:	2f 90       	pop	r2
    1020:	08 95       	ret

00001022 <tinyPotential_update>:

/*
Update the potential
*/
void tinyPotential_update()
{
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
Function to decay the potential towards 0
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
    102a:	0e 94 aa 09 	call	0x1354	; 0x1354 <tinyTime_now>
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    102e:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <previous_update_time>
    1032:	68 1b       	sub	r22, r24
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 00 0b 	call	0x1600	; 0x1600 <__floatunsisf>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	48 ec       	ldi	r20, 0xC8	; 200
    1044:	52 e4       	ldi	r21, 0x42	; 66
    1046:	0e 94 25 0a 	call	0x144a	; 0x144a <__divsf3>
    104a:	90 58       	subi	r25, 0x80	; 128
    104c:	0e 94 9f 0a 	call	0x153e	; 0x153e <exp>
    1050:	20 91 4a 38 	lds	r18, 0x384A	; 0x80384a <tinyPotential_potential>
    1054:	30 91 4b 38 	lds	r19, 0x384B	; 0x80384b <tinyPotential_potential+0x1>
    1058:	40 91 4c 38 	lds	r20, 0x384C	; 0x80384c <tinyPotential_potential+0x2>
    105c:	50 91 4d 38 	lds	r21, 0x384D	; 0x80384d <tinyPotential_potential+0x3>
    1060:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
    1064:	6b 01       	movw	r12, r22
    1066:	7c 01       	movw	r14, r24
	if(fabs(tinyPotential_potential)<0.1){
    1068:	9f 77       	andi	r25, 0x7F	; 127
    106a:	2d ec       	ldi	r18, 0xCD	; 205
    106c:	3c ec       	ldi	r19, 0xCC	; 204
    106e:	4c ec       	ldi	r20, 0xCC	; 204
    1070:	5d e3       	ldi	r21, 0x3D	; 61
    1072:	0e 94 20 0a 	call	0x1440	; 0x1440 <__cmpsf2>
    1076:	88 23       	and	r24, r24
    1078:	4c f0       	brlt	.+18     	; 0x108c <tinyPotential_update+0x6a>
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    107a:	c0 92 4a 38 	sts	0x384A, r12	; 0x80384a <tinyPotential_potential>
    107e:	d0 92 4b 38 	sts	0x384B, r13	; 0x80384b <tinyPotential_potential+0x1>
    1082:	e0 92 4c 38 	sts	0x384C, r14	; 0x80384c <tinyPotential_potential+0x2>
    1086:	f0 92 4d 38 	sts	0x384D, r15	; 0x80384d <tinyPotential_potential+0x3>
    108a:	08 c0       	rjmp	.+16     	; 0x109c <tinyPotential_update+0x7a>
	if(fabs(tinyPotential_potential)<0.1){
		tinyPotential_potential=0;
    108c:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <tinyPotential_potential>
    1090:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <tinyPotential_potential+0x1>
    1094:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <tinyPotential_potential+0x2>
    1098:	10 92 4d 38 	sts	0x384D, r1	; 0x80384d <tinyPotential_potential+0x3>
	}
	previous_update_time = tinyTime_now();
    109c:	0e 94 aa 09 	call	0x1354	; 0x1354 <tinyTime_now>
    10a0:	60 93 46 38 	sts	0x3846, r22	; 0x803846 <previous_update_time>
    10a4:	70 93 47 38 	sts	0x3847, r23	; 0x803847 <previous_update_time+0x1>
    10a8:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <previous_update_time+0x2>
    10ac:	90 93 49 38 	sts	0x3849, r25	; 0x803849 <previous_update_time+0x3>
void tinyPotential_update()
{
	//Some of the potential in the neuron has decayed away
	tinyPotential_decay();
	// Update potential with values from Dendrites
	tinyPotential_potential = tinyDendrite_update_potential(tinyPotential_potential);
    10b0:	60 91 4a 38 	lds	r22, 0x384A	; 0x80384a <tinyPotential_potential>
    10b4:	70 91 4b 38 	lds	r23, 0x384B	; 0x80384b <tinyPotential_potential+0x1>
    10b8:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <tinyPotential_potential+0x2>
    10bc:	90 91 4d 38 	lds	r25, 0x384D	; 0x80384d <tinyPotential_potential+0x3>
    10c0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <tinyDendrite_update_potential>
    10c4:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <tinyPotential_potential>
    10c8:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <tinyPotential_potential+0x1>
    10cc:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <tinyPotential_potential+0x2>
    10d0:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <tinyPotential_potential+0x3>
	
	// Update potential from button press
	tinyPotential_potential = tinyButton_update_potential(tinyPotential_potential);
    10d4:	0e 94 b9 03 	call	0x772	; 0x772 <tinyButton_update_potential>
    10d8:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <tinyPotential_potential>
    10dc:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <tinyPotential_potential+0x1>
    10e0:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <tinyPotential_potential+0x2>
    10e4:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <tinyPotential_potential+0x3>
	
	// Update potential with values from spontaneous pulse.
	tinyPotential_potential = tinyPulse_update_potential(tinyPotential_potential);
    10e8:	0e 94 bd 08 	call	0x117a	; 0x117a <tinyPulse_update_potential>
    10ec:	ab 01       	movw	r20, r22
    10ee:	bc 01       	movw	r22, r24
    10f0:	40 93 4a 38 	sts	0x384A, r20	; 0x80384a <tinyPotential_potential>
    10f4:	50 93 4b 38 	sts	0x384B, r21	; 0x80384b <tinyPotential_potential+0x1>
    10f8:	60 93 4c 38 	sts	0x384C, r22	; 0x80384c <tinyPotential_potential+0x2>
    10fc:	70 93 4d 38 	sts	0x384D, r23	; 0x80384d <tinyPotential_potential+0x3>
	
	tinyDebugger_send_double("Potential", tinyPotential_potential);
    1100:	84 e1       	ldi	r24, 0x14	; 20
    1102:	91 ea       	ldi	r25, 0xA1	; 161
    1104:	0e 94 31 04 	call	0x862	; 0x862 <tinyDebugger_send_double>
	
	
	// Let the axon affect the potential
	// This is also where we decide whether or not the axon should fire
	tinyPotential_potential = tinyAxon_update_potential(tinyPotential_potential);
    1108:	60 91 4a 38 	lds	r22, 0x384A	; 0x80384a <tinyPotential_potential>
    110c:	70 91 4b 38 	lds	r23, 0x384B	; 0x80384b <tinyPotential_potential+0x1>
    1110:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <tinyPotential_potential+0x2>
    1114:	90 91 4d 38 	lds	r25, 0x384D	; 0x80384d <tinyPotential_potential+0x3>
    1118:	0e 94 94 02 	call	0x528	; 0x528 <tinyAxon_update_potential>
    111c:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <tinyPotential_potential>
    1120:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <tinyPotential_potential+0x1>
    1124:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <tinyPotential_potential+0x2>
    1128:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <tinyPotential_potential+0x3>
}
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	df 90       	pop	r13
    1132:	cf 90       	pop	r12
    1134:	08 95       	ret

00001136 <tinyPulse_toggle_pulse_mode>:
_Bool tinyPulse_is_in_pulse_mode(){
	return pulse_mode;
}

void tinyPulse_toggle_pulse_mode(){
	pulse_mode = !pulse_mode;
    1136:	90 91 54 38 	lds	r25, 0x3854	; 0x803854 <pulse_mode>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	89 27       	eor	r24, r25
    113e:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <pulse_mode>
	
	if(tinyPulse_is_in_pulse_mode()){
    1142:	88 23       	and	r24, r24
    1144:	59 f0       	breq	.+22     	; 0x115c <tinyPulse_toggle_pulse_mode+0x26>
		tinyLED_set_color_mode(OUT_LED, PULSEMODE_COLOR, WEAK);
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	62 e0       	ldi	r22, 0x02	; 2
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	0e 94 a3 05 	call	0xb46	; 0xb46 <tinyLED_set_color_mode>
		tinyLED_set_color_mode(INN_LED, PULSEMODE_COLOR, WEAK);
    1150:	41 e0       	ldi	r20, 0x01	; 1
    1152:	62 e0       	ldi	r22, 0x02	; 2
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	0e 94 a3 05 	call	0xb46	; 0xb46 <tinyLED_set_color_mode>
    115a:	08 95       	ret
	}
	else{
		tinyLED_set_color(OUT_LED, LED_OFF);
    115c:	60 e0       	ldi	r22, 0x00	; 0
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	0e 94 c7 05 	call	0xb8e	; 0xb8e <tinyLED_set_color>
		tinyLED_set_color(INN_LED, LED_OFF);
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	0e 94 c7 05 	call	0xb8e	; 0xb8e <tinyLED_set_color>
    116c:	08 95       	ret

0000116e <tinyPulse_set_pulse_mode>:
	}
}

void tinyPulse_set_pulse_mode(_Bool mode){
	if (pulse_mode != mode)
    116e:	90 91 54 38 	lds	r25, 0x3854	; 0x803854 <pulse_mode>
    1172:	98 13       	cpse	r25, r24
	{
		tinyPulse_toggle_pulse_mode();
    1174:	0e 94 9b 08 	call	0x1136	; 0x1136 <tinyPulse_toggle_pulse_mode>
    1178:	08 95       	ret

0000117a <tinyPulse_update_potential>:
	}
}

double tinyPulse_update_potential(double potential){
    117a:	cf 92       	push	r12
    117c:	df 92       	push	r13
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	6b 01       	movw	r12, r22
    1184:	7c 01       	movw	r14, r24
	if(pulse_mode){
    1186:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <pulse_mode>
    118a:	88 23       	and	r24, r24
    118c:	39 f1       	breq	.+78     	; 0x11dc <tinyPulse_update_potential+0x62>
		
		time_since_last_pulse = tinyTime_now() - time_of_last_pulse;
    118e:	0e 94 aa 09 	call	0x1354	; 0x1354 <tinyTime_now>
    1192:	20 91 50 38 	lds	r18, 0x3850	; 0x803850 <time_of_last_pulse>
    1196:	30 91 51 38 	lds	r19, 0x3851	; 0x803851 <time_of_last_pulse+0x1>
    119a:	62 1b       	sub	r22, r18
    119c:	73 0b       	sbc	r23, r19
    119e:	60 93 4e 38 	sts	0x384E, r22	; 0x80384e <time_since_last_pulse>
    11a2:	70 93 4f 38 	sts	0x384F, r23	; 0x80384f <time_since_last_pulse+0x1>
		
		if(time_since_last_pulse >= ideal_time_between_pulses){
    11a6:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <ideal_time_between_pulses>
    11aa:	90 91 14 38 	lds	r25, 0x3814	; 0x803814 <ideal_time_between_pulses+0x1>
    11ae:	68 17       	cp	r22, r24
    11b0:	79 07       	cpc	r23, r25
    11b2:	a0 f0       	brcs	.+40     	; 0x11dc <tinyPulse_update_potential+0x62>
			// This isn't actually a button press. You could have a separate variable for this, but it seems unnecessary.
			potential += BUTTON_PRESS_REACTION;
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 ed       	ldi	r20, 0xD0	; 208
    11ba:	51 e4       	ldi	r21, 0x41	; 65
    11bc:	c7 01       	movw	r24, r14
    11be:	b6 01       	movw	r22, r12
    11c0:	0e 94 b4 09 	call	0x1368	; 0x1368 <__addsf3>
    11c4:	6b 01       	movw	r12, r22
    11c6:	7c 01       	movw	r14, r24
			time_of_last_pulse = tinyTime_now();			
    11c8:	0e 94 aa 09 	call	0x1354	; 0x1354 <tinyTime_now>
    11cc:	60 93 50 38 	sts	0x3850, r22	; 0x803850 <time_of_last_pulse>
    11d0:	70 93 51 38 	sts	0x3851, r23	; 0x803851 <time_of_last_pulse+0x1>
    11d4:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <time_of_last_pulse+0x2>
    11d8:	90 93 53 38 	sts	0x3853, r25	; 0x803853 <time_of_last_pulse+0x3>
		}
	}
	return potential;
}
    11dc:	c7 01       	movw	r24, r14
    11de:	b6 01       	movw	r22, r12
    11e0:	ff 90       	pop	r15
    11e2:	ef 90       	pop	r14
    11e4:	df 90       	pop	r13
    11e6:	cf 90       	pop	r12
    11e8:	08 95       	ret

000011ea <tinyTester_check_signals>:

/*
check_signals() will send signals out through the axon and check that all of it's own dendrites recieve the sent signal.
This assumes that the neuron is placed in a circuit connecting the axon to all the dendrites.
*/
_Bool tinyTester_check_signals(){	
    11ea:	5f 92       	push	r5
    11ec:	6f 92       	push	r6
    11ee:	7f 92       	push	r7
    11f0:	8f 92       	push	r8
    11f2:	9f 92       	push	r9
    11f4:	af 92       	push	r10
    11f6:	bf 92       	push	r11
    11f8:	cf 92       	push	r12
    11fa:	df 92       	push	r13
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	2a 97       	sbiw	r28, 0x0a	; 10
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	de bf       	out	0x3e, r29	; 62
	_Bool test_failed = false;
	
	# define NUMBER_OF_TEST_VALUES 10
	uint8_t test_values[NUMBER_OF_TEST_VALUES] = {0, 33, 66, 99, 132, 166, 199, 232, 250, 0}; // Current ADC (Analog to Digital Converter) values
    1212:	8a e0       	ldi	r24, 0x0A	; 10
    1214:	ea ee       	ldi	r30, 0xEA	; 234
    1216:	f0 ea       	ldi	r31, 0xA0	; 160
    1218:	de 01       	movw	r26, r28
    121a:	11 96       	adiw	r26, 0x01	; 1
    121c:	01 90       	ld	r0, Z+
    121e:	0d 92       	st	X+, r0
    1220:	8a 95       	dec	r24
    1222:	e1 f7       	brne	.-8      	; 0x121c <tinyTester_check_signals+0x32>
	
	
	printf("Starting testing.\r\n");
    1224:	8e e1       	ldi	r24, 0x1E	; 30
    1226:	91 ea       	ldi	r25, 0xA1	; 161
    1228:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <puts>
    122c:	ce 01       	movw	r24, r28
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	6c 01       	movw	r12, r24
    1232:	4e 01       	movw	r8, r28
    1234:	9b e0       	ldi	r25, 0x0B	; 11
    1236:	89 0e       	add	r8, r25
    1238:	91 1c       	adc	r9, r1
/*
check_signals() will send signals out through the axon and check that all of it's own dendrites recieve the sent signal.
This assumes that the neuron is placed in a circuit connecting the axon to all the dendrites.
*/
_Bool tinyTester_check_signals(){	
	_Bool test_failed = false;
    123a:	51 2c       	mov	r5, r1
		for (int j = 0; j < DENDRITE_COUNT; j++)
		{
			int difference = test_values[i] - tinyDendrite_get_value(j);
			if(abs(difference) > ACCEPTABLE_NOISE){
				test_failed = true;
				printf("Signal test failed! Axon sent %3u but dendrite %1u received %3u.\r\n", test_values[i], j, tinyDendrite_get_value(j));
    123c:	0f 2e       	mov	r0, r31
    123e:	f1 e3       	ldi	r31, 0x31	; 49
    1240:	af 2e       	mov	r10, r31
    1242:	f1 ea       	ldi	r31, 0xA1	; 161
    1244:	bf 2e       	mov	r11, r31
    1246:	f0 2d       	mov	r31, r0
	printf("Starting testing.\r\n");
	
	for (int i = 0; i < NUMBER_OF_TEST_VALUES; i++)
	{
		// Set the axon value
		DAC_0_set_output(test_values[i]);
    1248:	f6 01       	movw	r30, r12
    124a:	61 90       	ld	r6, Z+
    124c:	6f 01       	movw	r12, r30
    124e:	86 2d       	mov	r24, r6
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 1e 01 	call	0x23c	; 0x23c <DAC_0_set_output>
		tinyDendrite_read_signals();
    1256:	0e 94 33 04 	call	0x866	; 0x866 <tinyDendrite_read_signals>
		for (int j = 0; j < DENDRITE_COUNT; j++)
    125a:	00 e0       	ldi	r16, 0x00	; 0
    125c:	10 e0       	ldi	r17, 0x00	; 0
		{
			int difference = test_values[i] - tinyDendrite_get_value(j);
    125e:	e6 2c       	mov	r14, r6
    1260:	f1 2c       	mov	r15, r1
    1262:	70 2e       	mov	r7, r16
    1264:	80 2f       	mov	r24, r16
    1266:	0e 94 53 04 	call	0x8a6	; 0x8a6 <tinyDendrite_get_value>
			if(abs(difference) > ACCEPTABLE_NOISE){
    126a:	97 01       	movw	r18, r14
    126c:	28 1b       	sub	r18, r24
    126e:	31 09       	sbc	r19, r1
    1270:	c9 01       	movw	r24, r18
    1272:	99 23       	and	r25, r25
    1274:	24 f4       	brge	.+8      	; 0x127e <tinyTester_check_signals+0x94>
    1276:	88 27       	eor	r24, r24
    1278:	99 27       	eor	r25, r25
    127a:	82 1b       	sub	r24, r18
    127c:	93 0b       	sbc	r25, r19
    127e:	06 97       	sbiw	r24, 0x06	; 6
    1280:	8c f0       	brlt	.+34     	; 0x12a4 <tinyTester_check_signals+0xba>
				test_failed = true;
				printf("Signal test failed! Axon sent %3u but dendrite %1u received %3u.\r\n", test_values[i], j, tinyDendrite_get_value(j));
    1282:	87 2d       	mov	r24, r7
    1284:	0e 94 53 04 	call	0x8a6	; 0x8a6 <tinyDendrite_get_value>
    1288:	1f 92       	push	r1
    128a:	8f 93       	push	r24
    128c:	1f 93       	push	r17
    128e:	0f 93       	push	r16
    1290:	1f 92       	push	r1
    1292:	6f 92       	push	r6
    1294:	bf 92       	push	r11
    1296:	af 92       	push	r10
    1298:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <printf>
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	de bf       	out	0x3e, r29	; 62
		tinyDendrite_read_signals();
		for (int j = 0; j < DENDRITE_COUNT; j++)
		{
			int difference = test_values[i] - tinyDendrite_get_value(j);
			if(abs(difference) > ACCEPTABLE_NOISE){
				test_failed = true;
    12a0:	55 24       	eor	r5, r5
    12a2:	53 94       	inc	r5
	for (int i = 0; i < NUMBER_OF_TEST_VALUES; i++)
	{
		// Set the axon value
		DAC_0_set_output(test_values[i]);
		tinyDendrite_read_signals();
		for (int j = 0; j < DENDRITE_COUNT; j++)
    12a4:	0f 5f       	subi	r16, 0xFF	; 255
    12a6:	1f 4f       	sbci	r17, 0xFF	; 255
    12a8:	05 30       	cpi	r16, 0x05	; 5
    12aa:	11 05       	cpc	r17, r1
    12ac:	d1 f6       	brne	.-76     	; 0x1262 <tinyTester_check_signals+0x78>
	uint8_t test_values[NUMBER_OF_TEST_VALUES] = {0, 33, 66, 99, 132, 166, 199, 232, 250, 0}; // Current ADC (Analog to Digital Converter) values
	
	
	printf("Starting testing.\r\n");
	
	for (int i = 0; i < NUMBER_OF_TEST_VALUES; i++)
    12ae:	8c 14       	cp	r8, r12
    12b0:	9d 04       	cpc	r9, r13
    12b2:	51 f6       	brne	.-108    	; 0x1248 <tinyTester_check_signals+0x5e>
				printf("Signal test failed! Axon sent %3u but dendrite %1u received %3u.\r\n", test_values[i], j, tinyDendrite_get_value(j));
			}
		}
	}
	
	printf("Testing is done.\r\n\r\n");
    12b4:	84 e7       	ldi	r24, 0x74	; 116
    12b6:	91 ea       	ldi	r25, 0xA1	; 161
    12b8:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <puts>
	return test_failed;
}
    12bc:	85 2d       	mov	r24, r5
    12be:	2a 96       	adiw	r28, 0x0a	; 10
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	df 90       	pop	r13
    12d2:	cf 90       	pop	r12
    12d4:	bf 90       	pop	r11
    12d6:	af 90       	pop	r10
    12d8:	9f 90       	pop	r9
    12da:	8f 90       	pop	r8
    12dc:	7f 90       	pop	r7
    12de:	6f 90       	pop	r6
    12e0:	5f 90       	pop	r5
    12e2:	08 95       	ret

000012e4 <tinyTester_test>:
void tinyTester_test(){
	_Bool test_failed = false;
	uint8_t number_of_failed_tests = 0;
	
	// Show that testing has started
	tinyLED_set_color(INN_LED, BLUE);
    12e4:	62 e0       	ldi	r22, 0x02	; 2
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <tinyLED_set_color>
	_Bool (*testFunctions[NUMBER_OF_TEST_FUNCTIONS])() = {&tinyTester_check_signals};
	
	for (int i=0; i<NUMBER_OF_TEST_FUNCTIONS; i++){
		test_failed = false;
		//Starting test
		tinyLED_set_color(OUT_LED, YELLOW);
    12ec:	64 e0       	ldi	r22, 0x04	; 4
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	0e 94 c7 05 	call	0xb8e	; 0xb8e <tinyLED_set_color>
		
		//Update LED
		tinyLED_update();
    12f4:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <tinyLED_update>
		
		test_failed = testFunctions[i]();
    12f8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <tinyTester_check_signals>
		if(test_failed){
    12fc:	88 23       	and	r24, r24
    12fe:	59 f0       	breq	.+22     	; 0x1316 <tinyTester_test+0x32>
			tinyLED_set_color(OUT_LED, RED);
    1300:	61 e0       	ldi	r22, 0x01	; 1
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	0e 94 c7 05 	call	0xb8e	; 0xb8e <tinyLED_set_color>
		else{
			tinyLED_set_color(OUT_LED, GREEN);
		}
		
		// Update LED
		tinyLED_update();
    1308:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <tinyLED_update>
	}
	
	//Final verdict
	if(number_of_failed_tests>0){
		tinyLED_set_color(INN_LED, RED);
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	0e 94 c7 05 	call	0xb8e	; 0xb8e <tinyLED_set_color>
    1314:	08 95       	ret
		if(test_failed){
			tinyLED_set_color(OUT_LED, RED);
			number_of_failed_tests++;
		}
		else{
			tinyLED_set_color(OUT_LED, GREEN);
    1316:	63 e0       	ldi	r22, 0x03	; 3
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <tinyLED_set_color>
		}
		
		// Update LED
		tinyLED_update();
    131e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <tinyLED_update>
	
	//Final verdict
	if(number_of_failed_tests>0){
		tinyLED_set_color(INN_LED, RED);
		}else{
		tinyLED_set_color(INN_LED, GREEN);
    1322:	63 e0       	ldi	r22, 0x03	; 3
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	0e 94 c7 05 	call	0xb8e	; 0xb8e <tinyLED_set_color>
    132a:	08 95       	ret

0000132c <tinyTime_counter_increment>:
    132c:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <time_counter>
    1330:	90 91 56 38 	lds	r25, 0x3856	; 0x803856 <time_counter+0x1>
    1334:	a0 91 57 38 	lds	r26, 0x3857	; 0x803857 <time_counter+0x2>
    1338:	b0 91 58 38 	lds	r27, 0x3858	; 0x803858 <time_counter+0x3>
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	a1 1d       	adc	r26, r1
    1340:	b1 1d       	adc	r27, r1
    1342:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <time_counter>
    1346:	90 93 56 38 	sts	0x3856, r25	; 0x803856 <time_counter+0x1>
    134a:	a0 93 57 38 	sts	0x3857, r26	; 0x803857 <time_counter+0x2>
    134e:	b0 93 58 38 	sts	0x3858, r27	; 0x803858 <time_counter+0x3>
    1352:	08 95       	ret

00001354 <tinyTime_now>:
    1354:	60 91 55 38 	lds	r22, 0x3855	; 0x803855 <time_counter>
    1358:	70 91 56 38 	lds	r23, 0x3856	; 0x803856 <time_counter+0x1>
    135c:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <time_counter+0x2>
    1360:	90 91 58 38 	lds	r25, 0x3858	; 0x803858 <time_counter+0x3>
    1364:	08 95       	ret

00001366 <__subsf3>:
    1366:	50 58       	subi	r21, 0x80	; 128

00001368 <__addsf3>:
    1368:	bb 27       	eor	r27, r27
    136a:	aa 27       	eor	r26, r26
    136c:	0e 94 cb 09 	call	0x1396	; 0x1396 <__addsf3x>
    1370:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__fp_round>
    1374:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__fp_pscA>
    1378:	38 f0       	brcs	.+14     	; 0x1388 <__addsf3+0x20>
    137a:	0e 94 b7 0b 	call	0x176e	; 0x176e <__fp_pscB>
    137e:	20 f0       	brcs	.+8      	; 0x1388 <__addsf3+0x20>
    1380:	39 f4       	brne	.+14     	; 0x1390 <__addsf3+0x28>
    1382:	9f 3f       	cpi	r25, 0xFF	; 255
    1384:	19 f4       	brne	.+6      	; 0x138c <__addsf3+0x24>
    1386:	26 f4       	brtc	.+8      	; 0x1390 <__addsf3+0x28>
    1388:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_nan>
    138c:	0e f4       	brtc	.+2      	; 0x1390 <__addsf3+0x28>
    138e:	e0 95       	com	r30
    1390:	e7 fb       	bst	r30, 7
    1392:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__fp_inf>

00001396 <__addsf3x>:
    1396:	e9 2f       	mov	r30, r25
    1398:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fp_split3>
    139c:	58 f3       	brcs	.-42     	; 0x1374 <__addsf3+0xc>
    139e:	ba 17       	cp	r27, r26
    13a0:	62 07       	cpc	r22, r18
    13a2:	73 07       	cpc	r23, r19
    13a4:	84 07       	cpc	r24, r20
    13a6:	95 07       	cpc	r25, r21
    13a8:	20 f0       	brcs	.+8      	; 0x13b2 <__addsf3x+0x1c>
    13aa:	79 f4       	brne	.+30     	; 0x13ca <__addsf3x+0x34>
    13ac:	a6 f5       	brtc	.+104    	; 0x1416 <__addsf3x+0x80>
    13ae:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__fp_zero>
    13b2:	0e f4       	brtc	.+2      	; 0x13b6 <__addsf3x+0x20>
    13b4:	e0 95       	com	r30
    13b6:	0b 2e       	mov	r0, r27
    13b8:	ba 2f       	mov	r27, r26
    13ba:	a0 2d       	mov	r26, r0
    13bc:	0b 01       	movw	r0, r22
    13be:	b9 01       	movw	r22, r18
    13c0:	90 01       	movw	r18, r0
    13c2:	0c 01       	movw	r0, r24
    13c4:	ca 01       	movw	r24, r20
    13c6:	a0 01       	movw	r20, r0
    13c8:	11 24       	eor	r1, r1
    13ca:	ff 27       	eor	r31, r31
    13cc:	59 1b       	sub	r21, r25
    13ce:	99 f0       	breq	.+38     	; 0x13f6 <__addsf3x+0x60>
    13d0:	59 3f       	cpi	r21, 0xF9	; 249
    13d2:	50 f4       	brcc	.+20     	; 0x13e8 <__addsf3x+0x52>
    13d4:	50 3e       	cpi	r21, 0xE0	; 224
    13d6:	68 f1       	brcs	.+90     	; 0x1432 <__addsf3x+0x9c>
    13d8:	1a 16       	cp	r1, r26
    13da:	f0 40       	sbci	r31, 0x00	; 0
    13dc:	a2 2f       	mov	r26, r18
    13de:	23 2f       	mov	r18, r19
    13e0:	34 2f       	mov	r19, r20
    13e2:	44 27       	eor	r20, r20
    13e4:	58 5f       	subi	r21, 0xF8	; 248
    13e6:	f3 cf       	rjmp	.-26     	; 0x13ce <__addsf3x+0x38>
    13e8:	46 95       	lsr	r20
    13ea:	37 95       	ror	r19
    13ec:	27 95       	ror	r18
    13ee:	a7 95       	ror	r26
    13f0:	f0 40       	sbci	r31, 0x00	; 0
    13f2:	53 95       	inc	r21
    13f4:	c9 f7       	brne	.-14     	; 0x13e8 <__addsf3x+0x52>
    13f6:	7e f4       	brtc	.+30     	; 0x1416 <__addsf3x+0x80>
    13f8:	1f 16       	cp	r1, r31
    13fa:	ba 0b       	sbc	r27, r26
    13fc:	62 0b       	sbc	r22, r18
    13fe:	73 0b       	sbc	r23, r19
    1400:	84 0b       	sbc	r24, r20
    1402:	ba f0       	brmi	.+46     	; 0x1432 <__addsf3x+0x9c>
    1404:	91 50       	subi	r25, 0x01	; 1
    1406:	a1 f0       	breq	.+40     	; 0x1430 <__addsf3x+0x9a>
    1408:	ff 0f       	add	r31, r31
    140a:	bb 1f       	adc	r27, r27
    140c:	66 1f       	adc	r22, r22
    140e:	77 1f       	adc	r23, r23
    1410:	88 1f       	adc	r24, r24
    1412:	c2 f7       	brpl	.-16     	; 0x1404 <__addsf3x+0x6e>
    1414:	0e c0       	rjmp	.+28     	; 0x1432 <__addsf3x+0x9c>
    1416:	ba 0f       	add	r27, r26
    1418:	62 1f       	adc	r22, r18
    141a:	73 1f       	adc	r23, r19
    141c:	84 1f       	adc	r24, r20
    141e:	48 f4       	brcc	.+18     	; 0x1432 <__addsf3x+0x9c>
    1420:	87 95       	ror	r24
    1422:	77 95       	ror	r23
    1424:	67 95       	ror	r22
    1426:	b7 95       	ror	r27
    1428:	f7 95       	ror	r31
    142a:	9e 3f       	cpi	r25, 0xFE	; 254
    142c:	08 f0       	brcs	.+2      	; 0x1430 <__addsf3x+0x9a>
    142e:	b0 cf       	rjmp	.-160    	; 0x1390 <__addsf3+0x28>
    1430:	93 95       	inc	r25
    1432:	88 0f       	add	r24, r24
    1434:	08 f0       	brcs	.+2      	; 0x1438 <__addsf3x+0xa2>
    1436:	99 27       	eor	r25, r25
    1438:	ee 0f       	add	r30, r30
    143a:	97 95       	ror	r25
    143c:	87 95       	ror	r24
    143e:	08 95       	ret

00001440 <__cmpsf2>:
    1440:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__fp_cmp>
    1444:	08 f4       	brcc	.+2      	; 0x1448 <__cmpsf2+0x8>
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	08 95       	ret

0000144a <__divsf3>:
    144a:	0e 94 39 0a 	call	0x1472	; 0x1472 <__divsf3x>
    144e:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__fp_round>
    1452:	0e 94 b7 0b 	call	0x176e	; 0x176e <__fp_pscB>
    1456:	58 f0       	brcs	.+22     	; 0x146e <__divsf3+0x24>
    1458:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__fp_pscA>
    145c:	40 f0       	brcs	.+16     	; 0x146e <__divsf3+0x24>
    145e:	29 f4       	brne	.+10     	; 0x146a <__divsf3+0x20>
    1460:	5f 3f       	cpi	r21, 0xFF	; 255
    1462:	29 f0       	breq	.+10     	; 0x146e <__divsf3+0x24>
    1464:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__fp_inf>
    1468:	51 11       	cpse	r21, r1
    146a:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__fp_szero>
    146e:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_nan>

00001472 <__divsf3x>:
    1472:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fp_split3>
    1476:	68 f3       	brcs	.-38     	; 0x1452 <__divsf3+0x8>

00001478 <__divsf3_pse>:
    1478:	99 23       	and	r25, r25
    147a:	b1 f3       	breq	.-20     	; 0x1468 <__divsf3+0x1e>
    147c:	55 23       	and	r21, r21
    147e:	91 f3       	breq	.-28     	; 0x1464 <__divsf3+0x1a>
    1480:	95 1b       	sub	r25, r21
    1482:	55 0b       	sbc	r21, r21
    1484:	bb 27       	eor	r27, r27
    1486:	aa 27       	eor	r26, r26
    1488:	62 17       	cp	r22, r18
    148a:	73 07       	cpc	r23, r19
    148c:	84 07       	cpc	r24, r20
    148e:	38 f0       	brcs	.+14     	; 0x149e <__divsf3_pse+0x26>
    1490:	9f 5f       	subi	r25, 0xFF	; 255
    1492:	5f 4f       	sbci	r21, 0xFF	; 255
    1494:	22 0f       	add	r18, r18
    1496:	33 1f       	adc	r19, r19
    1498:	44 1f       	adc	r20, r20
    149a:	aa 1f       	adc	r26, r26
    149c:	a9 f3       	breq	.-22     	; 0x1488 <__divsf3_pse+0x10>
    149e:	35 d0       	rcall	.+106    	; 0x150a <__divsf3_pse+0x92>
    14a0:	0e 2e       	mov	r0, r30
    14a2:	3a f0       	brmi	.+14     	; 0x14b2 <__divsf3_pse+0x3a>
    14a4:	e0 e8       	ldi	r30, 0x80	; 128
    14a6:	32 d0       	rcall	.+100    	; 0x150c <__divsf3_pse+0x94>
    14a8:	91 50       	subi	r25, 0x01	; 1
    14aa:	50 40       	sbci	r21, 0x00	; 0
    14ac:	e6 95       	lsr	r30
    14ae:	00 1c       	adc	r0, r0
    14b0:	ca f7       	brpl	.-14     	; 0x14a4 <__divsf3_pse+0x2c>
    14b2:	2b d0       	rcall	.+86     	; 0x150a <__divsf3_pse+0x92>
    14b4:	fe 2f       	mov	r31, r30
    14b6:	29 d0       	rcall	.+82     	; 0x150a <__divsf3_pse+0x92>
    14b8:	66 0f       	add	r22, r22
    14ba:	77 1f       	adc	r23, r23
    14bc:	88 1f       	adc	r24, r24
    14be:	bb 1f       	adc	r27, r27
    14c0:	26 17       	cp	r18, r22
    14c2:	37 07       	cpc	r19, r23
    14c4:	48 07       	cpc	r20, r24
    14c6:	ab 07       	cpc	r26, r27
    14c8:	b0 e8       	ldi	r27, 0x80	; 128
    14ca:	09 f0       	breq	.+2      	; 0x14ce <__divsf3_pse+0x56>
    14cc:	bb 0b       	sbc	r27, r27
    14ce:	80 2d       	mov	r24, r0
    14d0:	bf 01       	movw	r22, r30
    14d2:	ff 27       	eor	r31, r31
    14d4:	93 58       	subi	r25, 0x83	; 131
    14d6:	5f 4f       	sbci	r21, 0xFF	; 255
    14d8:	3a f0       	brmi	.+14     	; 0x14e8 <__divsf3_pse+0x70>
    14da:	9e 3f       	cpi	r25, 0xFE	; 254
    14dc:	51 05       	cpc	r21, r1
    14de:	78 f0       	brcs	.+30     	; 0x14fe <__divsf3_pse+0x86>
    14e0:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__fp_inf>
    14e4:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__fp_szero>
    14e8:	5f 3f       	cpi	r21, 0xFF	; 255
    14ea:	e4 f3       	brlt	.-8      	; 0x14e4 <__divsf3_pse+0x6c>
    14ec:	98 3e       	cpi	r25, 0xE8	; 232
    14ee:	d4 f3       	brlt	.-12     	; 0x14e4 <__divsf3_pse+0x6c>
    14f0:	86 95       	lsr	r24
    14f2:	77 95       	ror	r23
    14f4:	67 95       	ror	r22
    14f6:	b7 95       	ror	r27
    14f8:	f7 95       	ror	r31
    14fa:	9f 5f       	subi	r25, 0xFF	; 255
    14fc:	c9 f7       	brne	.-14     	; 0x14f0 <__divsf3_pse+0x78>
    14fe:	88 0f       	add	r24, r24
    1500:	91 1d       	adc	r25, r1
    1502:	96 95       	lsr	r25
    1504:	87 95       	ror	r24
    1506:	97 f9       	bld	r25, 7
    1508:	08 95       	ret
    150a:	e1 e0       	ldi	r30, 0x01	; 1
    150c:	66 0f       	add	r22, r22
    150e:	77 1f       	adc	r23, r23
    1510:	88 1f       	adc	r24, r24
    1512:	bb 1f       	adc	r27, r27
    1514:	62 17       	cp	r22, r18
    1516:	73 07       	cpc	r23, r19
    1518:	84 07       	cpc	r24, r20
    151a:	ba 07       	cpc	r27, r26
    151c:	20 f0       	brcs	.+8      	; 0x1526 <__divsf3_pse+0xae>
    151e:	62 1b       	sub	r22, r18
    1520:	73 0b       	sbc	r23, r19
    1522:	84 0b       	sbc	r24, r20
    1524:	ba 0b       	sbc	r27, r26
    1526:	ee 1f       	adc	r30, r30
    1528:	88 f7       	brcc	.-30     	; 0x150c <__divsf3_pse+0x94>
    152a:	e0 95       	com	r30
    152c:	08 95       	ret
    152e:	29 f4       	brne	.+10     	; 0x153a <__divsf3_pse+0xc2>
    1530:	16 f0       	brts	.+4      	; 0x1536 <__divsf3_pse+0xbe>
    1532:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__fp_inf>
    1536:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__fp_zero>
    153a:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_nan>

0000153e <exp>:
    153e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__fp_splitA>
    1542:	a8 f3       	brcs	.-22     	; 0x152e <__divsf3_pse+0xb6>
    1544:	96 38       	cpi	r25, 0x86	; 134
    1546:	a0 f7       	brcc	.-24     	; 0x1530 <__divsf3_pse+0xb8>
    1548:	07 f8       	bld	r0, 7
    154a:	0f 92       	push	r0
    154c:	e8 94       	clt
    154e:	2b e3       	ldi	r18, 0x3B	; 59
    1550:	3a ea       	ldi	r19, 0xAA	; 170
    1552:	48 eb       	ldi	r20, 0xB8	; 184
    1554:	5f e7       	ldi	r21, 0x7F	; 127
    1556:	0e 94 89 0c 	call	0x1912	; 0x1912 <__mulsf3_pse>
    155a:	0f 92       	push	r0
    155c:	0f 92       	push	r0
    155e:	0f 92       	push	r0
    1560:	4d b7       	in	r20, 0x3d	; 61
    1562:	5e b7       	in	r21, 0x3e	; 62
    1564:	0f 92       	push	r0
    1566:	0e 94 3f 0c 	call	0x187e	; 0x187e <modf>
    156a:	ec e7       	ldi	r30, 0x7C	; 124
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	0e 94 89 0b 	call	0x1712	; 0x1712 <__fp_powser>
    1572:	4f 91       	pop	r20
    1574:	5f 91       	pop	r21
    1576:	ef 91       	pop	r30
    1578:	ff 91       	pop	r31
    157a:	e5 95       	asr	r30
    157c:	ee 1f       	adc	r30, r30
    157e:	ff 1f       	adc	r31, r31
    1580:	49 f0       	breq	.+18     	; 0x1594 <exp+0x56>
    1582:	fe 57       	subi	r31, 0x7E	; 126
    1584:	e0 68       	ori	r30, 0x80	; 128
    1586:	44 27       	eor	r20, r20
    1588:	ee 0f       	add	r30, r30
    158a:	44 1f       	adc	r20, r20
    158c:	fa 95       	dec	r31
    158e:	e1 f7       	brne	.-8      	; 0x1588 <exp+0x4a>
    1590:	41 95       	neg	r20
    1592:	55 0b       	sbc	r21, r21
    1594:	0e 94 09 0c 	call	0x1812	; 0x1812 <ldexp>
    1598:	0f 90       	pop	r0
    159a:	07 fe       	sbrs	r0, 7
    159c:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <inverse>
    15a0:	08 95       	ret

000015a2 <__fixunssfsi>:
    15a2:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__fp_splitA>
    15a6:	88 f0       	brcs	.+34     	; 0x15ca <__fixunssfsi+0x28>
    15a8:	9f 57       	subi	r25, 0x7F	; 127
    15aa:	98 f0       	brcs	.+38     	; 0x15d2 <__fixunssfsi+0x30>
    15ac:	b9 2f       	mov	r27, r25
    15ae:	99 27       	eor	r25, r25
    15b0:	b7 51       	subi	r27, 0x17	; 23
    15b2:	b0 f0       	brcs	.+44     	; 0x15e0 <__fixunssfsi+0x3e>
    15b4:	e1 f0       	breq	.+56     	; 0x15ee <__fixunssfsi+0x4c>
    15b6:	66 0f       	add	r22, r22
    15b8:	77 1f       	adc	r23, r23
    15ba:	88 1f       	adc	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	1a f0       	brmi	.+6      	; 0x15c6 <__fixunssfsi+0x24>
    15c0:	ba 95       	dec	r27
    15c2:	c9 f7       	brne	.-14     	; 0x15b6 <__fixunssfsi+0x14>
    15c4:	14 c0       	rjmp	.+40     	; 0x15ee <__fixunssfsi+0x4c>
    15c6:	b1 30       	cpi	r27, 0x01	; 1
    15c8:	91 f0       	breq	.+36     	; 0x15ee <__fixunssfsi+0x4c>
    15ca:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__fp_zero>
    15ce:	b1 e0       	ldi	r27, 0x01	; 1
    15d0:	08 95       	ret
    15d2:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__fp_zero>
    15d6:	67 2f       	mov	r22, r23
    15d8:	78 2f       	mov	r23, r24
    15da:	88 27       	eor	r24, r24
    15dc:	b8 5f       	subi	r27, 0xF8	; 248
    15de:	39 f0       	breq	.+14     	; 0x15ee <__fixunssfsi+0x4c>
    15e0:	b9 3f       	cpi	r27, 0xF9	; 249
    15e2:	cc f3       	brlt	.-14     	; 0x15d6 <__fixunssfsi+0x34>
    15e4:	86 95       	lsr	r24
    15e6:	77 95       	ror	r23
    15e8:	67 95       	ror	r22
    15ea:	b3 95       	inc	r27
    15ec:	d9 f7       	brne	.-10     	; 0x15e4 <__fixunssfsi+0x42>
    15ee:	3e f4       	brtc	.+14     	; 0x15fe <__fixunssfsi+0x5c>
    15f0:	90 95       	com	r25
    15f2:	80 95       	com	r24
    15f4:	70 95       	com	r23
    15f6:	61 95       	neg	r22
    15f8:	7f 4f       	sbci	r23, 0xFF	; 255
    15fa:	8f 4f       	sbci	r24, 0xFF	; 255
    15fc:	9f 4f       	sbci	r25, 0xFF	; 255
    15fe:	08 95       	ret

00001600 <__floatunsisf>:
    1600:	e8 94       	clt
    1602:	09 c0       	rjmp	.+18     	; 0x1616 <__floatsisf+0x12>

00001604 <__floatsisf>:
    1604:	97 fb       	bst	r25, 7
    1606:	3e f4       	brtc	.+14     	; 0x1616 <__floatsisf+0x12>
    1608:	90 95       	com	r25
    160a:	80 95       	com	r24
    160c:	70 95       	com	r23
    160e:	61 95       	neg	r22
    1610:	7f 4f       	sbci	r23, 0xFF	; 255
    1612:	8f 4f       	sbci	r24, 0xFF	; 255
    1614:	9f 4f       	sbci	r25, 0xFF	; 255
    1616:	99 23       	and	r25, r25
    1618:	a9 f0       	breq	.+42     	; 0x1644 <__floatsisf+0x40>
    161a:	f9 2f       	mov	r31, r25
    161c:	96 e9       	ldi	r25, 0x96	; 150
    161e:	bb 27       	eor	r27, r27
    1620:	93 95       	inc	r25
    1622:	f6 95       	lsr	r31
    1624:	87 95       	ror	r24
    1626:	77 95       	ror	r23
    1628:	67 95       	ror	r22
    162a:	b7 95       	ror	r27
    162c:	f1 11       	cpse	r31, r1
    162e:	f8 cf       	rjmp	.-16     	; 0x1620 <__floatsisf+0x1c>
    1630:	fa f4       	brpl	.+62     	; 0x1670 <__floatsisf+0x6c>
    1632:	bb 0f       	add	r27, r27
    1634:	11 f4       	brne	.+4      	; 0x163a <__floatsisf+0x36>
    1636:	60 ff       	sbrs	r22, 0
    1638:	1b c0       	rjmp	.+54     	; 0x1670 <__floatsisf+0x6c>
    163a:	6f 5f       	subi	r22, 0xFF	; 255
    163c:	7f 4f       	sbci	r23, 0xFF	; 255
    163e:	8f 4f       	sbci	r24, 0xFF	; 255
    1640:	9f 4f       	sbci	r25, 0xFF	; 255
    1642:	16 c0       	rjmp	.+44     	; 0x1670 <__floatsisf+0x6c>
    1644:	88 23       	and	r24, r24
    1646:	11 f0       	breq	.+4      	; 0x164c <__floatsisf+0x48>
    1648:	96 e9       	ldi	r25, 0x96	; 150
    164a:	11 c0       	rjmp	.+34     	; 0x166e <__floatsisf+0x6a>
    164c:	77 23       	and	r23, r23
    164e:	21 f0       	breq	.+8      	; 0x1658 <__floatsisf+0x54>
    1650:	9e e8       	ldi	r25, 0x8E	; 142
    1652:	87 2f       	mov	r24, r23
    1654:	76 2f       	mov	r23, r22
    1656:	05 c0       	rjmp	.+10     	; 0x1662 <__floatsisf+0x5e>
    1658:	66 23       	and	r22, r22
    165a:	71 f0       	breq	.+28     	; 0x1678 <__floatsisf+0x74>
    165c:	96 e8       	ldi	r25, 0x86	; 134
    165e:	86 2f       	mov	r24, r22
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	2a f0       	brmi	.+10     	; 0x1670 <__floatsisf+0x6c>
    1666:	9a 95       	dec	r25
    1668:	66 0f       	add	r22, r22
    166a:	77 1f       	adc	r23, r23
    166c:	88 1f       	adc	r24, r24
    166e:	da f7       	brpl	.-10     	; 0x1666 <__floatsisf+0x62>
    1670:	88 0f       	add	r24, r24
    1672:	96 95       	lsr	r25
    1674:	87 95       	ror	r24
    1676:	97 f9       	bld	r25, 7
    1678:	08 95       	ret

0000167a <fmin>:
    167a:	99 0f       	add	r25, r25
    167c:	bb 0b       	sbc	r27, r27
    167e:	55 0f       	add	r21, r21
    1680:	aa 0b       	sbc	r26, r26
    1682:	e0 e8       	ldi	r30, 0x80	; 128
    1684:	fe ef       	ldi	r31, 0xFE	; 254
    1686:	16 16       	cp	r1, r22
    1688:	17 06       	cpc	r1, r23
    168a:	e8 07       	cpc	r30, r24
    168c:	f9 07       	cpc	r31, r25
    168e:	70 f0       	brcs	.+28     	; 0x16ac <fmin+0x32>
    1690:	12 16       	cp	r1, r18
    1692:	13 06       	cpc	r1, r19
    1694:	e4 07       	cpc	r30, r20
    1696:	f5 07       	cpc	r31, r21
    1698:	60 f0       	brcs	.+24     	; 0x16b2 <fmin+0x38>
    169a:	ba 17       	cp	r27, r26
    169c:	54 f0       	brlt	.+20     	; 0x16b2 <fmin+0x38>
    169e:	31 f4       	brne	.+12     	; 0x16ac <fmin+0x32>
    16a0:	26 17       	cp	r18, r22
    16a2:	37 07       	cpc	r19, r23
    16a4:	48 07       	cpc	r20, r24
    16a6:	59 07       	cpc	r21, r25
    16a8:	a7 95       	ror	r26
    16aa:	1b f4       	brvc	.+6      	; 0x16b2 <fmin+0x38>
    16ac:	b9 01       	movw	r22, r18
    16ae:	ca 01       	movw	r24, r20
    16b0:	ba 2f       	mov	r27, r26
    16b2:	b6 95       	lsr	r27
    16b4:	97 95       	ror	r25
    16b6:	08 95       	ret

000016b8 <__fp_cmp>:
    16b8:	99 0f       	add	r25, r25
    16ba:	00 08       	sbc	r0, r0
    16bc:	55 0f       	add	r21, r21
    16be:	aa 0b       	sbc	r26, r26
    16c0:	e0 e8       	ldi	r30, 0x80	; 128
    16c2:	fe ef       	ldi	r31, 0xFE	; 254
    16c4:	16 16       	cp	r1, r22
    16c6:	17 06       	cpc	r1, r23
    16c8:	e8 07       	cpc	r30, r24
    16ca:	f9 07       	cpc	r31, r25
    16cc:	c0 f0       	brcs	.+48     	; 0x16fe <__fp_cmp+0x46>
    16ce:	12 16       	cp	r1, r18
    16d0:	13 06       	cpc	r1, r19
    16d2:	e4 07       	cpc	r30, r20
    16d4:	f5 07       	cpc	r31, r21
    16d6:	98 f0       	brcs	.+38     	; 0x16fe <__fp_cmp+0x46>
    16d8:	62 1b       	sub	r22, r18
    16da:	73 0b       	sbc	r23, r19
    16dc:	84 0b       	sbc	r24, r20
    16de:	95 0b       	sbc	r25, r21
    16e0:	39 f4       	brne	.+14     	; 0x16f0 <__fp_cmp+0x38>
    16e2:	0a 26       	eor	r0, r26
    16e4:	61 f0       	breq	.+24     	; 0x16fe <__fp_cmp+0x46>
    16e6:	23 2b       	or	r18, r19
    16e8:	24 2b       	or	r18, r20
    16ea:	25 2b       	or	r18, r21
    16ec:	21 f4       	brne	.+8      	; 0x16f6 <__fp_cmp+0x3e>
    16ee:	08 95       	ret
    16f0:	0a 26       	eor	r0, r26
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <__fp_cmp+0x3e>
    16f4:	a1 40       	sbci	r26, 0x01	; 1
    16f6:	a6 95       	lsr	r26
    16f8:	8f ef       	ldi	r24, 0xFF	; 255
    16fa:	81 1d       	adc	r24, r1
    16fc:	81 1d       	adc	r24, r1
    16fe:	08 95       	ret

00001700 <__fp_inf>:
    1700:	97 f9       	bld	r25, 7
    1702:	9f 67       	ori	r25, 0x7F	; 127
    1704:	80 e8       	ldi	r24, 0x80	; 128
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	08 95       	ret

0000170c <__fp_nan>:
    170c:	9f ef       	ldi	r25, 0xFF	; 255
    170e:	80 ec       	ldi	r24, 0xC0	; 192
    1710:	08 95       	ret

00001712 <__fp_powser>:
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	1f 93       	push	r17
    1718:	0f 93       	push	r16
    171a:	ff 92       	push	r15
    171c:	ef 92       	push	r14
    171e:	df 92       	push	r13
    1720:	7b 01       	movw	r14, r22
    1722:	8c 01       	movw	r16, r24
    1724:	68 94       	set
    1726:	06 c0       	rjmp	.+12     	; 0x1734 <__fp_powser+0x22>
    1728:	da 2e       	mov	r13, r26
    172a:	ef 01       	movw	r28, r30
    172c:	0e 94 86 0c 	call	0x190c	; 0x190c <__mulsf3x>
    1730:	fe 01       	movw	r30, r28
    1732:	e8 94       	clt
    1734:	a5 91       	lpm	r26, Z+
    1736:	25 91       	lpm	r18, Z+
    1738:	35 91       	lpm	r19, Z+
    173a:	45 91       	lpm	r20, Z+
    173c:	55 91       	lpm	r21, Z+
    173e:	a6 f3       	brts	.-24     	; 0x1728 <__fp_powser+0x16>
    1740:	ef 01       	movw	r28, r30
    1742:	0e 94 cb 09 	call	0x1396	; 0x1396 <__addsf3x>
    1746:	fe 01       	movw	r30, r28
    1748:	97 01       	movw	r18, r14
    174a:	a8 01       	movw	r20, r16
    174c:	da 94       	dec	r13
    174e:	69 f7       	brne	.-38     	; 0x172a <__fp_powser+0x18>
    1750:	df 90       	pop	r13
    1752:	ef 90       	pop	r14
    1754:	ff 90       	pop	r15
    1756:	0f 91       	pop	r16
    1758:	1f 91       	pop	r17
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <__fp_pscA>:
    1760:	00 24       	eor	r0, r0
    1762:	0a 94       	dec	r0
    1764:	16 16       	cp	r1, r22
    1766:	17 06       	cpc	r1, r23
    1768:	18 06       	cpc	r1, r24
    176a:	09 06       	cpc	r0, r25
    176c:	08 95       	ret

0000176e <__fp_pscB>:
    176e:	00 24       	eor	r0, r0
    1770:	0a 94       	dec	r0
    1772:	12 16       	cp	r1, r18
    1774:	13 06       	cpc	r1, r19
    1776:	14 06       	cpc	r1, r20
    1778:	05 06       	cpc	r0, r21
    177a:	08 95       	ret

0000177c <__fp_round>:
    177c:	09 2e       	mov	r0, r25
    177e:	03 94       	inc	r0
    1780:	00 0c       	add	r0, r0
    1782:	11 f4       	brne	.+4      	; 0x1788 <__fp_round+0xc>
    1784:	88 23       	and	r24, r24
    1786:	52 f0       	brmi	.+20     	; 0x179c <__fp_round+0x20>
    1788:	bb 0f       	add	r27, r27
    178a:	40 f4       	brcc	.+16     	; 0x179c <__fp_round+0x20>
    178c:	bf 2b       	or	r27, r31
    178e:	11 f4       	brne	.+4      	; 0x1794 <__fp_round+0x18>
    1790:	60 ff       	sbrs	r22, 0
    1792:	04 c0       	rjmp	.+8      	; 0x179c <__fp_round+0x20>
    1794:	6f 5f       	subi	r22, 0xFF	; 255
    1796:	7f 4f       	sbci	r23, 0xFF	; 255
    1798:	8f 4f       	sbci	r24, 0xFF	; 255
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	08 95       	ret

0000179e <__fp_split3>:
    179e:	57 fd       	sbrc	r21, 7
    17a0:	90 58       	subi	r25, 0x80	; 128
    17a2:	44 0f       	add	r20, r20
    17a4:	55 1f       	adc	r21, r21
    17a6:	59 f0       	breq	.+22     	; 0x17be <__fp_splitA+0x10>
    17a8:	5f 3f       	cpi	r21, 0xFF	; 255
    17aa:	71 f0       	breq	.+28     	; 0x17c8 <__fp_splitA+0x1a>
    17ac:	47 95       	ror	r20

000017ae <__fp_splitA>:
    17ae:	88 0f       	add	r24, r24
    17b0:	97 fb       	bst	r25, 7
    17b2:	99 1f       	adc	r25, r25
    17b4:	61 f0       	breq	.+24     	; 0x17ce <__fp_splitA+0x20>
    17b6:	9f 3f       	cpi	r25, 0xFF	; 255
    17b8:	79 f0       	breq	.+30     	; 0x17d8 <__fp_splitA+0x2a>
    17ba:	87 95       	ror	r24
    17bc:	08 95       	ret
    17be:	12 16       	cp	r1, r18
    17c0:	13 06       	cpc	r1, r19
    17c2:	14 06       	cpc	r1, r20
    17c4:	55 1f       	adc	r21, r21
    17c6:	f2 cf       	rjmp	.-28     	; 0x17ac <__fp_split3+0xe>
    17c8:	46 95       	lsr	r20
    17ca:	f1 df       	rcall	.-30     	; 0x17ae <__fp_splitA>
    17cc:	08 c0       	rjmp	.+16     	; 0x17de <__fp_splitA+0x30>
    17ce:	16 16       	cp	r1, r22
    17d0:	17 06       	cpc	r1, r23
    17d2:	18 06       	cpc	r1, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	f1 cf       	rjmp	.-30     	; 0x17ba <__fp_splitA+0xc>
    17d8:	86 95       	lsr	r24
    17da:	71 05       	cpc	r23, r1
    17dc:	61 05       	cpc	r22, r1
    17de:	08 94       	sec
    17e0:	08 95       	ret

000017e2 <__fp_zero>:
    17e2:	e8 94       	clt

000017e4 <__fp_szero>:
    17e4:	bb 27       	eor	r27, r27
    17e6:	66 27       	eor	r22, r22
    17e8:	77 27       	eor	r23, r23
    17ea:	cb 01       	movw	r24, r22
    17ec:	97 f9       	bld	r25, 7
    17ee:	08 95       	ret

000017f0 <__gesf2>:
    17f0:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__fp_cmp>
    17f4:	08 f4       	brcc	.+2      	; 0x17f8 <__gesf2+0x8>
    17f6:	8f ef       	ldi	r24, 0xFF	; 255
    17f8:	08 95       	ret

000017fa <inverse>:
    17fa:	9b 01       	movw	r18, r22
    17fc:	ac 01       	movw	r20, r24
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	80 e8       	ldi	r24, 0x80	; 128
    1804:	9f e3       	ldi	r25, 0x3F	; 63
    1806:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__divsf3>
    180a:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__fp_inf>
    180e:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__fp_mpack>

00001812 <ldexp>:
    1812:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__fp_splitA>
    1816:	d8 f3       	brcs	.-10     	; 0x180e <inverse+0x14>
    1818:	99 23       	and	r25, r25
    181a:	c9 f3       	breq	.-14     	; 0x180e <inverse+0x14>
    181c:	94 0f       	add	r25, r20
    181e:	51 1d       	adc	r21, r1
    1820:	a3 f3       	brvs	.-24     	; 0x180a <inverse+0x10>
    1822:	91 50       	subi	r25, 0x01	; 1
    1824:	50 40       	sbci	r21, 0x00	; 0
    1826:	94 f0       	brlt	.+36     	; 0x184c <ldexp+0x3a>
    1828:	59 f0       	breq	.+22     	; 0x1840 <ldexp+0x2e>
    182a:	88 23       	and	r24, r24
    182c:	32 f0       	brmi	.+12     	; 0x183a <ldexp+0x28>
    182e:	66 0f       	add	r22, r22
    1830:	77 1f       	adc	r23, r23
    1832:	88 1f       	adc	r24, r24
    1834:	91 50       	subi	r25, 0x01	; 1
    1836:	50 40       	sbci	r21, 0x00	; 0
    1838:	c1 f7       	brne	.-16     	; 0x182a <ldexp+0x18>
    183a:	9e 3f       	cpi	r25, 0xFE	; 254
    183c:	51 05       	cpc	r21, r1
    183e:	2c f7       	brge	.-54     	; 0x180a <inverse+0x10>
    1840:	88 0f       	add	r24, r24
    1842:	91 1d       	adc	r25, r1
    1844:	96 95       	lsr	r25
    1846:	87 95       	ror	r24
    1848:	97 f9       	bld	r25, 7
    184a:	08 95       	ret
    184c:	5f 3f       	cpi	r21, 0xFF	; 255
    184e:	ac f0       	brlt	.+42     	; 0x187a <ldexp+0x68>
    1850:	98 3e       	cpi	r25, 0xE8	; 232
    1852:	9c f0       	brlt	.+38     	; 0x187a <ldexp+0x68>
    1854:	bb 27       	eor	r27, r27
    1856:	86 95       	lsr	r24
    1858:	77 95       	ror	r23
    185a:	67 95       	ror	r22
    185c:	b7 95       	ror	r27
    185e:	08 f4       	brcc	.+2      	; 0x1862 <ldexp+0x50>
    1860:	b1 60       	ori	r27, 0x01	; 1
    1862:	93 95       	inc	r25
    1864:	c1 f7       	brne	.-16     	; 0x1856 <ldexp+0x44>
    1866:	bb 0f       	add	r27, r27
    1868:	58 f7       	brcc	.-42     	; 0x1840 <ldexp+0x2e>
    186a:	11 f4       	brne	.+4      	; 0x1870 <ldexp+0x5e>
    186c:	60 ff       	sbrs	r22, 0
    186e:	e8 cf       	rjmp	.-48     	; 0x1840 <ldexp+0x2e>
    1870:	6f 5f       	subi	r22, 0xFF	; 255
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	8f 4f       	sbci	r24, 0xFF	; 255
    1876:	9f 4f       	sbci	r25, 0xFF	; 255
    1878:	e3 cf       	rjmp	.-58     	; 0x1840 <ldexp+0x2e>
    187a:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__fp_szero>

0000187e <modf>:
    187e:	fa 01       	movw	r30, r20
    1880:	dc 01       	movw	r26, r24
    1882:	aa 0f       	add	r26, r26
    1884:	bb 1f       	adc	r27, r27
    1886:	9b 01       	movw	r18, r22
    1888:	ac 01       	movw	r20, r24
    188a:	bf 57       	subi	r27, 0x7F	; 127
    188c:	28 f4       	brcc	.+10     	; 0x1898 <modf+0x1a>
    188e:	22 27       	eor	r18, r18
    1890:	33 27       	eor	r19, r19
    1892:	44 27       	eor	r20, r20
    1894:	50 78       	andi	r21, 0x80	; 128
    1896:	20 c0       	rjmp	.+64     	; 0x18d8 <modf+0x5a>
    1898:	b7 51       	subi	r27, 0x17	; 23
    189a:	90 f4       	brcc	.+36     	; 0x18c0 <modf+0x42>
    189c:	ab 2f       	mov	r26, r27
    189e:	00 24       	eor	r0, r0
    18a0:	46 95       	lsr	r20
    18a2:	37 95       	ror	r19
    18a4:	27 95       	ror	r18
    18a6:	01 1c       	adc	r0, r1
    18a8:	a3 95       	inc	r26
    18aa:	d2 f3       	brmi	.-12     	; 0x18a0 <modf+0x22>
    18ac:	00 20       	and	r0, r0
    18ae:	71 f0       	breq	.+28     	; 0x18cc <modf+0x4e>
    18b0:	22 0f       	add	r18, r18
    18b2:	33 1f       	adc	r19, r19
    18b4:	44 1f       	adc	r20, r20
    18b6:	b3 95       	inc	r27
    18b8:	da f3       	brmi	.-10     	; 0x18b0 <modf+0x32>
    18ba:	0e d0       	rcall	.+28     	; 0x18d8 <modf+0x5a>
    18bc:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__subsf3>
    18c0:	61 30       	cpi	r22, 0x01	; 1
    18c2:	71 05       	cpc	r23, r1
    18c4:	a0 e8       	ldi	r26, 0x80	; 128
    18c6:	8a 07       	cpc	r24, r26
    18c8:	b9 46       	sbci	r27, 0x69	; 105
    18ca:	30 f4       	brcc	.+12     	; 0x18d8 <modf+0x5a>
    18cc:	9b 01       	movw	r18, r22
    18ce:	ac 01       	movw	r20, r24
    18d0:	66 27       	eor	r22, r22
    18d2:	77 27       	eor	r23, r23
    18d4:	88 27       	eor	r24, r24
    18d6:	90 78       	andi	r25, 0x80	; 128
    18d8:	30 96       	adiw	r30, 0x00	; 0
    18da:	21 f0       	breq	.+8      	; 0x18e4 <modf+0x66>
    18dc:	20 83       	st	Z, r18
    18de:	31 83       	std	Z+1, r19	; 0x01
    18e0:	42 83       	std	Z+2, r20	; 0x02
    18e2:	53 83       	std	Z+3, r21	; 0x03
    18e4:	08 95       	ret

000018e6 <__mulsf3>:
    18e6:	0e 94 86 0c 	call	0x190c	; 0x190c <__mulsf3x>
    18ea:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__fp_round>
    18ee:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__fp_pscA>
    18f2:	38 f0       	brcs	.+14     	; 0x1902 <__mulsf3+0x1c>
    18f4:	0e 94 b7 0b 	call	0x176e	; 0x176e <__fp_pscB>
    18f8:	20 f0       	brcs	.+8      	; 0x1902 <__mulsf3+0x1c>
    18fa:	95 23       	and	r25, r21
    18fc:	11 f0       	breq	.+4      	; 0x1902 <__mulsf3+0x1c>
    18fe:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__fp_inf>
    1902:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_nan>
    1906:	11 24       	eor	r1, r1
    1908:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__fp_szero>

0000190c <__mulsf3x>:
    190c:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fp_split3>
    1910:	70 f3       	brcs	.-36     	; 0x18ee <__mulsf3+0x8>

00001912 <__mulsf3_pse>:
    1912:	95 9f       	mul	r25, r21
    1914:	c1 f3       	breq	.-16     	; 0x1906 <__mulsf3+0x20>
    1916:	95 0f       	add	r25, r21
    1918:	50 e0       	ldi	r21, 0x00	; 0
    191a:	55 1f       	adc	r21, r21
    191c:	62 9f       	mul	r22, r18
    191e:	f0 01       	movw	r30, r0
    1920:	72 9f       	mul	r23, r18
    1922:	bb 27       	eor	r27, r27
    1924:	f0 0d       	add	r31, r0
    1926:	b1 1d       	adc	r27, r1
    1928:	63 9f       	mul	r22, r19
    192a:	aa 27       	eor	r26, r26
    192c:	f0 0d       	add	r31, r0
    192e:	b1 1d       	adc	r27, r1
    1930:	aa 1f       	adc	r26, r26
    1932:	64 9f       	mul	r22, r20
    1934:	66 27       	eor	r22, r22
    1936:	b0 0d       	add	r27, r0
    1938:	a1 1d       	adc	r26, r1
    193a:	66 1f       	adc	r22, r22
    193c:	82 9f       	mul	r24, r18
    193e:	22 27       	eor	r18, r18
    1940:	b0 0d       	add	r27, r0
    1942:	a1 1d       	adc	r26, r1
    1944:	62 1f       	adc	r22, r18
    1946:	73 9f       	mul	r23, r19
    1948:	b0 0d       	add	r27, r0
    194a:	a1 1d       	adc	r26, r1
    194c:	62 1f       	adc	r22, r18
    194e:	83 9f       	mul	r24, r19
    1950:	a0 0d       	add	r26, r0
    1952:	61 1d       	adc	r22, r1
    1954:	22 1f       	adc	r18, r18
    1956:	74 9f       	mul	r23, r20
    1958:	33 27       	eor	r19, r19
    195a:	a0 0d       	add	r26, r0
    195c:	61 1d       	adc	r22, r1
    195e:	23 1f       	adc	r18, r19
    1960:	84 9f       	mul	r24, r20
    1962:	60 0d       	add	r22, r0
    1964:	21 1d       	adc	r18, r1
    1966:	82 2f       	mov	r24, r18
    1968:	76 2f       	mov	r23, r22
    196a:	6a 2f       	mov	r22, r26
    196c:	11 24       	eor	r1, r1
    196e:	9f 57       	subi	r25, 0x7F	; 127
    1970:	50 40       	sbci	r21, 0x00	; 0
    1972:	9a f0       	brmi	.+38     	; 0x199a <__mulsf3_pse+0x88>
    1974:	f1 f0       	breq	.+60     	; 0x19b2 <__mulsf3_pse+0xa0>
    1976:	88 23       	and	r24, r24
    1978:	4a f0       	brmi	.+18     	; 0x198c <__mulsf3_pse+0x7a>
    197a:	ee 0f       	add	r30, r30
    197c:	ff 1f       	adc	r31, r31
    197e:	bb 1f       	adc	r27, r27
    1980:	66 1f       	adc	r22, r22
    1982:	77 1f       	adc	r23, r23
    1984:	88 1f       	adc	r24, r24
    1986:	91 50       	subi	r25, 0x01	; 1
    1988:	50 40       	sbci	r21, 0x00	; 0
    198a:	a9 f7       	brne	.-22     	; 0x1976 <__mulsf3_pse+0x64>
    198c:	9e 3f       	cpi	r25, 0xFE	; 254
    198e:	51 05       	cpc	r21, r1
    1990:	80 f0       	brcs	.+32     	; 0x19b2 <__mulsf3_pse+0xa0>
    1992:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__fp_inf>
    1996:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__fp_szero>
    199a:	5f 3f       	cpi	r21, 0xFF	; 255
    199c:	e4 f3       	brlt	.-8      	; 0x1996 <__mulsf3_pse+0x84>
    199e:	98 3e       	cpi	r25, 0xE8	; 232
    19a0:	d4 f3       	brlt	.-12     	; 0x1996 <__mulsf3_pse+0x84>
    19a2:	86 95       	lsr	r24
    19a4:	77 95       	ror	r23
    19a6:	67 95       	ror	r22
    19a8:	b7 95       	ror	r27
    19aa:	f7 95       	ror	r31
    19ac:	e7 95       	ror	r30
    19ae:	9f 5f       	subi	r25, 0xFF	; 255
    19b0:	c1 f7       	brne	.-16     	; 0x19a2 <__mulsf3_pse+0x90>
    19b2:	fe 2b       	or	r31, r30
    19b4:	88 0f       	add	r24, r24
    19b6:	91 1d       	adc	r25, r1
    19b8:	96 95       	lsr	r25
    19ba:	87 95       	ror	r24
    19bc:	97 f9       	bld	r25, 7
    19be:	08 95       	ret

000019c0 <sin>:
    19c0:	9f 93       	push	r25
    19c2:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__fp_rempio2>
    19c6:	0f 90       	pop	r0
    19c8:	07 fc       	sbrc	r0, 7
    19ca:	ee 5f       	subi	r30, 0xFE	; 254
    19cc:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__fp_sinus>

000019d0 <__fp_mpack>:
    19d0:	9f 3f       	cpi	r25, 0xFF	; 255
    19d2:	31 f0       	breq	.+12     	; 0x19e0 <__fp_mpack_finite+0xc>

000019d4 <__fp_mpack_finite>:
    19d4:	91 50       	subi	r25, 0x01	; 1
    19d6:	20 f4       	brcc	.+8      	; 0x19e0 <__fp_mpack_finite+0xc>
    19d8:	87 95       	ror	r24
    19da:	77 95       	ror	r23
    19dc:	67 95       	ror	r22
    19de:	b7 95       	ror	r27
    19e0:	88 0f       	add	r24, r24
    19e2:	91 1d       	adc	r25, r1
    19e4:	96 95       	lsr	r25
    19e6:	87 95       	ror	r24
    19e8:	97 f9       	bld	r25, 7
    19ea:	08 95       	ret
    19ec:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_nan>

000019f0 <__fp_rempio2>:
    19f0:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__fp_splitA>
    19f4:	d8 f3       	brcs	.-10     	; 0x19ec <__fp_mpack_finite+0x18>
    19f6:	e8 94       	clt
    19f8:	e0 e0       	ldi	r30, 0x00	; 0
    19fa:	bb 27       	eor	r27, r27
    19fc:	9f 57       	subi	r25, 0x7F	; 127
    19fe:	f0 f0       	brcs	.+60     	; 0x1a3c <__fp_rempio2+0x4c>
    1a00:	2a ed       	ldi	r18, 0xDA	; 218
    1a02:	3f e0       	ldi	r19, 0x0F	; 15
    1a04:	49 ec       	ldi	r20, 0xC9	; 201
    1a06:	06 c0       	rjmp	.+12     	; 0x1a14 <__fp_rempio2+0x24>
    1a08:	ee 0f       	add	r30, r30
    1a0a:	bb 0f       	add	r27, r27
    1a0c:	66 1f       	adc	r22, r22
    1a0e:	77 1f       	adc	r23, r23
    1a10:	88 1f       	adc	r24, r24
    1a12:	28 f0       	brcs	.+10     	; 0x1a1e <__fp_rempio2+0x2e>
    1a14:	b2 3a       	cpi	r27, 0xA2	; 162
    1a16:	62 07       	cpc	r22, r18
    1a18:	73 07       	cpc	r23, r19
    1a1a:	84 07       	cpc	r24, r20
    1a1c:	28 f0       	brcs	.+10     	; 0x1a28 <__fp_rempio2+0x38>
    1a1e:	b2 5a       	subi	r27, 0xA2	; 162
    1a20:	62 0b       	sbc	r22, r18
    1a22:	73 0b       	sbc	r23, r19
    1a24:	84 0b       	sbc	r24, r20
    1a26:	e3 95       	inc	r30
    1a28:	9a 95       	dec	r25
    1a2a:	72 f7       	brpl	.-36     	; 0x1a08 <__fp_rempio2+0x18>
    1a2c:	80 38       	cpi	r24, 0x80	; 128
    1a2e:	30 f4       	brcc	.+12     	; 0x1a3c <__fp_rempio2+0x4c>
    1a30:	9a 95       	dec	r25
    1a32:	bb 0f       	add	r27, r27
    1a34:	66 1f       	adc	r22, r22
    1a36:	77 1f       	adc	r23, r23
    1a38:	88 1f       	adc	r24, r24
    1a3a:	d2 f7       	brpl	.-12     	; 0x1a30 <__fp_rempio2+0x40>
    1a3c:	90 48       	sbci	r25, 0x80	; 128
    1a3e:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__fp_mpack_finite>

00001a42 <__fp_sinus>:
    1a42:	ef 93       	push	r30
    1a44:	e0 ff       	sbrs	r30, 0
    1a46:	07 c0       	rjmp	.+14     	; 0x1a56 <__fp_sinus+0x14>
    1a48:	a2 ea       	ldi	r26, 0xA2	; 162
    1a4a:	2a ed       	ldi	r18, 0xDA	; 218
    1a4c:	3f e0       	ldi	r19, 0x0F	; 15
    1a4e:	49 ec       	ldi	r20, 0xC9	; 201
    1a50:	5f eb       	ldi	r21, 0xBF	; 191
    1a52:	0e 94 cb 09 	call	0x1396	; 0x1396 <__addsf3x>
    1a56:	0e 94 be 0b 	call	0x177c	; 0x177c <__fp_round>
    1a5a:	0f 90       	pop	r0
    1a5c:	03 94       	inc	r0
    1a5e:	01 fc       	sbrc	r0, 1
    1a60:	90 58       	subi	r25, 0x80	; 128
    1a62:	e4 ea       	ldi	r30, 0xA4	; 164
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__fp_powsodd>

00001a6a <__fp_powsodd>:
    1a6a:	9f 93       	push	r25
    1a6c:	8f 93       	push	r24
    1a6e:	7f 93       	push	r23
    1a70:	6f 93       	push	r22
    1a72:	ff 93       	push	r31
    1a74:	ef 93       	push	r30
    1a76:	9b 01       	movw	r18, r22
    1a78:	ac 01       	movw	r20, r24
    1a7a:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__mulsf3>
    1a7e:	ef 91       	pop	r30
    1a80:	ff 91       	pop	r31
    1a82:	0e 94 89 0b 	call	0x1712	; 0x1712 <__fp_powser>
    1a86:	2f 91       	pop	r18
    1a88:	3f 91       	pop	r19
    1a8a:	4f 91       	pop	r20
    1a8c:	5f 91       	pop	r21
    1a8e:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <__mulsf3>

00001a92 <__udivmodsi4>:
    1a92:	a1 e2       	ldi	r26, 0x21	; 33
    1a94:	1a 2e       	mov	r1, r26
    1a96:	aa 1b       	sub	r26, r26
    1a98:	bb 1b       	sub	r27, r27
    1a9a:	fd 01       	movw	r30, r26
    1a9c:	0d c0       	rjmp	.+26     	; 0x1ab8 <__udivmodsi4_ep>

00001a9e <__udivmodsi4_loop>:
    1a9e:	aa 1f       	adc	r26, r26
    1aa0:	bb 1f       	adc	r27, r27
    1aa2:	ee 1f       	adc	r30, r30
    1aa4:	ff 1f       	adc	r31, r31
    1aa6:	a2 17       	cp	r26, r18
    1aa8:	b3 07       	cpc	r27, r19
    1aaa:	e4 07       	cpc	r30, r20
    1aac:	f5 07       	cpc	r31, r21
    1aae:	20 f0       	brcs	.+8      	; 0x1ab8 <__udivmodsi4_ep>
    1ab0:	a2 1b       	sub	r26, r18
    1ab2:	b3 0b       	sbc	r27, r19
    1ab4:	e4 0b       	sbc	r30, r20
    1ab6:	f5 0b       	sbc	r31, r21

00001ab8 <__udivmodsi4_ep>:
    1ab8:	66 1f       	adc	r22, r22
    1aba:	77 1f       	adc	r23, r23
    1abc:	88 1f       	adc	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	1a 94       	dec	r1
    1ac2:	69 f7       	brne	.-38     	; 0x1a9e <__udivmodsi4_loop>
    1ac4:	60 95       	com	r22
    1ac6:	70 95       	com	r23
    1ac8:	80 95       	com	r24
    1aca:	90 95       	com	r25
    1acc:	9b 01       	movw	r18, r22
    1ace:	ac 01       	movw	r20, r24
    1ad0:	bd 01       	movw	r22, r26
    1ad2:	cf 01       	movw	r24, r30
    1ad4:	08 95       	ret

00001ad6 <printf>:
    1ad6:	a0 e0       	ldi	r26, 0x00	; 0
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e1 e7       	ldi	r30, 0x71	; 113
    1adc:	fd e0       	ldi	r31, 0x0D	; 13
    1ade:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <__prologue_saves__+0x20>
    1ae2:	ae 01       	movw	r20, r28
    1ae4:	4b 5f       	subi	r20, 0xFB	; 251
    1ae6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae8:	fa 01       	movw	r30, r20
    1aea:	61 91       	ld	r22, Z+
    1aec:	71 91       	ld	r23, Z+
    1aee:	af 01       	movw	r20, r30
    1af0:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <__iob+0x2>
    1af4:	90 91 6d 38 	lds	r25, 0x386D	; 0x80386d <__iob+0x3>
    1af8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <vfprintf>
    1afc:	e2 e0       	ldi	r30, 0x02	; 2
    1afe:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__epilogue_restores__+0x20>

00001b02 <puts>:
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	e0 91 6c 38 	lds	r30, 0x386C	; 0x80386c <__iob+0x2>
    1b0e:	f0 91 6d 38 	lds	r31, 0x386D	; 0x80386d <__iob+0x3>
    1b12:	23 81       	ldd	r18, Z+3	; 0x03
    1b14:	21 ff       	sbrs	r18, 1
    1b16:	1b c0       	rjmp	.+54     	; 0x1b4e <puts+0x4c>
    1b18:	8c 01       	movw	r16, r24
    1b1a:	d0 e0       	ldi	r29, 0x00	; 0
    1b1c:	c0 e0       	ldi	r28, 0x00	; 0
    1b1e:	f8 01       	movw	r30, r16
    1b20:	81 91       	ld	r24, Z+
    1b22:	8f 01       	movw	r16, r30
    1b24:	60 91 6c 38 	lds	r22, 0x386C	; 0x80386c <__iob+0x2>
    1b28:	70 91 6d 38 	lds	r23, 0x386D	; 0x80386d <__iob+0x3>
    1b2c:	db 01       	movw	r26, r22
    1b2e:	18 96       	adiw	r26, 0x08	; 8
    1b30:	ed 91       	ld	r30, X+
    1b32:	fc 91       	ld	r31, X
    1b34:	19 97       	sbiw	r26, 0x09	; 9
    1b36:	88 23       	and	r24, r24
    1b38:	31 f0       	breq	.+12     	; 0x1b46 <puts+0x44>
    1b3a:	09 95       	icall
    1b3c:	89 2b       	or	r24, r25
    1b3e:	79 f3       	breq	.-34     	; 0x1b1e <puts+0x1c>
    1b40:	df ef       	ldi	r29, 0xFF	; 255
    1b42:	cf ef       	ldi	r28, 0xFF	; 255
    1b44:	ec cf       	rjmp	.-40     	; 0x1b1e <puts+0x1c>
    1b46:	8a e0       	ldi	r24, 0x0A	; 10
    1b48:	09 95       	icall
    1b4a:	89 2b       	or	r24, r25
    1b4c:	19 f0       	breq	.+6      	; 0x1b54 <puts+0x52>
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	9f ef       	ldi	r25, 0xFF	; 255
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <puts+0x56>
    1b54:	8d 2f       	mov	r24, r29
    1b56:	9c 2f       	mov	r25, r28
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	1f 91       	pop	r17
    1b5e:	0f 91       	pop	r16
    1b60:	08 95       	ret

00001b62 <vfprintf>:
    1b62:	ab e0       	ldi	r26, 0x0B	; 11
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e7 eb       	ldi	r30, 0xB7	; 183
    1b68:	fd e0       	ldi	r31, 0x0D	; 13
    1b6a:	0c 94 42 10 	jmp	0x2084	; 0x2084 <__prologue_saves__>
    1b6e:	6c 01       	movw	r12, r24
    1b70:	7b 01       	movw	r14, r22
    1b72:	8a 01       	movw	r16, r20
    1b74:	fc 01       	movw	r30, r24
    1b76:	16 82       	std	Z+6, r1	; 0x06
    1b78:	17 82       	std	Z+7, r1	; 0x07
    1b7a:	83 81       	ldd	r24, Z+3	; 0x03
    1b7c:	81 ff       	sbrs	r24, 1
    1b7e:	cc c1       	rjmp	.+920    	; 0x1f18 <vfprintf+0x3b6>
    1b80:	ce 01       	movw	r24, r28
    1b82:	01 96       	adiw	r24, 0x01	; 1
    1b84:	3c 01       	movw	r6, r24
    1b86:	f6 01       	movw	r30, r12
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	f7 01       	movw	r30, r14
    1b8c:	93 fd       	sbrc	r25, 3
    1b8e:	85 91       	lpm	r24, Z+
    1b90:	93 ff       	sbrs	r25, 3
    1b92:	81 91       	ld	r24, Z+
    1b94:	7f 01       	movw	r14, r30
    1b96:	88 23       	and	r24, r24
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <vfprintf+0x3a>
    1b9a:	ba c1       	rjmp	.+884    	; 0x1f10 <vfprintf+0x3ae>
    1b9c:	85 32       	cpi	r24, 0x25	; 37
    1b9e:	39 f4       	brne	.+14     	; 0x1bae <vfprintf+0x4c>
    1ba0:	93 fd       	sbrc	r25, 3
    1ba2:	85 91       	lpm	r24, Z+
    1ba4:	93 ff       	sbrs	r25, 3
    1ba6:	81 91       	ld	r24, Z+
    1ba8:	7f 01       	movw	r14, r30
    1baa:	85 32       	cpi	r24, 0x25	; 37
    1bac:	29 f4       	brne	.+10     	; 0x1bb8 <vfprintf+0x56>
    1bae:	b6 01       	movw	r22, r12
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1bb6:	e7 cf       	rjmp	.-50     	; 0x1b86 <vfprintf+0x24>
    1bb8:	91 2c       	mov	r9, r1
    1bba:	21 2c       	mov	r2, r1
    1bbc:	31 2c       	mov	r3, r1
    1bbe:	ff e1       	ldi	r31, 0x1F	; 31
    1bc0:	f3 15       	cp	r31, r3
    1bc2:	d8 f0       	brcs	.+54     	; 0x1bfa <vfprintf+0x98>
    1bc4:	8b 32       	cpi	r24, 0x2B	; 43
    1bc6:	79 f0       	breq	.+30     	; 0x1be6 <vfprintf+0x84>
    1bc8:	38 f4       	brcc	.+14     	; 0x1bd8 <vfprintf+0x76>
    1bca:	80 32       	cpi	r24, 0x20	; 32
    1bcc:	79 f0       	breq	.+30     	; 0x1bec <vfprintf+0x8a>
    1bce:	83 32       	cpi	r24, 0x23	; 35
    1bd0:	a1 f4       	brne	.+40     	; 0x1bfa <vfprintf+0x98>
    1bd2:	23 2d       	mov	r18, r3
    1bd4:	20 61       	ori	r18, 0x10	; 16
    1bd6:	1d c0       	rjmp	.+58     	; 0x1c12 <vfprintf+0xb0>
    1bd8:	8d 32       	cpi	r24, 0x2D	; 45
    1bda:	61 f0       	breq	.+24     	; 0x1bf4 <vfprintf+0x92>
    1bdc:	80 33       	cpi	r24, 0x30	; 48
    1bde:	69 f4       	brne	.+26     	; 0x1bfa <vfprintf+0x98>
    1be0:	23 2d       	mov	r18, r3
    1be2:	21 60       	ori	r18, 0x01	; 1
    1be4:	16 c0       	rjmp	.+44     	; 0x1c12 <vfprintf+0xb0>
    1be6:	83 2d       	mov	r24, r3
    1be8:	82 60       	ori	r24, 0x02	; 2
    1bea:	38 2e       	mov	r3, r24
    1bec:	e3 2d       	mov	r30, r3
    1bee:	e4 60       	ori	r30, 0x04	; 4
    1bf0:	3e 2e       	mov	r3, r30
    1bf2:	2a c0       	rjmp	.+84     	; 0x1c48 <vfprintf+0xe6>
    1bf4:	f3 2d       	mov	r31, r3
    1bf6:	f8 60       	ori	r31, 0x08	; 8
    1bf8:	1d c0       	rjmp	.+58     	; 0x1c34 <vfprintf+0xd2>
    1bfa:	37 fc       	sbrc	r3, 7
    1bfc:	2d c0       	rjmp	.+90     	; 0x1c58 <vfprintf+0xf6>
    1bfe:	20 ed       	ldi	r18, 0xD0	; 208
    1c00:	28 0f       	add	r18, r24
    1c02:	2a 30       	cpi	r18, 0x0A	; 10
    1c04:	40 f0       	brcs	.+16     	; 0x1c16 <vfprintf+0xb4>
    1c06:	8e 32       	cpi	r24, 0x2E	; 46
    1c08:	b9 f4       	brne	.+46     	; 0x1c38 <vfprintf+0xd6>
    1c0a:	36 fc       	sbrc	r3, 6
    1c0c:	81 c1       	rjmp	.+770    	; 0x1f10 <vfprintf+0x3ae>
    1c0e:	23 2d       	mov	r18, r3
    1c10:	20 64       	ori	r18, 0x40	; 64
    1c12:	32 2e       	mov	r3, r18
    1c14:	19 c0       	rjmp	.+50     	; 0x1c48 <vfprintf+0xe6>
    1c16:	36 fe       	sbrs	r3, 6
    1c18:	06 c0       	rjmp	.+12     	; 0x1c26 <vfprintf+0xc4>
    1c1a:	8a e0       	ldi	r24, 0x0A	; 10
    1c1c:	98 9e       	mul	r9, r24
    1c1e:	20 0d       	add	r18, r0
    1c20:	11 24       	eor	r1, r1
    1c22:	92 2e       	mov	r9, r18
    1c24:	11 c0       	rjmp	.+34     	; 0x1c48 <vfprintf+0xe6>
    1c26:	ea e0       	ldi	r30, 0x0A	; 10
    1c28:	2e 9e       	mul	r2, r30
    1c2a:	20 0d       	add	r18, r0
    1c2c:	11 24       	eor	r1, r1
    1c2e:	22 2e       	mov	r2, r18
    1c30:	f3 2d       	mov	r31, r3
    1c32:	f0 62       	ori	r31, 0x20	; 32
    1c34:	3f 2e       	mov	r3, r31
    1c36:	08 c0       	rjmp	.+16     	; 0x1c48 <vfprintf+0xe6>
    1c38:	8c 36       	cpi	r24, 0x6C	; 108
    1c3a:	21 f4       	brne	.+8      	; 0x1c44 <vfprintf+0xe2>
    1c3c:	83 2d       	mov	r24, r3
    1c3e:	80 68       	ori	r24, 0x80	; 128
    1c40:	38 2e       	mov	r3, r24
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <vfprintf+0xe6>
    1c44:	88 36       	cpi	r24, 0x68	; 104
    1c46:	41 f4       	brne	.+16     	; 0x1c58 <vfprintf+0xf6>
    1c48:	f7 01       	movw	r30, r14
    1c4a:	93 fd       	sbrc	r25, 3
    1c4c:	85 91       	lpm	r24, Z+
    1c4e:	93 ff       	sbrs	r25, 3
    1c50:	81 91       	ld	r24, Z+
    1c52:	7f 01       	movw	r14, r30
    1c54:	81 11       	cpse	r24, r1
    1c56:	b3 cf       	rjmp	.-154    	; 0x1bbe <vfprintf+0x5c>
    1c58:	98 2f       	mov	r25, r24
    1c5a:	9f 7d       	andi	r25, 0xDF	; 223
    1c5c:	95 54       	subi	r25, 0x45	; 69
    1c5e:	93 30       	cpi	r25, 0x03	; 3
    1c60:	28 f4       	brcc	.+10     	; 0x1c6c <vfprintf+0x10a>
    1c62:	0c 5f       	subi	r16, 0xFC	; 252
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	9f e3       	ldi	r25, 0x3F	; 63
    1c68:	99 83       	std	Y+1, r25	; 0x01
    1c6a:	0d c0       	rjmp	.+26     	; 0x1c86 <vfprintf+0x124>
    1c6c:	83 36       	cpi	r24, 0x63	; 99
    1c6e:	31 f0       	breq	.+12     	; 0x1c7c <vfprintf+0x11a>
    1c70:	83 37       	cpi	r24, 0x73	; 115
    1c72:	71 f0       	breq	.+28     	; 0x1c90 <vfprintf+0x12e>
    1c74:	83 35       	cpi	r24, 0x53	; 83
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <vfprintf+0x118>
    1c78:	59 c0       	rjmp	.+178    	; 0x1d2c <vfprintf+0x1ca>
    1c7a:	21 c0       	rjmp	.+66     	; 0x1cbe <vfprintf+0x15c>
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	80 81       	ld	r24, Z
    1c80:	89 83       	std	Y+1, r24	; 0x01
    1c82:	0e 5f       	subi	r16, 0xFE	; 254
    1c84:	1f 4f       	sbci	r17, 0xFF	; 255
    1c86:	88 24       	eor	r8, r8
    1c88:	83 94       	inc	r8
    1c8a:	91 2c       	mov	r9, r1
    1c8c:	53 01       	movw	r10, r6
    1c8e:	13 c0       	rjmp	.+38     	; 0x1cb6 <vfprintf+0x154>
    1c90:	28 01       	movw	r4, r16
    1c92:	f2 e0       	ldi	r31, 0x02	; 2
    1c94:	4f 0e       	add	r4, r31
    1c96:	51 1c       	adc	r5, r1
    1c98:	f8 01       	movw	r30, r16
    1c9a:	a0 80       	ld	r10, Z
    1c9c:	b1 80       	ldd	r11, Z+1	; 0x01
    1c9e:	36 fe       	sbrs	r3, 6
    1ca0:	03 c0       	rjmp	.+6      	; 0x1ca8 <vfprintf+0x146>
    1ca2:	69 2d       	mov	r22, r9
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <vfprintf+0x14a>
    1ca8:	6f ef       	ldi	r22, 0xFF	; 255
    1caa:	7f ef       	ldi	r23, 0xFF	; 255
    1cac:	c5 01       	movw	r24, r10
    1cae:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <strnlen>
    1cb2:	4c 01       	movw	r8, r24
    1cb4:	82 01       	movw	r16, r4
    1cb6:	f3 2d       	mov	r31, r3
    1cb8:	ff 77       	andi	r31, 0x7F	; 127
    1cba:	3f 2e       	mov	r3, r31
    1cbc:	16 c0       	rjmp	.+44     	; 0x1cea <vfprintf+0x188>
    1cbe:	28 01       	movw	r4, r16
    1cc0:	22 e0       	ldi	r18, 0x02	; 2
    1cc2:	42 0e       	add	r4, r18
    1cc4:	51 1c       	adc	r5, r1
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	a0 80       	ld	r10, Z
    1cca:	b1 80       	ldd	r11, Z+1	; 0x01
    1ccc:	36 fe       	sbrs	r3, 6
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <vfprintf+0x174>
    1cd0:	69 2d       	mov	r22, r9
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <vfprintf+0x178>
    1cd6:	6f ef       	ldi	r22, 0xFF	; 255
    1cd8:	7f ef       	ldi	r23, 0xFF	; 255
    1cda:	c5 01       	movw	r24, r10
    1cdc:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <strnlen_P>
    1ce0:	4c 01       	movw	r8, r24
    1ce2:	f3 2d       	mov	r31, r3
    1ce4:	f0 68       	ori	r31, 0x80	; 128
    1ce6:	3f 2e       	mov	r3, r31
    1ce8:	82 01       	movw	r16, r4
    1cea:	33 fc       	sbrc	r3, 3
    1cec:	1b c0       	rjmp	.+54     	; 0x1d24 <vfprintf+0x1c2>
    1cee:	82 2d       	mov	r24, r2
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	88 16       	cp	r8, r24
    1cf4:	99 06       	cpc	r9, r25
    1cf6:	b0 f4       	brcc	.+44     	; 0x1d24 <vfprintf+0x1c2>
    1cf8:	b6 01       	movw	r22, r12
    1cfa:	80 e2       	ldi	r24, 0x20	; 32
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1d02:	2a 94       	dec	r2
    1d04:	f4 cf       	rjmp	.-24     	; 0x1cee <vfprintf+0x18c>
    1d06:	f5 01       	movw	r30, r10
    1d08:	37 fc       	sbrc	r3, 7
    1d0a:	85 91       	lpm	r24, Z+
    1d0c:	37 fe       	sbrs	r3, 7
    1d0e:	81 91       	ld	r24, Z+
    1d10:	5f 01       	movw	r10, r30
    1d12:	b6 01       	movw	r22, r12
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1d1a:	21 10       	cpse	r2, r1
    1d1c:	2a 94       	dec	r2
    1d1e:	21 e0       	ldi	r18, 0x01	; 1
    1d20:	82 1a       	sub	r8, r18
    1d22:	91 08       	sbc	r9, r1
    1d24:	81 14       	cp	r8, r1
    1d26:	91 04       	cpc	r9, r1
    1d28:	71 f7       	brne	.-36     	; 0x1d06 <vfprintf+0x1a4>
    1d2a:	e8 c0       	rjmp	.+464    	; 0x1efc <vfprintf+0x39a>
    1d2c:	84 36       	cpi	r24, 0x64	; 100
    1d2e:	11 f0       	breq	.+4      	; 0x1d34 <vfprintf+0x1d2>
    1d30:	89 36       	cpi	r24, 0x69	; 105
    1d32:	41 f5       	brne	.+80     	; 0x1d84 <vfprintf+0x222>
    1d34:	f8 01       	movw	r30, r16
    1d36:	37 fe       	sbrs	r3, 7
    1d38:	07 c0       	rjmp	.+14     	; 0x1d48 <vfprintf+0x1e6>
    1d3a:	60 81       	ld	r22, Z
    1d3c:	71 81       	ldd	r23, Z+1	; 0x01
    1d3e:	82 81       	ldd	r24, Z+2	; 0x02
    1d40:	93 81       	ldd	r25, Z+3	; 0x03
    1d42:	0c 5f       	subi	r16, 0xFC	; 252
    1d44:	1f 4f       	sbci	r17, 0xFF	; 255
    1d46:	08 c0       	rjmp	.+16     	; 0x1d58 <vfprintf+0x1f6>
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	07 2e       	mov	r0, r23
    1d4e:	00 0c       	add	r0, r0
    1d50:	88 0b       	sbc	r24, r24
    1d52:	99 0b       	sbc	r25, r25
    1d54:	0e 5f       	subi	r16, 0xFE	; 254
    1d56:	1f 4f       	sbci	r17, 0xFF	; 255
    1d58:	f3 2d       	mov	r31, r3
    1d5a:	ff 76       	andi	r31, 0x6F	; 111
    1d5c:	3f 2e       	mov	r3, r31
    1d5e:	97 ff       	sbrs	r25, 7
    1d60:	09 c0       	rjmp	.+18     	; 0x1d74 <vfprintf+0x212>
    1d62:	90 95       	com	r25
    1d64:	80 95       	com	r24
    1d66:	70 95       	com	r23
    1d68:	61 95       	neg	r22
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	f0 68       	ori	r31, 0x80	; 128
    1d72:	3f 2e       	mov	r3, r31
    1d74:	2a e0       	ldi	r18, 0x0A	; 10
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	a3 01       	movw	r20, r6
    1d7a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__ultoa_invert>
    1d7e:	88 2e       	mov	r8, r24
    1d80:	86 18       	sub	r8, r6
    1d82:	45 c0       	rjmp	.+138    	; 0x1e0e <vfprintf+0x2ac>
    1d84:	85 37       	cpi	r24, 0x75	; 117
    1d86:	31 f4       	brne	.+12     	; 0x1d94 <vfprintf+0x232>
    1d88:	23 2d       	mov	r18, r3
    1d8a:	2f 7e       	andi	r18, 0xEF	; 239
    1d8c:	b2 2e       	mov	r11, r18
    1d8e:	2a e0       	ldi	r18, 0x0A	; 10
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	25 c0       	rjmp	.+74     	; 0x1dde <vfprintf+0x27c>
    1d94:	93 2d       	mov	r25, r3
    1d96:	99 7f       	andi	r25, 0xF9	; 249
    1d98:	b9 2e       	mov	r11, r25
    1d9a:	8f 36       	cpi	r24, 0x6F	; 111
    1d9c:	c1 f0       	breq	.+48     	; 0x1dce <vfprintf+0x26c>
    1d9e:	18 f4       	brcc	.+6      	; 0x1da6 <vfprintf+0x244>
    1da0:	88 35       	cpi	r24, 0x58	; 88
    1da2:	79 f0       	breq	.+30     	; 0x1dc2 <vfprintf+0x260>
    1da4:	b5 c0       	rjmp	.+362    	; 0x1f10 <vfprintf+0x3ae>
    1da6:	80 37       	cpi	r24, 0x70	; 112
    1da8:	19 f0       	breq	.+6      	; 0x1db0 <vfprintf+0x24e>
    1daa:	88 37       	cpi	r24, 0x78	; 120
    1dac:	21 f0       	breq	.+8      	; 0x1db6 <vfprintf+0x254>
    1dae:	b0 c0       	rjmp	.+352    	; 0x1f10 <vfprintf+0x3ae>
    1db0:	e9 2f       	mov	r30, r25
    1db2:	e0 61       	ori	r30, 0x10	; 16
    1db4:	be 2e       	mov	r11, r30
    1db6:	b4 fe       	sbrs	r11, 4
    1db8:	0d c0       	rjmp	.+26     	; 0x1dd4 <vfprintf+0x272>
    1dba:	fb 2d       	mov	r31, r11
    1dbc:	f4 60       	ori	r31, 0x04	; 4
    1dbe:	bf 2e       	mov	r11, r31
    1dc0:	09 c0       	rjmp	.+18     	; 0x1dd4 <vfprintf+0x272>
    1dc2:	34 fe       	sbrs	r3, 4
    1dc4:	0a c0       	rjmp	.+20     	; 0x1dda <vfprintf+0x278>
    1dc6:	29 2f       	mov	r18, r25
    1dc8:	26 60       	ori	r18, 0x06	; 6
    1dca:	b2 2e       	mov	r11, r18
    1dcc:	06 c0       	rjmp	.+12     	; 0x1dda <vfprintf+0x278>
    1dce:	28 e0       	ldi	r18, 0x08	; 8
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	05 c0       	rjmp	.+10     	; 0x1dde <vfprintf+0x27c>
    1dd4:	20 e1       	ldi	r18, 0x10	; 16
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <vfprintf+0x27c>
    1dda:	20 e1       	ldi	r18, 0x10	; 16
    1ddc:	32 e0       	ldi	r19, 0x02	; 2
    1dde:	f8 01       	movw	r30, r16
    1de0:	b7 fe       	sbrs	r11, 7
    1de2:	07 c0       	rjmp	.+14     	; 0x1df2 <vfprintf+0x290>
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	0c 5f       	subi	r16, 0xFC	; 252
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	06 c0       	rjmp	.+12     	; 0x1dfe <vfprintf+0x29c>
    1df2:	60 81       	ld	r22, Z
    1df4:	71 81       	ldd	r23, Z+1	; 0x01
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 5f       	subi	r16, 0xFE	; 254
    1dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfe:	a3 01       	movw	r20, r6
    1e00:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__ultoa_invert>
    1e04:	88 2e       	mov	r8, r24
    1e06:	86 18       	sub	r8, r6
    1e08:	fb 2d       	mov	r31, r11
    1e0a:	ff 77       	andi	r31, 0x7F	; 127
    1e0c:	3f 2e       	mov	r3, r31
    1e0e:	36 fe       	sbrs	r3, 6
    1e10:	0d c0       	rjmp	.+26     	; 0x1e2c <vfprintf+0x2ca>
    1e12:	23 2d       	mov	r18, r3
    1e14:	2e 7f       	andi	r18, 0xFE	; 254
    1e16:	a2 2e       	mov	r10, r18
    1e18:	89 14       	cp	r8, r9
    1e1a:	58 f4       	brcc	.+22     	; 0x1e32 <vfprintf+0x2d0>
    1e1c:	34 fe       	sbrs	r3, 4
    1e1e:	0b c0       	rjmp	.+22     	; 0x1e36 <vfprintf+0x2d4>
    1e20:	32 fc       	sbrc	r3, 2
    1e22:	09 c0       	rjmp	.+18     	; 0x1e36 <vfprintf+0x2d4>
    1e24:	83 2d       	mov	r24, r3
    1e26:	8e 7e       	andi	r24, 0xEE	; 238
    1e28:	a8 2e       	mov	r10, r24
    1e2a:	05 c0       	rjmp	.+10     	; 0x1e36 <vfprintf+0x2d4>
    1e2c:	b8 2c       	mov	r11, r8
    1e2e:	a3 2c       	mov	r10, r3
    1e30:	03 c0       	rjmp	.+6      	; 0x1e38 <vfprintf+0x2d6>
    1e32:	b8 2c       	mov	r11, r8
    1e34:	01 c0       	rjmp	.+2      	; 0x1e38 <vfprintf+0x2d6>
    1e36:	b9 2c       	mov	r11, r9
    1e38:	a4 fe       	sbrs	r10, 4
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <vfprintf+0x2f8>
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	e8 0d       	add	r30, r8
    1e40:	f1 1d       	adc	r31, r1
    1e42:	80 81       	ld	r24, Z
    1e44:	80 33       	cpi	r24, 0x30	; 48
    1e46:	21 f4       	brne	.+8      	; 0x1e50 <vfprintf+0x2ee>
    1e48:	9a 2d       	mov	r25, r10
    1e4a:	99 7e       	andi	r25, 0xE9	; 233
    1e4c:	a9 2e       	mov	r10, r25
    1e4e:	09 c0       	rjmp	.+18     	; 0x1e62 <vfprintf+0x300>
    1e50:	a2 fe       	sbrs	r10, 2
    1e52:	06 c0       	rjmp	.+12     	; 0x1e60 <vfprintf+0x2fe>
    1e54:	b3 94       	inc	r11
    1e56:	b3 94       	inc	r11
    1e58:	04 c0       	rjmp	.+8      	; 0x1e62 <vfprintf+0x300>
    1e5a:	8a 2d       	mov	r24, r10
    1e5c:	86 78       	andi	r24, 0x86	; 134
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <vfprintf+0x300>
    1e60:	b3 94       	inc	r11
    1e62:	a3 fc       	sbrc	r10, 3
    1e64:	11 c0       	rjmp	.+34     	; 0x1e88 <vfprintf+0x326>
    1e66:	a0 fe       	sbrs	r10, 0
    1e68:	06 c0       	rjmp	.+12     	; 0x1e76 <vfprintf+0x314>
    1e6a:	b2 14       	cp	r11, r2
    1e6c:	88 f4       	brcc	.+34     	; 0x1e90 <vfprintf+0x32e>
    1e6e:	28 0c       	add	r2, r8
    1e70:	92 2c       	mov	r9, r2
    1e72:	9b 18       	sub	r9, r11
    1e74:	0e c0       	rjmp	.+28     	; 0x1e92 <vfprintf+0x330>
    1e76:	b2 14       	cp	r11, r2
    1e78:	60 f4       	brcc	.+24     	; 0x1e92 <vfprintf+0x330>
    1e7a:	b6 01       	movw	r22, r12
    1e7c:	80 e2       	ldi	r24, 0x20	; 32
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1e84:	b3 94       	inc	r11
    1e86:	f7 cf       	rjmp	.-18     	; 0x1e76 <vfprintf+0x314>
    1e88:	b2 14       	cp	r11, r2
    1e8a:	18 f4       	brcc	.+6      	; 0x1e92 <vfprintf+0x330>
    1e8c:	2b 18       	sub	r2, r11
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <vfprintf+0x332>
    1e90:	98 2c       	mov	r9, r8
    1e92:	21 2c       	mov	r2, r1
    1e94:	a4 fe       	sbrs	r10, 4
    1e96:	10 c0       	rjmp	.+32     	; 0x1eb8 <vfprintf+0x356>
    1e98:	b6 01       	movw	r22, r12
    1e9a:	80 e3       	ldi	r24, 0x30	; 48
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1ea2:	a2 fe       	sbrs	r10, 2
    1ea4:	17 c0       	rjmp	.+46     	; 0x1ed4 <vfprintf+0x372>
    1ea6:	a1 fc       	sbrc	r10, 1
    1ea8:	03 c0       	rjmp	.+6      	; 0x1eb0 <vfprintf+0x34e>
    1eaa:	88 e7       	ldi	r24, 0x78	; 120
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <vfprintf+0x352>
    1eb0:	88 e5       	ldi	r24, 0x58	; 88
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	b6 01       	movw	r22, r12
    1eb6:	0c c0       	rjmp	.+24     	; 0x1ed0 <vfprintf+0x36e>
    1eb8:	8a 2d       	mov	r24, r10
    1eba:	86 78       	andi	r24, 0x86	; 134
    1ebc:	59 f0       	breq	.+22     	; 0x1ed4 <vfprintf+0x372>
    1ebe:	a1 fe       	sbrs	r10, 1
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <vfprintf+0x364>
    1ec2:	8b e2       	ldi	r24, 0x2B	; 43
    1ec4:	01 c0       	rjmp	.+2      	; 0x1ec8 <vfprintf+0x366>
    1ec6:	80 e2       	ldi	r24, 0x20	; 32
    1ec8:	a7 fc       	sbrc	r10, 7
    1eca:	8d e2       	ldi	r24, 0x2D	; 45
    1ecc:	b6 01       	movw	r22, r12
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1ed4:	89 14       	cp	r8, r9
    1ed6:	38 f4       	brcc	.+14     	; 0x1ee6 <vfprintf+0x384>
    1ed8:	b6 01       	movw	r22, r12
    1eda:	80 e3       	ldi	r24, 0x30	; 48
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1ee2:	9a 94       	dec	r9
    1ee4:	f7 cf       	rjmp	.-18     	; 0x1ed4 <vfprintf+0x372>
    1ee6:	8a 94       	dec	r8
    1ee8:	f3 01       	movw	r30, r6
    1eea:	e8 0d       	add	r30, r8
    1eec:	f1 1d       	adc	r31, r1
    1eee:	80 81       	ld	r24, Z
    1ef0:	b6 01       	movw	r22, r12
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1ef8:	81 10       	cpse	r8, r1
    1efa:	f5 cf       	rjmp	.-22     	; 0x1ee6 <vfprintf+0x384>
    1efc:	22 20       	and	r2, r2
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <vfprintf+0x3a0>
    1f00:	42 ce       	rjmp	.-892    	; 0x1b86 <vfprintf+0x24>
    1f02:	b6 01       	movw	r22, r12
    1f04:	80 e2       	ldi	r24, 0x20	; 32
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1f0c:	2a 94       	dec	r2
    1f0e:	f6 cf       	rjmp	.-20     	; 0x1efc <vfprintf+0x39a>
    1f10:	f6 01       	movw	r30, r12
    1f12:	86 81       	ldd	r24, Z+6	; 0x06
    1f14:	97 81       	ldd	r25, Z+7	; 0x07
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <vfprintf+0x3ba>
    1f18:	8f ef       	ldi	r24, 0xFF	; 255
    1f1a:	9f ef       	ldi	r25, 0xFF	; 255
    1f1c:	2b 96       	adiw	r28, 0x0b	; 11
    1f1e:	e2 e1       	ldi	r30, 0x12	; 18
    1f20:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__epilogue_restores__>

00001f24 <strnlen_P>:
    1f24:	fc 01       	movw	r30, r24
    1f26:	05 90       	lpm	r0, Z+
    1f28:	61 50       	subi	r22, 0x01	; 1
    1f2a:	70 40       	sbci	r23, 0x00	; 0
    1f2c:	01 10       	cpse	r0, r1
    1f2e:	d8 f7       	brcc	.-10     	; 0x1f26 <strnlen_P+0x2>
    1f30:	80 95       	com	r24
    1f32:	90 95       	com	r25
    1f34:	8e 0f       	add	r24, r30
    1f36:	9f 1f       	adc	r25, r31
    1f38:	08 95       	ret

00001f3a <strnlen>:
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	61 50       	subi	r22, 0x01	; 1
    1f3e:	70 40       	sbci	r23, 0x00	; 0
    1f40:	01 90       	ld	r0, Z+
    1f42:	01 10       	cpse	r0, r1
    1f44:	d8 f7       	brcc	.-10     	; 0x1f3c <strnlen+0x2>
    1f46:	80 95       	com	r24
    1f48:	90 95       	com	r25
    1f4a:	8e 0f       	add	r24, r30
    1f4c:	9f 1f       	adc	r25, r31
    1f4e:	08 95       	ret

00001f50 <fputc>:
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	fb 01       	movw	r30, r22
    1f5a:	23 81       	ldd	r18, Z+3	; 0x03
    1f5c:	21 fd       	sbrc	r18, 1
    1f5e:	03 c0       	rjmp	.+6      	; 0x1f66 <fputc+0x16>
    1f60:	8f ef       	ldi	r24, 0xFF	; 255
    1f62:	9f ef       	ldi	r25, 0xFF	; 255
    1f64:	2c c0       	rjmp	.+88     	; 0x1fbe <fputc+0x6e>
    1f66:	22 ff       	sbrs	r18, 2
    1f68:	16 c0       	rjmp	.+44     	; 0x1f96 <fputc+0x46>
    1f6a:	46 81       	ldd	r20, Z+6	; 0x06
    1f6c:	57 81       	ldd	r21, Z+7	; 0x07
    1f6e:	24 81       	ldd	r18, Z+4	; 0x04
    1f70:	35 81       	ldd	r19, Z+5	; 0x05
    1f72:	42 17       	cp	r20, r18
    1f74:	53 07       	cpc	r21, r19
    1f76:	44 f4       	brge	.+16     	; 0x1f88 <fputc+0x38>
    1f78:	a0 81       	ld	r26, Z
    1f7a:	b1 81       	ldd	r27, Z+1	; 0x01
    1f7c:	9d 01       	movw	r18, r26
    1f7e:	2f 5f       	subi	r18, 0xFF	; 255
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	20 83       	st	Z, r18
    1f84:	31 83       	std	Z+1, r19	; 0x01
    1f86:	8c 93       	st	X, r24
    1f88:	26 81       	ldd	r18, Z+6	; 0x06
    1f8a:	37 81       	ldd	r19, Z+7	; 0x07
    1f8c:	2f 5f       	subi	r18, 0xFF	; 255
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	26 83       	std	Z+6, r18	; 0x06
    1f92:	37 83       	std	Z+7, r19	; 0x07
    1f94:	14 c0       	rjmp	.+40     	; 0x1fbe <fputc+0x6e>
    1f96:	8b 01       	movw	r16, r22
    1f98:	ec 01       	movw	r28, r24
    1f9a:	fb 01       	movw	r30, r22
    1f9c:	00 84       	ldd	r0, Z+8	; 0x08
    1f9e:	f1 85       	ldd	r31, Z+9	; 0x09
    1fa0:	e0 2d       	mov	r30, r0
    1fa2:	09 95       	icall
    1fa4:	89 2b       	or	r24, r25
    1fa6:	e1 f6       	brne	.-72     	; 0x1f60 <fputc+0x10>
    1fa8:	d8 01       	movw	r26, r16
    1faa:	16 96       	adiw	r26, 0x06	; 6
    1fac:	8d 91       	ld	r24, X+
    1fae:	9c 91       	ld	r25, X
    1fb0:	17 97       	sbiw	r26, 0x07	; 7
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	16 96       	adiw	r26, 0x06	; 6
    1fb6:	8d 93       	st	X+, r24
    1fb8:	9c 93       	st	X, r25
    1fba:	17 97       	sbiw	r26, 0x07	; 7
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	1f 91       	pop	r17
    1fc4:	0f 91       	pop	r16
    1fc6:	08 95       	ret

00001fc8 <__ultoa_invert>:
    1fc8:	fa 01       	movw	r30, r20
    1fca:	aa 27       	eor	r26, r26
    1fcc:	28 30       	cpi	r18, 0x08	; 8
    1fce:	51 f1       	breq	.+84     	; 0x2024 <__ultoa_invert+0x5c>
    1fd0:	20 31       	cpi	r18, 0x10	; 16
    1fd2:	81 f1       	breq	.+96     	; 0x2034 <__ultoa_invert+0x6c>
    1fd4:	e8 94       	clt
    1fd6:	6f 93       	push	r22
    1fd8:	6e 7f       	andi	r22, 0xFE	; 254
    1fda:	6e 5f       	subi	r22, 0xFE	; 254
    1fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fde:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe2:	af 4f       	sbci	r26, 0xFF	; 255
    1fe4:	b1 e0       	ldi	r27, 0x01	; 1
    1fe6:	3e d0       	rcall	.+124    	; 0x2064 <__ultoa_invert+0x9c>
    1fe8:	b4 e0       	ldi	r27, 0x04	; 4
    1fea:	3c d0       	rcall	.+120    	; 0x2064 <__ultoa_invert+0x9c>
    1fec:	67 0f       	add	r22, r23
    1fee:	78 1f       	adc	r23, r24
    1ff0:	89 1f       	adc	r24, r25
    1ff2:	9a 1f       	adc	r25, r26
    1ff4:	a1 1d       	adc	r26, r1
    1ff6:	68 0f       	add	r22, r24
    1ff8:	79 1f       	adc	r23, r25
    1ffa:	8a 1f       	adc	r24, r26
    1ffc:	91 1d       	adc	r25, r1
    1ffe:	a1 1d       	adc	r26, r1
    2000:	6a 0f       	add	r22, r26
    2002:	71 1d       	adc	r23, r1
    2004:	81 1d       	adc	r24, r1
    2006:	91 1d       	adc	r25, r1
    2008:	a1 1d       	adc	r26, r1
    200a:	20 d0       	rcall	.+64     	; 0x204c <__ultoa_invert+0x84>
    200c:	09 f4       	brne	.+2      	; 0x2010 <__ultoa_invert+0x48>
    200e:	68 94       	set
    2010:	3f 91       	pop	r19
    2012:	2a e0       	ldi	r18, 0x0A	; 10
    2014:	26 9f       	mul	r18, r22
    2016:	11 24       	eor	r1, r1
    2018:	30 19       	sub	r19, r0
    201a:	30 5d       	subi	r19, 0xD0	; 208
    201c:	31 93       	st	Z+, r19
    201e:	de f6       	brtc	.-74     	; 0x1fd6 <__ultoa_invert+0xe>
    2020:	cf 01       	movw	r24, r30
    2022:	08 95       	ret
    2024:	46 2f       	mov	r20, r22
    2026:	47 70       	andi	r20, 0x07	; 7
    2028:	40 5d       	subi	r20, 0xD0	; 208
    202a:	41 93       	st	Z+, r20
    202c:	b3 e0       	ldi	r27, 0x03	; 3
    202e:	0f d0       	rcall	.+30     	; 0x204e <__ultoa_invert+0x86>
    2030:	c9 f7       	brne	.-14     	; 0x2024 <__ultoa_invert+0x5c>
    2032:	f6 cf       	rjmp	.-20     	; 0x2020 <__ultoa_invert+0x58>
    2034:	46 2f       	mov	r20, r22
    2036:	4f 70       	andi	r20, 0x0F	; 15
    2038:	40 5d       	subi	r20, 0xD0	; 208
    203a:	4a 33       	cpi	r20, 0x3A	; 58
    203c:	18 f0       	brcs	.+6      	; 0x2044 <__ultoa_invert+0x7c>
    203e:	49 5d       	subi	r20, 0xD9	; 217
    2040:	31 fd       	sbrc	r19, 1
    2042:	40 52       	subi	r20, 0x20	; 32
    2044:	41 93       	st	Z+, r20
    2046:	02 d0       	rcall	.+4      	; 0x204c <__ultoa_invert+0x84>
    2048:	a9 f7       	brne	.-22     	; 0x2034 <__ultoa_invert+0x6c>
    204a:	ea cf       	rjmp	.-44     	; 0x2020 <__ultoa_invert+0x58>
    204c:	b4 e0       	ldi	r27, 0x04	; 4
    204e:	a6 95       	lsr	r26
    2050:	97 95       	ror	r25
    2052:	87 95       	ror	r24
    2054:	77 95       	ror	r23
    2056:	67 95       	ror	r22
    2058:	ba 95       	dec	r27
    205a:	c9 f7       	brne	.-14     	; 0x204e <__ultoa_invert+0x86>
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	61 05       	cpc	r22, r1
    2060:	71 05       	cpc	r23, r1
    2062:	08 95       	ret
    2064:	9b 01       	movw	r18, r22
    2066:	ac 01       	movw	r20, r24
    2068:	0a 2e       	mov	r0, r26
    206a:	06 94       	lsr	r0
    206c:	57 95       	ror	r21
    206e:	47 95       	ror	r20
    2070:	37 95       	ror	r19
    2072:	27 95       	ror	r18
    2074:	ba 95       	dec	r27
    2076:	c9 f7       	brne	.-14     	; 0x206a <__ultoa_invert+0xa2>
    2078:	62 0f       	add	r22, r18
    207a:	73 1f       	adc	r23, r19
    207c:	84 1f       	adc	r24, r20
    207e:	95 1f       	adc	r25, r21
    2080:	a0 1d       	adc	r26, r0
    2082:	08 95       	ret

00002084 <__prologue_saves__>:
    2084:	2f 92       	push	r2
    2086:	3f 92       	push	r3
    2088:	4f 92       	push	r4
    208a:	5f 92       	push	r5
    208c:	6f 92       	push	r6
    208e:	7f 92       	push	r7
    2090:	8f 92       	push	r8
    2092:	9f 92       	push	r9
    2094:	af 92       	push	r10
    2096:	bf 92       	push	r11
    2098:	cf 92       	push	r12
    209a:	df 92       	push	r13
    209c:	ef 92       	push	r14
    209e:	ff 92       	push	r15
    20a0:	0f 93       	push	r16
    20a2:	1f 93       	push	r17
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	ca 1b       	sub	r28, r26
    20ae:	db 0b       	sbc	r29, r27
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	09 94       	ijmp

000020b6 <__epilogue_restores__>:
    20b6:	2a 88       	ldd	r2, Y+18	; 0x12
    20b8:	39 88       	ldd	r3, Y+17	; 0x11
    20ba:	48 88       	ldd	r4, Y+16	; 0x10
    20bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    20be:	6e 84       	ldd	r6, Y+14	; 0x0e
    20c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    20c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    20c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    20c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    20c8:	b9 84       	ldd	r11, Y+9	; 0x09
    20ca:	c8 84       	ldd	r12, Y+8	; 0x08
    20cc:	df 80       	ldd	r13, Y+7	; 0x07
    20ce:	ee 80       	ldd	r14, Y+6	; 0x06
    20d0:	fd 80       	ldd	r15, Y+5	; 0x05
    20d2:	0c 81       	ldd	r16, Y+4	; 0x04
    20d4:	1b 81       	ldd	r17, Y+3	; 0x03
    20d6:	aa 81       	ldd	r26, Y+2	; 0x02
    20d8:	b9 81       	ldd	r27, Y+1	; 0x01
    20da:	ce 0f       	add	r28, r30
    20dc:	d1 1d       	adc	r29, r1
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	ed 01       	movw	r28, r26
    20e4:	08 95       	ret

000020e6 <_exit>:
    20e6:	f8 94       	cli

000020e8 <__stop_program>:
    20e8:	ff cf       	rjmp	.-2      	; 0x20e8 <__stop_program>
