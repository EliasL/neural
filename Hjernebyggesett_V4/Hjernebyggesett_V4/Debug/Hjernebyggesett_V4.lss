
Hjernebyggesett_V4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00803800  00002548  000025fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024de  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006a  0000a4de  000024de  00002592  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000054  00803816  00803816  00002612  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002612  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002670  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000510  00000000  00000000  000026b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000088db  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000036de  00000000  00000000  0000b49b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000299c  00000000  00000000  0000eb79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000968  00000000  00000000  00011518  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000035e7  00000000  00000000  00011e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001916  00000000  00000000  00015467  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000388  00000000  00000000  00016d7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__vector_6>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	05 a8       	ldd	r0, Z+53	; 0x35
      a6:	4c cd       	rjmp	.-1384   	; 0xfffffb40 <__eeprom_end+0xff7efb40>
      a8:	b2 d4       	rcall	.+2404   	; 0xa0e <tinyDendrite_read_signals+0x56>
      aa:	4e b9       	out	0x0e, r20	; 14
      ac:	38 36       	cpi	r19, 0x68	; 104
      ae:	a9 02       	muls	r26, r25
      b0:	0c 50       	subi	r16, 0x0C	; 12
      b2:	b9 91       	ld	r27, Y+
      b4:	86 88       	ldd	r8, Z+22	; 0x16
      b6:	08 3c       	cpi	r16, 0xC8	; 200
      b8:	a6 aa       	std	Z+54, r10	; 0x36
      ba:	aa 2a       	or	r10, r26
      bc:	be 00       	.word	0x00be	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240

000000c2 <__trampolines_end>:
      c2:	00 40       	sbci	r16, 0x00	; 0
      c4:	7a 10       	cpse	r7, r10
      c6:	f3 5a       	subi	r31, 0xA3	; 163
      c8:	00 a0       	ldd	r0, Z+32	; 0x20
      ca:	72 4e       	sbci	r23, 0xE2	; 226
      cc:	18 09       	sbc	r17, r8
      ce:	00 10       	cpse	r0, r0
      d0:	a5 d4       	rcall	.+2378   	; 0xa1c <tinyDendrite_read_signals+0x64>
      d2:	e8 00       	.word	0x00e8	; ????
      d4:	00 e8       	ldi	r16, 0x80	; 128
      d6:	76 48       	sbci	r23, 0x86	; 134
      d8:	17 00       	.word	0x0017	; ????
      da:	00 e4       	ldi	r16, 0x40	; 64
      dc:	0b 54       	subi	r16, 0x4B	; 75
      de:	02 00       	.word	0x0002	; ????
      e0:	00 ca       	rjmp	.-3072   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
      e2:	9a 3b       	cpi	r25, 0xBA	; 186
      e4:	00 00       	nop
      e6:	00 e1       	ldi	r16, 0x10	; 16
      e8:	f5 05       	cpc	r31, r5
      ea:	00 00       	nop
      ec:	80 96       	adiw	r24, 0x20	; 32
      ee:	98 00       	.word	0x0098	; ????
      f0:	00 00       	nop
      f2:	40 42       	sbci	r20, 0x20	; 32
      f4:	0f 00       	.word	0x000f	; ????
      f6:	00 00       	nop
      f8:	a0 86       	std	Z+8, r10	; 0x08
      fa:	01 00       	.word	0x0001	; ????
      fc:	00 00       	nop
      fe:	10 27       	eor	r17, r16
     100:	00 00       	nop
     102:	00 00       	nop
     104:	e8 03       	fmulsu	r22, r16
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	64 00       	.word	0x0064	; ????
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	0a 00       	.word	0x000a	; ????
     112:	00 00       	nop
     114:	00 00       	nop
     116:	01 00       	.word	0x0001	; ????
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	2c 76       	andi	r18, 0x6C	; 108
     11e:	d8 88       	ldd	r13, Y+16	; 0x10
     120:	dc 67       	ori	r29, 0x7C	; 124
     122:	4f 08       	sbc	r4, r15
     124:	23 df       	rcall	.-442    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     126:	c1 df       	rcall	.-126    	; 0xaa <__SREG__+0x6b>
     128:	ae 59       	subi	r26, 0x9E	; 158
     12a:	e1 b1       	in	r30, 0x01	; 1
     12c:	b7 96       	adiw	r30, 0x27	; 39
     12e:	e5 e3       	ldi	r30, 0x35	; 53
     130:	e4 53       	subi	r30, 0x34	; 52
     132:	c6 3a       	cpi	r28, 0xA6	; 166
     134:	e6 51       	subi	r30, 0x16	; 22
     136:	99 76       	andi	r25, 0x69	; 105
     138:	96 e8       	ldi	r25, 0x86	; 134
     13a:	e6 c2       	rjmp	.+1484   	; 0x708 <tinyAxon_update_potential+0xea>
     13c:	84 26       	eor	r8, r20
     13e:	eb 89       	ldd	r30, Y+19	; 0x13
     140:	8c 9b       	sbis	0x11, 4	; 17
     142:	62 ed       	ldi	r22, 0xD2	; 210
     144:	40 7c       	andi	r20, 0xC0	; 192
     146:	6f fc       	.word	0xfc6f	; ????
     148:	ef bc       	out	0x2f, r14	; 47
     14a:	9c 9f       	mul	r25, r28
     14c:	40 f2       	brcs	.-112    	; 0xde <__trampolines_end+0x1c>
     14e:	ba a5       	ldd	r27, Y+42	; 0x2a
     150:	6f a5       	ldd	r22, Y+47	; 0x2f
     152:	f4 90       	lpm	r15, Z
     154:	05 5a       	subi	r16, 0xA5	; 165
     156:	2a f7       	brpl	.-54     	; 0x122 <__trampolines_end+0x60>
     158:	5c 93       	st	X, r21
     15a:	6b 6c       	ori	r22, 0xCB	; 203
     15c:	f9 67       	ori	r31, 0x79	; 121
     15e:	6d c1       	rjmp	.+730    	; 0x43a <DAC_0_initialization+0xe>
     160:	1b fc       	.word	0xfc1b	; ????
     162:	e0 e4       	ldi	r30, 0x40	; 64
     164:	0d 47       	sbci	r16, 0x7D	; 125
     166:	fe f5       	brtc	.+126    	; 0x1e6 <.do_clear_bss_loop>
     168:	20 e6       	ldi	r18, 0x60	; 96
     16a:	b5 00       	.word	0x00b5	; ????
     16c:	d0 ed       	ldi	r29, 0xD0	; 208
     16e:	90 2e       	mov	r9, r16
     170:	03 00       	.word	0x0003	; ????
     172:	94 35       	cpi	r25, 0x54	; 84
     174:	77 05       	cpc	r23, r7
     176:	00 80       	ld	r0, Z
     178:	84 1e       	adc	r8, r20
     17a:	08 00       	.word	0x0008	; ????
     17c:	00 20       	and	r0, r0
     17e:	4e 0a       	sbc	r4, r30
     180:	00 00       	nop
     182:	00 c8       	rjmp	.-4096   	; 0xfffff184 <__eeprom_end+0xff7ef184>
     184:	0c 33       	cpi	r16, 0x3C	; 60
     186:	33 33       	cpi	r19, 0x33	; 51
     188:	33 0f       	add	r19, r19
     18a:	98 6e       	ori	r25, 0xE8	; 232
     18c:	12 83       	std	Z+2, r17	; 0x02
     18e:	11 41       	sbci	r17, 0x11	; 17
     190:	ef 8d       	ldd	r30, Y+31	; 0x1f
     192:	21 14       	cp	r2, r1
     194:	89 3b       	cpi	r24, 0xB9	; 185
     196:	e6 55       	subi	r30, 0x56	; 86
     198:	16 cf       	rjmp	.-468    	; 0xffffffc6 <__eeprom_end+0xff7effc6>
     19a:	fe e6       	ldi	r31, 0x6E	; 110
     19c:	db 18       	sub	r13, r11
     19e:	d1 84       	ldd	r13, Z+9	; 0x09
     1a0:	4b 38       	cpi	r20, 0x8B	; 139
     1a2:	1b f7       	brvc	.-58     	; 0x16a <__trampolines_end+0xa8>
     1a4:	7c 1d       	adc	r23, r12
     1a6:	90 1d       	adc	r25, r0
     1a8:	a4 bb       	out	0x14, r26	; 20
     1aa:	e4 24       	eor	r14, r4
     1ac:	20 32       	cpi	r18, 0x20	; 32
     1ae:	84 72       	andi	r24, 0x24	; 36
     1b0:	5e 22       	and	r5, r30
     1b2:	81 00       	.word	0x0081	; ????
     1b4:	c9 f1       	breq	.+114    	; 0x228 <main+0x28>
     1b6:	24 ec       	ldi	r18, 0xC4	; 196
     1b8:	a1 e5       	ldi	r26, 0x51	; 81
     1ba:	3d 27       	eor	r19, r29

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	df e3       	ldi	r29, 0x3F	; 63
     1c6:	de bf       	out	0x3e, r29	; 62

000001c8 <__do_copy_data>:
     1c8:	18 e3       	ldi	r17, 0x38	; 56
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b8 e3       	ldi	r27, 0x38	; 56
     1ce:	e8 e4       	ldi	r30, 0x48	; 72
     1d0:	f5 e2       	ldi	r31, 0x25	; 37
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
     1d4:	05 90       	lpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	a6 31       	cpi	r26, 0x16	; 22
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>

000001de <__do_clear_bss>:
     1de:	28 e3       	ldi	r18, 0x38	; 56
     1e0:	a6 e1       	ldi	r26, 0x16	; 22
     1e2:	b8 e3       	ldi	r27, 0x38	; 56
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	aa 36       	cpi	r26, 0x6A	; 106
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 00 01 	call	0x200	; 0x200 <main>
     1f2:	0c 94 6d 12 	jmp	0x24da	; 0x24da <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <atmel_start_init>:
     1fa:	0e 94 22 02 	call	0x444	; 0x444 <system_init>
     1fe:	08 95       	ret

00000200 <main>:

int main(void)
{	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     200:	0e 94 fd 00 	call	0x1fa	; 0x1fa <atmel_start_init>
	For some reason, instead of the reference voltage being 4.32v, it is 3.3v. 
	A plausible explanation is that the microchip does not up the voltage, so that if the microchip is only ever 
	supplied with 3.3v, it will output 3.3v as the max.
	*/
	
	VREF.CTRLA |= VREF_DAC0REFSEL_4V34_gc;
     204:	e0 ea       	ldi	r30, 0xA0	; 160
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	83 60       	ori	r24, 0x03	; 3
     20c:	80 83       	st	Z, r24
	while (1)
	{
		// We don't want to update the neuron too often because of various reasons. The tinyISR_getflag is set every ms, and so the loop is only run once every ms.  
		if(tinyISR_getflag())
     20e:	0e 94 2b 06 	call	0xc56	; 0xc56 <tinyISR_getflag>
     212:	88 23       	and	r24, r24
     214:	e1 f3       	breq	.-8      	; 0x20e <main+0xe>
		{
			tinyCharge_update_charging_mode();
     216:	0e 94 67 04 	call	0x8ce	; 0x8ce <tinyCharge_update_charging_mode>
			
			if(tinyCharge_is_connected_to_charger()){
     21a:	0e 94 2f 04 	call	0x85e	; 0x85e <tinyCharge_is_connected_to_charger>
     21e:	88 23       	and	r24, r24
     220:	b9 f0       	breq	.+46     	; 0x250 <main+0x50>
				// Charge loop
				
				if(tinyCharge_is_fully_charged()){
     222:	0e 94 32 04 	call	0x864	; 0x864 <tinyCharge_is_fully_charged>
     226:	88 23       	and	r24, r24
     228:	49 f0       	breq	.+18     	; 0x23c <main+0x3c>
					tinyLED_set_color(INN_LED, CHARGING_DONE_COLOR);
     22a:	63 e0       	ldi	r22, 0x03	; 3
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 42 06 	call	0xc84	; 0xc84 <tinyLED_set_color>
					tinyLED_set_color(OUT_LED, OFF);
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 42 06 	call	0xc84	; 0xc84 <tinyLED_set_color>
     23a:	11 c0       	rjmp	.+34     	; 0x25e <main+0x5e>
				}
				else{
					tinyLED_set_color_mode(OUT_LED, CHARGING_COLOR, SWING);
     23c:	42 e0       	ldi	r20, 0x02	; 2
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 53 06 	call	0xca6	; 0xca6 <tinyLED_set_color_mode>
					tinyLED_set_color(INN_LED, OFF);
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 42 06 	call	0xc84	; 0xc84 <tinyLED_set_color>
     24e:	07 c0       	rjmp	.+14     	; 0x25e <main+0x5e>
			}
			else{
				// Main loop			
				
				// Set LED
				if(tinyLED_get_color(OUT_LED) == OFF && PING_COLOR != OFF){
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	0e 94 4b 06 	call	0xc96	; 0xc96 <tinyLED_get_color>
					tinyLED_set_color_mode(OUT_LED, PING_COLOR, PING);
				}
				
				// Update button	
				tinyButton_update();
     256:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <tinyButton_update>
				
				// Update the potential (This is where most of the important stuff happens)
				tinyPotential_update();
     25a:	0e 94 75 08 	call	0x10ea	; 0x10ea <tinyPotential_update>
			}
			// Update LED
			tinyLED_update();
     25e:	0e 94 93 06 	call	0xd26	; 0xd26 <tinyLED_update>
				
			// Switch transistors
			tinyCharge_set_transistors();
     262:	0e 94 76 04 	call	0x8ec	; 0x8ec <tinyCharge_set_transistors>
			
			// Prepare for next cycle
			tinyISR_setflag(false);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 28 06 	call	0xc50	; 0xc50 <tinyISR_setflag>
			tinyDebugger_send_uint32("time", tinyTime_now());
     26c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <tinyTime_now>
     270:	ab 01       	movw	r20, r22
     272:	bc 01       	movw	r22, r24
     274:	8e ed       	ldi	r24, 0xDE	; 222
     276:	94 ea       	ldi	r25, 0xA4	; 164
     278:	0e 94 7e 04 	call	0x8fc	; 0x8fc <tinyDebugger_send_uint32>
			tinyDebugger_end_line();
     27c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <tinyDebugger_end_line>
     280:	c6 cf       	rjmp	.-116    	; 0x20e <main+0xe>

00000282 <ADC_0_init>:
     282:	e0 e4       	ldi	r30, 0x40	; 64
     284:	f6 e0       	ldi	r31, 0x06	; 6
     286:	80 e1       	ldi	r24, 0x10	; 16
     288:	82 83       	std	Z+2, r24	; 0x02
     28a:	85 e0       	ldi	r24, 0x05	; 5
     28c:	80 83       	st	Z, r24
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	08 95       	ret

00000292 <ADC_0_is_conversion_done>:
     292:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     296:	81 70       	andi	r24, 0x01	; 1
     298:	08 95       	ret

0000029a <ADC_0_get_conversion>:
     29a:	e0 e4       	ldi	r30, 0x40	; 64
     29c:	f6 e0       	ldi	r31, 0x06	; 6
     29e:	86 83       	std	Z+6, r24	; 0x06
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 87       	std	Z+8, r24	; 0x08
     2a4:	0e 94 49 01 	call	0x292	; 0x292 <ADC_0_is_conversion_done>
     2a8:	88 23       	and	r24, r24
     2aa:	e1 f3       	breq	.-8      	; 0x2a4 <ADC_0_get_conversion+0xa>
     2ac:	e0 e4       	ldi	r30, 0x40	; 64
     2ae:	f6 e0       	ldi	r31, 0x06	; 6
     2b0:	20 89       	ldd	r18, Z+16	; 0x10
     2b2:	31 89       	ldd	r19, Z+17	; 0x11
     2b4:	93 85       	ldd	r25, Z+11	; 0x0b
     2b6:	91 60       	ori	r25, 0x01	; 1
     2b8:	93 87       	std	Z+11, r25	; 0x0b
     2ba:	c9 01       	movw	r24, r18
     2bc:	08 95       	ret

000002be <BOD_init>:
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	08 95       	ret

000002c2 <DIGITAL_GLUE_LOGIC_0_init>:
     2c2:	e0 ec       	ldi	r30, 0xC0	; 192
     2c4:	f1 e0       	ldi	r31, 0x01	; 1
     2c6:	28 ea       	ldi	r18, 0xA8	; 168
     2c8:	20 87       	std	Z+8, r18	; 0x08
     2ca:	98 e0       	ldi	r25, 0x08	; 8
     2cc:	97 83       	std	Z+7, r25	; 0x07
     2ce:	8b eb       	ldi	r24, 0xBB	; 187
     2d0:	86 83       	std	Z+6, r24	; 0x06
     2d2:	39 e0       	ldi	r19, 0x09	; 9
     2d4:	35 83       	std	Z+5, r19	; 0x05
     2d6:	24 87       	std	Z+12, r18	; 0x0c
     2d8:	93 87       	std	Z+11, r25	; 0x0b
     2da:	82 87       	std	Z+10, r24	; 0x0a
     2dc:	81 e4       	ldi	r24, 0x41	; 65
     2de:	80 83       	st	Z, r24
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	08 95       	ret

000002e4 <CLKCTRL_init>:
     2e4:	47 e0       	ldi	r20, 0x07	; 7
     2e6:	68 ed       	ldi	r22, 0xD8	; 216
     2e8:	8c e7       	ldi	r24, 0x7C	; 124
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 4f 02 	call	0x49e	; 0x49e <protected_write_io>
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	68 ed       	ldi	r22, 0xD8	; 216
     2f4:	81 e6       	ldi	r24, 0x61	; 97
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 4f 02 	call	0x49e	; 0x49e <protected_write_io>
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret

00000300 <CPUINT_init>:
     300:	78 94       	sei
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	08 95       	ret

00000306 <DAC_0_init>:
     306:	81 e4       	ldi	r24, 0x41	; 65
     308:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	08 95       	ret

00000310 <DAC_0_uninit>:
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	08 95       	ret

0000031a <DAC_0_enable>:
     31a:	e0 ea       	ldi	r30, 0xA0	; 160
     31c:	f6 e0       	ldi	r31, 0x06	; 6
     31e:	80 81       	ld	r24, Z
     320:	81 60       	ori	r24, 0x01	; 1
     322:	80 83       	st	Z, r24
     324:	08 95       	ret

00000326 <DAC_0_disable>:
     326:	e0 ea       	ldi	r30, 0xA0	; 160
     328:	f6 e0       	ldi	r31, 0x06	; 6
     32a:	80 81       	ld	r24, Z
     32c:	8e 7f       	andi	r24, 0xFE	; 254
     32e:	80 83       	st	Z, r24
     330:	08 95       	ret

00000332 <DAC_0_set_output>:
     332:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     336:	08 95       	ret

00000338 <mcu_init>:
     338:	e0 e1       	ldi	r30, 0x10	; 16
     33a:	f4 e0       	ldi	r31, 0x04	; 4
     33c:	80 81       	ld	r24, Z
     33e:	88 60       	ori	r24, 0x08	; 8
     340:	81 93       	st	Z+, r24
     342:	e8 31       	cpi	r30, 0x18	; 24
     344:	84 e0       	ldi	r24, 0x04	; 4
     346:	f8 07       	cpc	r31, r24
     348:	c9 f7       	brne	.-14     	; 0x33c <mcu_init+0x4>
     34a:	e0 e3       	ldi	r30, 0x30	; 48
     34c:	f4 e0       	ldi	r31, 0x04	; 4
     34e:	80 81       	ld	r24, Z
     350:	88 60       	ori	r24, 0x08	; 8
     352:	81 93       	st	Z+, r24
     354:	e8 33       	cpi	r30, 0x38	; 56
     356:	84 e0       	ldi	r24, 0x04	; 4
     358:	f8 07       	cpc	r31, r24
     35a:	c9 f7       	brne	.-14     	; 0x34e <mcu_init+0x16>
     35c:	e0 e5       	ldi	r30, 0x50	; 80
     35e:	f4 e0       	ldi	r31, 0x04	; 4
     360:	80 81       	ld	r24, Z
     362:	88 60       	ori	r24, 0x08	; 8
     364:	81 93       	st	Z+, r24
     366:	e8 35       	cpi	r30, 0x58	; 88
     368:	84 e0       	ldi	r24, 0x04	; 4
     36a:	f8 07       	cpc	r31, r24
     36c:	c9 f7       	brne	.-14     	; 0x360 <mcu_init+0x28>
     36e:	08 95       	ret

00000370 <ADC_0_initialization>:
     370:	e5 e1       	ldi	r30, 0x15	; 21
     372:	f4 e0       	ldi	r31, 0x04	; 4
     374:	80 81       	ld	r24, Z
     376:	88 7f       	andi	r24, 0xF8	; 248
     378:	84 60       	ori	r24, 0x04	; 4
     37a:	80 83       	st	Z, r24
     37c:	80 81       	ld	r24, Z
     37e:	87 7f       	andi	r24, 0xF7	; 247
     380:	80 83       	st	Z, r24
     382:	e7 e1       	ldi	r30, 0x17	; 23
     384:	f4 e0       	ldi	r31, 0x04	; 4
     386:	80 81       	ld	r24, Z
     388:	88 7f       	andi	r24, 0xF8	; 248
     38a:	84 60       	ori	r24, 0x04	; 4
     38c:	80 83       	st	Z, r24
     38e:	80 81       	ld	r24, Z
     390:	87 7f       	andi	r24, 0xF7	; 247
     392:	80 83       	st	Z, r24
     394:	e0 e5       	ldi	r30, 0x50	; 80
     396:	f4 e0       	ldi	r31, 0x04	; 4
     398:	80 81       	ld	r24, Z
     39a:	88 7f       	andi	r24, 0xF8	; 248
     39c:	84 60       	ori	r24, 0x04	; 4
     39e:	80 83       	st	Z, r24
     3a0:	80 81       	ld	r24, Z
     3a2:	87 7f       	andi	r24, 0xF7	; 247
     3a4:	80 83       	st	Z, r24
     3a6:	e1 e5       	ldi	r30, 0x51	; 81
     3a8:	f4 e0       	ldi	r31, 0x04	; 4
     3aa:	80 81       	ld	r24, Z
     3ac:	88 7f       	andi	r24, 0xF8	; 248
     3ae:	84 60       	ori	r24, 0x04	; 4
     3b0:	80 83       	st	Z, r24
     3b2:	80 81       	ld	r24, Z
     3b4:	87 7f       	andi	r24, 0xF7	; 247
     3b6:	80 83       	st	Z, r24
     3b8:	e3 e5       	ldi	r30, 0x53	; 83
     3ba:	f4 e0       	ldi	r31, 0x04	; 4
     3bc:	80 81       	ld	r24, Z
     3be:	88 7f       	andi	r24, 0xF8	; 248
     3c0:	84 60       	ori	r24, 0x04	; 4
     3c2:	80 83       	st	Z, r24
     3c4:	80 81       	ld	r24, Z
     3c6:	87 7f       	andi	r24, 0xF7	; 247
     3c8:	80 83       	st	Z, r24
     3ca:	0e 94 41 01 	call	0x282	; 0x282 <ADC_0_init>
     3ce:	08 95       	ret

000003d0 <USART_0_initialization>:
     3d0:	23 98       	cbi	0x04, 3	; 4
     3d2:	e3 e3       	ldi	r30, 0x33	; 51
     3d4:	f4 e0       	ldi	r31, 0x04	; 4
     3d6:	80 81       	ld	r24, Z
     3d8:	87 7f       	andi	r24, 0xF7	; 247
     3da:	80 83       	st	Z, r24
     3dc:	22 9a       	sbi	0x04, 2	; 4
     3de:	2a 98       	cbi	0x05, 2	; 5
     3e0:	0e 94 89 02 	call	0x512	; 0x512 <USART_0_init>
     3e4:	08 95       	ret

000003e6 <TIMER_0_initialization>:
     3e6:	25 9a       	sbi	0x04, 5	; 4
     3e8:	2d 98       	cbi	0x05, 5	; 5
     3ea:	e0 e0       	ldi	r30, 0x00	; 0
     3ec:	f2 e0       	ldi	r31, 0x02	; 2
     3ee:	82 81       	ldd	r24, Z+2	; 0x02
     3f0:	84 60       	ori	r24, 0x04	; 4
     3f2:	82 83       	std	Z+2, r24	; 0x02
     3f4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <TIMER_0_init>
     3f8:	08 95       	ret

000003fa <DIGITAL_GLUE_LOGIC_0_initialization>:
     3fa:	24 9a       	sbi	0x04, 4	; 4
     3fc:	2c 98       	cbi	0x05, 4	; 5
     3fe:	e0 e0       	ldi	r30, 0x00	; 0
     400:	f2 e0       	ldi	r31, 0x02	; 2
     402:	80 81       	ld	r24, Z
     404:	80 61       	ori	r24, 0x10	; 16
     406:	80 83       	st	Z, r24
     408:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIGITAL_GLUE_LOGIC_0_init>
     40c:	08 95       	ret

0000040e <SPI_0_initialization>:
     40e:	02 98       	cbi	0x00, 2	; 0
     410:	e2 e1       	ldi	r30, 0x12	; 18
     412:	f4 e0       	ldi	r31, 0x04	; 4
     414:	80 81       	ld	r24, Z
     416:	87 7f       	andi	r24, 0xF7	; 247
     418:	80 83       	st	Z, r24
     41a:	01 9a       	sbi	0x00, 1	; 0
     41c:	09 98       	cbi	0x01, 1	; 1
     41e:	03 9a       	sbi	0x00, 3	; 0
     420:	0b 98       	cbi	0x01, 3	; 1
     422:	04 9a       	sbi	0x00, 4	; 0
     424:	0c 98       	cbi	0x01, 4	; 1
     426:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_0_init>
     42a:	08 95       	ret

0000042c <DAC_0_initialization>:
     42c:	e6 e1       	ldi	r30, 0x16	; 22
     42e:	f4 e0       	ldi	r31, 0x04	; 4
     430:	80 81       	ld	r24, Z
     432:	88 7f       	andi	r24, 0xF8	; 248
     434:	84 60       	ori	r24, 0x04	; 4
     436:	80 83       	st	Z, r24
     438:	80 81       	ld	r24, Z
     43a:	87 7f       	andi	r24, 0xF7	; 247
     43c:	80 83       	st	Z, r24
     43e:	0e 94 83 01 	call	0x306	; 0x306 <DAC_0_init>
     442:	08 95       	ret

00000444 <system_init>:
     444:	0e 94 9c 01 	call	0x338	; 0x338 <mcu_init>
     448:	26 98       	cbi	0x04, 6	; 4
     44a:	e6 e3       	ldi	r30, 0x36	; 54
     44c:	f4 e0       	ldi	r31, 0x04	; 4
     44e:	80 81       	ld	r24, Z
     450:	87 7f       	andi	r24, 0xF7	; 247
     452:	80 83       	st	Z, r24
     454:	27 98       	cbi	0x04, 7	; 4
     456:	e7 e3       	ldi	r30, 0x37	; 55
     458:	f4 e0       	ldi	r31, 0x04	; 4
     45a:	80 81       	ld	r24, Z
     45c:	87 7f       	andi	r24, 0xF7	; 247
     45e:	80 83       	st	Z, r24
     460:	42 98       	cbi	0x08, 2	; 8
     462:	e2 e5       	ldi	r30, 0x52	; 82
     464:	f4 e0       	ldi	r31, 0x04	; 4
     466:	80 81       	ld	r24, Z
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	80 83       	st	Z, r24
     46c:	45 9a       	sbi	0x08, 5	; 8
     46e:	4d 9a       	sbi	0x09, 5	; 9
     470:	0e 94 72 01 	call	0x2e4	; 0x2e4 <CLKCTRL_init>
     474:	0e 94 53 02 	call	0x4a6	; 0x4a6 <RTC_0_init>
     478:	0e 94 b8 01 	call	0x370	; 0x370 <ADC_0_initialization>
     47c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <USART_0_initialization>
     480:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <TIMER_0_initialization>
     484:	0e 94 fd 01 	call	0x3fa	; 0x3fa <DIGITAL_GLUE_LOGIC_0_initialization>
     488:	0e 94 07 02 	call	0x40e	; 0x40e <SPI_0_initialization>
     48c:	0e 94 16 02 	call	0x42c	; 0x42c <DAC_0_initialization>
     490:	0e 94 80 01 	call	0x300	; 0x300 <CPUINT_init>
     494:	0e 94 6f 02 	call	0x4de	; 0x4de <SLPCTRL_init>
     498:	0e 94 5f 01 	call	0x2be	; 0x2be <BOD_init>
     49c:	08 95       	ret

0000049e <protected_write_io>:
     49e:	fc 01       	movw	r30, r24
     4a0:	64 bf       	out	0x34, r22	; 52
     4a2:	40 83       	st	Z, r20
     4a4:	08 95       	ret

000004a6 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     4a6:	e0 e4       	ldi	r30, 0x40	; 64
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	81 81       	ldd	r24, Z+1	; 0x01
     4ac:	81 11       	cpse	r24, r1
     4ae:	fd cf       	rjmp	.-6      	; 0x4aa <RTC_0_init+0x4>
	}

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	RTC.CNT = 0x20; /* Counter: 0x20 */
     4b0:	e0 e4       	ldi	r30, 0x40	; 64
     4b2:	f1 e0       	ldi	r31, 0x01	; 1
     4b4:	80 e2       	ldi	r24, 0x20	; 32
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	80 87       	std	Z+8, r24	; 0x08
     4ba:	91 87       	std	Z+9, r25	; 0x09

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     4bc:	81 e8       	ldi	r24, 0x81	; 129
     4be:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x20 / TIMESCALE; /* Period: 0x20 */
     4c0:	80 e8       	ldi	r24, 0x80	; 128
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	82 87       	std	Z+10, r24	; 0x0a
     4c6:	93 87       	std	Z+11, r25	; 0x0b

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	RTC.DBGCTRL = 1 << RTC_DBGRUN_bp; /* Run in debug: enabled */
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	85 83       	std	Z+5, r24	; 0x05

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
     4cc:	82 83       	std	Z+2, r24	; 0x02
	              | 1 << RTC_OVF_bp; /* Overflow Interrupt enable: enabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     4ce:	81 89       	ldd	r24, Z+17	; 0x11
     4d0:	81 11       	cpse	r24, r1
     4d2:	fd cf       	rjmp	.-6      	; 0x4ce <RTC_0_init+0x28>
	}

	RTC.PITCTRLA = RTC_PERIOD_OFF_gc    /* Off */
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	08 95       	ret

000004de <SLPCTRL_init>:
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	08 95       	ret

000004e2 <SPI_0_init>:
     4e2:	e0 e2       	ldi	r30, 0x20	; 32
     4e4:	f8 e0       	ldi	r31, 0x08	; 8
     4e6:	83 e2       	ldi	r24, 0x23	; 35
     4e8:	80 83       	st	Z, r24
     4ea:	84 e0       	ldi	r24, 0x04	; 4
     4ec:	81 83       	std	Z+1, r24	; 0x01
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	08 95       	ret

000004f2 <TIMER_0_init>:
     4f2:	e0 e0       	ldi	r30, 0x00	; 0
     4f4:	fa e0       	ldi	r31, 0x0A	; 10
     4f6:	84 e0       	ldi	r24, 0x04	; 4
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	84 a7       	std	Z+44, r24	; 0x2c
     4fc:	95 a7       	std	Z+45, r25	; 0x2d
     4fe:	83 e4       	ldi	r24, 0x43	; 67
     500:	81 83       	std	Z+1, r24	; 0x01
     502:	84 e0       	ldi	r24, 0x04	; 4
     504:	82 83       	std	Z+2, r24	; 0x02
     506:	87 e0       	ldi	r24, 0x07	; 7
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	86 a3       	std	Z+38, r24	; 0x26
     50c:	97 a3       	std	Z+39, r25	; 0x27
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	08 95       	ret

00000512 <USART_0_init>:
     512:	e0 e0       	ldi	r30, 0x00	; 0
     514:	f8 e0       	ldi	r31, 0x08	; 8
     516:	8b e5       	ldi	r24, 0x5B	; 91
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	80 87       	std	Z+8, r24	; 0x08
     51c:	91 87       	std	Z+9, r25	; 0x09
     51e:	80 ec       	ldi	r24, 0xC0	; 192
     520:	86 83       	std	Z+6, r24	; 0x06
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	98 e3       	ldi	r25, 0x38	; 56
     526:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <__iob+0x2>
     52a:	90 93 67 38 	sts	0x3867, r25	; 0x803867 <__iob+0x3>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	08 95       	ret

00000532 <USART_0_write>:
     532:	e0 e0       	ldi	r30, 0x00	; 0
     534:	f8 e0       	ldi	r31, 0x08	; 8
     536:	94 81       	ldd	r25, Z+4	; 0x04
     538:	95 ff       	sbrs	r25, 5
     53a:	fd cf       	rjmp	.-6      	; 0x536 <USART_0_write+0x4>
     53c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     540:	08 95       	ret

00000542 <USART_0_printCHAR>:
     542:	0e 94 99 02 	call	0x532	; 0x532 <USART_0_write>
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	08 95       	ret

0000054c <tinyAxon_add_pulse>:
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
	{
		if(pulse_queue[i] == 0){
     54c:	20 91 16 38 	lds	r18, 0x3816	; 0x803816 <__data_end>
     550:	30 91 17 38 	lds	r19, 0x3817	; 0x803817 <__data_end+0x1>
     554:	23 2b       	or	r18, r19
     556:	51 f0       	breq	.+20     	; 0x56c <tinyAxon_add_pulse+0x20>
     558:	e8 e1       	ldi	r30, 0x18	; 24
     55a:	f8 e3       	ldi	r31, 0x38	; 56
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	b9 01       	movw	r22, r18
     562:	41 91       	ld	r20, Z+
     564:	51 91       	ld	r21, Z+
     566:	45 2b       	or	r20, r21
     568:	81 f4       	brne	.+32     	; 0x58a <tinyAxon_add_pulse+0x3e>
     56a:	02 c0       	rjmp	.+4      	; 0x570 <tinyAxon_add_pulse+0x24>
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
			pulse_queue[i] = new_pulse;
     570:	66 0f       	add	r22, r22
     572:	77 1f       	adc	r23, r23
     574:	fb 01       	movw	r30, r22
     576:	ea 5e       	subi	r30, 0xEA	; 234
     578:	f7 4c       	sbci	r31, 0xC7	; 199
     57a:	80 83       	st	Z, r24
     57c:	91 83       	std	Z+1, r25	; 0x01
			pulses_in_queue++;
     57e:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     582:	8f 5f       	subi	r24, 0xFF	; 255
     584:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <pulses_in_queue>
			// We return so we only ever add one
			break;
     588:	08 95       	ret
     58a:	2f 5f       	subi	r18, 0xFF	; 255
     58c:	3f 4f       	sbci	r19, 0xFF	; 255
*/
static void tinyAxon_add_pulse(uint16_t new_pulse)
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     58e:	2a 30       	cpi	r18, 0x0A	; 10
     590:	31 05       	cpc	r19, r1
     592:	31 f7       	brne	.-52     	; 0x560 <tinyAxon_add_pulse+0x14>
     594:	08 95       	ret

00000596 <tinyAxon_is_firing>:
// DAC has no DAC_0_get_output, so we keep track of this here.
uint8_t axonOutputValue = 0;


_Bool tinyAxon_is_firing(){
	return axonOutputValue != NO_SIGNAL_OUTPUT;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <axonOutputValue>
     59c:	91 11       	cpse	r25, r1
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <tinyAxon_is_firing+0xc>
     5a0:	80 e0       	ldi	r24, 0x00	; 0
}
     5a2:	08 95       	ret

000005a4 <find_newest_pulse>:
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
     5a4:	40 91 16 38 	lds	r20, 0x3816	; 0x803816 <__data_end>
     5a8:	50 91 17 38 	lds	r21, 0x3817	; 0x803817 <__data_end+0x1>
     5ac:	e8 e1       	ldi	r30, 0x18	; 24
     5ae:	f8 e3       	ldi	r31, 0x38	; 56
	
// This function will be used with pulse_queue to find the newest pulse
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
     5b0:	80 e0       	ldi	r24, 0x00	; 0
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     5b2:	91 e0       	ldi	r25, 0x01	; 1
		if (pulse_queue[current_index] > max) {
     5b4:	21 91       	ld	r18, Z+
     5b6:	31 91       	ld	r19, Z+
     5b8:	42 17       	cp	r20, r18
     5ba:	53 07       	cpc	r21, r19
     5bc:	10 f4       	brcc	.+4      	; 0x5c2 <find_newest_pulse+0x1e>
     5be:	89 2f       	mov	r24, r25
			return_index = current_index;
			max = pulse_queue[current_index];
     5c0:	a9 01       	movw	r20, r18
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     5c2:	9f 5f       	subi	r25, 0xFF	; 255
     5c4:	9a 30       	cpi	r25, 0x0A	; 10
     5c6:	b1 f7       	brne	.-20     	; 0x5b4 <find_newest_pulse+0x10>
			return_index = current_index;
			max = pulse_queue[current_index];
		}
	}
	return return_index;
}
     5c8:	08 95       	ret

000005ca <tinyAxon_stop_sending_pulse>:
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
}

void tinyAxon_stop_sending_pulse()
{
	DAC_0_set_output(NO_SIGNAL_OUTPUT);
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 99 01 	call	0x332	; 0x332 <DAC_0_set_output>
	axonOutputValue=NO_SIGNAL_OUTPUT;
     5d2:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <axonOutputValue>
     5d6:	08 95       	ret

000005d8 <tinyAxon_remove_pulse>:

/*
If the potential is very low, we want to try to remove a pulse.
*/
bool tinyAxon_remove_pulse(void)
{
     5d8:	cf 93       	push	r28
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
     5da:	c0 91 2a 38 	lds	r28, 0x382A	; 0x80382a <pulses_in_queue>
     5de:	cc 23       	and	r28, r28
     5e0:	c9 f0       	breq	.+50     	; 0x614 <tinyAxon_remove_pulse+0x3c>
		//There was no pulse to remove.
		return false;
	}
	else{
		// If we are to remove a pulse, we want to remove the one that will fire last.
		uint8_t pulse_index = find_newest_pulse();
     5e2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <find_newest_pulse>
		uint16_t newest_pulse = pulse_queue[pulse_index];
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	fc 01       	movw	r30, r24
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	ea 5e       	subi	r30, 0xEA	; 234
     5f0:	f7 4c       	sbci	r31, 0xC7	; 199
	
		// Now we want to check if the pulse is too far away to be affected by the low potential, or close enough that we decide to remove it.
		// (When we say that the pulse is too far away, it refers to the biological process of how the potential spreads from Dendrites to axon).
		if(newest_pulse > PULSE_NO_RETURN_TIME){
     5f2:	20 81       	ld	r18, Z
     5f4:	31 81       	ldd	r19, Z+1	; 0x01
     5f6:	2d 33       	cpi	r18, 0x3D	; 61
     5f8:	31 05       	cpc	r19, r1
     5fa:	70 f0       	brcs	.+28     	; 0x618 <tinyAxon_remove_pulse+0x40>
			// We decided to remove the pulse
			pulse_queue[pulse_index] = 0;
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	fc 01       	movw	r30, r24
     602:	ea 5e       	subi	r30, 0xEA	; 234
     604:	f7 4c       	sbci	r31, 0xC7	; 199
     606:	10 82       	st	Z, r1
     608:	11 82       	std	Z+1, r1	; 0x01
			pulses_in_queue--;
     60a:	c1 50       	subi	r28, 0x01	; 1
     60c:	c0 93 2a 38 	sts	0x382A, r28	; 0x80382a <pulses_in_queue>
			return true;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	03 c0       	rjmp	.+6      	; 0x61a <tinyAxon_remove_pulse+0x42>
bool tinyAxon_remove_pulse(void)
{
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
		//There was no pulse to remove.
		return false;
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	01 c0       	rjmp	.+2      	; 0x61a <tinyAxon_remove_pulse+0x42>
			pulses_in_queue--;
			return true;
		}
		// Here we have found that there is a pulse queued, but it is old enough to let pass anyway, so now we need to put it back into the queue.
		else{
			return false;
     618:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <tinyAxon_update_potential>:
/*
Decides whether or not the axon should fire
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	6b 01       	movw	r12, r22
     628:	7c 01       	movw	r14, r24
	//While the neuron has enough potential to fire, we want to fire more
	while (potential >= THRESHOLD_POTENTIAL)
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	48 ec       	ldi	r20, 0xC8	; 200
     630:	51 e4       	ldi	r21, 0x41	; 65
     632:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__gesf2>
     636:	88 23       	and	r24, r24
     638:	bc f1       	brlt	.+110    	; 0x6a8 <tinyAxon_update_potential+0x8a>
	{
		// We have to check if there are already queued pulses, so that the frequency never exceeds FIRE_DELAY
		if(pulses_in_queue>0){
     63a:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     63e:	88 23       	and	r24, r24
     640:	b1 f0       	breq	.+44     	; 0x66e <tinyAxon_update_potential+0x50>
			uint16_t newest_pulse = pulse_queue[find_newest_pulse()];
     642:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <find_newest_pulse>
     646:	e8 2f       	mov	r30, r24
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	ea 5e       	subi	r30, 0xEA	; 234
     650:	f7 4c       	sbci	r31, 0xC7	; 199
			
			// There is at least one pulse in the queue, and it is "so close", that we need to offset the new pulse, so that we keep at least
			// one FIRE_DELAY between each pulse
			if(newest_pulse + FIRE_DELAY > TRAVLE_DELAY){
     652:	80 81       	ld	r24, Z
     654:	91 81       	ldd	r25, Z+1	; 0x01
     656:	0a 96       	adiw	r24, 0x0a	; 10
     658:	85 36       	cpi	r24, 0x65	; 101
     65a:	91 05       	cpc	r25, r1
     65c:	18 f0       	brcs	.+6      	; 0x664 <tinyAxon_update_potential+0x46>
				tinyAxon_add_pulse(newest_pulse + FIRE_DELAY);
     65e:	0e 94 a6 02 	call	0x54c	; 0x54c <tinyAxon_add_pulse>
     662:	09 c0       	rjmp	.+18     	; 0x676 <tinyAxon_update_potential+0x58>
			}
			// There is at least one pulse in the queue, but it's "far enough away" to ignore
			else{
				tinyAxon_add_pulse(TRAVLE_DELAY);
     664:	84 e6       	ldi	r24, 0x64	; 100
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 a6 02 	call	0x54c	; 0x54c <tinyAxon_add_pulse>
     66c:	04 c0       	rjmp	.+8      	; 0x676 <tinyAxon_update_potential+0x58>
			}
		}
		// There are no pulses in the queue, so we add a pulse as normal
		else{
			tinyAxon_add_pulse(TRAVLE_DELAY);		
     66e:	84 e6       	ldi	r24, 0x64	; 100
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 a6 02 	call	0x54c	; 0x54c <tinyAxon_add_pulse>
		}
		
		potential += POSTFIRE_POTENTIAL_REACTION; // This is usually defined as a negative value, don't be confused by the +=
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	48 ec       	ldi	r20, 0xC8	; 200
     67c:	51 e4       	ldi	r21, 0x41	; 65
     67e:	c7 01       	movw	r24, r14
     680:	b6 01       	movw	r22, r12
     682:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__subsf3>
     686:	6b 01       	movw	r12, r22
     688:	7c 01       	movw	r14, r24
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     68a:	44 e0       	ldi	r20, 0x04	; 4
     68c:	63 e0       	ldi	r22, 0x03	; 3
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 53 06 	call	0xca6	; 0xca6 <tinyLED_set_color_mode>
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
	//While the neuron has enough potential to fire, we want to fire more
	while (potential >= THRESHOLD_POTENTIAL)
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	48 ec       	ldi	r20, 0xC8	; 200
     69a:	51 e4       	ldi	r21, 0x41	; 65
     69c:	c7 01       	movw	r24, r14
     69e:	b6 01       	movw	r22, r12
     6a0:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__gesf2>
     6a4:	88 23       	and	r24, r24
     6a6:	4c f6       	brge	.-110    	; 0x63a <tinyAxon_update_potential+0x1c>
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
	}
	
	// If the neuron has a very low potential, we want to remove a pulse from the queue (if there is one)
	if(potential < -THRESHOLD_POTENTIAL)
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	48 ec       	ldi	r20, 0xC8	; 200
     6ae:	51 ec       	ldi	r21, 0xC1	; 193
     6b0:	c7 01       	movw	r24, r14
     6b2:	b6 01       	movw	r22, r12
     6b4:	0e 94 c8 09 	call	0x1390	; 0x1390 <__cmpsf2>
     6b8:	88 23       	and	r24, r24
     6ba:	0c f0       	brlt	.+2      	; 0x6be <tinyAxon_update_potential+0xa0>
     6bc:	46 c0       	rjmp	.+140    	; 0x74a <tinyAxon_update_potential+0x12c>
	{
		if(pulses_in_queue > 0) // Perhaps this should be a separate variable? For now, we will just simply use -THRESHOLD_POTENTIAL
     6be:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <pulses_in_queue>
     6c2:	88 23       	and	r24, r24
     6c4:	11 f1       	breq	.+68     	; 0x70a <tinyAxon_update_potential+0xec>
		{
			// The neurons potential is low enough to attempt to remove a queued fire (Fire less)
			if(tinyAxon_remove_pulse())
     6c6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <tinyAxon_remove_pulse>
     6ca:	88 23       	and	r24, r24
     6cc:	f1 f1       	breq	.+124    	; 0x74a <tinyAxon_update_potential+0x12c>
			{
				// The potential has evened out a bit
				potential += THRESHOLD_POTENTIAL;
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	48 ec       	ldi	r20, 0xC8	; 200
     6d4:	51 e4       	ldi	r21, 0x41	; 65
     6d6:	c7 01       	movw	r24, r14
     6d8:	b6 01       	movw	r22, r12
     6da:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__addsf3>
     6de:	6b 01       	movw	r12, r22
     6e0:	7c 01       	movw	r14, r24
     6e2:	33 c0       	rjmp	.+102    	; 0x74a <tinyAxon_update_potential+0x12c>
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
		{
			if(pulse_queue[i] != 0){
     6e4:	80 81       	ld	r24, Z
     6e6:	91 81       	ldd	r25, Z+1	; 0x01
     6e8:	00 97       	sbiw	r24, 0x00	; 0
     6ea:	39 f0       	breq	.+14     	; 0x6fa <tinyAxon_update_potential+0xdc>
				pulse_queue[i]--;
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	80 83       	st	Z, r24
     6f0:	91 83       	std	Z+1, r25	; 0x01
				
				// If the time went from 1 to 0, we fire the axon
				if(pulse_queue[i] == 0){
     6f2:	89 2b       	or	r24, r25
     6f4:	11 f4       	brne	.+4      	; 0x6fa <tinyAxon_update_potential+0xdc>
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
	pulses_in_queue--;
     6f6:	41 50       	subi	r20, 0x01	; 1
Function to set firing.
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
     6f8:	51 e0       	ldi	r21, 0x01	; 1
     6fa:	32 96       	adiw	r30, 0x02	; 2
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     6fc:	e2 17       	cp	r30, r18
     6fe:	f3 07       	cpc	r31, r19
     700:	89 f7       	brne	.-30     	; 0x6e4 <tinyAxon_update_potential+0xc6>
     702:	50 93 2c 38 	sts	0x382C, r21	; 0x80382c <tinyAxon_should_fire>
     706:	40 93 2a 38 	sts	0x382A, r20	; 0x80382a <pulses_in_queue>
The function should set the DAC to fire for two
update cycles once the pulse flag is set high.
*/
static void tinyAxon_update_pulse_transmitter(void)
{
	if (tinyAxon_should_fire)
     70a:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <tinyAxon_should_fire>
     70e:	88 23       	and	r24, r24
     710:	91 f0       	breq	.+36     	; 0x736 <tinyAxon_update_potential+0x118>
	{
		tinyAxon_should_fire = false;
     712:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <tinyAxon_should_fire>
*/
static void tinyAxon_start_sending_pulse()
{
	if (NEURONTYPE == EXCITATORY_NEURON)
	{
		DAC_0_set_output(EXCITATORY_NEURON_OUTPUT);
     716:	86 ee       	ldi	r24, 0xE6	; 230
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 99 01 	call	0x332	; 0x332 <DAC_0_set_output>
		axonOutputValue=EXCITATORY_NEURON_OUTPUT;
     71e:	86 ee       	ldi	r24, 0xE6	; 230
     720:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <axonOutputValue>
	{
		DAC_0_set_output(INHIBITORY_NEURON_OUTPUT);
		axonOutputValue=INHIBITORY_NEURON_OUTPUT;
	}
	
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
     724:	44 e0       	ldi	r20, 0x04	; 4
     726:	65 e0       	ldi	r22, 0x05	; 5
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	0e 94 53 06 	call	0xca6	; 0xca6 <tinyLED_set_color_mode>
{
	if (tinyAxon_should_fire)
	{
		tinyAxon_should_fire = false;
		tinyAxon_start_sending_pulse();
		tinyAxon_has_just_fired = true;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <tinyAxon_has_just_fired>
     734:	15 c0       	rjmp	.+42     	; 0x760 <tinyAxon_update_potential+0x142>
		
	}
	else if (tinyAxon_has_just_fired)
     736:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <tinyAxon_has_just_fired>
     73a:	88 23       	and	r24, r24
     73c:	19 f0       	breq	.+6      	; 0x744 <tinyAxon_update_potential+0x126>
	{
		tinyAxon_has_just_fired = false;
     73e:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <tinyAxon_has_just_fired>
     742:	0e c0       	rjmp	.+28     	; 0x760 <tinyAxon_update_potential+0x142>
	}
	else if (!tinyAxon_has_just_fired && !tinyAxon_should_fire)
	{
		tinyAxon_stop_sending_pulse();
     744:	0e 94 e5 02 	call	0x5ca	; 0x5ca <tinyAxon_stop_sending_pulse>
     748:	0b c0       	rjmp	.+22     	; 0x760 <tinyAxon_update_potential+0x142>
			}
		}
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
     74a:	40 91 2a 38 	lds	r20, 0x382A	; 0x80382a <pulses_in_queue>
     74e:	44 23       	and	r20, r20
     750:	e1 f2       	breq	.-72     	; 0x70a <tinyAxon_update_potential+0xec>
     752:	50 91 2c 38 	lds	r21, 0x382C	; 0x80382c <tinyAxon_should_fire>
     756:	e6 e1       	ldi	r30, 0x16	; 22
     758:	f8 e3       	ldi	r31, 0x38	; 56
     75a:	2a e2       	ldi	r18, 0x2A	; 42
     75c:	38 e3       	ldi	r19, 0x38	; 56
     75e:	c2 cf       	rjmp	.-124    	; 0x6e4 <tinyAxon_update_potential+0xc6>
	}
	
	// Here we set the actual output of the DAC (Digital to Analog Converter)
	tinyAxon_update_pulse_transmitter();
	
	tinyDebugger_send_uint8("Axon", axonOutputValue);
     760:	60 91 2b 38 	lds	r22, 0x382B	; 0x80382b <axonOutputValue>
     764:	83 ee       	ldi	r24, 0xE3	; 227
     766:	94 ea       	ldi	r25, 0xA4	; 164
     768:	0e 94 90 04 	call	0x920	; 0x920 <tinyDebugger_send_uint8>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     76c:	66 b1       	in	r22, 0x06	; 6
	tinyDebugger_send_uint8("Pulses", AXON_CHECK_PIN_get_level());
     76e:	66 1f       	adc	r22, r22
     770:	66 27       	eor	r22, r22
     772:	66 1f       	adc	r22, r22
     774:	88 ee       	ldi	r24, 0xE8	; 232
     776:	94 ea       	ldi	r25, 0xA4	; 164
     778:	0e 94 90 04 	call	0x920	; 0x920 <tinyDebugger_send_uint8>
	
	
	return potential;
}
     77c:	c7 01       	movw	r24, r14
     77e:	b6 01       	movw	r22, r12
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	08 95       	ret

0000078a <tinyAxon_check_charge_level>:


_Bool tinyAxon_check_charge_level(void)
{
	// We check the AXON_CHECK_PIN. If it is hight while the axon is not firing, it must be connected to a charger
	return (AXON_CHECK_PIN_get_level() && !tinyAxon_should_fire);
     78a:	37 9b       	sbis	0x06, 7	; 6
     78c:	05 c0       	rjmp	.+10     	; 0x798 <tinyAxon_check_charge_level+0xe>
     78e:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <tinyAxon_should_fire>
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	89 27       	eor	r24, r25
     796:	02 c0       	rjmp	.+4      	; 0x79c <tinyAxon_check_charge_level+0x12>
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	81 70       	andi	r24, 0x01	; 1
     79e:	08 95       	ret

000007a0 <tinyButton_update>:
/*
If the button has been let go, we change button_press to true. This only lasts one cycle, before it is set to false again.
If the button is held down for longer than PULSEMODE_BUTTON_PRESS_TIME, we toggle the pulse mode state.
*/
void tinyButton_update(void)
{
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
	button_press = false;
     7a8:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <button_press>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return VPORTC.IN & (1 << pin);
     7ac:	8a b1       	in	r24, 0x0a	; 10
	_Bool button_is_pushed_down = !BUTTON_PIN_get_level(); // The digital port will be read as low if the button is pushed down.
     7ae:	d1 e0       	ldi	r29, 0x01	; 1
     7b0:	c8 2f       	mov	r28, r24
     7b2:	c4 70       	andi	r28, 0x04	; 4
     7b4:	82 fd       	sbrc	r24, 2
     7b6:	d0 e0       	ldi	r29, 0x00	; 0

	if (button_is_pushed_down && !button_was_pushed_down)
     7b8:	c1 11       	cpse	r28, r1
     7ba:	36 c0       	rjmp	.+108    	; 0x828 <tinyButton_update+0x88>
     7bc:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <button_was_pushed_down>
     7c0:	81 11       	cpse	r24, r1
     7c2:	0e c0       	rjmp	.+28     	; 0x7e0 <tinyButton_update+0x40>
	{
		tinyButton_start_time = tinyTime_now();
     7c4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <tinyTime_now>
     7c8:	60 93 2e 38 	sts	0x382E, r22	; 0x80382e <tinyButton_start_time>
     7cc:	70 93 2f 38 	sts	0x382F, r23	; 0x80382f <tinyButton_start_time+0x1>
     7d0:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <tinyButton_start_time+0x2>
     7d4:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <tinyButton_start_time+0x3>
	}
	if (button_is_pushed_down && button_was_pushed_down)
     7d8:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <button_was_pushed_down>
     7dc:	88 23       	and	r24, r24
     7de:	69 f1       	breq	.+90     	; 0x83a <tinyButton_update+0x9a>
	{
		if ((tinyTime_now() - tinyButton_start_time) > PULSEMODE_BUTTON_PRESS_TIME)
     7e0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <tinyTime_now>
     7e4:	00 91 2e 38 	lds	r16, 0x382E	; 0x80382e <tinyButton_start_time>
     7e8:	10 91 2f 38 	lds	r17, 0x382F	; 0x80382f <tinyButton_start_time+0x1>
     7ec:	20 91 30 38 	lds	r18, 0x3830	; 0x803830 <tinyButton_start_time+0x2>
     7f0:	30 91 31 38 	lds	r19, 0x3831	; 0x803831 <tinyButton_start_time+0x3>
     7f4:	60 1b       	sub	r22, r16
     7f6:	71 0b       	sbc	r23, r17
     7f8:	82 0b       	sbc	r24, r18
     7fa:	93 0b       	sbc	r25, r19
     7fc:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatunsisf>
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	48 ec       	ldi	r20, 0xC8	; 200
     806:	52 e4       	ldi	r21, 0x42	; 66
     808:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__gesf2>
     80c:	18 16       	cp	r1, r24
     80e:	64 f4       	brge	.+24     	; 0x828 <tinyButton_update+0x88>
		{
			tinyPulse_toggle_pulse_mode();
     810:	0e 94 ff 08 	call	0x11fe	; 0x11fe <tinyPulse_toggle_pulse_mode>
			tinyButton_start_time = tinyTime_now();
     814:	0e 94 52 09 	call	0x12a4	; 0x12a4 <tinyTime_now>
     818:	60 93 2e 38 	sts	0x382E, r22	; 0x80382e <tinyButton_start_time>
     81c:	70 93 2f 38 	sts	0x382F, r23	; 0x80382f <tinyButton_start_time+0x1>
     820:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <tinyButton_start_time+0x2>
     824:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <tinyButton_start_time+0x3>
		}
	}
	if (!button_is_pushed_down && button_was_pushed_down)
     828:	cc 23       	and	r28, r28
     82a:	39 f0       	breq	.+14     	; 0x83a <tinyButton_update+0x9a>
     82c:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <button_was_pushed_down>
     830:	88 23       	and	r24, r24
     832:	19 f0       	breq	.+6      	; 0x83a <tinyButton_update+0x9a>
	{
		button_press = true;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <button_press>
	}
	button_was_pushed_down = button_is_pushed_down;
     83a:	d0 93 33 38 	sts	0x3833, r29	; 0x803833 <button_was_pushed_down>
}
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	08 95       	ret

00000848 <tinyButton_update_potential>:

double tinyButton_update_potential(double potential){
	if(button_press){
     848:	20 91 32 38 	lds	r18, 0x3832	; 0x803832 <button_press>
     84c:	22 23       	and	r18, r18
     84e:	31 f0       	breq	.+12     	; 0x85c <tinyButton_update_potential+0x14>
		potential += BUTTON_PRESS_REACTION;
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 ed       	ldi	r20, 0xD0	; 208
     856:	51 e4       	ldi	r21, 0x41	; 65
     858:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__addsf3>
	}
	return potential;
}
     85c:	08 95       	ret

0000085e <tinyCharge_is_connected_to_charger>:

_Bool connected_to_charger;

_Bool tinyCharge_is_connected_to_charger(){
	return connected_to_charger;
}
     85e:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <connected_to_charger>
     862:	08 95       	ret

00000864 <tinyCharge_is_fully_charged>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     864:	86 b1       	in	r24, 0x06	; 6

_Bool tinyCharge_is_fully_charged(){
	return CHARGING_STATUS_PIN_get_level();
}
     866:	86 fb       	bst	r24, 6
     868:	88 27       	eor	r24, r24
     86a:	80 f9       	bld	r24, 0
     86c:	08 95       	ret

0000086e <tinyCharge_DAC_dissable>:
void tinyCharge_DAC_dissable(){
	
	// We need some way to disable the DAC to prevent huge current draw when charging (64mA). When there is no code uploaded to the attiny, there is no problem.
	// We're going to try to enable the pin as a dendrite, since they seem to be doing fine. Completely uninitializing the pin probably caused a microchip to be fried.
	
	DAC_0_uninit();
     86e:	0e 94 88 01 	call	0x310	; 0x310 <DAC_0_uninit>
	DAC_0_disable();
     872:	0e 94 93 01 	call	0x326	; 0x326 <DAC_0_disable>
     876:	08 95       	ret

00000878 <tinyCharge_DAC_enable>:
void tinyCharge_DAC_enable(){
	
	// We need some way to disable the DAC to prevent huge current draw when charging (64mA). When there is no code uploaded to the attiny, there is no problem.
	// We're going to try to enable the pin as a dendrite, since they seem to be doing fine. Completely uninitializing the pin probably caused a microchip to be fried.
	
	DAC_0_init();
     878:	0e 94 83 01 	call	0x306	; 0x306 <DAC_0_init>
	DAC_0_enable();
     87c:	0e 94 8d 01 	call	0x31a	; 0x31a <DAC_0_enable>
     880:	08 95       	ret

00000882 <tinyCharge_switch_mode>:
}


void tinyCharge_switch_mode(){
	
	if(connected_to_charger){
     882:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <connected_to_charger>
     886:	88 23       	and	r24, r24
     888:	71 f0       	breq	.+28     	; 0x8a6 <tinyCharge_switch_mode+0x24>
		// Switch from main to charging mode
		
		// Set LED
		tinyLED_set_color_mode(OUT_LED, CHARGING_COLOR, SWING);
     88a:	42 e0       	ldi	r20, 0x02	; 2
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	0e 94 53 06 	call	0xca6	; 0xca6 <tinyLED_set_color_mode>
		tinyLED_set_color(INN_LED, OFF);
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	0e 94 42 06 	call	0xc84	; 0xc84 <tinyLED_set_color>


		// Stop axon from firing
		// (There is a small chance that the neuron is put into charging mode as it is firing. The axon is then never told to stop firing)
		tinyAxon_stop_sending_pulse();
     89c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <tinyAxon_stop_sending_pulse>

		// disable DAC
		tinyCharge_DAC_dissable();
     8a0:	0e 94 37 04 	call	0x86e	; 0x86e <tinyCharge_DAC_dissable>
     8a4:	08 95       	ret
	}
	else{
		// Switch from charge to main mode
		
		// Set LED
		tinyLED_set_color(OUT_LED, OFF);
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	0e 94 42 06 	call	0xc84	; 0xc84 <tinyLED_set_color>
		tinyLED_set_color(INN_LED, OFF);
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 42 06 	call	0xc84	; 0xc84 <tinyLED_set_color>
		
		// enable DAC
		tinyCharge_DAC_enable();
     8b6:	0e 94 3c 04 	call	0x878	; 0x878 <tinyCharge_DAC_enable>
     8ba:	08 95       	ret

000008bc <tinyCharge_set_charging_mode>:
	}
}

void tinyCharge_set_charging_mode(_Bool charging_status){
	if(charging_status != connected_to_charger){
     8bc:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <connected_to_charger>
     8c0:	98 17       	cp	r25, r24
     8c2:	21 f0       	breq	.+8      	; 0x8cc <tinyCharge_set_charging_mode+0x10>
		connected_to_charger = charging_status;
     8c4:	80 93 57 38 	sts	0x3857, r24	; 0x803857 <connected_to_charger>
		tinyCharge_switch_mode();
     8c8:	0e 94 41 04 	call	0x882	; 0x882 <tinyCharge_switch_mode>
     8cc:	08 95       	ret

000008ce <tinyCharge_update_charging_mode>:
/*
Checks if the levels of the dendrites and axon are at charging levels
and updates the mode accordingly
*/
void tinyCharge_update_charging_mode(){
	_Bool charge = tinyAxon_check_charge_level() || tinyDendrite_check_charge_level();
     8ce:	0e 94 c5 03 	call	0x78a	; 0x78a <tinyAxon_check_charge_level>
     8d2:	81 11       	cpse	r24, r1
     8d4:	04 c0       	rjmp	.+8      	; 0x8de <tinyCharge_update_charging_mode+0x10>
     8d6:	0e 94 17 05 	call	0xa2e	; 0xa2e <tinyDendrite_check_charge_level>
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <tinyCharge_update_charging_mode+0x14>
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
	tinyCharge_set_charging_mode(charge);
     8e2:	81 70       	andi	r24, 0x01	; 1
     8e4:	99 27       	eor	r25, r25
     8e6:	0e 94 5e 04 	call	0x8bc	; 0x8bc <tinyCharge_set_charging_mode>
     8ea:	08 95       	ret

000008ec <tinyCharge_set_transistors>:
	}
}


void tinyCharge_set_transistors(){
	if(connected_to_charger){
     8ec:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <connected_to_charger>
     8f0:	88 23       	and	r24, r24
     8f2:	11 f0       	breq	.+4      	; 0x8f8 <tinyCharge_set_transistors+0xc>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     8f4:	4d 98       	cbi	0x09, 5	; 9
     8f6:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     8f8:	4d 9a       	sbi	0x09, 5	; 9
     8fa:	08 95       	ret

000008fc <tinyDebugger_send_uint32>:
}
void tinyDebugger_send_string(const char* name, char * value){
	if(DEBUGGING){
		printf("%s:%s\t", name, value);
	}
}
     8fc:	7f 93       	push	r23
     8fe:	6f 93       	push	r22
     900:	5f 93       	push	r21
     902:	4f 93       	push	r20
     904:	9f 93       	push	r25
     906:	8f 93       	push	r24
     908:	87 ef       	ldi	r24, 0xF7	; 247
     90a:	94 ea       	ldi	r25, 0xA4	; 164
     90c:	9f 93       	push	r25
     90e:	8f 93       	push	r24
     910:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <printf>
     914:	8d b7       	in	r24, 0x3d	; 61
     916:	9e b7       	in	r25, 0x3e	; 62
     918:	08 96       	adiw	r24, 0x08	; 8
     91a:	8d bf       	out	0x3d, r24	; 61
     91c:	9e bf       	out	0x3e, r25	; 62
     91e:	08 95       	ret

00000920 <tinyDebugger_send_uint8>:
     920:	1f 92       	push	r1
     922:	6f 93       	push	r22
     924:	9f 93       	push	r25
     926:	8f 93       	push	r24
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	95 ea       	ldi	r25, 0xA5	; 165
     92c:	9f 93       	push	r25
     92e:	8f 93       	push	r24
     930:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <printf>
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	08 95       	ret

00000942 <tinyDebugger_send_double>:
     942:	cf 92       	push	r12
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	64 97       	sbiw	r28, 0x14	; 20
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	d8 2e       	mov	r13, r24
     95e:	c9 2e       	mov	r12, r25
     960:	cb 01       	movw	r24, r22
     962:	ba 01       	movw	r22, r20
     964:	9e 01       	movw	r18, r28
     966:	2f 5f       	subi	r18, 0xFF	; 255
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	79 01       	movw	r14, r18
     96c:	89 01       	movw	r16, r18
     96e:	21 e0       	ldi	r18, 0x01	; 1
     970:	41 e0       	ldi	r20, 0x01	; 1
     972:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <dtostrf>
     976:	ff 92       	push	r15
     978:	ef 92       	push	r14
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	88 e0       	ldi	r24, 0x08	; 8
     980:	95 ea       	ldi	r25, 0xA5	; 165
     982:	9f 93       	push	r25
     984:	8f 93       	push	r24
     986:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <printf>
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	64 96       	adiw	r28, 0x14	; 20
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ff 90       	pop	r15
     9a6:	ef 90       	pop	r14
     9a8:	df 90       	pop	r13
     9aa:	cf 90       	pop	r12
     9ac:	08 95       	ret

000009ae <tinyDebugger_end_line>:
void tinyDebugger_end_line(){
	if(DEBUGGING){
		printf("\r\n");
     9ae:	87 e1       	ldi	r24, 0x17	; 23
     9b0:	95 ea       	ldi	r25, 0xA5	; 165
     9b2:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <puts>
     9b6:	08 95       	ret

000009b8 <tinyDendrite_read_signals>:

/*
This function reads the voltage at the Dendrite inputs with the ADC
*/
static void tinyDendrite_read_signals(void)
{
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	ce e0       	ldi	r28, 0x0E	; 14
     9c6:	d8 e3       	ldi	r29, 0x38	; 56
     9c8:	0e e3       	ldi	r16, 0x3E	; 62
     9ca:	18 e3       	ldi	r17, 0x38	; 56
     9cc:	0f 2e       	mov	r0, r31
     9ce:	f3 e1       	ldi	r31, 0x13	; 19
     9d0:	ef 2e       	mov	r14, r31
     9d2:	f8 e3       	ldi	r31, 0x38	; 56
     9d4:	ff 2e       	mov	r15, r31
     9d6:	f0 2d       	mov	r31, r0
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_values[i] = ADC_0_get_conversion(Dendrite_ports[i]);
     9d8:	89 91       	ld	r24, Y+
     9da:	0e 94 4d 01 	call	0x29a	; 0x29a <ADC_0_get_conversion>
     9de:	f8 01       	movw	r30, r16
     9e0:	81 93       	st	Z+, r24
     9e2:	8f 01       	movw	r16, r30
/*
This function reads the voltage at the Dendrite inputs with the ADC
*/
static void tinyDendrite_read_signals(void)
{
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
     9e4:	ce 15       	cp	r28, r14
     9e6:	df 05       	cpc	r29, r15
     9e8:	b9 f7       	brne	.-18     	; 0x9d8 <tinyDendrite_read_signals+0x20>
	{
		tinyDendrite_values[i] = ADC_0_get_conversion(Dendrite_ports[i]);
	}
	tinyDebugger_send_uint8("D1", tinyDendrite_values[0]);
     9ea:	ce e3       	ldi	r28, 0x3E	; 62
     9ec:	d8 e3       	ldi	r29, 0x38	; 56
     9ee:	68 81       	ld	r22, Y
     9f0:	89 e1       	ldi	r24, 0x19	; 25
     9f2:	95 ea       	ldi	r25, 0xA5	; 165
     9f4:	0e 94 90 04 	call	0x920	; 0x920 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D2", tinyDendrite_values[1]);
     9f8:	69 81       	ldd	r22, Y+1	; 0x01
     9fa:	8c e1       	ldi	r24, 0x1C	; 28
     9fc:	95 ea       	ldi	r25, 0xA5	; 165
     9fe:	0e 94 90 04 	call	0x920	; 0x920 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D3", tinyDendrite_values[2]);
     a02:	6a 81       	ldd	r22, Y+2	; 0x02
     a04:	8f e1       	ldi	r24, 0x1F	; 31
     a06:	95 ea       	ldi	r25, 0xA5	; 165
     a08:	0e 94 90 04 	call	0x920	; 0x920 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
     a0c:	6b 81       	ldd	r22, Y+3	; 0x03
     a0e:	82 e2       	ldi	r24, 0x22	; 34
     a10:	95 ea       	ldi	r25, 0xA5	; 165
     a12:	0e 94 90 04 	call	0x920	; 0x920 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
     a16:	6c 81       	ldd	r22, Y+4	; 0x04
     a18:	85 e2       	ldi	r24, 0x25	; 37
     a1a:	95 ea       	ldi	r25, 0xA5	; 165
     a1c:	0e 94 90 04 	call	0x920	; 0x920 <tinyDebugger_send_uint8>
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	ff 90       	pop	r15
     a2a:	ef 90       	pop	r14
     a2c:	08 95       	ret

00000a2e <tinyDendrite_check_charge_level>:

_Bool tinyDendrite_check_charge_level(void)
{
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
	_Bool charging = false;
	
	tinyDendrite_read_signals();
     a32:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <tinyDendrite_read_signals>
     a36:	e9 e3       	ldi	r30, 0x39	; 57
     a38:	f8 e3       	ldi	r31, 0x38	; 56
     a3a:	c4 e3       	ldi	r28, 0x34	; 52
     a3c:	d8 e3       	ldi	r29, 0x38	; 56
     a3e:	ae e3       	ldi	r26, 0x3E	; 62
     a40:	b8 e3       	ldi	r27, 0x38	; 56
     a42:	2e e3       	ldi	r18, 0x3E	; 62
     a44:	38 e3       	ldi	r19, 0x38	; 56
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
}

_Bool tinyDendrite_check_charge_level(void)
{
	_Bool charging = false;
     a46:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     a48:	47 e0       	ldi	r20, 0x07	; 7
	_Bool charging = false;
	
	tinyDendrite_read_signals();
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     a4a:	90 81       	ld	r25, Z
     a4c:	99 93       	st	Y+, r25
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     a4e:	9d 91       	ld	r25, X+
     a50:	99 3e       	cpi	r25, 0xE9	; 233
     a52:	10 f0       	brcs	.+4      	; 0xa58 <tinyDendrite_check_charge_level+0x2a>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     a54:	40 83       	st	Z, r20
			charging = true;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	31 96       	adiw	r30, 0x01	; 1
_Bool tinyDendrite_check_charge_level(void)
{
	_Bool charging = false;
	
	tinyDendrite_read_signals();
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     a5a:	e2 17       	cp	r30, r18
     a5c:	f3 07       	cpc	r31, r19
     a5e:	a9 f7       	brne	.-22     	; 0xa4a <tinyDendrite_check_charge_level+0x1c>
			tinyDendrite_current_signals[i] = CHARGING;
			charging = true;
		}
	}
	return charging;
}
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <tinyDendrite_update_signals>:

/*
This function converts the 8 bit value from the ADC into one of the signal types defined in DendriteSignal
*/
void tinyDendrite_update_signals(void)
{
     a66:	af 92       	push	r10
     a68:	bf 92       	push	r11
     a6a:	df 92       	push	r13
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
	
	//Read the analog voltage values on each of the Dendrites
	//Since read_signals is called in check_charge_level, and check_charge_level is called at the beginning
	//of every loop, it's probably unnecessary to read the signals again, but I'll leave it inn for now.
	tinyDendrite_read_signals();
     a78:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <tinyDendrite_read_signals>
     a7c:	e9 e3       	ldi	r30, 0x39	; 57
     a7e:	f8 e3       	ldi	r31, 0x38	; 56
     a80:	24 e3       	ldi	r18, 0x34	; 52
     a82:	38 e3       	ldi	r19, 0x38	; 56
     a84:	ce e3       	ldi	r28, 0x3E	; 62
     a86:	d8 e3       	ldi	r29, 0x38	; 56
     a88:	4e e3       	ldi	r20, 0x3E	; 62
     a8a:	58 e3       	ldi	r21, 0x38	; 56
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     a8c:	dd 24       	eor	r13, r13
     a8e:	d3 94       	inc	r13
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     a90:	0f 2e       	mov	r0, r31
     a92:	f3 e0       	ldi	r31, 0x03	; 3
     a94:	ef 2e       	mov	r14, r31
     a96:	f0 2d       	mov	r31, r0
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     a98:	68 94       	set
     a9a:	ff 24       	eor	r15, r15
     a9c:	f1 f8       	bld	r15, 1
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     a9e:	04 e0       	ldi	r16, 0x04	; 4
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     aa0:	16 e0       	ldi	r17, 0x06	; 6
			// been moved to tinyDendrite_check_charging.
			//charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     aa2:	75 e0       	ldi	r23, 0x05	; 5
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     aa4:	67 e0       	ldi	r22, 0x07	; 7
     aa6:	5f 01       	movw	r10, r30
	//of every loop, it's probably unnecessary to read the signals again, but I'll leave it inn for now.
	tinyDendrite_read_signals();
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     aa8:	80 81       	ld	r24, Z
     aaa:	d9 01       	movw	r26, r18
     aac:	8d 93       	st	X+, r24
     aae:	9d 01       	movw	r18, r26
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     ab0:	99 91       	ld	r25, Y+
     ab2:	99 3e       	cpi	r25, 0xE9	; 233
     ab4:	10 f0       	brcs	.+4      	; 0xaba <tinyDendrite_update_signals+0x54>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     ab6:	60 83       	st	Z, r22
     ab8:	19 c0       	rjmp	.+50     	; 0xaec <tinyDendrite_update_signals+0x86>
			// Previously, we used this function to check charging, but this has now
			// been moved to tinyDendrite_check_charging.
			//charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
     aba:	98 3c       	cpi	r25, 0xC8	; 200
     abc:	10 f0       	brcs	.+4      	; 0xac2 <tinyDendrite_update_signals+0x5c>
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     abe:	70 83       	st	Z, r23
     ac0:	15 c0       	rjmp	.+42     	; 0xaec <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
     ac2:	97 3a       	cpi	r25, 0xA7	; 167
     ac4:	10 f0       	brcs	.+4      	; 0xaca <tinyDendrite_update_signals+0x64>
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     ac6:	10 83       	st	Z, r17
     ac8:	11 c0       	rjmp	.+34     	; 0xaec <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
     aca:	95 38       	cpi	r25, 0x85	; 133
     acc:	10 f0       	brcs	.+4      	; 0xad2 <tinyDendrite_update_signals+0x6c>
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     ace:	00 83       	st	Z, r16
     ad0:	0d c0       	rjmp	.+26     	; 0xaec <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
     ad2:	94 36       	cpi	r25, 0x64	; 100
     ad4:	10 f0       	brcs	.+4      	; 0xada <tinyDendrite_update_signals+0x74>
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     ad6:	f0 82       	st	Z, r15
     ad8:	09 c0       	rjmp	.+18     	; 0xaec <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
     ada:	93 34       	cpi	r25, 0x43	; 67
     adc:	10 f0       	brcs	.+4      	; 0xae2 <tinyDendrite_update_signals+0x7c>
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     ade:	e0 82       	st	Z, r14
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <tinyDendrite_update_signals+0x86>
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
     ae2:	92 32       	cpi	r25, 0x22	; 34
     ae4:	10 f0       	brcs	.+4      	; 0xaea <tinyDendrite_update_signals+0x84>
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     ae6:	d0 82       	st	Z, r13
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <tinyDendrite_update_signals+0x86>
		}
		else
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     aea:	10 82       	st	Z, r1
		}
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
     aec:	d5 01       	movw	r26, r10
     aee:	9c 91       	ld	r25, X
     af0:	89 13       	cpse	r24, r25
     af2:	01 c0       	rjmp	.+2      	; 0xaf6 <tinyDendrite_update_signals+0x90>
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     af4:	1c 92       	st	X, r1
     af6:	31 96       	adiw	r30, 0x01	; 1
	//Read the analog voltage values on each of the Dendrites
	//Since read_signals is called in check_charge_level, and check_charge_level is called at the beginning
	//of every loop, it's probably unnecessary to read the signals again, but I'll leave it inn for now.
	tinyDendrite_read_signals();
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     af8:	e4 17       	cp	r30, r20
     afa:	f5 07       	cpc	r31, r21
     afc:	a1 f6       	brne	.-88     	; 0xaa6 <tinyDendrite_update_signals+0x40>
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
		}
	}
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	bf 90       	pop	r11
     b0e:	af 90       	pop	r10
     b10:	08 95       	ret

00000b12 <tinyDendrite_get_potential>:
/*
This is the master function of the module that is callable from
outside. It uses the previously declared functions to return the potential.
*/
int16_t tinyDendrite_get_potential()
{
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
	if(tinyAxon_is_firing() && IGNORE_INPUT_WHILE_FIRING){
     b1e:	0e 94 cb 02 	call	0x596	; 0x596 <tinyAxon_is_firing>
		
		return NO_SIGNAL_REACTION;
	}
	
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
     b22:	0e 94 33 05 	call	0xa66	; 0xa66 <tinyDendrite_update_signals>
     b26:	c9 e3       	ldi	r28, 0x39	; 57
     b28:	d8 e3       	ldi	r29, 0x38	; 56
     b2a:	0f 2e       	mov	r0, r31
     b2c:	fe e3       	ldi	r31, 0x3E	; 62
     b2e:	ef 2e       	mov	r14, r31
     b30:	f8 e3       	ldi	r31, 0x38	; 56
     b32:	ff 2e       	mov	r15, r31
     b34:	f0 2d       	mov	r31, r0
	
	int16_t return_potential_val = 0;
     b36:	00 e0       	ldi	r16, 0x00	; 0
     b38:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		switch(tinyDendrite_current_signals[i])
     b3a:	89 91       	ld	r24, Y+
     b3c:	83 30       	cpi	r24, 0x03	; 3
     b3e:	19 f1       	breq	.+70     	; 0xb86 <tinyDendrite_get_potential+0x74>
     b40:	28 f4       	brcc	.+10     	; 0xb4c <tinyDendrite_get_potential+0x3a>
     b42:	81 30       	cpi	r24, 0x01	; 1
     b44:	81 f1       	breq	.+96     	; 0xba6 <tinyDendrite_get_potential+0x94>
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	31 f1       	breq	.+76     	; 0xb96 <tinyDendrite_get_potential+0x84>
     b4a:	34 c0       	rjmp	.+104    	; 0xbb4 <tinyDendrite_get_potential+0xa2>
     b4c:	85 30       	cpi	r24, 0x05	; 5
     b4e:	59 f0       	breq	.+22     	; 0xb66 <tinyDendrite_get_potential+0x54>
     b50:	90 f0       	brcs	.+36     	; 0xb76 <tinyDendrite_get_potential+0x64>
     b52:	86 30       	cpi	r24, 0x06	; 6
     b54:	79 f5       	brne	.+94     	; 0xbb4 <tinyDendrite_get_potential+0xa2>
		{
			case NO_SIGNAL:
				return_potential_val += NO_SIGNAL_REACTION;
				break;
			case HIGH_EXCITE:
				return_potential_val += HIGH_EXCITE_REACTION;
     b56:	0c 5c       	subi	r16, 0xCC	; 204
     b58:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     b5a:	44 e0       	ldi	r20, 0x04	; 4
     b5c:	63 e0       	ldi	r22, 0x03	; 3
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 53 06 	call	0xca6	; 0xca6 <tinyLED_set_color_mode>
				break;
     b64:	27 c0       	rjmp	.+78     	; 0xbb4 <tinyDendrite_get_potential+0xa2>
			case NORMAL_EXCITE:
				return_potential_val += NORMAL_EXCITE_REACTION;
     b66:	07 5e       	subi	r16, 0xE7	; 231
     b68:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     b6a:	44 e0       	ldi	r20, 0x04	; 4
     b6c:	63 e0       	ldi	r22, 0x03	; 3
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	0e 94 53 06 	call	0xca6	; 0xca6 <tinyLED_set_color_mode>
				break;
     b74:	1f c0       	rjmp	.+62     	; 0xbb4 <tinyDendrite_get_potential+0xa2>
			case LOW_EXCITE:
				return_potential_val += LOW_EXCITE_REACTION;
     b76:	0c 5e       	subi	r16, 0xEC	; 236
     b78:	1f 4f       	sbci	r17, 0xFF	; 255
				tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     b7a:	44 e0       	ldi	r20, 0x04	; 4
     b7c:	63 e0       	ldi	r22, 0x03	; 3
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	0e 94 53 06 	call	0xca6	; 0xca6 <tinyLED_set_color_mode>
				break;
     b84:	17 c0       	rjmp	.+46     	; 0xbb4 <tinyDendrite_get_potential+0xa2>
			case HIGH_INHIB:
				return_potential_val += HIGH_INHIB_REACTION;
     b86:	02 53       	subi	r16, 0x32	; 50
     b88:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     b8a:	44 e0       	ldi	r20, 0x04	; 4
     b8c:	61 e0       	ldi	r22, 0x01	; 1
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	0e 94 53 06 	call	0xca6	; 0xca6 <tinyLED_set_color_mode>
				break;
     b94:	0f c0       	rjmp	.+30     	; 0xbb4 <tinyDendrite_get_potential+0xa2>
			case NORMAL_INHIB:
				return_potential_val += NORMAL_INHIB_REACTION;
     b96:	09 51       	subi	r16, 0x19	; 25
     b98:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     b9a:	44 e0       	ldi	r20, 0x04	; 4
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	0e 94 53 06 	call	0xca6	; 0xca6 <tinyLED_set_color_mode>
				break;
     ba4:	07 c0       	rjmp	.+14     	; 0xbb4 <tinyDendrite_get_potential+0xa2>
			case LOW_INHIB:
				return_potential_val += LOW_INHIB_REACTION;
     ba6:	04 51       	subi	r16, 0x14	; 20
     ba8:	11 09       	sbc	r17, r1
				tinyLED_set_color_mode(INN_LED, RED, FLASH_ONCE);
     baa:	44 e0       	ldi	r20, 0x04	; 4
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	0e 94 53 06 	call	0xca6	; 0xca6 <tinyLED_set_color_mode>
	
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
	
	int16_t return_potential_val = 0;
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     bb4:	ce 15       	cp	r28, r14
     bb6:	df 05       	cpc	r29, r15
     bb8:	09 f0       	breq	.+2      	; 0xbbc <tinyDendrite_get_potential+0xaa>
     bba:	bf cf       	rjmp	.-130    	; 0xb3a <tinyDendrite_get_potential+0x28>
		}
	}
	
	return return_potential_val;
	
}
     bbc:	c8 01       	movw	r24, r16
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	08 95       	ret

00000bcc <tinyDendrite_update_potential>:

double tinyDendrite_update_potential(double potential){
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	6b 01       	movw	r12, r22
     bd6:	7c 01       	movw	r14, r24
	
	int16_t potential_change = tinyDendrite_get_potential();
     bd8:	0e 94 89 05 	call	0xb12	; 0xb12 <tinyDendrite_get_potential>
	potential += potential_change;
	return potential;
     bdc:	bc 01       	movw	r22, r24
     bde:	99 0f       	add	r25, r25
     be0:	88 0b       	sbc	r24, r24
     be2:	99 0b       	sbc	r25, r25
     be4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__floatsisf>
     be8:	a7 01       	movw	r20, r14
     bea:	96 01       	movw	r18, r12
     bec:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__addsf3>
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	df 90       	pop	r13
     bf6:	cf 90       	pop	r12
     bf8:	08 95       	ret

00000bfa <__vector_6>:
     bfa:	1f 92       	push	r1
     bfc:	0f 92       	push	r0
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	0f 92       	push	r0
     c02:	11 24       	eor	r1, r1
     c04:	2f 93       	push	r18
     c06:	3f 93       	push	r19
     c08:	4f 93       	push	r20
     c0a:	5f 93       	push	r21
     c0c:	6f 93       	push	r22
     c0e:	7f 93       	push	r23
     c10:	8f 93       	push	r24
     c12:	9f 93       	push	r25
     c14:	af 93       	push	r26
     c16:	bf 93       	push	r27
     c18:	cf 93       	push	r28
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31
     c1e:	c1 e0       	ldi	r28, 0x01	; 1
     c20:	c0 93 43 38 	sts	0x3843, r28	; 0x803843 <tinyISR_interrupt_flag>
     c24:	0e 94 3e 09 	call	0x127c	; 0x127c <tinyTime_counter_increment>
     c28:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c2c:	ff 91       	pop	r31
     c2e:	ef 91       	pop	r30
     c30:	cf 91       	pop	r28
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <tinyISR_setflag>:
     c50:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <tinyISR_interrupt_flag>
     c54:	08 95       	ret

00000c56 <tinyISR_getflag>:
     c56:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <tinyISR_interrupt_flag>
     c5a:	08 95       	ret

00000c5c <tinyLED_SPIWriteByte>:
Function used to send a byte over SPI, which in turn gets
translated to the bit-sequence required by the LEDs over the CCL.
*/
static void tinyLED_SPIWriteByte(uint8_t byte)
{
	SPI0.INTFLAGS = SPI0_INTFLAGS; // clear the write collision flag to allow writing
     c5c:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
     c60:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
	TCA0.SINGLE.CNT = 0; // reset TCA counter register to ensure the first rising edge of the PWM is predictable
     c64:	e0 e0       	ldi	r30, 0x00	; 0
     c66:	fa e0       	ldi	r31, 0x0A	; 10
     c68:	10 a2       	std	Z+32, r1	; 0x20
     c6a:	11 a2       	std	Z+33, r1	; 0x21
	
	// start TCA
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 1 << TCA_SPLIT_ENABLE_bp;
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	90 83       	st	Z, r25
	SPI0_DATA = byte;
     c70:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>

	while((SPI0.INTFLAGS & SPI_RXCIE_bm) == 0){} // wait for transfer to complete
     c74:	e0 e2       	ldi	r30, 0x20	; 32
     c76:	f8 e0       	ldi	r31, 0x08	; 8
     c78:	83 81       	ldd	r24, Z+3	; 0x03
     c7a:	88 23       	and	r24, r24
     c7c:	ec f7       	brge	.-6      	; 0xc78 <tinyLED_SPIWriteByte+0x1c>
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
     c7e:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     c82:	08 95       	ret

00000c84 <tinyLED_set_color>:
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color_mode(uint8_t LED_id, enum Colors color, enum ColorModes mode)
{
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_colors[LED_id] = setting;
     c84:	e8 2f       	mov	r30, r24
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	ee 0f       	add	r30, r30
     c8a:	ff 1f       	adc	r31, r31
     c8c:	e0 5a       	subi	r30, 0xA0	; 160
     c8e:	f7 4c       	sbci	r31, 0xC7	; 199
     c90:	60 83       	st	Z, r22
     c92:	11 82       	std	Z+1, r1	; 0x01
     c94:	08 95       	ret

00000c96 <tinyLED_get_color>:
	tinyLED_set_color_mode(LED_id, color, STABLE);
}

enum Colors tinyLED_get_color(uint8_t LED_id)
{
	return tinyLED_colors[LED_id].color;
     c96:	e8 2f       	mov	r30, r24
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	e0 5a       	subi	r30, 0xA0	; 160
     ca0:	f7 4c       	sbci	r31, 0xC7	; 199
}
     ca2:	80 81       	ld	r24, Z
     ca4:	08 95       	ret

00000ca6 <tinyLED_set_color_mode>:
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color_mode(uint8_t LED_id, enum Colors color, enum ColorModes mode)
{
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_colors[LED_id] = setting;
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	fc 01       	movw	r30, r24
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	e0 5a       	subi	r30, 0xA0	; 160
     cb0:	f7 4c       	sbci	r31, 0xC7	; 199
     cb2:	60 83       	st	Z, r22
     cb4:	41 83       	std	Z+1, r20	; 0x01
	if (mode == FLASH_ONCE)
     cb6:	44 30       	cpi	r20, 0x04	; 4
     cb8:	29 f4       	brne	.+10     	; 0xcc4 <tinyLED_set_color_mode+0x1e>
	{
		tinyLED_flash_once_time[LED_id] = 1000*FLASH_TIME;
     cba:	fc 01       	movw	r30, r24
     cbc:	e8 5a       	subi	r30, 0xA8	; 168
     cbe:	f7 4c       	sbci	r31, 0xC7	; 199
     cc0:	2a e0       	ldi	r18, 0x0A	; 10
     cc2:	20 83       	st	Z, r18
     cc4:	08 95       	ret

00000cc6 <tinyLED_RGB_Color_Compare>:
	return rgb_color;
			
};
// This might be cause of strange light behavior?
//Message		expected 'struct RGB_Color *' but argument is of type 'struct RGB_Color (*)[2]'	Hjernebyggesett_V4	C:\Users\Elias Lundheim\Documents\GitHub\neural\Hjernebyggesett_V4\Hjernebyggesett_V4\tinyLED\tinyLED.c	121
_Bool tinyLED_RGB_Color_Compare(struct RGB_Color (*a)[NUMBER_OF_LEDS], struct RGB_Color (*b)[NUMBER_OF_LEDS]){
     cc6:	dc 01       	movw	r26, r24
     cc8:	fb 01       	movw	r30, r22
	for (int i=0; i<NUMBER_OF_LEDS; i++)
	{
		if(!((*a)[i].red==(*b)[i].red && (*a)[i].green==(*b)[i].green && (*a)[i].blue==(*b)[i].blue)){
     cca:	9c 91       	ld	r25, X
     ccc:	80 81       	ld	r24, Z
     cce:	98 13       	cpse	r25, r24
     cd0:	20 c0       	rjmp	.+64     	; 0xd12 <tinyLED_RGB_Color_Compare+0x4c>
     cd2:	11 96       	adiw	r26, 0x01	; 1
     cd4:	9c 91       	ld	r25, X
     cd6:	11 97       	sbiw	r26, 0x01	; 1
     cd8:	81 81       	ldd	r24, Z+1	; 0x01
     cda:	98 13       	cpse	r25, r24
     cdc:	1c c0       	rjmp	.+56     	; 0xd16 <tinyLED_RGB_Color_Compare+0x50>
     cde:	12 96       	adiw	r26, 0x02	; 2
     ce0:	9c 91       	ld	r25, X
     ce2:	12 97       	sbiw	r26, 0x02	; 2
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	98 13       	cpse	r25, r24
     ce8:	18 c0       	rjmp	.+48     	; 0xd1a <tinyLED_RGB_Color_Compare+0x54>
     cea:	13 96       	adiw	r26, 0x03	; 3
     cec:	9c 91       	ld	r25, X
     cee:	13 97       	sbiw	r26, 0x03	; 3
     cf0:	83 81       	ldd	r24, Z+3	; 0x03
     cf2:	98 13       	cpse	r25, r24
     cf4:	14 c0       	rjmp	.+40     	; 0xd1e <tinyLED_RGB_Color_Compare+0x58>
     cf6:	14 96       	adiw	r26, 0x04	; 4
     cf8:	9c 91       	ld	r25, X
     cfa:	14 97       	sbiw	r26, 0x04	; 4
     cfc:	84 81       	ldd	r24, Z+4	; 0x04
     cfe:	98 13       	cpse	r25, r24
     d00:	10 c0       	rjmp	.+32     	; 0xd22 <tinyLED_RGB_Color_Compare+0x5c>
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	15 96       	adiw	r26, 0x05	; 5
     d06:	2c 91       	ld	r18, X
     d08:	95 81       	ldd	r25, Z+5	; 0x05
     d0a:	29 17       	cp	r18, r25
     d0c:	59 f0       	breq	.+22     	; 0xd24 <tinyLED_RGB_Color_Compare+0x5e>
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	08 95       	ret
			return false;
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	08 95       	ret
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	08 95       	ret
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	08 95       	ret
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	08 95       	ret
     d22:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
     d24:	08 95       	ret

00000d26 <tinyLED_update>:
/*
function to write the current LED-array on to the LEDs and
effectively update the values stored in the LEDs to the values stored in the MCU.
*/
void tinyLED_update(void)
{
     d26:	2f 92       	push	r2
     d28:	3f 92       	push	r3
     d2a:	4f 92       	push	r4
     d2c:	5f 92       	push	r5
     d2e:	6f 92       	push	r6
     d30:	7f 92       	push	r7
     d32:	8f 92       	push	r8
     d34:	9f 92       	push	r9
     d36:	af 92       	push	r10
     d38:	bf 92       	push	r11
     d3a:	cf 92       	push	r12
     d3c:	df 92       	push	r13
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	6e 97       	sbiw	r28, 0x1e	; 30
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	de bf       	out	0x3e, r29	; 62
			
	uint32_t now = tinyTime_now();
     d54:	0e 94 52 09 	call	0x12a4	; 0x12a4 <tinyTime_now>
     d58:	6b 01       	movw	r12, r22
     d5a:	7c 01       	movw	r14, r24
	
	// This is a sin curve, but between 0 and 1 instead of -1 and 1
	double sinValue = 0.5+sin((double)now/(100*M_PI/SWING_RATE))/2;
     d5c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatunsisf>
     d60:	22 ed       	ldi	r18, 0xD2	; 210
     d62:	33 e5       	ldi	r19, 0x53	; 83
     d64:	4b ef       	ldi	r20, 0xFB	; 251
     d66:	51 e4       	ldi	r21, 0x41	; 65
     d68:	0e 94 cd 09 	call	0x139a	; 0x139a <__divsf3>
     d6c:	0e 94 88 0c 	call	0x1910	; 0x1910 <sin>
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	5f e3       	ldi	r21, 0x3F	; 63
     d78:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3>
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__addsf3>
     d88:	69 87       	std	Y+9, r22	; 0x09
     d8a:	7a 87       	std	Y+10, r23	; 0x0a
     d8c:	8b 87       	std	Y+11, r24	; 0x0b
     d8e:	9c 87       	std	Y+12, r25	; 0x0c
	
	// If FLASH_RATE is one, then that means that the left side of the "<" will just count from 0 to 1000, and flash_on will be true for half of the time
	_Bool flash_on = now%(uint32_t)(1000/FLASH_RATE)  <   500/FLASH_RATE;
     d90:	c7 01       	movw	r24, r14
     d92:	b6 01       	movw	r22, r12
     d94:	22 e3       	ldi	r18, 0x32	; 50
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	50 e0       	ldi	r21, 0x00	; 0
     d9c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__udivmodsi4>
     da0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatunsisf>
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	48 ec       	ldi	r20, 0xC8	; 200
     daa:	51 e4       	ldi	r21, 0x41	; 65
     dac:	0e 94 c8 09 	call	0x1390	; 0x1390 <__cmpsf2>
     db0:	88 1f       	adc	r24, r24
     db2:	88 27       	eor	r24, r24
     db4:	88 1f       	adc	r24, r24
     db6:	8f 83       	std	Y+7, r24	; 0x07
	
	// PING_RATE is usually small, so the left side counts to some large number. Since flash_time usually is also quite small,
	// the left side will usually be larger than the right
	_Bool ping_on =  now%(uint32_t)(1000/PING_RATE)   <   1000*FLASH_TIME;
     db8:	c7 01       	movw	r24, r14
     dba:	b6 01       	movw	r22, r12
     dbc:	24 ef       	ldi	r18, 0xF4	; 244
     dbe:	31 e0       	ldi	r19, 0x01	; 1
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__udivmodsi4>
     dc8:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatunsisf>
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e2       	ldi	r20, 0x20	; 32
     dd2:	51 e4       	ldi	r21, 0x41	; 65
     dd4:	0e 94 c8 09 	call	0x1390	; 0x1390 <__cmpsf2>
     dd8:	88 1f       	adc	r24, r24
     dda:	88 27       	eor	r24, r24
     ddc:	88 1f       	adc	r24, r24
     dde:	00 e6       	ldi	r16, 0x60	; 96
     de0:	18 e3       	ldi	r17, 0x38	; 56
     de2:	9e 01       	movw	r18, r28
     de4:	2f 5f       	subi	r18, 0xFF	; 255
     de6:	3f 4f       	sbci	r19, 0xFF	; 255
     de8:	0f 2e       	mov	r0, r31
     dea:	f8 e5       	ldi	r31, 0x58	; 88
     dec:	4f 2e       	mov	r4, r31
     dee:	f8 e3       	ldi	r31, 0x38	; 56
     df0:	5f 2e       	mov	r5, r31
     df2:	f0 2d       	mov	r31, r0
     df4:	0f 2e       	mov	r0, r31
     df6:	f4 e6       	ldi	r31, 0x64	; 100
     df8:	6f 2e       	mov	r6, r31
     dfa:	f8 e3       	ldi	r31, 0x38	; 56
     dfc:	7f 2e       	mov	r7, r31
     dfe:	f0 2d       	mov	r31, r0
     e00:	19 01       	movw	r2, r18
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
				break;
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     e02:	88 2e       	mov	r8, r24
     e04:	91 2c       	mov	r9, r1
     e06:	a1 2c       	mov	r10, r1
     e08:	b1 2c       	mov	r11, r1
     e0a:	2d 87       	std	Y+13, r18	; 0x0d
     e0c:	3e 87       	std	Y+14, r19	; 0x0e
     e0e:	df 80       	ldd	r13, Y+7	; 0x07
     e10:	f8 01       	movw	r30, r16
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
}

static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
     e12:	80 81       	ld	r24, Z
     e14:	83 30       	cpi	r24, 0x03	; 3
     e16:	79 f0       	breq	.+30     	; 0xe36 <tinyLED_update+0x110>
     e18:	28 f4       	brcc	.+10     	; 0xe24 <tinyLED_update+0xfe>
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	41 f0       	breq	.+16     	; 0xe2e <tinyLED_update+0x108>
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	89 f0       	breq	.+34     	; 0xe44 <tinyLED_update+0x11e>
     e22:	28 c0       	rjmp	.+80     	; 0xe74 <tinyLED_update+0x14e>
     e24:	84 30       	cpi	r24, 0x04	; 4
     e26:	a9 f0       	breq	.+42     	; 0xe52 <tinyLED_update+0x12c>
     e28:	85 30       	cpi	r24, 0x05	; 5
     e2a:	d1 f0       	breq	.+52     	; 0xe60 <tinyLED_update+0x13a>
     e2c:	23 c0       	rjmp	.+70     	; 0xe74 <tinyLED_update+0x14e>
	{
		case OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
			break;
		case RED:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 0, 0};
     e2e:	f1 2c       	mov	r15, r1
     e30:	e1 2c       	mov	r14, r1
     e32:	69 e1       	ldi	r22, 0x19	; 25
     e34:	22 c0       	rjmp	.+68     	; 0xe7a <tinyLED_update+0x154>
			break;
		case GREEN:
			rgb_color = (struct RGB_Color){0, 255*LED_BRIGHTNESS, 0};
     e36:	f1 2c       	mov	r15, r1
     e38:	0f 2e       	mov	r0, r31
     e3a:	f9 e1       	ldi	r31, 0x19	; 25
     e3c:	ef 2e       	mov	r14, r31
     e3e:	f0 2d       	mov	r31, r0
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	1b c0       	rjmp	.+54     	; 0xe7a <tinyLED_update+0x154>
			break;
		case BLUE:
			rgb_color = (struct RGB_Color){0, 0, 255*LED_BRIGHTNESS};
     e44:	0f 2e       	mov	r0, r31
     e46:	f9 e1       	ldi	r31, 0x19	; 25
     e48:	ff 2e       	mov	r15, r31
     e4a:	f0 2d       	mov	r31, r0
     e4c:	e1 2c       	mov	r14, r1
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	14 c0       	rjmp	.+40     	; 0xe7a <tinyLED_update+0x154>
			break;
		case YELLOW:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 0};
     e52:	f1 2c       	mov	r15, r1
     e54:	0f 2e       	mov	r0, r31
     e56:	f9 e1       	ldi	r31, 0x19	; 25
     e58:	ef 2e       	mov	r14, r31
     e5a:	f0 2d       	mov	r31, r0
     e5c:	69 e1       	ldi	r22, 0x19	; 25
     e5e:	0d c0       	rjmp	.+26     	; 0xe7a <tinyLED_update+0x154>
			// Should the /3 be there? This requires testing.
			// After testing, findings were that at 0.1 brightness, one would see the three LEDs instead of one white led
			// We try with /2 instead.
			// We find that the best results come from not dividing by anything. At leasts in the lower brightness settings, and that
			// is where we suspect it will be most of the time. When we divide, the LEDs are so weak, that they appear as three lights instead of one.
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS};
     e60:	0f 2e       	mov	r0, r31
     e62:	f9 e1       	ldi	r31, 0x19	; 25
     e64:	ff 2e       	mov	r15, r31
     e66:	f0 2d       	mov	r31, r0
     e68:	0f 2e       	mov	r0, r31
     e6a:	f9 e1       	ldi	r31, 0x19	; 25
     e6c:	ef 2e       	mov	r14, r31
     e6e:	f0 2d       	mov	r31, r0
     e70:	69 e1       	ldi	r22, 0x19	; 25
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <tinyLED_update+0x154>
static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
	{
		case OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
     e74:	f1 2c       	mov	r15, r1
     e76:	e1 2c       	mov	r14, r1
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	2f 82       	std	Y+7, r2	; 0x07
     e7c:	38 86       	std	Y+8, r3	; 0x08
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
	{		
		// Convert enum to RGB_Color
		rgb_colors[i] = tinyLED_enum_to_RGB_Color(tinyLED_colors[i].color);
     e7e:	d1 01       	movw	r26, r2
     e80:	6c 93       	st	X, r22
     e82:	11 96       	adiw	r26, 0x01	; 1
     e84:	ec 92       	st	X, r14
     e86:	11 97       	sbiw	r26, 0x01	; 1
     e88:	12 96       	adiw	r26, 0x02	; 2
     e8a:	fc 92       	st	X, r15
			
		// Adjust colors according to mode
		switch(tinyLED_colors[i].mode)
     e8c:	81 81       	ldd	r24, Z+1	; 0x01
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	d1 f0       	breq	.+52     	; 0xec6 <tinyLED_update+0x1a0>
     e92:	18 f4       	brcc	.+6      	; 0xe9a <tinyLED_update+0x174>
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	41 f0       	breq	.+16     	; 0xea8 <tinyLED_update+0x182>
     e98:	cd c0       	rjmp	.+410    	; 0x1034 <tinyLED_update+0x30e>
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	09 f4       	brne	.+2      	; 0xea0 <tinyLED_update+0x17a>
     e9e:	44 c0       	rjmp	.+136    	; 0xf28 <tinyLED_update+0x202>
     ea0:	84 30       	cpi	r24, 0x04	; 4
     ea2:	09 f4       	brne	.+2      	; 0xea6 <tinyLED_update+0x180>
     ea4:	bf c0       	rjmp	.+382    	; 0x1024 <tinyLED_update+0x2fe>
     ea6:	c6 c0       	rjmp	.+396    	; 0x1034 <tinyLED_update+0x30e>
		{
			case STABLE:
				break;
			case FLASH:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*flash_on, rgb_colors[i].green*flash_on, rgb_colors[i].blue*flash_on};
     ea8:	d6 9e       	mul	r13, r22
     eaa:	60 2d       	mov	r22, r0
     eac:	11 24       	eor	r1, r1
     eae:	ef 81       	ldd	r30, Y+7	; 0x07
     eb0:	f8 85       	ldd	r31, Y+8	; 0x08
     eb2:	60 83       	st	Z, r22
     eb4:	de 9c       	mul	r13, r14
     eb6:	e0 2c       	mov	r14, r0
     eb8:	11 24       	eor	r1, r1
     eba:	e1 82       	std	Z+1, r14	; 0x01
     ebc:	df 9c       	mul	r13, r15
     ebe:	f0 2c       	mov	r15, r0
     ec0:	11 24       	eor	r1, r1
     ec2:	f2 82       	std	Z+2, r15	; 0x02
				break;
     ec4:	b7 c0       	rjmp	.+366    	; 0x1034 <tinyLED_update+0x30e>
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__floatsisf>
     ed0:	29 85       	ldd	r18, Y+9	; 0x09
     ed2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ed4:	4b 85       	ldd	r20, Y+11	; 0x0b
     ed6:	5c 85       	ldd	r21, Y+12	; 0x0c
     ed8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3>
     edc:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fixunssfsi>
     ee0:	d1 01       	movw	r26, r2
     ee2:	6c 93       	st	X, r22
     ee4:	6e 2d       	mov	r22, r14
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__floatsisf>
     ef0:	29 85       	ldd	r18, Y+9	; 0x09
     ef2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ef4:	4b 85       	ldd	r20, Y+11	; 0x0b
     ef6:	5c 85       	ldd	r21, Y+12	; 0x0c
     ef8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3>
     efc:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fixunssfsi>
     f00:	f1 01       	movw	r30, r2
     f02:	61 83       	std	Z+1, r22	; 0x01
     f04:	6f 2d       	mov	r22, r15
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__floatsisf>
     f10:	29 85       	ldd	r18, Y+9	; 0x09
     f12:	3a 85       	ldd	r19, Y+10	; 0x0a
     f14:	4b 85       	ldd	r20, Y+11	; 0x0b
     f16:	5c 85       	ldd	r21, Y+12	; 0x0c
     f18:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3>
     f1c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fixunssfsi>
     f20:	d1 01       	movw	r26, r2
     f22:	12 96       	adiw	r26, 0x02	; 2
     f24:	6c 93       	st	X, r22
				break;
     f26:	86 c0       	rjmp	.+268    	; 0x1034 <tinyLED_update+0x30e>
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatunsisf>
     f32:	9b 01       	movw	r18, r22
     f34:	ac 01       	movw	r20, r24
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	80 e8       	ldi	r24, 0x80	; 128
     f3c:	9f e3       	ldi	r25, 0x3F	; 63
     f3e:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <fmin>
     f42:	6b 8b       	std	Y+19, r22	; 0x13
     f44:	7c 8b       	std	Y+20, r23	; 0x14
     f46:	8d 8b       	std	Y+21, r24	; 0x15
     f48:	9e 8b       	std	Y+22, r25	; 0x16
     f4a:	c5 01       	movw	r24, r10
     f4c:	b4 01       	movw	r22, r8
     f4e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__floatsisf>
     f52:	6f 87       	std	Y+15, r22	; 0x0f
     f54:	78 8b       	std	Y+16, r23	; 0x10
     f56:	89 8b       	std	Y+17, r24	; 0x11
     f58:	9a 8b       	std	Y+18, r25	; 0x12
     f5a:	6e 2d       	mov	r22, r14
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatunsisf>
     f66:	9b 01       	movw	r18, r22
     f68:	ac 01       	movw	r20, r24
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	80 e8       	ldi	r24, 0x80	; 128
     f70:	9f e3       	ldi	r25, 0x3F	; 63
     f72:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <fmin>
     f76:	6f 8b       	std	Y+23, r22	; 0x17
     f78:	78 8f       	std	Y+24, r23	; 0x18
     f7a:	89 8f       	std	Y+25, r24	; 0x19
     f7c:	9a 8f       	std	Y+26, r25	; 0x1a
     f7e:	6f 2d       	mov	r22, r15
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatunsisf>
     f8a:	9b 01       	movw	r18, r22
     f8c:	ac 01       	movw	r20, r24
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	80 e8       	ldi	r24, 0x80	; 128
     f94:	9f e3       	ldi	r25, 0x3F	; 63
     f96:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <fmin>
     f9a:	6b 8f       	std	Y+27, r22	; 0x1b
     f9c:	7c 8f       	std	Y+28, r23	; 0x1c
     f9e:	8d 8f       	std	Y+29, r24	; 0x1d
     fa0:	9e 8f       	std	Y+30, r25	; 0x1e
     fa2:	23 e3       	ldi	r18, 0x33	; 51
     fa4:	33 e3       	ldi	r19, 0x33	; 51
     fa6:	43 ea       	ldi	r20, 0xA3	; 163
     fa8:	50 e4       	ldi	r21, 0x40	; 64
     faa:	6b 89       	ldd	r22, Y+19	; 0x13
     fac:	7c 89       	ldd	r23, Y+20	; 0x14
     fae:	8d 89       	ldd	r24, Y+21	; 0x15
     fb0:	9e 89       	ldd	r25, Y+22	; 0x16
     fb2:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3>
     fb6:	2f 85       	ldd	r18, Y+15	; 0x0f
     fb8:	38 89       	ldd	r19, Y+16	; 0x10
     fba:	49 89       	ldd	r20, Y+17	; 0x11
     fbc:	5a 89       	ldd	r21, Y+18	; 0x12
     fbe:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3>
     fc2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fixunssfsi>
     fc6:	ef 81       	ldd	r30, Y+7	; 0x07
     fc8:	f8 85       	ldd	r31, Y+8	; 0x08
     fca:	60 83       	st	Z, r22
     fcc:	23 e3       	ldi	r18, 0x33	; 51
     fce:	33 e3       	ldi	r19, 0x33	; 51
     fd0:	43 ea       	ldi	r20, 0xA3	; 163
     fd2:	50 e4       	ldi	r21, 0x40	; 64
     fd4:	6f 89       	ldd	r22, Y+23	; 0x17
     fd6:	78 8d       	ldd	r23, Y+24	; 0x18
     fd8:	89 8d       	ldd	r24, Y+25	; 0x19
     fda:	9a 8d       	ldd	r25, Y+26	; 0x1a
     fdc:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3>
     fe0:	2f 85       	ldd	r18, Y+15	; 0x0f
     fe2:	38 89       	ldd	r19, Y+16	; 0x10
     fe4:	49 89       	ldd	r20, Y+17	; 0x11
     fe6:	5a 89       	ldd	r21, Y+18	; 0x12
     fe8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3>
     fec:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fixunssfsi>
     ff0:	af 81       	ldd	r26, Y+7	; 0x07
     ff2:	b8 85       	ldd	r27, Y+8	; 0x08
     ff4:	11 96       	adiw	r26, 0x01	; 1
     ff6:	6c 93       	st	X, r22
     ff8:	23 e3       	ldi	r18, 0x33	; 51
     ffa:	33 e3       	ldi	r19, 0x33	; 51
     ffc:	43 ea       	ldi	r20, 0xA3	; 163
     ffe:	50 e4       	ldi	r21, 0x40	; 64
    1000:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1002:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1004:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1006:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1008:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3>
    100c:	2f 85       	ldd	r18, Y+15	; 0x0f
    100e:	38 89       	ldd	r19, Y+16	; 0x10
    1010:	49 89       	ldd	r20, Y+17	; 0x11
    1012:	5a 89       	ldd	r21, Y+18	; 0x12
    1014:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3>
    1018:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fixunssfsi>
    101c:	ef 81       	ldd	r30, Y+7	; 0x07
    101e:	f8 85       	ldd	r31, Y+8	; 0x08
    1020:	62 83       	std	Z+2, r22	; 0x02
				break;
    1022:	08 c0       	rjmp	.+16     	; 0x1034 <tinyLED_update+0x30e>
			case FLASH_ONCE:
				if(tinyLED_flash_once_time[i]>0){
    1024:	d2 01       	movw	r26, r4
    1026:	8c 91       	ld	r24, X
    1028:	88 23       	and	r24, r24
    102a:	19 f0       	breq	.+6      	; 0x1032 <tinyLED_update+0x30c>
					rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red, rgb_colors[i].green, rgb_colors[i].blue};
					tinyLED_flash_once_time[i]--;
    102c:	81 50       	subi	r24, 0x01	; 1
    102e:	8c 93       	st	X, r24
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <tinyLED_update+0x30e>
				}
				else{
					tinyLED_colors[i].color = OFF;
    1032:	10 82       	st	Z, r1
    1034:	0e 5f       	subi	r16, 0xFE	; 254
    1036:	1f 4f       	sbci	r17, 0xFF	; 255
    1038:	b3 e0       	ldi	r27, 0x03	; 3
    103a:	2b 0e       	add	r2, r27
    103c:	31 1c       	adc	r3, r1
    103e:	ef ef       	ldi	r30, 0xFF	; 255
    1040:	4e 1a       	sub	r4, r30
    1042:	5e 0a       	sbc	r5, r30
	
	// This is where we store all the actual color values we want to send to the LED
	struct RGB_Color rgb_colors[NUMBER_OF_LEDS];
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
    1044:	06 15       	cp	r16, r6
    1046:	17 05       	cpc	r17, r7
    1048:	09 f0       	breq	.+2      	; 0x104c <tinyLED_update+0x326>
    104a:	e2 ce       	rjmp	.-572    	; 0xe10 <tinyLED_update+0xea>
    104c:	cd 84       	ldd	r12, Y+13	; 0x0d
    104e:	de 84       	ldd	r13, Y+14	; 0x0e
				break;
		}
	}
	
	// We only write to the LEDs if there is something to change. (eg. in SWING mode, we update the LEDs almost every cycle)
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
    1050:	6a e5       	ldi	r22, 0x5A	; 90
    1052:	78 e3       	ldi	r23, 0x38	; 56
    1054:	ce 01       	movw	r24, r28
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	0e 94 63 06 	call	0xcc6	; 0xcc6 <tinyLED_RGB_Color_Compare>
    105c:	81 11       	cpse	r24, r1
    105e:	2f c0       	rjmp	.+94     	; 0x10be <tinyLED_update+0x398>
    1060:	0a e5       	ldi	r16, 0x5A	; 90
    1062:	18 e3       	ldi	r17, 0x38	; 56
    1064:	7e 01       	movw	r14, r28
    1066:	f7 e0       	ldi	r31, 0x07	; 7
    1068:	ef 0e       	add	r14, r31
    106a:	f1 1c       	adc	r15, r1
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
		{
			// Write to LEDs
			//For some reason, the data-bus to the LEDs is serialized as GRB
			//which means the 24-bit data-bus will look like [Green[0:7], Red[0:7], Blue[0:7]]
			tinyLED_SPIWriteByte(rgb_colors[i].green);
    106c:	d6 01       	movw	r26, r12
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	8c 91       	ld	r24, X
    1072:	0e 94 2e 06 	call	0xc5c	; 0xc5c <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].red);
    1076:	f6 01       	movw	r30, r12
    1078:	80 81       	ld	r24, Z
    107a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
    107e:	d6 01       	movw	r26, r12
    1080:	12 96       	adiw	r26, 0x02	; 2
    1082:	8c 91       	ld	r24, X
    1084:	0e 94 2e 06 	call	0xc5c	; 0xc5c <tinyLED_SPIWriteByte>
			tinyLED_old_colors[i] = rgb_colors[i];
    1088:	f6 01       	movw	r30, r12
    108a:	81 91       	ld	r24, Z+
    108c:	91 91       	ld	r25, Z+
    108e:	a1 91       	ld	r26, Z+
    1090:	6f 01       	movw	r12, r30
    1092:	f8 01       	movw	r30, r16
    1094:	81 93       	st	Z+, r24
    1096:	91 93       	st	Z+, r25
    1098:	a1 93       	st	Z+, r26
    109a:	8f 01       	movw	r16, r30
		}
	}
	
	// We only write to the LEDs if there is something to change. (eg. in SWING mode, we update the LEDs almost every cycle)
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
    109c:	ce 14       	cp	r12, r14
    109e:	df 04       	cpc	r13, r15
    10a0:	29 f7       	brne	.-54     	; 0x106c <tinyLED_update+0x346>
			tinyLED_SPIWriteByte(rgb_colors[i].green);
			tinyLED_SPIWriteByte(rgb_colors[i].red);
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
			tinyLED_old_colors[i] = rgb_colors[i];
		}
		tinyDebugger_send_uint8("LED1 color", tinyLED_colors[0].color);
    10a2:	00 e6       	ldi	r16, 0x60	; 96
    10a4:	18 e3       	ldi	r17, 0x38	; 56
    10a6:	d8 01       	movw	r26, r16
    10a8:	6c 91       	ld	r22, X
    10aa:	88 e2       	ldi	r24, 0x28	; 40
    10ac:	95 ea       	ldi	r25, 0xA5	; 165
    10ae:	0e 94 90 04 	call	0x920	; 0x920 <tinyDebugger_send_uint8>
		tinyDebugger_send_uint8("LED2 color", tinyLED_colors[1].color);
    10b2:	f8 01       	movw	r30, r16
    10b4:	62 81       	ldd	r22, Z+2	; 0x02
    10b6:	83 e3       	ldi	r24, 0x33	; 51
    10b8:	95 ea       	ldi	r25, 0xA5	; 165
    10ba:	0e 94 90 04 	call	0x920	; 0x920 <tinyDebugger_send_uint8>
	}
}
    10be:	6e 96       	adiw	r28, 0x1e	; 30
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	bf 90       	pop	r11
    10d6:	af 90       	pop	r10
    10d8:	9f 90       	pop	r9
    10da:	8f 90       	pop	r8
    10dc:	7f 90       	pop	r7
    10de:	6f 90       	pop	r6
    10e0:	5f 90       	pop	r5
    10e2:	4f 90       	pop	r4
    10e4:	3f 90       	pop	r3
    10e6:	2f 90       	pop	r2
    10e8:	08 95       	ret

000010ea <tinyPotential_update>:

/*
Update the potential
*/
void tinyPotential_update()
{
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
Function to decay the potential towards 0
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
    10f2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <tinyTime_now>
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    10f6:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <previous_update_time>
    10fa:	68 1b       	sub	r22, r24
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatunsisf>
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	48 ec       	ldi	r20, 0xC8	; 200
    110c:	52 e4       	ldi	r21, 0x42	; 66
    110e:	0e 94 cd 09 	call	0x139a	; 0x139a <__divsf3>
    1112:	90 58       	subi	r25, 0x80	; 128
    1114:	0e 94 47 0a 	call	0x148e	; 0x148e <exp>
    1118:	20 91 48 38 	lds	r18, 0x3848	; 0x803848 <tinyPotential_potential>
    111c:	30 91 49 38 	lds	r19, 0x3849	; 0x803849 <tinyPotential_potential+0x1>
    1120:	40 91 4a 38 	lds	r20, 0x384A	; 0x80384a <tinyPotential_potential+0x2>
    1124:	50 91 4b 38 	lds	r21, 0x384B	; 0x80384b <tinyPotential_potential+0x3>
    1128:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3>
    112c:	6b 01       	movw	r12, r22
    112e:	7c 01       	movw	r14, r24
	if(fabs(tinyPotential_potential)<0.1){
    1130:	9f 77       	andi	r25, 0x7F	; 127
    1132:	2d ec       	ldi	r18, 0xCD	; 205
    1134:	3c ec       	ldi	r19, 0xCC	; 204
    1136:	4c ec       	ldi	r20, 0xCC	; 204
    1138:	5d e3       	ldi	r21, 0x3D	; 61
    113a:	0e 94 c8 09 	call	0x1390	; 0x1390 <__cmpsf2>
    113e:	88 23       	and	r24, r24
    1140:	4c f0       	brlt	.+18     	; 0x1154 <tinyPotential_update+0x6a>
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    1142:	c0 92 48 38 	sts	0x3848, r12	; 0x803848 <tinyPotential_potential>
    1146:	d0 92 49 38 	sts	0x3849, r13	; 0x803849 <tinyPotential_potential+0x1>
    114a:	e0 92 4a 38 	sts	0x384A, r14	; 0x80384a <tinyPotential_potential+0x2>
    114e:	f0 92 4b 38 	sts	0x384B, r15	; 0x80384b <tinyPotential_potential+0x3>
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <tinyPotential_update+0x7a>
	if(fabs(tinyPotential_potential)<0.1){
		tinyPotential_potential=0;
    1154:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <tinyPotential_potential>
    1158:	10 92 49 38 	sts	0x3849, r1	; 0x803849 <tinyPotential_potential+0x1>
    115c:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <tinyPotential_potential+0x2>
    1160:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <tinyPotential_potential+0x3>
	}
	previous_update_time = tinyTime_now();
    1164:	0e 94 52 09 	call	0x12a4	; 0x12a4 <tinyTime_now>
    1168:	60 93 44 38 	sts	0x3844, r22	; 0x803844 <previous_update_time>
    116c:	70 93 45 38 	sts	0x3845, r23	; 0x803845 <previous_update_time+0x1>
    1170:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <previous_update_time+0x2>
    1174:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <previous_update_time+0x3>
void tinyPotential_update()
{
	//Some of the potential in the neuron has decayed away
	tinyPotential_decay();
	// Update potential with values from Dendrites
	tinyPotential_potential = tinyDendrite_update_potential(tinyPotential_potential);
    1178:	60 91 48 38 	lds	r22, 0x3848	; 0x803848 <tinyPotential_potential>
    117c:	70 91 49 38 	lds	r23, 0x3849	; 0x803849 <tinyPotential_potential+0x1>
    1180:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <tinyPotential_potential+0x2>
    1184:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <tinyPotential_potential+0x3>
    1188:	0e 94 e6 05 	call	0xbcc	; 0xbcc <tinyDendrite_update_potential>
    118c:	60 93 48 38 	sts	0x3848, r22	; 0x803848 <tinyPotential_potential>
    1190:	70 93 49 38 	sts	0x3849, r23	; 0x803849 <tinyPotential_potential+0x1>
    1194:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <tinyPotential_potential+0x2>
    1198:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <tinyPotential_potential+0x3>
	
	// Update potential from button press
	tinyPotential_potential = tinyButton_update_potential(tinyPotential_potential);
    119c:	0e 94 24 04 	call	0x848	; 0x848 <tinyButton_update_potential>
    11a0:	60 93 48 38 	sts	0x3848, r22	; 0x803848 <tinyPotential_potential>
    11a4:	70 93 49 38 	sts	0x3849, r23	; 0x803849 <tinyPotential_potential+0x1>
    11a8:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <tinyPotential_potential+0x2>
    11ac:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <tinyPotential_potential+0x3>
	
	// Update potential with values from spontaneous pulse.
	tinyPotential_potential = tinyPulse_update_potential(tinyPotential_potential);
    11b0:	0e 94 06 09 	call	0x120c	; 0x120c <tinyPulse_update_potential>
    11b4:	ab 01       	movw	r20, r22
    11b6:	bc 01       	movw	r22, r24
    11b8:	40 93 48 38 	sts	0x3848, r20	; 0x803848 <tinyPotential_potential>
    11bc:	50 93 49 38 	sts	0x3849, r21	; 0x803849 <tinyPotential_potential+0x1>
    11c0:	60 93 4a 38 	sts	0x384A, r22	; 0x80384a <tinyPotential_potential+0x2>
    11c4:	70 93 4b 38 	sts	0x384B, r23	; 0x80384b <tinyPotential_potential+0x3>
	
	tinyDebugger_send_double("Potential", tinyPotential_potential);
    11c8:	8e e3       	ldi	r24, 0x3E	; 62
    11ca:	95 ea       	ldi	r25, 0xA5	; 165
    11cc:	0e 94 a1 04 	call	0x942	; 0x942 <tinyDebugger_send_double>
	
	
	// Let the axon affect the potential
	// This is also where we decide whether or not the axon should fire
	tinyPotential_potential = tinyAxon_update_potential(tinyPotential_potential);
    11d0:	60 91 48 38 	lds	r22, 0x3848	; 0x803848 <tinyPotential_potential>
    11d4:	70 91 49 38 	lds	r23, 0x3849	; 0x803849 <tinyPotential_potential+0x1>
    11d8:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <tinyPotential_potential+0x2>
    11dc:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <tinyPotential_potential+0x3>
    11e0:	0e 94 0f 03 	call	0x61e	; 0x61e <tinyAxon_update_potential>
    11e4:	60 93 48 38 	sts	0x3848, r22	; 0x803848 <tinyPotential_potential>
    11e8:	70 93 49 38 	sts	0x3849, r23	; 0x803849 <tinyPotential_potential+0x1>
    11ec:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <tinyPotential_potential+0x2>
    11f0:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <tinyPotential_potential+0x3>
}
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	08 95       	ret

000011fe <tinyPulse_toggle_pulse_mode>:
uint32_t time_of_last_pulse = 0;
uint16_t time_since_last_pulse = 0;
uint16_t ideal_time_between_pulses = 1000/PULSEMODE_FREQUENCY;

void tinyPulse_toggle_pulse_mode(){
	pulse_mode = !pulse_mode;
    11fe:	90 91 52 38 	lds	r25, 0x3852	; 0x803852 <pulse_mode>
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	89 27       	eor	r24, r25
    1206:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <pulse_mode>
    120a:	08 95       	ret

0000120c <tinyPulse_update_potential>:
}

double tinyPulse_update_potential(double potential){
    120c:	cf 92       	push	r12
    120e:	df 92       	push	r13
    1210:	ef 92       	push	r14
    1212:	ff 92       	push	r15
    1214:	6b 01       	movw	r12, r22
    1216:	7c 01       	movw	r14, r24
	if(pulse_mode){
    1218:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <pulse_mode>
    121c:	88 23       	and	r24, r24
    121e:	39 f1       	breq	.+78     	; 0x126e <tinyPulse_update_potential+0x62>
		
		time_since_last_pulse = tinyTime_now() - time_of_last_pulse;
    1220:	0e 94 52 09 	call	0x12a4	; 0x12a4 <tinyTime_now>
    1224:	20 91 4e 38 	lds	r18, 0x384E	; 0x80384e <time_of_last_pulse>
    1228:	30 91 4f 38 	lds	r19, 0x384F	; 0x80384f <time_of_last_pulse+0x1>
    122c:	62 1b       	sub	r22, r18
    122e:	73 0b       	sbc	r23, r19
    1230:	60 93 4c 38 	sts	0x384C, r22	; 0x80384c <time_since_last_pulse>
    1234:	70 93 4d 38 	sts	0x384D, r23	; 0x80384d <time_since_last_pulse+0x1>
		
		if(time_since_last_pulse >= ideal_time_between_pulses){
    1238:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <ideal_time_between_pulses>
    123c:	90 91 14 38 	lds	r25, 0x3814	; 0x803814 <ideal_time_between_pulses+0x1>
    1240:	68 17       	cp	r22, r24
    1242:	79 07       	cpc	r23, r25
    1244:	a0 f0       	brcs	.+40     	; 0x126e <tinyPulse_update_potential+0x62>
			// This isn't actually a button press. You could have a separate variable for this, but it seems unnecessary.
			potential += BUTTON_PRESS_REACTION;
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 ed       	ldi	r20, 0xD0	; 208
    124c:	51 e4       	ldi	r21, 0x41	; 65
    124e:	c7 01       	movw	r24, r14
    1250:	b6 01       	movw	r22, r12
    1252:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__addsf3>
    1256:	6b 01       	movw	r12, r22
    1258:	7c 01       	movw	r14, r24
			time_of_last_pulse = tinyTime_now();			
    125a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <tinyTime_now>
    125e:	60 93 4e 38 	sts	0x384E, r22	; 0x80384e <time_of_last_pulse>
    1262:	70 93 4f 38 	sts	0x384F, r23	; 0x80384f <time_of_last_pulse+0x1>
    1266:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <time_of_last_pulse+0x2>
    126a:	90 93 51 38 	sts	0x3851, r25	; 0x803851 <time_of_last_pulse+0x3>
		}
	}
	return potential;
}
    126e:	c7 01       	movw	r24, r14
    1270:	b6 01       	movw	r22, r12
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	cf 90       	pop	r12
    127a:	08 95       	ret

0000127c <tinyTime_counter_increment>:
    127c:	80 91 53 38 	lds	r24, 0x3853	; 0x803853 <time_counter>
    1280:	90 91 54 38 	lds	r25, 0x3854	; 0x803854 <time_counter+0x1>
    1284:	a0 91 55 38 	lds	r26, 0x3855	; 0x803855 <time_counter+0x2>
    1288:	b0 91 56 38 	lds	r27, 0x3856	; 0x803856 <time_counter+0x3>
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	a1 1d       	adc	r26, r1
    1290:	b1 1d       	adc	r27, r1
    1292:	80 93 53 38 	sts	0x3853, r24	; 0x803853 <time_counter>
    1296:	90 93 54 38 	sts	0x3854, r25	; 0x803854 <time_counter+0x1>
    129a:	a0 93 55 38 	sts	0x3855, r26	; 0x803855 <time_counter+0x2>
    129e:	b0 93 56 38 	sts	0x3856, r27	; 0x803856 <time_counter+0x3>
    12a2:	08 95       	ret

000012a4 <tinyTime_now>:
    12a4:	60 91 53 38 	lds	r22, 0x3853	; 0x803853 <time_counter>
    12a8:	70 91 54 38 	lds	r23, 0x3854	; 0x803854 <time_counter+0x1>
    12ac:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <time_counter+0x2>
    12b0:	90 91 56 38 	lds	r25, 0x3856	; 0x803856 <time_counter+0x3>
    12b4:	08 95       	ret

000012b6 <__subsf3>:
    12b6:	50 58       	subi	r21, 0x80	; 128

000012b8 <__addsf3>:
    12b8:	bb 27       	eor	r27, r27
    12ba:	aa 27       	eor	r26, r26
    12bc:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__addsf3x>
    12c0:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__fp_round>
    12c4:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_pscA>
    12c8:	38 f0       	brcs	.+14     	; 0x12d8 <__addsf3+0x20>
    12ca:	0e 94 5f 0b 	call	0x16be	; 0x16be <__fp_pscB>
    12ce:	20 f0       	brcs	.+8      	; 0x12d8 <__addsf3+0x20>
    12d0:	39 f4       	brne	.+14     	; 0x12e0 <__addsf3+0x28>
    12d2:	9f 3f       	cpi	r25, 0xFF	; 255
    12d4:	19 f4       	brne	.+6      	; 0x12dc <__addsf3+0x24>
    12d6:	26 f4       	brtc	.+8      	; 0x12e0 <__addsf3+0x28>
    12d8:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__fp_nan>
    12dc:	0e f4       	brtc	.+2      	; 0x12e0 <__addsf3+0x28>
    12de:	e0 95       	com	r30
    12e0:	e7 fb       	bst	r30, 7
    12e2:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__fp_inf>

000012e6 <__addsf3x>:
    12e6:	e9 2f       	mov	r30, r25
    12e8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fp_split3>
    12ec:	58 f3       	brcs	.-42     	; 0x12c4 <__addsf3+0xc>
    12ee:	ba 17       	cp	r27, r26
    12f0:	62 07       	cpc	r22, r18
    12f2:	73 07       	cpc	r23, r19
    12f4:	84 07       	cpc	r24, r20
    12f6:	95 07       	cpc	r25, r21
    12f8:	20 f0       	brcs	.+8      	; 0x1302 <__addsf3x+0x1c>
    12fa:	79 f4       	brne	.+30     	; 0x131a <__addsf3x+0x34>
    12fc:	a6 f5       	brtc	.+104    	; 0x1366 <__addsf3x+0x80>
    12fe:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__fp_zero>
    1302:	0e f4       	brtc	.+2      	; 0x1306 <__addsf3x+0x20>
    1304:	e0 95       	com	r30
    1306:	0b 2e       	mov	r0, r27
    1308:	ba 2f       	mov	r27, r26
    130a:	a0 2d       	mov	r26, r0
    130c:	0b 01       	movw	r0, r22
    130e:	b9 01       	movw	r22, r18
    1310:	90 01       	movw	r18, r0
    1312:	0c 01       	movw	r0, r24
    1314:	ca 01       	movw	r24, r20
    1316:	a0 01       	movw	r20, r0
    1318:	11 24       	eor	r1, r1
    131a:	ff 27       	eor	r31, r31
    131c:	59 1b       	sub	r21, r25
    131e:	99 f0       	breq	.+38     	; 0x1346 <__addsf3x+0x60>
    1320:	59 3f       	cpi	r21, 0xF9	; 249
    1322:	50 f4       	brcc	.+20     	; 0x1338 <__addsf3x+0x52>
    1324:	50 3e       	cpi	r21, 0xE0	; 224
    1326:	68 f1       	brcs	.+90     	; 0x1382 <__addsf3x+0x9c>
    1328:	1a 16       	cp	r1, r26
    132a:	f0 40       	sbci	r31, 0x00	; 0
    132c:	a2 2f       	mov	r26, r18
    132e:	23 2f       	mov	r18, r19
    1330:	34 2f       	mov	r19, r20
    1332:	44 27       	eor	r20, r20
    1334:	58 5f       	subi	r21, 0xF8	; 248
    1336:	f3 cf       	rjmp	.-26     	; 0x131e <__addsf3x+0x38>
    1338:	46 95       	lsr	r20
    133a:	37 95       	ror	r19
    133c:	27 95       	ror	r18
    133e:	a7 95       	ror	r26
    1340:	f0 40       	sbci	r31, 0x00	; 0
    1342:	53 95       	inc	r21
    1344:	c9 f7       	brne	.-14     	; 0x1338 <__addsf3x+0x52>
    1346:	7e f4       	brtc	.+30     	; 0x1366 <__addsf3x+0x80>
    1348:	1f 16       	cp	r1, r31
    134a:	ba 0b       	sbc	r27, r26
    134c:	62 0b       	sbc	r22, r18
    134e:	73 0b       	sbc	r23, r19
    1350:	84 0b       	sbc	r24, r20
    1352:	ba f0       	brmi	.+46     	; 0x1382 <__addsf3x+0x9c>
    1354:	91 50       	subi	r25, 0x01	; 1
    1356:	a1 f0       	breq	.+40     	; 0x1380 <__addsf3x+0x9a>
    1358:	ff 0f       	add	r31, r31
    135a:	bb 1f       	adc	r27, r27
    135c:	66 1f       	adc	r22, r22
    135e:	77 1f       	adc	r23, r23
    1360:	88 1f       	adc	r24, r24
    1362:	c2 f7       	brpl	.-16     	; 0x1354 <__addsf3x+0x6e>
    1364:	0e c0       	rjmp	.+28     	; 0x1382 <__addsf3x+0x9c>
    1366:	ba 0f       	add	r27, r26
    1368:	62 1f       	adc	r22, r18
    136a:	73 1f       	adc	r23, r19
    136c:	84 1f       	adc	r24, r20
    136e:	48 f4       	brcc	.+18     	; 0x1382 <__addsf3x+0x9c>
    1370:	87 95       	ror	r24
    1372:	77 95       	ror	r23
    1374:	67 95       	ror	r22
    1376:	b7 95       	ror	r27
    1378:	f7 95       	ror	r31
    137a:	9e 3f       	cpi	r25, 0xFE	; 254
    137c:	08 f0       	brcs	.+2      	; 0x1380 <__addsf3x+0x9a>
    137e:	b0 cf       	rjmp	.-160    	; 0x12e0 <__addsf3+0x28>
    1380:	93 95       	inc	r25
    1382:	88 0f       	add	r24, r24
    1384:	08 f0       	brcs	.+2      	; 0x1388 <__addsf3x+0xa2>
    1386:	99 27       	eor	r25, r25
    1388:	ee 0f       	add	r30, r30
    138a:	97 95       	ror	r25
    138c:	87 95       	ror	r24
    138e:	08 95       	ret

00001390 <__cmpsf2>:
    1390:	0e 94 04 0b 	call	0x1608	; 0x1608 <__fp_cmp>
    1394:	08 f4       	brcc	.+2      	; 0x1398 <__cmpsf2+0x8>
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	08 95       	ret

0000139a <__divsf3>:
    139a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__divsf3x>
    139e:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__fp_round>
    13a2:	0e 94 5f 0b 	call	0x16be	; 0x16be <__fp_pscB>
    13a6:	58 f0       	brcs	.+22     	; 0x13be <__divsf3+0x24>
    13a8:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_pscA>
    13ac:	40 f0       	brcs	.+16     	; 0x13be <__divsf3+0x24>
    13ae:	29 f4       	brne	.+10     	; 0x13ba <__divsf3+0x20>
    13b0:	5f 3f       	cpi	r21, 0xFF	; 255
    13b2:	29 f0       	breq	.+10     	; 0x13be <__divsf3+0x24>
    13b4:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__fp_inf>
    13b8:	51 11       	cpse	r21, r1
    13ba:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__fp_szero>
    13be:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__fp_nan>

000013c2 <__divsf3x>:
    13c2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fp_split3>
    13c6:	68 f3       	brcs	.-38     	; 0x13a2 <__divsf3+0x8>

000013c8 <__divsf3_pse>:
    13c8:	99 23       	and	r25, r25
    13ca:	b1 f3       	breq	.-20     	; 0x13b8 <__divsf3+0x1e>
    13cc:	55 23       	and	r21, r21
    13ce:	91 f3       	breq	.-28     	; 0x13b4 <__divsf3+0x1a>
    13d0:	95 1b       	sub	r25, r21
    13d2:	55 0b       	sbc	r21, r21
    13d4:	bb 27       	eor	r27, r27
    13d6:	aa 27       	eor	r26, r26
    13d8:	62 17       	cp	r22, r18
    13da:	73 07       	cpc	r23, r19
    13dc:	84 07       	cpc	r24, r20
    13de:	38 f0       	brcs	.+14     	; 0x13ee <__divsf3_pse+0x26>
    13e0:	9f 5f       	subi	r25, 0xFF	; 255
    13e2:	5f 4f       	sbci	r21, 0xFF	; 255
    13e4:	22 0f       	add	r18, r18
    13e6:	33 1f       	adc	r19, r19
    13e8:	44 1f       	adc	r20, r20
    13ea:	aa 1f       	adc	r26, r26
    13ec:	a9 f3       	breq	.-22     	; 0x13d8 <__divsf3_pse+0x10>
    13ee:	35 d0       	rcall	.+106    	; 0x145a <__divsf3_pse+0x92>
    13f0:	0e 2e       	mov	r0, r30
    13f2:	3a f0       	brmi	.+14     	; 0x1402 <__divsf3_pse+0x3a>
    13f4:	e0 e8       	ldi	r30, 0x80	; 128
    13f6:	32 d0       	rcall	.+100    	; 0x145c <__divsf3_pse+0x94>
    13f8:	91 50       	subi	r25, 0x01	; 1
    13fa:	50 40       	sbci	r21, 0x00	; 0
    13fc:	e6 95       	lsr	r30
    13fe:	00 1c       	adc	r0, r0
    1400:	ca f7       	brpl	.-14     	; 0x13f4 <__divsf3_pse+0x2c>
    1402:	2b d0       	rcall	.+86     	; 0x145a <__divsf3_pse+0x92>
    1404:	fe 2f       	mov	r31, r30
    1406:	29 d0       	rcall	.+82     	; 0x145a <__divsf3_pse+0x92>
    1408:	66 0f       	add	r22, r22
    140a:	77 1f       	adc	r23, r23
    140c:	88 1f       	adc	r24, r24
    140e:	bb 1f       	adc	r27, r27
    1410:	26 17       	cp	r18, r22
    1412:	37 07       	cpc	r19, r23
    1414:	48 07       	cpc	r20, r24
    1416:	ab 07       	cpc	r26, r27
    1418:	b0 e8       	ldi	r27, 0x80	; 128
    141a:	09 f0       	breq	.+2      	; 0x141e <__divsf3_pse+0x56>
    141c:	bb 0b       	sbc	r27, r27
    141e:	80 2d       	mov	r24, r0
    1420:	bf 01       	movw	r22, r30
    1422:	ff 27       	eor	r31, r31
    1424:	93 58       	subi	r25, 0x83	; 131
    1426:	5f 4f       	sbci	r21, 0xFF	; 255
    1428:	3a f0       	brmi	.+14     	; 0x1438 <__divsf3_pse+0x70>
    142a:	9e 3f       	cpi	r25, 0xFE	; 254
    142c:	51 05       	cpc	r21, r1
    142e:	78 f0       	brcs	.+30     	; 0x144e <__divsf3_pse+0x86>
    1430:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__fp_inf>
    1434:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__fp_szero>
    1438:	5f 3f       	cpi	r21, 0xFF	; 255
    143a:	e4 f3       	brlt	.-8      	; 0x1434 <__divsf3_pse+0x6c>
    143c:	98 3e       	cpi	r25, 0xE8	; 232
    143e:	d4 f3       	brlt	.-12     	; 0x1434 <__divsf3_pse+0x6c>
    1440:	86 95       	lsr	r24
    1442:	77 95       	ror	r23
    1444:	67 95       	ror	r22
    1446:	b7 95       	ror	r27
    1448:	f7 95       	ror	r31
    144a:	9f 5f       	subi	r25, 0xFF	; 255
    144c:	c9 f7       	brne	.-14     	; 0x1440 <__divsf3_pse+0x78>
    144e:	88 0f       	add	r24, r24
    1450:	91 1d       	adc	r25, r1
    1452:	96 95       	lsr	r25
    1454:	87 95       	ror	r24
    1456:	97 f9       	bld	r25, 7
    1458:	08 95       	ret
    145a:	e1 e0       	ldi	r30, 0x01	; 1
    145c:	66 0f       	add	r22, r22
    145e:	77 1f       	adc	r23, r23
    1460:	88 1f       	adc	r24, r24
    1462:	bb 1f       	adc	r27, r27
    1464:	62 17       	cp	r22, r18
    1466:	73 07       	cpc	r23, r19
    1468:	84 07       	cpc	r24, r20
    146a:	ba 07       	cpc	r27, r26
    146c:	20 f0       	brcs	.+8      	; 0x1476 <__divsf3_pse+0xae>
    146e:	62 1b       	sub	r22, r18
    1470:	73 0b       	sbc	r23, r19
    1472:	84 0b       	sbc	r24, r20
    1474:	ba 0b       	sbc	r27, r26
    1476:	ee 1f       	adc	r30, r30
    1478:	88 f7       	brcc	.-30     	; 0x145c <__divsf3_pse+0x94>
    147a:	e0 95       	com	r30
    147c:	08 95       	ret
    147e:	29 f4       	brne	.+10     	; 0x148a <__divsf3_pse+0xc2>
    1480:	16 f0       	brts	.+4      	; 0x1486 <__divsf3_pse+0xbe>
    1482:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__fp_inf>
    1486:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__fp_zero>
    148a:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__fp_nan>

0000148e <exp>:
    148e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__fp_splitA>
    1492:	a8 f3       	brcs	.-22     	; 0x147e <__divsf3_pse+0xb6>
    1494:	96 38       	cpi	r25, 0x86	; 134
    1496:	a0 f7       	brcc	.-24     	; 0x1480 <__divsf3_pse+0xb8>
    1498:	07 f8       	bld	r0, 7
    149a:	0f 92       	push	r0
    149c:	e8 94       	clt
    149e:	2b e3       	ldi	r18, 0x3B	; 59
    14a0:	3a ea       	ldi	r19, 0xAA	; 170
    14a2:	48 eb       	ldi	r20, 0xB8	; 184
    14a4:	5f e7       	ldi	r21, 0x7F	; 127
    14a6:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsf3_pse>
    14aa:	0f 92       	push	r0
    14ac:	0f 92       	push	r0
    14ae:	0f 92       	push	r0
    14b0:	4d b7       	in	r20, 0x3d	; 61
    14b2:	5e b7       	in	r21, 0x3e	; 62
    14b4:	0f 92       	push	r0
    14b6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <modf>
    14ba:	ec e7       	ldi	r30, 0x7C	; 124
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fp_powser>
    14c2:	4f 91       	pop	r20
    14c4:	5f 91       	pop	r21
    14c6:	ef 91       	pop	r30
    14c8:	ff 91       	pop	r31
    14ca:	e5 95       	asr	r30
    14cc:	ee 1f       	adc	r30, r30
    14ce:	ff 1f       	adc	r31, r31
    14d0:	49 f0       	breq	.+18     	; 0x14e4 <exp+0x56>
    14d2:	fe 57       	subi	r31, 0x7E	; 126
    14d4:	e0 68       	ori	r30, 0x80	; 128
    14d6:	44 27       	eor	r20, r20
    14d8:	ee 0f       	add	r30, r30
    14da:	44 1f       	adc	r20, r20
    14dc:	fa 95       	dec	r31
    14de:	e1 f7       	brne	.-8      	; 0x14d8 <exp+0x4a>
    14e0:	41 95       	neg	r20
    14e2:	55 0b       	sbc	r21, r21
    14e4:	0e 94 b1 0b 	call	0x1762	; 0x1762 <ldexp>
    14e8:	0f 90       	pop	r0
    14ea:	07 fe       	sbrs	r0, 7
    14ec:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <inverse>
    14f0:	08 95       	ret

000014f2 <__fixunssfsi>:
    14f2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__fp_splitA>
    14f6:	88 f0       	brcs	.+34     	; 0x151a <__fixunssfsi+0x28>
    14f8:	9f 57       	subi	r25, 0x7F	; 127
    14fa:	98 f0       	brcs	.+38     	; 0x1522 <__fixunssfsi+0x30>
    14fc:	b9 2f       	mov	r27, r25
    14fe:	99 27       	eor	r25, r25
    1500:	b7 51       	subi	r27, 0x17	; 23
    1502:	b0 f0       	brcs	.+44     	; 0x1530 <__fixunssfsi+0x3e>
    1504:	e1 f0       	breq	.+56     	; 0x153e <__fixunssfsi+0x4c>
    1506:	66 0f       	add	r22, r22
    1508:	77 1f       	adc	r23, r23
    150a:	88 1f       	adc	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	1a f0       	brmi	.+6      	; 0x1516 <__fixunssfsi+0x24>
    1510:	ba 95       	dec	r27
    1512:	c9 f7       	brne	.-14     	; 0x1506 <__fixunssfsi+0x14>
    1514:	14 c0       	rjmp	.+40     	; 0x153e <__fixunssfsi+0x4c>
    1516:	b1 30       	cpi	r27, 0x01	; 1
    1518:	91 f0       	breq	.+36     	; 0x153e <__fixunssfsi+0x4c>
    151a:	0e 94 99 0b 	call	0x1732	; 0x1732 <__fp_zero>
    151e:	b1 e0       	ldi	r27, 0x01	; 1
    1520:	08 95       	ret
    1522:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__fp_zero>
    1526:	67 2f       	mov	r22, r23
    1528:	78 2f       	mov	r23, r24
    152a:	88 27       	eor	r24, r24
    152c:	b8 5f       	subi	r27, 0xF8	; 248
    152e:	39 f0       	breq	.+14     	; 0x153e <__fixunssfsi+0x4c>
    1530:	b9 3f       	cpi	r27, 0xF9	; 249
    1532:	cc f3       	brlt	.-14     	; 0x1526 <__fixunssfsi+0x34>
    1534:	86 95       	lsr	r24
    1536:	77 95       	ror	r23
    1538:	67 95       	ror	r22
    153a:	b3 95       	inc	r27
    153c:	d9 f7       	brne	.-10     	; 0x1534 <__fixunssfsi+0x42>
    153e:	3e f4       	brtc	.+14     	; 0x154e <__fixunssfsi+0x5c>
    1540:	90 95       	com	r25
    1542:	80 95       	com	r24
    1544:	70 95       	com	r23
    1546:	61 95       	neg	r22
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	8f 4f       	sbci	r24, 0xFF	; 255
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	08 95       	ret

00001550 <__floatunsisf>:
    1550:	e8 94       	clt
    1552:	09 c0       	rjmp	.+18     	; 0x1566 <__floatsisf+0x12>

00001554 <__floatsisf>:
    1554:	97 fb       	bst	r25, 7
    1556:	3e f4       	brtc	.+14     	; 0x1566 <__floatsisf+0x12>
    1558:	90 95       	com	r25
    155a:	80 95       	com	r24
    155c:	70 95       	com	r23
    155e:	61 95       	neg	r22
    1560:	7f 4f       	sbci	r23, 0xFF	; 255
    1562:	8f 4f       	sbci	r24, 0xFF	; 255
    1564:	9f 4f       	sbci	r25, 0xFF	; 255
    1566:	99 23       	and	r25, r25
    1568:	a9 f0       	breq	.+42     	; 0x1594 <__floatsisf+0x40>
    156a:	f9 2f       	mov	r31, r25
    156c:	96 e9       	ldi	r25, 0x96	; 150
    156e:	bb 27       	eor	r27, r27
    1570:	93 95       	inc	r25
    1572:	f6 95       	lsr	r31
    1574:	87 95       	ror	r24
    1576:	77 95       	ror	r23
    1578:	67 95       	ror	r22
    157a:	b7 95       	ror	r27
    157c:	f1 11       	cpse	r31, r1
    157e:	f8 cf       	rjmp	.-16     	; 0x1570 <__floatsisf+0x1c>
    1580:	fa f4       	brpl	.+62     	; 0x15c0 <__floatsisf+0x6c>
    1582:	bb 0f       	add	r27, r27
    1584:	11 f4       	brne	.+4      	; 0x158a <__floatsisf+0x36>
    1586:	60 ff       	sbrs	r22, 0
    1588:	1b c0       	rjmp	.+54     	; 0x15c0 <__floatsisf+0x6c>
    158a:	6f 5f       	subi	r22, 0xFF	; 255
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	8f 4f       	sbci	r24, 0xFF	; 255
    1590:	9f 4f       	sbci	r25, 0xFF	; 255
    1592:	16 c0       	rjmp	.+44     	; 0x15c0 <__floatsisf+0x6c>
    1594:	88 23       	and	r24, r24
    1596:	11 f0       	breq	.+4      	; 0x159c <__floatsisf+0x48>
    1598:	96 e9       	ldi	r25, 0x96	; 150
    159a:	11 c0       	rjmp	.+34     	; 0x15be <__floatsisf+0x6a>
    159c:	77 23       	and	r23, r23
    159e:	21 f0       	breq	.+8      	; 0x15a8 <__floatsisf+0x54>
    15a0:	9e e8       	ldi	r25, 0x8E	; 142
    15a2:	87 2f       	mov	r24, r23
    15a4:	76 2f       	mov	r23, r22
    15a6:	05 c0       	rjmp	.+10     	; 0x15b2 <__floatsisf+0x5e>
    15a8:	66 23       	and	r22, r22
    15aa:	71 f0       	breq	.+28     	; 0x15c8 <__floatsisf+0x74>
    15ac:	96 e8       	ldi	r25, 0x86	; 134
    15ae:	86 2f       	mov	r24, r22
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	2a f0       	brmi	.+10     	; 0x15c0 <__floatsisf+0x6c>
    15b6:	9a 95       	dec	r25
    15b8:	66 0f       	add	r22, r22
    15ba:	77 1f       	adc	r23, r23
    15bc:	88 1f       	adc	r24, r24
    15be:	da f7       	brpl	.-10     	; 0x15b6 <__floatsisf+0x62>
    15c0:	88 0f       	add	r24, r24
    15c2:	96 95       	lsr	r25
    15c4:	87 95       	ror	r24
    15c6:	97 f9       	bld	r25, 7
    15c8:	08 95       	ret

000015ca <fmin>:
    15ca:	99 0f       	add	r25, r25
    15cc:	bb 0b       	sbc	r27, r27
    15ce:	55 0f       	add	r21, r21
    15d0:	aa 0b       	sbc	r26, r26
    15d2:	e0 e8       	ldi	r30, 0x80	; 128
    15d4:	fe ef       	ldi	r31, 0xFE	; 254
    15d6:	16 16       	cp	r1, r22
    15d8:	17 06       	cpc	r1, r23
    15da:	e8 07       	cpc	r30, r24
    15dc:	f9 07       	cpc	r31, r25
    15de:	70 f0       	brcs	.+28     	; 0x15fc <fmin+0x32>
    15e0:	12 16       	cp	r1, r18
    15e2:	13 06       	cpc	r1, r19
    15e4:	e4 07       	cpc	r30, r20
    15e6:	f5 07       	cpc	r31, r21
    15e8:	60 f0       	brcs	.+24     	; 0x1602 <fmin+0x38>
    15ea:	ba 17       	cp	r27, r26
    15ec:	54 f0       	brlt	.+20     	; 0x1602 <fmin+0x38>
    15ee:	31 f4       	brne	.+12     	; 0x15fc <fmin+0x32>
    15f0:	26 17       	cp	r18, r22
    15f2:	37 07       	cpc	r19, r23
    15f4:	48 07       	cpc	r20, r24
    15f6:	59 07       	cpc	r21, r25
    15f8:	a7 95       	ror	r26
    15fa:	1b f4       	brvc	.+6      	; 0x1602 <fmin+0x38>
    15fc:	b9 01       	movw	r22, r18
    15fe:	ca 01       	movw	r24, r20
    1600:	ba 2f       	mov	r27, r26
    1602:	b6 95       	lsr	r27
    1604:	97 95       	ror	r25
    1606:	08 95       	ret

00001608 <__fp_cmp>:
    1608:	99 0f       	add	r25, r25
    160a:	00 08       	sbc	r0, r0
    160c:	55 0f       	add	r21, r21
    160e:	aa 0b       	sbc	r26, r26
    1610:	e0 e8       	ldi	r30, 0x80	; 128
    1612:	fe ef       	ldi	r31, 0xFE	; 254
    1614:	16 16       	cp	r1, r22
    1616:	17 06       	cpc	r1, r23
    1618:	e8 07       	cpc	r30, r24
    161a:	f9 07       	cpc	r31, r25
    161c:	c0 f0       	brcs	.+48     	; 0x164e <__fp_cmp+0x46>
    161e:	12 16       	cp	r1, r18
    1620:	13 06       	cpc	r1, r19
    1622:	e4 07       	cpc	r30, r20
    1624:	f5 07       	cpc	r31, r21
    1626:	98 f0       	brcs	.+38     	; 0x164e <__fp_cmp+0x46>
    1628:	62 1b       	sub	r22, r18
    162a:	73 0b       	sbc	r23, r19
    162c:	84 0b       	sbc	r24, r20
    162e:	95 0b       	sbc	r25, r21
    1630:	39 f4       	brne	.+14     	; 0x1640 <__fp_cmp+0x38>
    1632:	0a 26       	eor	r0, r26
    1634:	61 f0       	breq	.+24     	; 0x164e <__fp_cmp+0x46>
    1636:	23 2b       	or	r18, r19
    1638:	24 2b       	or	r18, r20
    163a:	25 2b       	or	r18, r21
    163c:	21 f4       	brne	.+8      	; 0x1646 <__fp_cmp+0x3e>
    163e:	08 95       	ret
    1640:	0a 26       	eor	r0, r26
    1642:	09 f4       	brne	.+2      	; 0x1646 <__fp_cmp+0x3e>
    1644:	a1 40       	sbci	r26, 0x01	; 1
    1646:	a6 95       	lsr	r26
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	81 1d       	adc	r24, r1
    164c:	81 1d       	adc	r24, r1
    164e:	08 95       	ret

00001650 <__fp_inf>:
    1650:	97 f9       	bld	r25, 7
    1652:	9f 67       	ori	r25, 0x7F	; 127
    1654:	80 e8       	ldi	r24, 0x80	; 128
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	08 95       	ret

0000165c <__fp_nan>:
    165c:	9f ef       	ldi	r25, 0xFF	; 255
    165e:	80 ec       	ldi	r24, 0xC0	; 192
    1660:	08 95       	ret

00001662 <__fp_powser>:
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	1f 93       	push	r17
    1668:	0f 93       	push	r16
    166a:	ff 92       	push	r15
    166c:	ef 92       	push	r14
    166e:	df 92       	push	r13
    1670:	7b 01       	movw	r14, r22
    1672:	8c 01       	movw	r16, r24
    1674:	68 94       	set
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <__fp_powser+0x22>
    1678:	da 2e       	mov	r13, r26
    167a:	ef 01       	movw	r28, r30
    167c:	0e 94 2e 0c 	call	0x185c	; 0x185c <__mulsf3x>
    1680:	fe 01       	movw	r30, r28
    1682:	e8 94       	clt
    1684:	a5 91       	lpm	r26, Z+
    1686:	25 91       	lpm	r18, Z+
    1688:	35 91       	lpm	r19, Z+
    168a:	45 91       	lpm	r20, Z+
    168c:	55 91       	lpm	r21, Z+
    168e:	a6 f3       	brts	.-24     	; 0x1678 <__fp_powser+0x16>
    1690:	ef 01       	movw	r28, r30
    1692:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__addsf3x>
    1696:	fe 01       	movw	r30, r28
    1698:	97 01       	movw	r18, r14
    169a:	a8 01       	movw	r20, r16
    169c:	da 94       	dec	r13
    169e:	69 f7       	brne	.-38     	; 0x167a <__fp_powser+0x18>
    16a0:	df 90       	pop	r13
    16a2:	ef 90       	pop	r14
    16a4:	ff 90       	pop	r15
    16a6:	0f 91       	pop	r16
    16a8:	1f 91       	pop	r17
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <__fp_pscA>:
    16b0:	00 24       	eor	r0, r0
    16b2:	0a 94       	dec	r0
    16b4:	16 16       	cp	r1, r22
    16b6:	17 06       	cpc	r1, r23
    16b8:	18 06       	cpc	r1, r24
    16ba:	09 06       	cpc	r0, r25
    16bc:	08 95       	ret

000016be <__fp_pscB>:
    16be:	00 24       	eor	r0, r0
    16c0:	0a 94       	dec	r0
    16c2:	12 16       	cp	r1, r18
    16c4:	13 06       	cpc	r1, r19
    16c6:	14 06       	cpc	r1, r20
    16c8:	05 06       	cpc	r0, r21
    16ca:	08 95       	ret

000016cc <__fp_round>:
    16cc:	09 2e       	mov	r0, r25
    16ce:	03 94       	inc	r0
    16d0:	00 0c       	add	r0, r0
    16d2:	11 f4       	brne	.+4      	; 0x16d8 <__fp_round+0xc>
    16d4:	88 23       	and	r24, r24
    16d6:	52 f0       	brmi	.+20     	; 0x16ec <__fp_round+0x20>
    16d8:	bb 0f       	add	r27, r27
    16da:	40 f4       	brcc	.+16     	; 0x16ec <__fp_round+0x20>
    16dc:	bf 2b       	or	r27, r31
    16de:	11 f4       	brne	.+4      	; 0x16e4 <__fp_round+0x18>
    16e0:	60 ff       	sbrs	r22, 0
    16e2:	04 c0       	rjmp	.+8      	; 0x16ec <__fp_round+0x20>
    16e4:	6f 5f       	subi	r22, 0xFF	; 255
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ea:	9f 4f       	sbci	r25, 0xFF	; 255
    16ec:	08 95       	ret

000016ee <__fp_split3>:
    16ee:	57 fd       	sbrc	r21, 7
    16f0:	90 58       	subi	r25, 0x80	; 128
    16f2:	44 0f       	add	r20, r20
    16f4:	55 1f       	adc	r21, r21
    16f6:	59 f0       	breq	.+22     	; 0x170e <__fp_splitA+0x10>
    16f8:	5f 3f       	cpi	r21, 0xFF	; 255
    16fa:	71 f0       	breq	.+28     	; 0x1718 <__fp_splitA+0x1a>
    16fc:	47 95       	ror	r20

000016fe <__fp_splitA>:
    16fe:	88 0f       	add	r24, r24
    1700:	97 fb       	bst	r25, 7
    1702:	99 1f       	adc	r25, r25
    1704:	61 f0       	breq	.+24     	; 0x171e <__fp_splitA+0x20>
    1706:	9f 3f       	cpi	r25, 0xFF	; 255
    1708:	79 f0       	breq	.+30     	; 0x1728 <__fp_splitA+0x2a>
    170a:	87 95       	ror	r24
    170c:	08 95       	ret
    170e:	12 16       	cp	r1, r18
    1710:	13 06       	cpc	r1, r19
    1712:	14 06       	cpc	r1, r20
    1714:	55 1f       	adc	r21, r21
    1716:	f2 cf       	rjmp	.-28     	; 0x16fc <__fp_split3+0xe>
    1718:	46 95       	lsr	r20
    171a:	f1 df       	rcall	.-30     	; 0x16fe <__fp_splitA>
    171c:	08 c0       	rjmp	.+16     	; 0x172e <__fp_splitA+0x30>
    171e:	16 16       	cp	r1, r22
    1720:	17 06       	cpc	r1, r23
    1722:	18 06       	cpc	r1, r24
    1724:	99 1f       	adc	r25, r25
    1726:	f1 cf       	rjmp	.-30     	; 0x170a <__fp_splitA+0xc>
    1728:	86 95       	lsr	r24
    172a:	71 05       	cpc	r23, r1
    172c:	61 05       	cpc	r22, r1
    172e:	08 94       	sec
    1730:	08 95       	ret

00001732 <__fp_zero>:
    1732:	e8 94       	clt

00001734 <__fp_szero>:
    1734:	bb 27       	eor	r27, r27
    1736:	66 27       	eor	r22, r22
    1738:	77 27       	eor	r23, r23
    173a:	cb 01       	movw	r24, r22
    173c:	97 f9       	bld	r25, 7
    173e:	08 95       	ret

00001740 <__gesf2>:
    1740:	0e 94 04 0b 	call	0x1608	; 0x1608 <__fp_cmp>
    1744:	08 f4       	brcc	.+2      	; 0x1748 <__gesf2+0x8>
    1746:	8f ef       	ldi	r24, 0xFF	; 255
    1748:	08 95       	ret

0000174a <inverse>:
    174a:	9b 01       	movw	r18, r22
    174c:	ac 01       	movw	r20, r24
    174e:	60 e0       	ldi	r22, 0x00	; 0
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	80 e8       	ldi	r24, 0x80	; 128
    1754:	9f e3       	ldi	r25, 0x3F	; 63
    1756:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__divsf3>
    175a:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__fp_inf>
    175e:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <__fp_mpack>

00001762 <ldexp>:
    1762:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__fp_splitA>
    1766:	d8 f3       	brcs	.-10     	; 0x175e <inverse+0x14>
    1768:	99 23       	and	r25, r25
    176a:	c9 f3       	breq	.-14     	; 0x175e <inverse+0x14>
    176c:	94 0f       	add	r25, r20
    176e:	51 1d       	adc	r21, r1
    1770:	a3 f3       	brvs	.-24     	; 0x175a <inverse+0x10>
    1772:	91 50       	subi	r25, 0x01	; 1
    1774:	50 40       	sbci	r21, 0x00	; 0
    1776:	94 f0       	brlt	.+36     	; 0x179c <ldexp+0x3a>
    1778:	59 f0       	breq	.+22     	; 0x1790 <ldexp+0x2e>
    177a:	88 23       	and	r24, r24
    177c:	32 f0       	brmi	.+12     	; 0x178a <ldexp+0x28>
    177e:	66 0f       	add	r22, r22
    1780:	77 1f       	adc	r23, r23
    1782:	88 1f       	adc	r24, r24
    1784:	91 50       	subi	r25, 0x01	; 1
    1786:	50 40       	sbci	r21, 0x00	; 0
    1788:	c1 f7       	brne	.-16     	; 0x177a <ldexp+0x18>
    178a:	9e 3f       	cpi	r25, 0xFE	; 254
    178c:	51 05       	cpc	r21, r1
    178e:	2c f7       	brge	.-54     	; 0x175a <inverse+0x10>
    1790:	88 0f       	add	r24, r24
    1792:	91 1d       	adc	r25, r1
    1794:	96 95       	lsr	r25
    1796:	87 95       	ror	r24
    1798:	97 f9       	bld	r25, 7
    179a:	08 95       	ret
    179c:	5f 3f       	cpi	r21, 0xFF	; 255
    179e:	ac f0       	brlt	.+42     	; 0x17ca <ldexp+0x68>
    17a0:	98 3e       	cpi	r25, 0xE8	; 232
    17a2:	9c f0       	brlt	.+38     	; 0x17ca <ldexp+0x68>
    17a4:	bb 27       	eor	r27, r27
    17a6:	86 95       	lsr	r24
    17a8:	77 95       	ror	r23
    17aa:	67 95       	ror	r22
    17ac:	b7 95       	ror	r27
    17ae:	08 f4       	brcc	.+2      	; 0x17b2 <ldexp+0x50>
    17b0:	b1 60       	ori	r27, 0x01	; 1
    17b2:	93 95       	inc	r25
    17b4:	c1 f7       	brne	.-16     	; 0x17a6 <ldexp+0x44>
    17b6:	bb 0f       	add	r27, r27
    17b8:	58 f7       	brcc	.-42     	; 0x1790 <ldexp+0x2e>
    17ba:	11 f4       	brne	.+4      	; 0x17c0 <ldexp+0x5e>
    17bc:	60 ff       	sbrs	r22, 0
    17be:	e8 cf       	rjmp	.-48     	; 0x1790 <ldexp+0x2e>
    17c0:	6f 5f       	subi	r22, 0xFF	; 255
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	8f 4f       	sbci	r24, 0xFF	; 255
    17c6:	9f 4f       	sbci	r25, 0xFF	; 255
    17c8:	e3 cf       	rjmp	.-58     	; 0x1790 <ldexp+0x2e>
    17ca:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__fp_szero>

000017ce <modf>:
    17ce:	fa 01       	movw	r30, r20
    17d0:	dc 01       	movw	r26, r24
    17d2:	aa 0f       	add	r26, r26
    17d4:	bb 1f       	adc	r27, r27
    17d6:	9b 01       	movw	r18, r22
    17d8:	ac 01       	movw	r20, r24
    17da:	bf 57       	subi	r27, 0x7F	; 127
    17dc:	28 f4       	brcc	.+10     	; 0x17e8 <modf+0x1a>
    17de:	22 27       	eor	r18, r18
    17e0:	33 27       	eor	r19, r19
    17e2:	44 27       	eor	r20, r20
    17e4:	50 78       	andi	r21, 0x80	; 128
    17e6:	20 c0       	rjmp	.+64     	; 0x1828 <modf+0x5a>
    17e8:	b7 51       	subi	r27, 0x17	; 23
    17ea:	90 f4       	brcc	.+36     	; 0x1810 <modf+0x42>
    17ec:	ab 2f       	mov	r26, r27
    17ee:	00 24       	eor	r0, r0
    17f0:	46 95       	lsr	r20
    17f2:	37 95       	ror	r19
    17f4:	27 95       	ror	r18
    17f6:	01 1c       	adc	r0, r1
    17f8:	a3 95       	inc	r26
    17fa:	d2 f3       	brmi	.-12     	; 0x17f0 <modf+0x22>
    17fc:	00 20       	and	r0, r0
    17fe:	71 f0       	breq	.+28     	; 0x181c <modf+0x4e>
    1800:	22 0f       	add	r18, r18
    1802:	33 1f       	adc	r19, r19
    1804:	44 1f       	adc	r20, r20
    1806:	b3 95       	inc	r27
    1808:	da f3       	brmi	.-10     	; 0x1800 <modf+0x32>
    180a:	0e d0       	rcall	.+28     	; 0x1828 <modf+0x5a>
    180c:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__subsf3>
    1810:	61 30       	cpi	r22, 0x01	; 1
    1812:	71 05       	cpc	r23, r1
    1814:	a0 e8       	ldi	r26, 0x80	; 128
    1816:	8a 07       	cpc	r24, r26
    1818:	b9 46       	sbci	r27, 0x69	; 105
    181a:	30 f4       	brcc	.+12     	; 0x1828 <modf+0x5a>
    181c:	9b 01       	movw	r18, r22
    181e:	ac 01       	movw	r20, r24
    1820:	66 27       	eor	r22, r22
    1822:	77 27       	eor	r23, r23
    1824:	88 27       	eor	r24, r24
    1826:	90 78       	andi	r25, 0x80	; 128
    1828:	30 96       	adiw	r30, 0x00	; 0
    182a:	21 f0       	breq	.+8      	; 0x1834 <modf+0x66>
    182c:	20 83       	st	Z, r18
    182e:	31 83       	std	Z+1, r19	; 0x01
    1830:	42 83       	std	Z+2, r20	; 0x02
    1832:	53 83       	std	Z+3, r21	; 0x03
    1834:	08 95       	ret

00001836 <__mulsf3>:
    1836:	0e 94 2e 0c 	call	0x185c	; 0x185c <__mulsf3x>
    183a:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__fp_round>
    183e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_pscA>
    1842:	38 f0       	brcs	.+14     	; 0x1852 <__mulsf3+0x1c>
    1844:	0e 94 5f 0b 	call	0x16be	; 0x16be <__fp_pscB>
    1848:	20 f0       	brcs	.+8      	; 0x1852 <__mulsf3+0x1c>
    184a:	95 23       	and	r25, r21
    184c:	11 f0       	breq	.+4      	; 0x1852 <__mulsf3+0x1c>
    184e:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__fp_inf>
    1852:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__fp_nan>
    1856:	11 24       	eor	r1, r1
    1858:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__fp_szero>

0000185c <__mulsf3x>:
    185c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fp_split3>
    1860:	70 f3       	brcs	.-36     	; 0x183e <__mulsf3+0x8>

00001862 <__mulsf3_pse>:
    1862:	95 9f       	mul	r25, r21
    1864:	c1 f3       	breq	.-16     	; 0x1856 <__mulsf3+0x20>
    1866:	95 0f       	add	r25, r21
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	55 1f       	adc	r21, r21
    186c:	62 9f       	mul	r22, r18
    186e:	f0 01       	movw	r30, r0
    1870:	72 9f       	mul	r23, r18
    1872:	bb 27       	eor	r27, r27
    1874:	f0 0d       	add	r31, r0
    1876:	b1 1d       	adc	r27, r1
    1878:	63 9f       	mul	r22, r19
    187a:	aa 27       	eor	r26, r26
    187c:	f0 0d       	add	r31, r0
    187e:	b1 1d       	adc	r27, r1
    1880:	aa 1f       	adc	r26, r26
    1882:	64 9f       	mul	r22, r20
    1884:	66 27       	eor	r22, r22
    1886:	b0 0d       	add	r27, r0
    1888:	a1 1d       	adc	r26, r1
    188a:	66 1f       	adc	r22, r22
    188c:	82 9f       	mul	r24, r18
    188e:	22 27       	eor	r18, r18
    1890:	b0 0d       	add	r27, r0
    1892:	a1 1d       	adc	r26, r1
    1894:	62 1f       	adc	r22, r18
    1896:	73 9f       	mul	r23, r19
    1898:	b0 0d       	add	r27, r0
    189a:	a1 1d       	adc	r26, r1
    189c:	62 1f       	adc	r22, r18
    189e:	83 9f       	mul	r24, r19
    18a0:	a0 0d       	add	r26, r0
    18a2:	61 1d       	adc	r22, r1
    18a4:	22 1f       	adc	r18, r18
    18a6:	74 9f       	mul	r23, r20
    18a8:	33 27       	eor	r19, r19
    18aa:	a0 0d       	add	r26, r0
    18ac:	61 1d       	adc	r22, r1
    18ae:	23 1f       	adc	r18, r19
    18b0:	84 9f       	mul	r24, r20
    18b2:	60 0d       	add	r22, r0
    18b4:	21 1d       	adc	r18, r1
    18b6:	82 2f       	mov	r24, r18
    18b8:	76 2f       	mov	r23, r22
    18ba:	6a 2f       	mov	r22, r26
    18bc:	11 24       	eor	r1, r1
    18be:	9f 57       	subi	r25, 0x7F	; 127
    18c0:	50 40       	sbci	r21, 0x00	; 0
    18c2:	9a f0       	brmi	.+38     	; 0x18ea <__mulsf3_pse+0x88>
    18c4:	f1 f0       	breq	.+60     	; 0x1902 <__mulsf3_pse+0xa0>
    18c6:	88 23       	and	r24, r24
    18c8:	4a f0       	brmi	.+18     	; 0x18dc <__mulsf3_pse+0x7a>
    18ca:	ee 0f       	add	r30, r30
    18cc:	ff 1f       	adc	r31, r31
    18ce:	bb 1f       	adc	r27, r27
    18d0:	66 1f       	adc	r22, r22
    18d2:	77 1f       	adc	r23, r23
    18d4:	88 1f       	adc	r24, r24
    18d6:	91 50       	subi	r25, 0x01	; 1
    18d8:	50 40       	sbci	r21, 0x00	; 0
    18da:	a9 f7       	brne	.-22     	; 0x18c6 <__mulsf3_pse+0x64>
    18dc:	9e 3f       	cpi	r25, 0xFE	; 254
    18de:	51 05       	cpc	r21, r1
    18e0:	80 f0       	brcs	.+32     	; 0x1902 <__mulsf3_pse+0xa0>
    18e2:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__fp_inf>
    18e6:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__fp_szero>
    18ea:	5f 3f       	cpi	r21, 0xFF	; 255
    18ec:	e4 f3       	brlt	.-8      	; 0x18e6 <__mulsf3_pse+0x84>
    18ee:	98 3e       	cpi	r25, 0xE8	; 232
    18f0:	d4 f3       	brlt	.-12     	; 0x18e6 <__mulsf3_pse+0x84>
    18f2:	86 95       	lsr	r24
    18f4:	77 95       	ror	r23
    18f6:	67 95       	ror	r22
    18f8:	b7 95       	ror	r27
    18fa:	f7 95       	ror	r31
    18fc:	e7 95       	ror	r30
    18fe:	9f 5f       	subi	r25, 0xFF	; 255
    1900:	c1 f7       	brne	.-16     	; 0x18f2 <__mulsf3_pse+0x90>
    1902:	fe 2b       	or	r31, r30
    1904:	88 0f       	add	r24, r24
    1906:	91 1d       	adc	r25, r1
    1908:	96 95       	lsr	r25
    190a:	87 95       	ror	r24
    190c:	97 f9       	bld	r25, 7
    190e:	08 95       	ret

00001910 <sin>:
    1910:	9f 93       	push	r25
    1912:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__fp_rempio2>
    1916:	0f 90       	pop	r0
    1918:	07 fc       	sbrc	r0, 7
    191a:	ee 5f       	subi	r30, 0xFE	; 254
    191c:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__fp_sinus>

00001920 <__fp_mpack>:
    1920:	9f 3f       	cpi	r25, 0xFF	; 255
    1922:	31 f0       	breq	.+12     	; 0x1930 <__fp_mpack_finite+0xc>

00001924 <__fp_mpack_finite>:
    1924:	91 50       	subi	r25, 0x01	; 1
    1926:	20 f4       	brcc	.+8      	; 0x1930 <__fp_mpack_finite+0xc>
    1928:	87 95       	ror	r24
    192a:	77 95       	ror	r23
    192c:	67 95       	ror	r22
    192e:	b7 95       	ror	r27
    1930:	88 0f       	add	r24, r24
    1932:	91 1d       	adc	r25, r1
    1934:	96 95       	lsr	r25
    1936:	87 95       	ror	r24
    1938:	97 f9       	bld	r25, 7
    193a:	08 95       	ret
    193c:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__fp_nan>

00001940 <__fp_rempio2>:
    1940:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__fp_splitA>
    1944:	d8 f3       	brcs	.-10     	; 0x193c <__fp_mpack_finite+0x18>
    1946:	e8 94       	clt
    1948:	e0 e0       	ldi	r30, 0x00	; 0
    194a:	bb 27       	eor	r27, r27
    194c:	9f 57       	subi	r25, 0x7F	; 127
    194e:	f0 f0       	brcs	.+60     	; 0x198c <__fp_rempio2+0x4c>
    1950:	2a ed       	ldi	r18, 0xDA	; 218
    1952:	3f e0       	ldi	r19, 0x0F	; 15
    1954:	49 ec       	ldi	r20, 0xC9	; 201
    1956:	06 c0       	rjmp	.+12     	; 0x1964 <__fp_rempio2+0x24>
    1958:	ee 0f       	add	r30, r30
    195a:	bb 0f       	add	r27, r27
    195c:	66 1f       	adc	r22, r22
    195e:	77 1f       	adc	r23, r23
    1960:	88 1f       	adc	r24, r24
    1962:	28 f0       	brcs	.+10     	; 0x196e <__fp_rempio2+0x2e>
    1964:	b2 3a       	cpi	r27, 0xA2	; 162
    1966:	62 07       	cpc	r22, r18
    1968:	73 07       	cpc	r23, r19
    196a:	84 07       	cpc	r24, r20
    196c:	28 f0       	brcs	.+10     	; 0x1978 <__fp_rempio2+0x38>
    196e:	b2 5a       	subi	r27, 0xA2	; 162
    1970:	62 0b       	sbc	r22, r18
    1972:	73 0b       	sbc	r23, r19
    1974:	84 0b       	sbc	r24, r20
    1976:	e3 95       	inc	r30
    1978:	9a 95       	dec	r25
    197a:	72 f7       	brpl	.-36     	; 0x1958 <__fp_rempio2+0x18>
    197c:	80 38       	cpi	r24, 0x80	; 128
    197e:	30 f4       	brcc	.+12     	; 0x198c <__fp_rempio2+0x4c>
    1980:	9a 95       	dec	r25
    1982:	bb 0f       	add	r27, r27
    1984:	66 1f       	adc	r22, r22
    1986:	77 1f       	adc	r23, r23
    1988:	88 1f       	adc	r24, r24
    198a:	d2 f7       	brpl	.-12     	; 0x1980 <__fp_rempio2+0x40>
    198c:	90 48       	sbci	r25, 0x80	; 128
    198e:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__fp_mpack_finite>

00001992 <__fp_sinus>:
    1992:	ef 93       	push	r30
    1994:	e0 ff       	sbrs	r30, 0
    1996:	07 c0       	rjmp	.+14     	; 0x19a6 <__fp_sinus+0x14>
    1998:	a2 ea       	ldi	r26, 0xA2	; 162
    199a:	2a ed       	ldi	r18, 0xDA	; 218
    199c:	3f e0       	ldi	r19, 0x0F	; 15
    199e:	49 ec       	ldi	r20, 0xC9	; 201
    19a0:	5f eb       	ldi	r21, 0xBF	; 191
    19a2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__addsf3x>
    19a6:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__fp_round>
    19aa:	0f 90       	pop	r0
    19ac:	03 94       	inc	r0
    19ae:	01 fc       	sbrc	r0, 1
    19b0:	90 58       	subi	r25, 0x80	; 128
    19b2:	e4 ea       	ldi	r30, 0xA4	; 164
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__fp_powsodd>

000019ba <__fp_powsodd>:
    19ba:	9f 93       	push	r25
    19bc:	8f 93       	push	r24
    19be:	7f 93       	push	r23
    19c0:	6f 93       	push	r22
    19c2:	ff 93       	push	r31
    19c4:	ef 93       	push	r30
    19c6:	9b 01       	movw	r18, r22
    19c8:	ac 01       	movw	r20, r24
    19ca:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3>
    19ce:	ef 91       	pop	r30
    19d0:	ff 91       	pop	r31
    19d2:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fp_powser>
    19d6:	2f 91       	pop	r18
    19d8:	3f 91       	pop	r19
    19da:	4f 91       	pop	r20
    19dc:	5f 91       	pop	r21
    19de:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__mulsf3>

000019e2 <__udivmodsi4>:
    19e2:	a1 e2       	ldi	r26, 0x21	; 33
    19e4:	1a 2e       	mov	r1, r26
    19e6:	aa 1b       	sub	r26, r26
    19e8:	bb 1b       	sub	r27, r27
    19ea:	fd 01       	movw	r30, r26
    19ec:	0d c0       	rjmp	.+26     	; 0x1a08 <__udivmodsi4_ep>

000019ee <__udivmodsi4_loop>:
    19ee:	aa 1f       	adc	r26, r26
    19f0:	bb 1f       	adc	r27, r27
    19f2:	ee 1f       	adc	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	a2 17       	cp	r26, r18
    19f8:	b3 07       	cpc	r27, r19
    19fa:	e4 07       	cpc	r30, r20
    19fc:	f5 07       	cpc	r31, r21
    19fe:	20 f0       	brcs	.+8      	; 0x1a08 <__udivmodsi4_ep>
    1a00:	a2 1b       	sub	r26, r18
    1a02:	b3 0b       	sbc	r27, r19
    1a04:	e4 0b       	sbc	r30, r20
    1a06:	f5 0b       	sbc	r31, r21

00001a08 <__udivmodsi4_ep>:
    1a08:	66 1f       	adc	r22, r22
    1a0a:	77 1f       	adc	r23, r23
    1a0c:	88 1f       	adc	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	1a 94       	dec	r1
    1a12:	69 f7       	brne	.-38     	; 0x19ee <__udivmodsi4_loop>
    1a14:	60 95       	com	r22
    1a16:	70 95       	com	r23
    1a18:	80 95       	com	r24
    1a1a:	90 95       	com	r25
    1a1c:	9b 01       	movw	r18, r22
    1a1e:	ac 01       	movw	r20, r24
    1a20:	bd 01       	movw	r22, r26
    1a22:	cf 01       	movw	r24, r30
    1a24:	08 95       	ret

00001a26 <dtostrf>:
    1a26:	ef 92       	push	r14
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	e8 01       	movw	r28, r16
    1a32:	47 fd       	sbrc	r20, 7
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <dtostrf+0x14>
    1a36:	34 e0       	ldi	r19, 0x04	; 4
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <dtostrf+0x16>
    1a3a:	34 e1       	ldi	r19, 0x14	; 20
    1a3c:	04 2e       	mov	r0, r20
    1a3e:	00 0c       	add	r0, r0
    1a40:	55 0b       	sbc	r21, r21
    1a42:	57 ff       	sbrs	r21, 7
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <dtostrf+0x26>
    1a46:	51 95       	neg	r21
    1a48:	41 95       	neg	r20
    1a4a:	51 09       	sbc	r21, r1
    1a4c:	e3 2e       	mov	r14, r19
    1a4e:	02 2f       	mov	r16, r18
    1a50:	24 2f       	mov	r18, r20
    1a52:	ae 01       	movw	r20, r28
    1a54:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <dtoa_prf>
    1a58:	ce 01       	movw	r24, r28
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	ef 90       	pop	r14
    1a64:	08 95       	ret

00001a66 <printf>:
    1a66:	a0 e0       	ldi	r26, 0x00	; 0
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e9 e3       	ldi	r30, 0x39	; 57
    1a6c:	fd e0       	ldi	r31, 0x0D	; 13
    1a6e:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <__prologue_saves__+0x20>
    1a72:	ae 01       	movw	r20, r28
    1a74:	4b 5f       	subi	r20, 0xFB	; 251
    1a76:	5f 4f       	sbci	r21, 0xFF	; 255
    1a78:	fa 01       	movw	r30, r20
    1a7a:	61 91       	ld	r22, Z+
    1a7c:	71 91       	ld	r23, Z+
    1a7e:	af 01       	movw	r20, r30
    1a80:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <__iob+0x2>
    1a84:	90 91 67 38 	lds	r25, 0x3867	; 0x803867 <__iob+0x3>
    1a88:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <vfprintf>
    1a8c:	e2 e0       	ldi	r30, 0x02	; 2
    1a8e:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__epilogue_restores__+0x20>

00001a92 <puts>:
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	e0 91 66 38 	lds	r30, 0x3866	; 0x803866 <__iob+0x2>
    1a9e:	f0 91 67 38 	lds	r31, 0x3867	; 0x803867 <__iob+0x3>
    1aa2:	23 81       	ldd	r18, Z+3	; 0x03
    1aa4:	21 ff       	sbrs	r18, 1
    1aa6:	1b c0       	rjmp	.+54     	; 0x1ade <puts+0x4c>
    1aa8:	8c 01       	movw	r16, r24
    1aaa:	d0 e0       	ldi	r29, 0x00	; 0
    1aac:	c0 e0       	ldi	r28, 0x00	; 0
    1aae:	f8 01       	movw	r30, r16
    1ab0:	81 91       	ld	r24, Z+
    1ab2:	8f 01       	movw	r16, r30
    1ab4:	60 91 66 38 	lds	r22, 0x3866	; 0x803866 <__iob+0x2>
    1ab8:	70 91 67 38 	lds	r23, 0x3867	; 0x803867 <__iob+0x3>
    1abc:	db 01       	movw	r26, r22
    1abe:	18 96       	adiw	r26, 0x08	; 8
    1ac0:	ed 91       	ld	r30, X+
    1ac2:	fc 91       	ld	r31, X
    1ac4:	19 97       	sbiw	r26, 0x09	; 9
    1ac6:	88 23       	and	r24, r24
    1ac8:	31 f0       	breq	.+12     	; 0x1ad6 <puts+0x44>
    1aca:	09 95       	icall
    1acc:	89 2b       	or	r24, r25
    1ace:	79 f3       	breq	.-34     	; 0x1aae <puts+0x1c>
    1ad0:	df ef       	ldi	r29, 0xFF	; 255
    1ad2:	cf ef       	ldi	r28, 0xFF	; 255
    1ad4:	ec cf       	rjmp	.-40     	; 0x1aae <puts+0x1c>
    1ad6:	8a e0       	ldi	r24, 0x0A	; 10
    1ad8:	09 95       	icall
    1ada:	89 2b       	or	r24, r25
    1adc:	19 f0       	breq	.+6      	; 0x1ae4 <puts+0x52>
    1ade:	8f ef       	ldi	r24, 0xFF	; 255
    1ae0:	9f ef       	ldi	r25, 0xFF	; 255
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <puts+0x56>
    1ae4:	8d 2f       	mov	r24, r29
    1ae6:	9c 2f       	mov	r25, r28
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	08 95       	ret

00001af2 <vfprintf>:
    1af2:	ab e0       	ldi	r26, 0x0B	; 11
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	ef e7       	ldi	r30, 0x7F	; 127
    1af8:	fd e0       	ldi	r31, 0x0D	; 13
    1afa:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__prologue_saves__>
    1afe:	6c 01       	movw	r12, r24
    1b00:	7b 01       	movw	r14, r22
    1b02:	8a 01       	movw	r16, r20
    1b04:	fc 01       	movw	r30, r24
    1b06:	16 82       	std	Z+6, r1	; 0x06
    1b08:	17 82       	std	Z+7, r1	; 0x07
    1b0a:	83 81       	ldd	r24, Z+3	; 0x03
    1b0c:	81 ff       	sbrs	r24, 1
    1b0e:	cc c1       	rjmp	.+920    	; 0x1ea8 <vfprintf+0x3b6>
    1b10:	ce 01       	movw	r24, r28
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	3c 01       	movw	r6, r24
    1b16:	f6 01       	movw	r30, r12
    1b18:	93 81       	ldd	r25, Z+3	; 0x03
    1b1a:	f7 01       	movw	r30, r14
    1b1c:	93 fd       	sbrc	r25, 3
    1b1e:	85 91       	lpm	r24, Z+
    1b20:	93 ff       	sbrs	r25, 3
    1b22:	81 91       	ld	r24, Z+
    1b24:	7f 01       	movw	r14, r30
    1b26:	88 23       	and	r24, r24
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <vfprintf+0x3a>
    1b2a:	ba c1       	rjmp	.+884    	; 0x1ea0 <vfprintf+0x3ae>
    1b2c:	85 32       	cpi	r24, 0x25	; 37
    1b2e:	39 f4       	brne	.+14     	; 0x1b3e <vfprintf+0x4c>
    1b30:	93 fd       	sbrc	r25, 3
    1b32:	85 91       	lpm	r24, Z+
    1b34:	93 ff       	sbrs	r25, 3
    1b36:	81 91       	ld	r24, Z+
    1b38:	7f 01       	movw	r14, r30
    1b3a:	85 32       	cpi	r24, 0x25	; 37
    1b3c:	29 f4       	brne	.+10     	; 0x1b48 <vfprintf+0x56>
    1b3e:	b6 01       	movw	r22, r12
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1b46:	e7 cf       	rjmp	.-50     	; 0x1b16 <vfprintf+0x24>
    1b48:	91 2c       	mov	r9, r1
    1b4a:	21 2c       	mov	r2, r1
    1b4c:	31 2c       	mov	r3, r1
    1b4e:	ff e1       	ldi	r31, 0x1F	; 31
    1b50:	f3 15       	cp	r31, r3
    1b52:	d8 f0       	brcs	.+54     	; 0x1b8a <vfprintf+0x98>
    1b54:	8b 32       	cpi	r24, 0x2B	; 43
    1b56:	79 f0       	breq	.+30     	; 0x1b76 <vfprintf+0x84>
    1b58:	38 f4       	brcc	.+14     	; 0x1b68 <vfprintf+0x76>
    1b5a:	80 32       	cpi	r24, 0x20	; 32
    1b5c:	79 f0       	breq	.+30     	; 0x1b7c <vfprintf+0x8a>
    1b5e:	83 32       	cpi	r24, 0x23	; 35
    1b60:	a1 f4       	brne	.+40     	; 0x1b8a <vfprintf+0x98>
    1b62:	23 2d       	mov	r18, r3
    1b64:	20 61       	ori	r18, 0x10	; 16
    1b66:	1d c0       	rjmp	.+58     	; 0x1ba2 <vfprintf+0xb0>
    1b68:	8d 32       	cpi	r24, 0x2D	; 45
    1b6a:	61 f0       	breq	.+24     	; 0x1b84 <vfprintf+0x92>
    1b6c:	80 33       	cpi	r24, 0x30	; 48
    1b6e:	69 f4       	brne	.+26     	; 0x1b8a <vfprintf+0x98>
    1b70:	23 2d       	mov	r18, r3
    1b72:	21 60       	ori	r18, 0x01	; 1
    1b74:	16 c0       	rjmp	.+44     	; 0x1ba2 <vfprintf+0xb0>
    1b76:	83 2d       	mov	r24, r3
    1b78:	82 60       	ori	r24, 0x02	; 2
    1b7a:	38 2e       	mov	r3, r24
    1b7c:	e3 2d       	mov	r30, r3
    1b7e:	e4 60       	ori	r30, 0x04	; 4
    1b80:	3e 2e       	mov	r3, r30
    1b82:	2a c0       	rjmp	.+84     	; 0x1bd8 <vfprintf+0xe6>
    1b84:	f3 2d       	mov	r31, r3
    1b86:	f8 60       	ori	r31, 0x08	; 8
    1b88:	1d c0       	rjmp	.+58     	; 0x1bc4 <vfprintf+0xd2>
    1b8a:	37 fc       	sbrc	r3, 7
    1b8c:	2d c0       	rjmp	.+90     	; 0x1be8 <vfprintf+0xf6>
    1b8e:	20 ed       	ldi	r18, 0xD0	; 208
    1b90:	28 0f       	add	r18, r24
    1b92:	2a 30       	cpi	r18, 0x0A	; 10
    1b94:	40 f0       	brcs	.+16     	; 0x1ba6 <vfprintf+0xb4>
    1b96:	8e 32       	cpi	r24, 0x2E	; 46
    1b98:	b9 f4       	brne	.+46     	; 0x1bc8 <vfprintf+0xd6>
    1b9a:	36 fc       	sbrc	r3, 6
    1b9c:	81 c1       	rjmp	.+770    	; 0x1ea0 <vfprintf+0x3ae>
    1b9e:	23 2d       	mov	r18, r3
    1ba0:	20 64       	ori	r18, 0x40	; 64
    1ba2:	32 2e       	mov	r3, r18
    1ba4:	19 c0       	rjmp	.+50     	; 0x1bd8 <vfprintf+0xe6>
    1ba6:	36 fe       	sbrs	r3, 6
    1ba8:	06 c0       	rjmp	.+12     	; 0x1bb6 <vfprintf+0xc4>
    1baa:	8a e0       	ldi	r24, 0x0A	; 10
    1bac:	98 9e       	mul	r9, r24
    1bae:	20 0d       	add	r18, r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	92 2e       	mov	r9, r18
    1bb4:	11 c0       	rjmp	.+34     	; 0x1bd8 <vfprintf+0xe6>
    1bb6:	ea e0       	ldi	r30, 0x0A	; 10
    1bb8:	2e 9e       	mul	r2, r30
    1bba:	20 0d       	add	r18, r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	22 2e       	mov	r2, r18
    1bc0:	f3 2d       	mov	r31, r3
    1bc2:	f0 62       	ori	r31, 0x20	; 32
    1bc4:	3f 2e       	mov	r3, r31
    1bc6:	08 c0       	rjmp	.+16     	; 0x1bd8 <vfprintf+0xe6>
    1bc8:	8c 36       	cpi	r24, 0x6C	; 108
    1bca:	21 f4       	brne	.+8      	; 0x1bd4 <vfprintf+0xe2>
    1bcc:	83 2d       	mov	r24, r3
    1bce:	80 68       	ori	r24, 0x80	; 128
    1bd0:	38 2e       	mov	r3, r24
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <vfprintf+0xe6>
    1bd4:	88 36       	cpi	r24, 0x68	; 104
    1bd6:	41 f4       	brne	.+16     	; 0x1be8 <vfprintf+0xf6>
    1bd8:	f7 01       	movw	r30, r14
    1bda:	93 fd       	sbrc	r25, 3
    1bdc:	85 91       	lpm	r24, Z+
    1bde:	93 ff       	sbrs	r25, 3
    1be0:	81 91       	ld	r24, Z+
    1be2:	7f 01       	movw	r14, r30
    1be4:	81 11       	cpse	r24, r1
    1be6:	b3 cf       	rjmp	.-154    	; 0x1b4e <vfprintf+0x5c>
    1be8:	98 2f       	mov	r25, r24
    1bea:	9f 7d       	andi	r25, 0xDF	; 223
    1bec:	95 54       	subi	r25, 0x45	; 69
    1bee:	93 30       	cpi	r25, 0x03	; 3
    1bf0:	28 f4       	brcc	.+10     	; 0x1bfc <vfprintf+0x10a>
    1bf2:	0c 5f       	subi	r16, 0xFC	; 252
    1bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf6:	9f e3       	ldi	r25, 0x3F	; 63
    1bf8:	99 83       	std	Y+1, r25	; 0x01
    1bfa:	0d c0       	rjmp	.+26     	; 0x1c16 <vfprintf+0x124>
    1bfc:	83 36       	cpi	r24, 0x63	; 99
    1bfe:	31 f0       	breq	.+12     	; 0x1c0c <vfprintf+0x11a>
    1c00:	83 37       	cpi	r24, 0x73	; 115
    1c02:	71 f0       	breq	.+28     	; 0x1c20 <vfprintf+0x12e>
    1c04:	83 35       	cpi	r24, 0x53	; 83
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <vfprintf+0x118>
    1c08:	59 c0       	rjmp	.+178    	; 0x1cbc <vfprintf+0x1ca>
    1c0a:	21 c0       	rjmp	.+66     	; 0x1c4e <vfprintf+0x15c>
    1c0c:	f8 01       	movw	r30, r16
    1c0e:	80 81       	ld	r24, Z
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	0e 5f       	subi	r16, 0xFE	; 254
    1c14:	1f 4f       	sbci	r17, 0xFF	; 255
    1c16:	88 24       	eor	r8, r8
    1c18:	83 94       	inc	r8
    1c1a:	91 2c       	mov	r9, r1
    1c1c:	53 01       	movw	r10, r6
    1c1e:	13 c0       	rjmp	.+38     	; 0x1c46 <vfprintf+0x154>
    1c20:	28 01       	movw	r4, r16
    1c22:	f2 e0       	ldi	r31, 0x02	; 2
    1c24:	4f 0e       	add	r4, r31
    1c26:	51 1c       	adc	r5, r1
    1c28:	f8 01       	movw	r30, r16
    1c2a:	a0 80       	ld	r10, Z
    1c2c:	b1 80       	ldd	r11, Z+1	; 0x01
    1c2e:	36 fe       	sbrs	r3, 6
    1c30:	03 c0       	rjmp	.+6      	; 0x1c38 <vfprintf+0x146>
    1c32:	69 2d       	mov	r22, r9
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <vfprintf+0x14a>
    1c38:	6f ef       	ldi	r22, 0xFF	; 255
    1c3a:	7f ef       	ldi	r23, 0xFF	; 255
    1c3c:	c5 01       	movw	r24, r10
    1c3e:	0e 94 97 11 	call	0x232e	; 0x232e <strnlen>
    1c42:	4c 01       	movw	r8, r24
    1c44:	82 01       	movw	r16, r4
    1c46:	f3 2d       	mov	r31, r3
    1c48:	ff 77       	andi	r31, 0x7F	; 127
    1c4a:	3f 2e       	mov	r3, r31
    1c4c:	16 c0       	rjmp	.+44     	; 0x1c7a <vfprintf+0x188>
    1c4e:	28 01       	movw	r4, r16
    1c50:	22 e0       	ldi	r18, 0x02	; 2
    1c52:	42 0e       	add	r4, r18
    1c54:	51 1c       	adc	r5, r1
    1c56:	f8 01       	movw	r30, r16
    1c58:	a0 80       	ld	r10, Z
    1c5a:	b1 80       	ldd	r11, Z+1	; 0x01
    1c5c:	36 fe       	sbrs	r3, 6
    1c5e:	03 c0       	rjmp	.+6      	; 0x1c66 <vfprintf+0x174>
    1c60:	69 2d       	mov	r22, r9
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <vfprintf+0x178>
    1c66:	6f ef       	ldi	r22, 0xFF	; 255
    1c68:	7f ef       	ldi	r23, 0xFF	; 255
    1c6a:	c5 01       	movw	r24, r10
    1c6c:	0e 94 8c 11 	call	0x2318	; 0x2318 <strnlen_P>
    1c70:	4c 01       	movw	r8, r24
    1c72:	f3 2d       	mov	r31, r3
    1c74:	f0 68       	ori	r31, 0x80	; 128
    1c76:	3f 2e       	mov	r3, r31
    1c78:	82 01       	movw	r16, r4
    1c7a:	33 fc       	sbrc	r3, 3
    1c7c:	1b c0       	rjmp	.+54     	; 0x1cb4 <vfprintf+0x1c2>
    1c7e:	82 2d       	mov	r24, r2
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	88 16       	cp	r8, r24
    1c84:	99 06       	cpc	r9, r25
    1c86:	b0 f4       	brcc	.+44     	; 0x1cb4 <vfprintf+0x1c2>
    1c88:	b6 01       	movw	r22, r12
    1c8a:	80 e2       	ldi	r24, 0x20	; 32
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1c92:	2a 94       	dec	r2
    1c94:	f4 cf       	rjmp	.-24     	; 0x1c7e <vfprintf+0x18c>
    1c96:	f5 01       	movw	r30, r10
    1c98:	37 fc       	sbrc	r3, 7
    1c9a:	85 91       	lpm	r24, Z+
    1c9c:	37 fe       	sbrs	r3, 7
    1c9e:	81 91       	ld	r24, Z+
    1ca0:	5f 01       	movw	r10, r30
    1ca2:	b6 01       	movw	r22, r12
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1caa:	21 10       	cpse	r2, r1
    1cac:	2a 94       	dec	r2
    1cae:	21 e0       	ldi	r18, 0x01	; 1
    1cb0:	82 1a       	sub	r8, r18
    1cb2:	91 08       	sbc	r9, r1
    1cb4:	81 14       	cp	r8, r1
    1cb6:	91 04       	cpc	r9, r1
    1cb8:	71 f7       	brne	.-36     	; 0x1c96 <vfprintf+0x1a4>
    1cba:	e8 c0       	rjmp	.+464    	; 0x1e8c <vfprintf+0x39a>
    1cbc:	84 36       	cpi	r24, 0x64	; 100
    1cbe:	11 f0       	breq	.+4      	; 0x1cc4 <vfprintf+0x1d2>
    1cc0:	89 36       	cpi	r24, 0x69	; 105
    1cc2:	41 f5       	brne	.+80     	; 0x1d14 <vfprintf+0x222>
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	37 fe       	sbrs	r3, 7
    1cc8:	07 c0       	rjmp	.+14     	; 0x1cd8 <vfprintf+0x1e6>
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	0c 5f       	subi	r16, 0xFC	; 252
    1cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd6:	08 c0       	rjmp	.+16     	; 0x1ce8 <vfprintf+0x1f6>
    1cd8:	60 81       	ld	r22, Z
    1cda:	71 81       	ldd	r23, Z+1	; 0x01
    1cdc:	07 2e       	mov	r0, r23
    1cde:	00 0c       	add	r0, r0
    1ce0:	88 0b       	sbc	r24, r24
    1ce2:	99 0b       	sbc	r25, r25
    1ce4:	0e 5f       	subi	r16, 0xFE	; 254
    1ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce8:	f3 2d       	mov	r31, r3
    1cea:	ff 76       	andi	r31, 0x6F	; 111
    1cec:	3f 2e       	mov	r3, r31
    1cee:	97 ff       	sbrs	r25, 7
    1cf0:	09 c0       	rjmp	.+18     	; 0x1d04 <vfprintf+0x212>
    1cf2:	90 95       	com	r25
    1cf4:	80 95       	com	r24
    1cf6:	70 95       	com	r23
    1cf8:	61 95       	neg	r22
    1cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	f0 68       	ori	r31, 0x80	; 128
    1d02:	3f 2e       	mov	r3, r31
    1d04:	2a e0       	ldi	r18, 0x0A	; 10
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	a3 01       	movw	r20, r6
    1d0a:	0e 94 de 11 	call	0x23bc	; 0x23bc <__ultoa_invert>
    1d0e:	88 2e       	mov	r8, r24
    1d10:	86 18       	sub	r8, r6
    1d12:	45 c0       	rjmp	.+138    	; 0x1d9e <vfprintf+0x2ac>
    1d14:	85 37       	cpi	r24, 0x75	; 117
    1d16:	31 f4       	brne	.+12     	; 0x1d24 <vfprintf+0x232>
    1d18:	23 2d       	mov	r18, r3
    1d1a:	2f 7e       	andi	r18, 0xEF	; 239
    1d1c:	b2 2e       	mov	r11, r18
    1d1e:	2a e0       	ldi	r18, 0x0A	; 10
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	25 c0       	rjmp	.+74     	; 0x1d6e <vfprintf+0x27c>
    1d24:	93 2d       	mov	r25, r3
    1d26:	99 7f       	andi	r25, 0xF9	; 249
    1d28:	b9 2e       	mov	r11, r25
    1d2a:	8f 36       	cpi	r24, 0x6F	; 111
    1d2c:	c1 f0       	breq	.+48     	; 0x1d5e <vfprintf+0x26c>
    1d2e:	18 f4       	brcc	.+6      	; 0x1d36 <vfprintf+0x244>
    1d30:	88 35       	cpi	r24, 0x58	; 88
    1d32:	79 f0       	breq	.+30     	; 0x1d52 <vfprintf+0x260>
    1d34:	b5 c0       	rjmp	.+362    	; 0x1ea0 <vfprintf+0x3ae>
    1d36:	80 37       	cpi	r24, 0x70	; 112
    1d38:	19 f0       	breq	.+6      	; 0x1d40 <vfprintf+0x24e>
    1d3a:	88 37       	cpi	r24, 0x78	; 120
    1d3c:	21 f0       	breq	.+8      	; 0x1d46 <vfprintf+0x254>
    1d3e:	b0 c0       	rjmp	.+352    	; 0x1ea0 <vfprintf+0x3ae>
    1d40:	e9 2f       	mov	r30, r25
    1d42:	e0 61       	ori	r30, 0x10	; 16
    1d44:	be 2e       	mov	r11, r30
    1d46:	b4 fe       	sbrs	r11, 4
    1d48:	0d c0       	rjmp	.+26     	; 0x1d64 <vfprintf+0x272>
    1d4a:	fb 2d       	mov	r31, r11
    1d4c:	f4 60       	ori	r31, 0x04	; 4
    1d4e:	bf 2e       	mov	r11, r31
    1d50:	09 c0       	rjmp	.+18     	; 0x1d64 <vfprintf+0x272>
    1d52:	34 fe       	sbrs	r3, 4
    1d54:	0a c0       	rjmp	.+20     	; 0x1d6a <vfprintf+0x278>
    1d56:	29 2f       	mov	r18, r25
    1d58:	26 60       	ori	r18, 0x06	; 6
    1d5a:	b2 2e       	mov	r11, r18
    1d5c:	06 c0       	rjmp	.+12     	; 0x1d6a <vfprintf+0x278>
    1d5e:	28 e0       	ldi	r18, 0x08	; 8
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	05 c0       	rjmp	.+10     	; 0x1d6e <vfprintf+0x27c>
    1d64:	20 e1       	ldi	r18, 0x10	; 16
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <vfprintf+0x27c>
    1d6a:	20 e1       	ldi	r18, 0x10	; 16
    1d6c:	32 e0       	ldi	r19, 0x02	; 2
    1d6e:	f8 01       	movw	r30, r16
    1d70:	b7 fe       	sbrs	r11, 7
    1d72:	07 c0       	rjmp	.+14     	; 0x1d82 <vfprintf+0x290>
    1d74:	60 81       	ld	r22, Z
    1d76:	71 81       	ldd	r23, Z+1	; 0x01
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	0c 5f       	subi	r16, 0xFC	; 252
    1d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d80:	06 c0       	rjmp	.+12     	; 0x1d8e <vfprintf+0x29c>
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 5f       	subi	r16, 0xFE	; 254
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	a3 01       	movw	r20, r6
    1d90:	0e 94 de 11 	call	0x23bc	; 0x23bc <__ultoa_invert>
    1d94:	88 2e       	mov	r8, r24
    1d96:	86 18       	sub	r8, r6
    1d98:	fb 2d       	mov	r31, r11
    1d9a:	ff 77       	andi	r31, 0x7F	; 127
    1d9c:	3f 2e       	mov	r3, r31
    1d9e:	36 fe       	sbrs	r3, 6
    1da0:	0d c0       	rjmp	.+26     	; 0x1dbc <vfprintf+0x2ca>
    1da2:	23 2d       	mov	r18, r3
    1da4:	2e 7f       	andi	r18, 0xFE	; 254
    1da6:	a2 2e       	mov	r10, r18
    1da8:	89 14       	cp	r8, r9
    1daa:	58 f4       	brcc	.+22     	; 0x1dc2 <vfprintf+0x2d0>
    1dac:	34 fe       	sbrs	r3, 4
    1dae:	0b c0       	rjmp	.+22     	; 0x1dc6 <vfprintf+0x2d4>
    1db0:	32 fc       	sbrc	r3, 2
    1db2:	09 c0       	rjmp	.+18     	; 0x1dc6 <vfprintf+0x2d4>
    1db4:	83 2d       	mov	r24, r3
    1db6:	8e 7e       	andi	r24, 0xEE	; 238
    1db8:	a8 2e       	mov	r10, r24
    1dba:	05 c0       	rjmp	.+10     	; 0x1dc6 <vfprintf+0x2d4>
    1dbc:	b8 2c       	mov	r11, r8
    1dbe:	a3 2c       	mov	r10, r3
    1dc0:	03 c0       	rjmp	.+6      	; 0x1dc8 <vfprintf+0x2d6>
    1dc2:	b8 2c       	mov	r11, r8
    1dc4:	01 c0       	rjmp	.+2      	; 0x1dc8 <vfprintf+0x2d6>
    1dc6:	b9 2c       	mov	r11, r9
    1dc8:	a4 fe       	sbrs	r10, 4
    1dca:	0f c0       	rjmp	.+30     	; 0x1dea <vfprintf+0x2f8>
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e8 0d       	add	r30, r8
    1dd0:	f1 1d       	adc	r31, r1
    1dd2:	80 81       	ld	r24, Z
    1dd4:	80 33       	cpi	r24, 0x30	; 48
    1dd6:	21 f4       	brne	.+8      	; 0x1de0 <vfprintf+0x2ee>
    1dd8:	9a 2d       	mov	r25, r10
    1dda:	99 7e       	andi	r25, 0xE9	; 233
    1ddc:	a9 2e       	mov	r10, r25
    1dde:	09 c0       	rjmp	.+18     	; 0x1df2 <vfprintf+0x300>
    1de0:	a2 fe       	sbrs	r10, 2
    1de2:	06 c0       	rjmp	.+12     	; 0x1df0 <vfprintf+0x2fe>
    1de4:	b3 94       	inc	r11
    1de6:	b3 94       	inc	r11
    1de8:	04 c0       	rjmp	.+8      	; 0x1df2 <vfprintf+0x300>
    1dea:	8a 2d       	mov	r24, r10
    1dec:	86 78       	andi	r24, 0x86	; 134
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <vfprintf+0x300>
    1df0:	b3 94       	inc	r11
    1df2:	a3 fc       	sbrc	r10, 3
    1df4:	11 c0       	rjmp	.+34     	; 0x1e18 <vfprintf+0x326>
    1df6:	a0 fe       	sbrs	r10, 0
    1df8:	06 c0       	rjmp	.+12     	; 0x1e06 <vfprintf+0x314>
    1dfa:	b2 14       	cp	r11, r2
    1dfc:	88 f4       	brcc	.+34     	; 0x1e20 <vfprintf+0x32e>
    1dfe:	28 0c       	add	r2, r8
    1e00:	92 2c       	mov	r9, r2
    1e02:	9b 18       	sub	r9, r11
    1e04:	0e c0       	rjmp	.+28     	; 0x1e22 <vfprintf+0x330>
    1e06:	b2 14       	cp	r11, r2
    1e08:	60 f4       	brcc	.+24     	; 0x1e22 <vfprintf+0x330>
    1e0a:	b6 01       	movw	r22, r12
    1e0c:	80 e2       	ldi	r24, 0x20	; 32
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1e14:	b3 94       	inc	r11
    1e16:	f7 cf       	rjmp	.-18     	; 0x1e06 <vfprintf+0x314>
    1e18:	b2 14       	cp	r11, r2
    1e1a:	18 f4       	brcc	.+6      	; 0x1e22 <vfprintf+0x330>
    1e1c:	2b 18       	sub	r2, r11
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <vfprintf+0x332>
    1e20:	98 2c       	mov	r9, r8
    1e22:	21 2c       	mov	r2, r1
    1e24:	a4 fe       	sbrs	r10, 4
    1e26:	10 c0       	rjmp	.+32     	; 0x1e48 <vfprintf+0x356>
    1e28:	b6 01       	movw	r22, r12
    1e2a:	80 e3       	ldi	r24, 0x30	; 48
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1e32:	a2 fe       	sbrs	r10, 2
    1e34:	17 c0       	rjmp	.+46     	; 0x1e64 <vfprintf+0x372>
    1e36:	a1 fc       	sbrc	r10, 1
    1e38:	03 c0       	rjmp	.+6      	; 0x1e40 <vfprintf+0x34e>
    1e3a:	88 e7       	ldi	r24, 0x78	; 120
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <vfprintf+0x352>
    1e40:	88 e5       	ldi	r24, 0x58	; 88
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	b6 01       	movw	r22, r12
    1e46:	0c c0       	rjmp	.+24     	; 0x1e60 <vfprintf+0x36e>
    1e48:	8a 2d       	mov	r24, r10
    1e4a:	86 78       	andi	r24, 0x86	; 134
    1e4c:	59 f0       	breq	.+22     	; 0x1e64 <vfprintf+0x372>
    1e4e:	a1 fe       	sbrs	r10, 1
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <vfprintf+0x364>
    1e52:	8b e2       	ldi	r24, 0x2B	; 43
    1e54:	01 c0       	rjmp	.+2      	; 0x1e58 <vfprintf+0x366>
    1e56:	80 e2       	ldi	r24, 0x20	; 32
    1e58:	a7 fc       	sbrc	r10, 7
    1e5a:	8d e2       	ldi	r24, 0x2D	; 45
    1e5c:	b6 01       	movw	r22, r12
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1e64:	89 14       	cp	r8, r9
    1e66:	38 f4       	brcc	.+14     	; 0x1e76 <vfprintf+0x384>
    1e68:	b6 01       	movw	r22, r12
    1e6a:	80 e3       	ldi	r24, 0x30	; 48
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1e72:	9a 94       	dec	r9
    1e74:	f7 cf       	rjmp	.-18     	; 0x1e64 <vfprintf+0x372>
    1e76:	8a 94       	dec	r8
    1e78:	f3 01       	movw	r30, r6
    1e7a:	e8 0d       	add	r30, r8
    1e7c:	f1 1d       	adc	r31, r1
    1e7e:	80 81       	ld	r24, Z
    1e80:	b6 01       	movw	r22, r12
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1e88:	81 10       	cpse	r8, r1
    1e8a:	f5 cf       	rjmp	.-22     	; 0x1e76 <vfprintf+0x384>
    1e8c:	22 20       	and	r2, r2
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <vfprintf+0x3a0>
    1e90:	42 ce       	rjmp	.-892    	; 0x1b16 <vfprintf+0x24>
    1e92:	b6 01       	movw	r22, r12
    1e94:	80 e2       	ldi	r24, 0x20	; 32
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	0e 94 a2 11 	call	0x2344	; 0x2344 <fputc>
    1e9c:	2a 94       	dec	r2
    1e9e:	f6 cf       	rjmp	.-20     	; 0x1e8c <vfprintf+0x39a>
    1ea0:	f6 01       	movw	r30, r12
    1ea2:	86 81       	ldd	r24, Z+6	; 0x06
    1ea4:	97 81       	ldd	r25, Z+7	; 0x07
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <vfprintf+0x3ba>
    1ea8:	8f ef       	ldi	r24, 0xFF	; 255
    1eaa:	9f ef       	ldi	r25, 0xFF	; 255
    1eac:	2b 96       	adiw	r28, 0x0b	; 11
    1eae:	e2 e1       	ldi	r30, 0x12	; 18
    1eb0:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__>

00001eb4 <dtoa_prf>:
    1eb4:	a9 e0       	ldi	r26, 0x09	; 9
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e0 e6       	ldi	r30, 0x60	; 96
    1eba:	ff e0       	ldi	r31, 0x0F	; 15
    1ebc:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__prologue_saves__+0xc>
    1ec0:	6a 01       	movw	r12, r20
    1ec2:	12 2f       	mov	r17, r18
    1ec4:	b0 2e       	mov	r11, r16
    1ec6:	2b e3       	ldi	r18, 0x3B	; 59
    1ec8:	20 17       	cp	r18, r16
    1eca:	20 f0       	brcs	.+8      	; 0x1ed4 <dtoa_prf+0x20>
    1ecc:	ff 24       	eor	r15, r15
    1ece:	f3 94       	inc	r15
    1ed0:	f0 0e       	add	r15, r16
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <dtoa_prf+0x24>
    1ed4:	2c e3       	ldi	r18, 0x3C	; 60
    1ed6:	f2 2e       	mov	r15, r18
    1ed8:	0f 2d       	mov	r16, r15
    1eda:	27 e0       	ldi	r18, 0x07	; 7
    1edc:	ae 01       	movw	r20, r28
    1ede:	4f 5f       	subi	r20, 0xFF	; 255
    1ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee2:	0e 94 b4 10 	call	0x2168	; 0x2168 <__ftoa_engine>
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	49 81       	ldd	r20, Y+1	; 0x01
    1eea:	84 2f       	mov	r24, r20
    1eec:	89 70       	andi	r24, 0x09	; 9
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	31 f0       	breq	.+12     	; 0x1efe <dtoa_prf+0x4a>
    1ef2:	e1 fc       	sbrc	r14, 1
    1ef4:	06 c0       	rjmp	.+12     	; 0x1f02 <dtoa_prf+0x4e>
    1ef6:	e0 fe       	sbrs	r14, 0
    1ef8:	06 c0       	rjmp	.+12     	; 0x1f06 <dtoa_prf+0x52>
    1efa:	90 e2       	ldi	r25, 0x20	; 32
    1efc:	05 c0       	rjmp	.+10     	; 0x1f08 <dtoa_prf+0x54>
    1efe:	9d e2       	ldi	r25, 0x2D	; 45
    1f00:	03 c0       	rjmp	.+6      	; 0x1f08 <dtoa_prf+0x54>
    1f02:	9b e2       	ldi	r25, 0x2B	; 43
    1f04:	01 c0       	rjmp	.+2      	; 0x1f08 <dtoa_prf+0x54>
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	5e 2d       	mov	r21, r14
    1f0a:	50 71       	andi	r21, 0x10	; 16
    1f0c:	43 ff       	sbrs	r20, 3
    1f0e:	3c c0       	rjmp	.+120    	; 0x1f88 <dtoa_prf+0xd4>
    1f10:	91 11       	cpse	r25, r1
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <dtoa_prf+0x64>
    1f14:	83 e0       	ldi	r24, 0x03	; 3
    1f16:	01 c0       	rjmp	.+2      	; 0x1f1a <dtoa_prf+0x66>
    1f18:	84 e0       	ldi	r24, 0x04	; 4
    1f1a:	81 17       	cp	r24, r17
    1f1c:	18 f4       	brcc	.+6      	; 0x1f24 <dtoa_prf+0x70>
    1f1e:	21 2f       	mov	r18, r17
    1f20:	28 1b       	sub	r18, r24
    1f22:	01 c0       	rjmp	.+2      	; 0x1f26 <dtoa_prf+0x72>
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	51 11       	cpse	r21, r1
    1f28:	0b c0       	rjmp	.+22     	; 0x1f40 <dtoa_prf+0x8c>
    1f2a:	f6 01       	movw	r30, r12
    1f2c:	82 2f       	mov	r24, r18
    1f2e:	30 e2       	ldi	r19, 0x20	; 32
    1f30:	88 23       	and	r24, r24
    1f32:	19 f0       	breq	.+6      	; 0x1f3a <dtoa_prf+0x86>
    1f34:	31 93       	st	Z+, r19
    1f36:	81 50       	subi	r24, 0x01	; 1
    1f38:	fb cf       	rjmp	.-10     	; 0x1f30 <dtoa_prf+0x7c>
    1f3a:	c2 0e       	add	r12, r18
    1f3c:	d1 1c       	adc	r13, r1
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	99 23       	and	r25, r25
    1f42:	29 f0       	breq	.+10     	; 0x1f4e <dtoa_prf+0x9a>
    1f44:	d6 01       	movw	r26, r12
    1f46:	9c 93       	st	X, r25
    1f48:	f6 01       	movw	r30, r12
    1f4a:	31 96       	adiw	r30, 0x01	; 1
    1f4c:	6f 01       	movw	r12, r30
    1f4e:	c6 01       	movw	r24, r12
    1f50:	03 96       	adiw	r24, 0x03	; 3
    1f52:	e2 fe       	sbrs	r14, 2
    1f54:	0a c0       	rjmp	.+20     	; 0x1f6a <dtoa_prf+0xb6>
    1f56:	3e e4       	ldi	r19, 0x4E	; 78
    1f58:	d6 01       	movw	r26, r12
    1f5a:	3c 93       	st	X, r19
    1f5c:	41 e4       	ldi	r20, 0x41	; 65
    1f5e:	11 96       	adiw	r26, 0x01	; 1
    1f60:	4c 93       	st	X, r20
    1f62:	11 97       	sbiw	r26, 0x01	; 1
    1f64:	12 96       	adiw	r26, 0x02	; 2
    1f66:	3c 93       	st	X, r19
    1f68:	06 c0       	rjmp	.+12     	; 0x1f76 <dtoa_prf+0xc2>
    1f6a:	3e e6       	ldi	r19, 0x6E	; 110
    1f6c:	f6 01       	movw	r30, r12
    1f6e:	30 83       	st	Z, r19
    1f70:	41 e6       	ldi	r20, 0x61	; 97
    1f72:	41 83       	std	Z+1, r20	; 0x01
    1f74:	32 83       	std	Z+2, r19	; 0x02
    1f76:	fc 01       	movw	r30, r24
    1f78:	32 2f       	mov	r19, r18
    1f7a:	40 e2       	ldi	r20, 0x20	; 32
    1f7c:	33 23       	and	r19, r19
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <dtoa_prf+0xce>
    1f80:	42 c0       	rjmp	.+132    	; 0x2006 <dtoa_prf+0x152>
    1f82:	41 93       	st	Z+, r20
    1f84:	31 50       	subi	r19, 0x01	; 1
    1f86:	fa cf       	rjmp	.-12     	; 0x1f7c <dtoa_prf+0xc8>
    1f88:	42 ff       	sbrs	r20, 2
    1f8a:	44 c0       	rjmp	.+136    	; 0x2014 <dtoa_prf+0x160>
    1f8c:	91 11       	cpse	r25, r1
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <dtoa_prf+0xe0>
    1f90:	83 e0       	ldi	r24, 0x03	; 3
    1f92:	01 c0       	rjmp	.+2      	; 0x1f96 <dtoa_prf+0xe2>
    1f94:	84 e0       	ldi	r24, 0x04	; 4
    1f96:	81 17       	cp	r24, r17
    1f98:	18 f4       	brcc	.+6      	; 0x1fa0 <dtoa_prf+0xec>
    1f9a:	21 2f       	mov	r18, r17
    1f9c:	28 1b       	sub	r18, r24
    1f9e:	01 c0       	rjmp	.+2      	; 0x1fa2 <dtoa_prf+0xee>
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	51 11       	cpse	r21, r1
    1fa4:	0b c0       	rjmp	.+22     	; 0x1fbc <dtoa_prf+0x108>
    1fa6:	f6 01       	movw	r30, r12
    1fa8:	82 2f       	mov	r24, r18
    1faa:	30 e2       	ldi	r19, 0x20	; 32
    1fac:	88 23       	and	r24, r24
    1fae:	19 f0       	breq	.+6      	; 0x1fb6 <dtoa_prf+0x102>
    1fb0:	31 93       	st	Z+, r19
    1fb2:	81 50       	subi	r24, 0x01	; 1
    1fb4:	fb cf       	rjmp	.-10     	; 0x1fac <dtoa_prf+0xf8>
    1fb6:	c2 0e       	add	r12, r18
    1fb8:	d1 1c       	adc	r13, r1
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	99 23       	and	r25, r25
    1fbe:	29 f0       	breq	.+10     	; 0x1fca <dtoa_prf+0x116>
    1fc0:	d6 01       	movw	r26, r12
    1fc2:	9c 93       	st	X, r25
    1fc4:	f6 01       	movw	r30, r12
    1fc6:	31 96       	adiw	r30, 0x01	; 1
    1fc8:	6f 01       	movw	r12, r30
    1fca:	c6 01       	movw	r24, r12
    1fcc:	03 96       	adiw	r24, 0x03	; 3
    1fce:	e2 fe       	sbrs	r14, 2
    1fd0:	0b c0       	rjmp	.+22     	; 0x1fe8 <dtoa_prf+0x134>
    1fd2:	39 e4       	ldi	r19, 0x49	; 73
    1fd4:	d6 01       	movw	r26, r12
    1fd6:	3c 93       	st	X, r19
    1fd8:	3e e4       	ldi	r19, 0x4E	; 78
    1fda:	11 96       	adiw	r26, 0x01	; 1
    1fdc:	3c 93       	st	X, r19
    1fde:	11 97       	sbiw	r26, 0x01	; 1
    1fe0:	36 e4       	ldi	r19, 0x46	; 70
    1fe2:	12 96       	adiw	r26, 0x02	; 2
    1fe4:	3c 93       	st	X, r19
    1fe6:	07 c0       	rjmp	.+14     	; 0x1ff6 <dtoa_prf+0x142>
    1fe8:	39 e6       	ldi	r19, 0x69	; 105
    1fea:	f6 01       	movw	r30, r12
    1fec:	30 83       	st	Z, r19
    1fee:	3e e6       	ldi	r19, 0x6E	; 110
    1ff0:	31 83       	std	Z+1, r19	; 0x01
    1ff2:	36 e6       	ldi	r19, 0x66	; 102
    1ff4:	32 83       	std	Z+2, r19	; 0x02
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	32 2f       	mov	r19, r18
    1ffa:	40 e2       	ldi	r20, 0x20	; 32
    1ffc:	33 23       	and	r19, r19
    1ffe:	19 f0       	breq	.+6      	; 0x2006 <dtoa_prf+0x152>
    2000:	41 93       	st	Z+, r20
    2002:	31 50       	subi	r19, 0x01	; 1
    2004:	fb cf       	rjmp	.-10     	; 0x1ffc <dtoa_prf+0x148>
    2006:	fc 01       	movw	r30, r24
    2008:	e2 0f       	add	r30, r18
    200a:	f1 1d       	adc	r31, r1
    200c:	10 82       	st	Z, r1
    200e:	8e ef       	ldi	r24, 0xFE	; 254
    2010:	9f ef       	ldi	r25, 0xFF	; 255
    2012:	a6 c0       	rjmp	.+332    	; 0x2160 <dtoa_prf+0x2ac>
    2014:	21 e0       	ldi	r18, 0x01	; 1
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	91 11       	cpse	r25, r1
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <dtoa_prf+0x16c>
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	16 16       	cp	r1, r22
    2022:	17 06       	cpc	r1, r23
    2024:	1c f4       	brge	.+6      	; 0x202c <dtoa_prf+0x178>
    2026:	fb 01       	movw	r30, r22
    2028:	31 96       	adiw	r30, 0x01	; 1
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <dtoa_prf+0x17c>
    202c:	e1 e0       	ldi	r30, 0x01	; 1
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	2e 0f       	add	r18, r30
    2032:	3f 1f       	adc	r19, r31
    2034:	bb 20       	and	r11, r11
    2036:	21 f0       	breq	.+8      	; 0x2040 <dtoa_prf+0x18c>
    2038:	eb 2d       	mov	r30, r11
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	31 96       	adiw	r30, 0x01	; 1
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <dtoa_prf+0x190>
    2040:	e0 e0       	ldi	r30, 0x00	; 0
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	2e 0f       	add	r18, r30
    2046:	3f 1f       	adc	r19, r31
    2048:	e1 2f       	mov	r30, r17
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	2e 17       	cp	r18, r30
    204e:	3f 07       	cpc	r19, r31
    2050:	1c f4       	brge	.+6      	; 0x2058 <dtoa_prf+0x1a4>
    2052:	12 1b       	sub	r17, r18
    2054:	21 2f       	mov	r18, r17
    2056:	01 c0       	rjmp	.+2      	; 0x205a <dtoa_prf+0x1a6>
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	8e 2d       	mov	r24, r14
    205c:	88 71       	andi	r24, 0x18	; 24
    205e:	59 f4       	brne	.+22     	; 0x2076 <dtoa_prf+0x1c2>
    2060:	f6 01       	movw	r30, r12
    2062:	82 2f       	mov	r24, r18
    2064:	30 e2       	ldi	r19, 0x20	; 32
    2066:	88 23       	and	r24, r24
    2068:	19 f0       	breq	.+6      	; 0x2070 <dtoa_prf+0x1bc>
    206a:	31 93       	st	Z+, r19
    206c:	81 50       	subi	r24, 0x01	; 1
    206e:	fb cf       	rjmp	.-10     	; 0x2066 <dtoa_prf+0x1b2>
    2070:	c2 0e       	add	r12, r18
    2072:	d1 1c       	adc	r13, r1
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	99 23       	and	r25, r25
    2078:	29 f0       	breq	.+10     	; 0x2084 <dtoa_prf+0x1d0>
    207a:	d6 01       	movw	r26, r12
    207c:	9c 93       	st	X, r25
    207e:	f6 01       	movw	r30, r12
    2080:	31 96       	adiw	r30, 0x01	; 1
    2082:	6f 01       	movw	r12, r30
    2084:	51 11       	cpse	r21, r1
    2086:	0b c0       	rjmp	.+22     	; 0x209e <dtoa_prf+0x1ea>
    2088:	f6 01       	movw	r30, r12
    208a:	82 2f       	mov	r24, r18
    208c:	90 e3       	ldi	r25, 0x30	; 48
    208e:	88 23       	and	r24, r24
    2090:	19 f0       	breq	.+6      	; 0x2098 <dtoa_prf+0x1e4>
    2092:	91 93       	st	Z+, r25
    2094:	81 50       	subi	r24, 0x01	; 1
    2096:	fb cf       	rjmp	.-10     	; 0x208e <dtoa_prf+0x1da>
    2098:	c2 0e       	add	r12, r18
    209a:	d1 1c       	adc	r13, r1
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	0f 2d       	mov	r16, r15
    20a0:	06 0f       	add	r16, r22
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	34 2f       	mov	r19, r20
    20a6:	30 71       	andi	r19, 0x10	; 16
    20a8:	44 ff       	sbrs	r20, 4
    20aa:	03 c0       	rjmp	.+6      	; 0x20b2 <dtoa_prf+0x1fe>
    20ac:	91 33       	cpi	r25, 0x31	; 49
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <dtoa_prf+0x1fe>
    20b0:	01 50       	subi	r16, 0x01	; 1
    20b2:	10 16       	cp	r1, r16
    20b4:	24 f4       	brge	.+8      	; 0x20be <dtoa_prf+0x20a>
    20b6:	09 30       	cpi	r16, 0x09	; 9
    20b8:	18 f0       	brcs	.+6      	; 0x20c0 <dtoa_prf+0x20c>
    20ba:	08 e0       	ldi	r16, 0x08	; 8
    20bc:	01 c0       	rjmp	.+2      	; 0x20c0 <dtoa_prf+0x20c>
    20be:	01 e0       	ldi	r16, 0x01	; 1
    20c0:	ab 01       	movw	r20, r22
    20c2:	77 ff       	sbrs	r23, 7
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <dtoa_prf+0x216>
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	fb 01       	movw	r30, r22
    20cc:	e4 1b       	sub	r30, r20
    20ce:	f5 0b       	sbc	r31, r21
    20d0:	a1 e0       	ldi	r26, 0x01	; 1
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	ac 0f       	add	r26, r28
    20d6:	bd 1f       	adc	r27, r29
    20d8:	ea 0f       	add	r30, r26
    20da:	fb 1f       	adc	r31, r27
    20dc:	8e e2       	ldi	r24, 0x2E	; 46
    20de:	a8 2e       	mov	r10, r24
    20e0:	4b 01       	movw	r8, r22
    20e2:	80 1a       	sub	r8, r16
    20e4:	91 08       	sbc	r9, r1
    20e6:	0b 2d       	mov	r16, r11
    20e8:	10 e0       	ldi	r17, 0x00	; 0
    20ea:	11 95       	neg	r17
    20ec:	01 95       	neg	r16
    20ee:	11 09       	sbc	r17, r1
    20f0:	4f 3f       	cpi	r20, 0xFF	; 255
    20f2:	bf ef       	ldi	r27, 0xFF	; 255
    20f4:	5b 07       	cpc	r21, r27
    20f6:	21 f4       	brne	.+8      	; 0x2100 <dtoa_prf+0x24c>
    20f8:	d6 01       	movw	r26, r12
    20fa:	ac 92       	st	X, r10
    20fc:	11 96       	adiw	r26, 0x01	; 1
    20fe:	6d 01       	movw	r12, r26
    2100:	64 17       	cp	r22, r20
    2102:	75 07       	cpc	r23, r21
    2104:	2c f0       	brlt	.+10     	; 0x2110 <dtoa_prf+0x25c>
    2106:	84 16       	cp	r8, r20
    2108:	95 06       	cpc	r9, r21
    210a:	14 f4       	brge	.+4      	; 0x2110 <dtoa_prf+0x25c>
    210c:	81 81       	ldd	r24, Z+1	; 0x01
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <dtoa_prf+0x25e>
    2110:	80 e3       	ldi	r24, 0x30	; 48
    2112:	41 50       	subi	r20, 0x01	; 1
    2114:	51 09       	sbc	r21, r1
    2116:	31 96       	adiw	r30, 0x01	; 1
    2118:	d6 01       	movw	r26, r12
    211a:	11 96       	adiw	r26, 0x01	; 1
    211c:	7d 01       	movw	r14, r26
    211e:	40 17       	cp	r20, r16
    2120:	51 07       	cpc	r21, r17
    2122:	24 f0       	brlt	.+8      	; 0x212c <dtoa_prf+0x278>
    2124:	d6 01       	movw	r26, r12
    2126:	8c 93       	st	X, r24
    2128:	67 01       	movw	r12, r14
    212a:	e2 cf       	rjmp	.-60     	; 0x20f0 <dtoa_prf+0x23c>
    212c:	64 17       	cp	r22, r20
    212e:	75 07       	cpc	r23, r21
    2130:	39 f4       	brne	.+14     	; 0x2140 <dtoa_prf+0x28c>
    2132:	96 33       	cpi	r25, 0x36	; 54
    2134:	20 f4       	brcc	.+8      	; 0x213e <dtoa_prf+0x28a>
    2136:	95 33       	cpi	r25, 0x35	; 53
    2138:	19 f4       	brne	.+6      	; 0x2140 <dtoa_prf+0x28c>
    213a:	31 11       	cpse	r19, r1
    213c:	01 c0       	rjmp	.+2      	; 0x2140 <dtoa_prf+0x28c>
    213e:	81 e3       	ldi	r24, 0x31	; 49
    2140:	f6 01       	movw	r30, r12
    2142:	80 83       	st	Z, r24
    2144:	f7 01       	movw	r30, r14
    2146:	82 2f       	mov	r24, r18
    2148:	90 e2       	ldi	r25, 0x20	; 32
    214a:	88 23       	and	r24, r24
    214c:	19 f0       	breq	.+6      	; 0x2154 <dtoa_prf+0x2a0>
    214e:	91 93       	st	Z+, r25
    2150:	81 50       	subi	r24, 0x01	; 1
    2152:	fb cf       	rjmp	.-10     	; 0x214a <dtoa_prf+0x296>
    2154:	f7 01       	movw	r30, r14
    2156:	e2 0f       	add	r30, r18
    2158:	f1 1d       	adc	r31, r1
    215a:	10 82       	st	Z, r1
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	29 96       	adiw	r28, 0x09	; 9
    2162:	ec e0       	ldi	r30, 0x0C	; 12
    2164:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__epilogue_restores__+0xc>

00002168 <__ftoa_engine>:
    2168:	28 30       	cpi	r18, 0x08	; 8
    216a:	08 f0       	brcs	.+2      	; 0x216e <__ftoa_engine+0x6>
    216c:	27 e0       	ldi	r18, 0x07	; 7
    216e:	33 27       	eor	r19, r19
    2170:	da 01       	movw	r26, r20
    2172:	99 0f       	add	r25, r25
    2174:	31 1d       	adc	r19, r1
    2176:	87 fd       	sbrc	r24, 7
    2178:	91 60       	ori	r25, 0x01	; 1
    217a:	00 96       	adiw	r24, 0x00	; 0
    217c:	61 05       	cpc	r22, r1
    217e:	71 05       	cpc	r23, r1
    2180:	39 f4       	brne	.+14     	; 0x2190 <__ftoa_engine+0x28>
    2182:	32 60       	ori	r19, 0x02	; 2
    2184:	2e 5f       	subi	r18, 0xFE	; 254
    2186:	3d 93       	st	X+, r19
    2188:	30 e3       	ldi	r19, 0x30	; 48
    218a:	2a 95       	dec	r18
    218c:	e1 f7       	brne	.-8      	; 0x2186 <__ftoa_engine+0x1e>
    218e:	08 95       	ret
    2190:	9f 3f       	cpi	r25, 0xFF	; 255
    2192:	30 f0       	brcs	.+12     	; 0x21a0 <__ftoa_engine+0x38>
    2194:	80 38       	cpi	r24, 0x80	; 128
    2196:	71 05       	cpc	r23, r1
    2198:	61 05       	cpc	r22, r1
    219a:	09 f0       	breq	.+2      	; 0x219e <__ftoa_engine+0x36>
    219c:	3c 5f       	subi	r19, 0xFC	; 252
    219e:	3c 5f       	subi	r19, 0xFC	; 252
    21a0:	3d 93       	st	X+, r19
    21a2:	91 30       	cpi	r25, 0x01	; 1
    21a4:	08 f0       	brcs	.+2      	; 0x21a8 <__ftoa_engine+0x40>
    21a6:	80 68       	ori	r24, 0x80	; 128
    21a8:	91 1d       	adc	r25, r1
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	1f 93       	push	r17
    21b0:	0f 93       	push	r16
    21b2:	ff 92       	push	r15
    21b4:	ef 92       	push	r14
    21b6:	19 2f       	mov	r17, r25
    21b8:	98 7f       	andi	r25, 0xF8	; 248
    21ba:	96 95       	lsr	r25
    21bc:	e9 2f       	mov	r30, r25
    21be:	96 95       	lsr	r25
    21c0:	96 95       	lsr	r25
    21c2:	e9 0f       	add	r30, r25
    21c4:	ff 27       	eor	r31, r31
    21c6:	e4 5e       	subi	r30, 0xE4	; 228
    21c8:	fe 4f       	sbci	r31, 0xFE	; 254
    21ca:	99 27       	eor	r25, r25
    21cc:	33 27       	eor	r19, r19
    21ce:	ee 24       	eor	r14, r14
    21d0:	ff 24       	eor	r15, r15
    21d2:	a7 01       	movw	r20, r14
    21d4:	e7 01       	movw	r28, r14
    21d6:	05 90       	lpm	r0, Z+
    21d8:	08 94       	sec
    21da:	07 94       	ror	r0
    21dc:	28 f4       	brcc	.+10     	; 0x21e8 <__ftoa_engine+0x80>
    21de:	36 0f       	add	r19, r22
    21e0:	e7 1e       	adc	r14, r23
    21e2:	f8 1e       	adc	r15, r24
    21e4:	49 1f       	adc	r20, r25
    21e6:	51 1d       	adc	r21, r1
    21e8:	66 0f       	add	r22, r22
    21ea:	77 1f       	adc	r23, r23
    21ec:	88 1f       	adc	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	06 94       	lsr	r0
    21f2:	a1 f7       	brne	.-24     	; 0x21dc <__ftoa_engine+0x74>
    21f4:	05 90       	lpm	r0, Z+
    21f6:	07 94       	ror	r0
    21f8:	28 f4       	brcc	.+10     	; 0x2204 <__ftoa_engine+0x9c>
    21fa:	e7 0e       	add	r14, r23
    21fc:	f8 1e       	adc	r15, r24
    21fe:	49 1f       	adc	r20, r25
    2200:	56 1f       	adc	r21, r22
    2202:	c1 1d       	adc	r28, r1
    2204:	77 0f       	add	r23, r23
    2206:	88 1f       	adc	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	66 1f       	adc	r22, r22
    220c:	06 94       	lsr	r0
    220e:	a1 f7       	brne	.-24     	; 0x21f8 <__ftoa_engine+0x90>
    2210:	05 90       	lpm	r0, Z+
    2212:	07 94       	ror	r0
    2214:	28 f4       	brcc	.+10     	; 0x2220 <__ftoa_engine+0xb8>
    2216:	f8 0e       	add	r15, r24
    2218:	49 1f       	adc	r20, r25
    221a:	56 1f       	adc	r21, r22
    221c:	c7 1f       	adc	r28, r23
    221e:	d1 1d       	adc	r29, r1
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	66 1f       	adc	r22, r22
    2226:	77 1f       	adc	r23, r23
    2228:	06 94       	lsr	r0
    222a:	a1 f7       	brne	.-24     	; 0x2214 <__ftoa_engine+0xac>
    222c:	05 90       	lpm	r0, Z+
    222e:	07 94       	ror	r0
    2230:	20 f4       	brcc	.+8      	; 0x223a <__ftoa_engine+0xd2>
    2232:	49 0f       	add	r20, r25
    2234:	56 1f       	adc	r21, r22
    2236:	c7 1f       	adc	r28, r23
    2238:	d8 1f       	adc	r29, r24
    223a:	99 0f       	add	r25, r25
    223c:	66 1f       	adc	r22, r22
    223e:	77 1f       	adc	r23, r23
    2240:	88 1f       	adc	r24, r24
    2242:	06 94       	lsr	r0
    2244:	a9 f7       	brne	.-22     	; 0x2230 <__ftoa_engine+0xc8>
    2246:	84 91       	lpm	r24, Z
    2248:	10 95       	com	r17
    224a:	17 70       	andi	r17, 0x07	; 7
    224c:	41 f0       	breq	.+16     	; 0x225e <__ftoa_engine+0xf6>
    224e:	d6 95       	lsr	r29
    2250:	c7 95       	ror	r28
    2252:	57 95       	ror	r21
    2254:	47 95       	ror	r20
    2256:	f7 94       	ror	r15
    2258:	e7 94       	ror	r14
    225a:	1a 95       	dec	r17
    225c:	c1 f7       	brne	.-16     	; 0x224e <__ftoa_engine+0xe6>
    225e:	e2 ec       	ldi	r30, 0xC2	; 194
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	68 94       	set
    2264:	15 90       	lpm	r1, Z+
    2266:	15 91       	lpm	r17, Z+
    2268:	35 91       	lpm	r19, Z+
    226a:	65 91       	lpm	r22, Z+
    226c:	95 91       	lpm	r25, Z+
    226e:	05 90       	lpm	r0, Z+
    2270:	7f e2       	ldi	r23, 0x2F	; 47
    2272:	73 95       	inc	r23
    2274:	e1 18       	sub	r14, r1
    2276:	f1 0a       	sbc	r15, r17
    2278:	43 0b       	sbc	r20, r19
    227a:	56 0b       	sbc	r21, r22
    227c:	c9 0b       	sbc	r28, r25
    227e:	d0 09       	sbc	r29, r0
    2280:	c0 f7       	brcc	.-16     	; 0x2272 <__ftoa_engine+0x10a>
    2282:	e1 0c       	add	r14, r1
    2284:	f1 1e       	adc	r15, r17
    2286:	43 1f       	adc	r20, r19
    2288:	56 1f       	adc	r21, r22
    228a:	c9 1f       	adc	r28, r25
    228c:	d0 1d       	adc	r29, r0
    228e:	7e f4       	brtc	.+30     	; 0x22ae <__ftoa_engine+0x146>
    2290:	70 33       	cpi	r23, 0x30	; 48
    2292:	11 f4       	brne	.+4      	; 0x2298 <__ftoa_engine+0x130>
    2294:	8a 95       	dec	r24
    2296:	e6 cf       	rjmp	.-52     	; 0x2264 <__ftoa_engine+0xfc>
    2298:	e8 94       	clt
    229a:	01 50       	subi	r16, 0x01	; 1
    229c:	30 f0       	brcs	.+12     	; 0x22aa <__ftoa_engine+0x142>
    229e:	08 0f       	add	r16, r24
    22a0:	0a f4       	brpl	.+2      	; 0x22a4 <__ftoa_engine+0x13c>
    22a2:	00 27       	eor	r16, r16
    22a4:	02 17       	cp	r16, r18
    22a6:	08 f4       	brcc	.+2      	; 0x22aa <__ftoa_engine+0x142>
    22a8:	20 2f       	mov	r18, r16
    22aa:	23 95       	inc	r18
    22ac:	02 2f       	mov	r16, r18
    22ae:	7a 33       	cpi	r23, 0x3A	; 58
    22b0:	28 f0       	brcs	.+10     	; 0x22bc <__ftoa_engine+0x154>
    22b2:	79 e3       	ldi	r23, 0x39	; 57
    22b4:	7d 93       	st	X+, r23
    22b6:	2a 95       	dec	r18
    22b8:	e9 f7       	brne	.-6      	; 0x22b4 <__ftoa_engine+0x14c>
    22ba:	10 c0       	rjmp	.+32     	; 0x22dc <__ftoa_engine+0x174>
    22bc:	7d 93       	st	X+, r23
    22be:	2a 95       	dec	r18
    22c0:	89 f6       	brne	.-94     	; 0x2264 <__ftoa_engine+0xfc>
    22c2:	06 94       	lsr	r0
    22c4:	97 95       	ror	r25
    22c6:	67 95       	ror	r22
    22c8:	37 95       	ror	r19
    22ca:	17 95       	ror	r17
    22cc:	17 94       	ror	r1
    22ce:	e1 18       	sub	r14, r1
    22d0:	f1 0a       	sbc	r15, r17
    22d2:	43 0b       	sbc	r20, r19
    22d4:	56 0b       	sbc	r21, r22
    22d6:	c9 0b       	sbc	r28, r25
    22d8:	d0 09       	sbc	r29, r0
    22da:	98 f0       	brcs	.+38     	; 0x2302 <__ftoa_engine+0x19a>
    22dc:	23 95       	inc	r18
    22de:	7e 91       	ld	r23, -X
    22e0:	73 95       	inc	r23
    22e2:	7a 33       	cpi	r23, 0x3A	; 58
    22e4:	08 f0       	brcs	.+2      	; 0x22e8 <__ftoa_engine+0x180>
    22e6:	70 e3       	ldi	r23, 0x30	; 48
    22e8:	7c 93       	st	X, r23
    22ea:	20 13       	cpse	r18, r16
    22ec:	b8 f7       	brcc	.-18     	; 0x22dc <__ftoa_engine+0x174>
    22ee:	7e 91       	ld	r23, -X
    22f0:	70 61       	ori	r23, 0x10	; 16
    22f2:	7d 93       	st	X+, r23
    22f4:	30 f0       	brcs	.+12     	; 0x2302 <__ftoa_engine+0x19a>
    22f6:	83 95       	inc	r24
    22f8:	71 e3       	ldi	r23, 0x31	; 49
    22fa:	7d 93       	st	X+, r23
    22fc:	70 e3       	ldi	r23, 0x30	; 48
    22fe:	2a 95       	dec	r18
    2300:	e1 f7       	brne	.-8      	; 0x22fa <__ftoa_engine+0x192>
    2302:	11 24       	eor	r1, r1
    2304:	ef 90       	pop	r14
    2306:	ff 90       	pop	r15
    2308:	0f 91       	pop	r16
    230a:	1f 91       	pop	r17
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	99 27       	eor	r25, r25
    2312:	87 fd       	sbrc	r24, 7
    2314:	90 95       	com	r25
    2316:	08 95       	ret

00002318 <strnlen_P>:
    2318:	fc 01       	movw	r30, r24
    231a:	05 90       	lpm	r0, Z+
    231c:	61 50       	subi	r22, 0x01	; 1
    231e:	70 40       	sbci	r23, 0x00	; 0
    2320:	01 10       	cpse	r0, r1
    2322:	d8 f7       	brcc	.-10     	; 0x231a <strnlen_P+0x2>
    2324:	80 95       	com	r24
    2326:	90 95       	com	r25
    2328:	8e 0f       	add	r24, r30
    232a:	9f 1f       	adc	r25, r31
    232c:	08 95       	ret

0000232e <strnlen>:
    232e:	fc 01       	movw	r30, r24
    2330:	61 50       	subi	r22, 0x01	; 1
    2332:	70 40       	sbci	r23, 0x00	; 0
    2334:	01 90       	ld	r0, Z+
    2336:	01 10       	cpse	r0, r1
    2338:	d8 f7       	brcc	.-10     	; 0x2330 <strnlen+0x2>
    233a:	80 95       	com	r24
    233c:	90 95       	com	r25
    233e:	8e 0f       	add	r24, r30
    2340:	9f 1f       	adc	r25, r31
    2342:	08 95       	ret

00002344 <fputc>:
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	fb 01       	movw	r30, r22
    234e:	23 81       	ldd	r18, Z+3	; 0x03
    2350:	21 fd       	sbrc	r18, 1
    2352:	03 c0       	rjmp	.+6      	; 0x235a <fputc+0x16>
    2354:	8f ef       	ldi	r24, 0xFF	; 255
    2356:	9f ef       	ldi	r25, 0xFF	; 255
    2358:	2c c0       	rjmp	.+88     	; 0x23b2 <fputc+0x6e>
    235a:	22 ff       	sbrs	r18, 2
    235c:	16 c0       	rjmp	.+44     	; 0x238a <fputc+0x46>
    235e:	46 81       	ldd	r20, Z+6	; 0x06
    2360:	57 81       	ldd	r21, Z+7	; 0x07
    2362:	24 81       	ldd	r18, Z+4	; 0x04
    2364:	35 81       	ldd	r19, Z+5	; 0x05
    2366:	42 17       	cp	r20, r18
    2368:	53 07       	cpc	r21, r19
    236a:	44 f4       	brge	.+16     	; 0x237c <fputc+0x38>
    236c:	a0 81       	ld	r26, Z
    236e:	b1 81       	ldd	r27, Z+1	; 0x01
    2370:	9d 01       	movw	r18, r26
    2372:	2f 5f       	subi	r18, 0xFF	; 255
    2374:	3f 4f       	sbci	r19, 0xFF	; 255
    2376:	20 83       	st	Z, r18
    2378:	31 83       	std	Z+1, r19	; 0x01
    237a:	8c 93       	st	X, r24
    237c:	26 81       	ldd	r18, Z+6	; 0x06
    237e:	37 81       	ldd	r19, Z+7	; 0x07
    2380:	2f 5f       	subi	r18, 0xFF	; 255
    2382:	3f 4f       	sbci	r19, 0xFF	; 255
    2384:	26 83       	std	Z+6, r18	; 0x06
    2386:	37 83       	std	Z+7, r19	; 0x07
    2388:	14 c0       	rjmp	.+40     	; 0x23b2 <fputc+0x6e>
    238a:	8b 01       	movw	r16, r22
    238c:	ec 01       	movw	r28, r24
    238e:	fb 01       	movw	r30, r22
    2390:	00 84       	ldd	r0, Z+8	; 0x08
    2392:	f1 85       	ldd	r31, Z+9	; 0x09
    2394:	e0 2d       	mov	r30, r0
    2396:	09 95       	icall
    2398:	89 2b       	or	r24, r25
    239a:	e1 f6       	brne	.-72     	; 0x2354 <fputc+0x10>
    239c:	d8 01       	movw	r26, r16
    239e:	16 96       	adiw	r26, 0x06	; 6
    23a0:	8d 91       	ld	r24, X+
    23a2:	9c 91       	ld	r25, X
    23a4:	17 97       	sbiw	r26, 0x07	; 7
    23a6:	01 96       	adiw	r24, 0x01	; 1
    23a8:	16 96       	adiw	r26, 0x06	; 6
    23aa:	8d 93       	st	X+, r24
    23ac:	9c 93       	st	X, r25
    23ae:	17 97       	sbiw	r26, 0x07	; 7
    23b0:	ce 01       	movw	r24, r28
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	1f 91       	pop	r17
    23b8:	0f 91       	pop	r16
    23ba:	08 95       	ret

000023bc <__ultoa_invert>:
    23bc:	fa 01       	movw	r30, r20
    23be:	aa 27       	eor	r26, r26
    23c0:	28 30       	cpi	r18, 0x08	; 8
    23c2:	51 f1       	breq	.+84     	; 0x2418 <__ultoa_invert+0x5c>
    23c4:	20 31       	cpi	r18, 0x10	; 16
    23c6:	81 f1       	breq	.+96     	; 0x2428 <__ultoa_invert+0x6c>
    23c8:	e8 94       	clt
    23ca:	6f 93       	push	r22
    23cc:	6e 7f       	andi	r22, 0xFE	; 254
    23ce:	6e 5f       	subi	r22, 0xFE	; 254
    23d0:	7f 4f       	sbci	r23, 0xFF	; 255
    23d2:	8f 4f       	sbci	r24, 0xFF	; 255
    23d4:	9f 4f       	sbci	r25, 0xFF	; 255
    23d6:	af 4f       	sbci	r26, 0xFF	; 255
    23d8:	b1 e0       	ldi	r27, 0x01	; 1
    23da:	3e d0       	rcall	.+124    	; 0x2458 <__ultoa_invert+0x9c>
    23dc:	b4 e0       	ldi	r27, 0x04	; 4
    23de:	3c d0       	rcall	.+120    	; 0x2458 <__ultoa_invert+0x9c>
    23e0:	67 0f       	add	r22, r23
    23e2:	78 1f       	adc	r23, r24
    23e4:	89 1f       	adc	r24, r25
    23e6:	9a 1f       	adc	r25, r26
    23e8:	a1 1d       	adc	r26, r1
    23ea:	68 0f       	add	r22, r24
    23ec:	79 1f       	adc	r23, r25
    23ee:	8a 1f       	adc	r24, r26
    23f0:	91 1d       	adc	r25, r1
    23f2:	a1 1d       	adc	r26, r1
    23f4:	6a 0f       	add	r22, r26
    23f6:	71 1d       	adc	r23, r1
    23f8:	81 1d       	adc	r24, r1
    23fa:	91 1d       	adc	r25, r1
    23fc:	a1 1d       	adc	r26, r1
    23fe:	20 d0       	rcall	.+64     	; 0x2440 <__ultoa_invert+0x84>
    2400:	09 f4       	brne	.+2      	; 0x2404 <__ultoa_invert+0x48>
    2402:	68 94       	set
    2404:	3f 91       	pop	r19
    2406:	2a e0       	ldi	r18, 0x0A	; 10
    2408:	26 9f       	mul	r18, r22
    240a:	11 24       	eor	r1, r1
    240c:	30 19       	sub	r19, r0
    240e:	30 5d       	subi	r19, 0xD0	; 208
    2410:	31 93       	st	Z+, r19
    2412:	de f6       	brtc	.-74     	; 0x23ca <__ultoa_invert+0xe>
    2414:	cf 01       	movw	r24, r30
    2416:	08 95       	ret
    2418:	46 2f       	mov	r20, r22
    241a:	47 70       	andi	r20, 0x07	; 7
    241c:	40 5d       	subi	r20, 0xD0	; 208
    241e:	41 93       	st	Z+, r20
    2420:	b3 e0       	ldi	r27, 0x03	; 3
    2422:	0f d0       	rcall	.+30     	; 0x2442 <__ultoa_invert+0x86>
    2424:	c9 f7       	brne	.-14     	; 0x2418 <__ultoa_invert+0x5c>
    2426:	f6 cf       	rjmp	.-20     	; 0x2414 <__ultoa_invert+0x58>
    2428:	46 2f       	mov	r20, r22
    242a:	4f 70       	andi	r20, 0x0F	; 15
    242c:	40 5d       	subi	r20, 0xD0	; 208
    242e:	4a 33       	cpi	r20, 0x3A	; 58
    2430:	18 f0       	brcs	.+6      	; 0x2438 <__ultoa_invert+0x7c>
    2432:	49 5d       	subi	r20, 0xD9	; 217
    2434:	31 fd       	sbrc	r19, 1
    2436:	40 52       	subi	r20, 0x20	; 32
    2438:	41 93       	st	Z+, r20
    243a:	02 d0       	rcall	.+4      	; 0x2440 <__ultoa_invert+0x84>
    243c:	a9 f7       	brne	.-22     	; 0x2428 <__ultoa_invert+0x6c>
    243e:	ea cf       	rjmp	.-44     	; 0x2414 <__ultoa_invert+0x58>
    2440:	b4 e0       	ldi	r27, 0x04	; 4
    2442:	a6 95       	lsr	r26
    2444:	97 95       	ror	r25
    2446:	87 95       	ror	r24
    2448:	77 95       	ror	r23
    244a:	67 95       	ror	r22
    244c:	ba 95       	dec	r27
    244e:	c9 f7       	brne	.-14     	; 0x2442 <__ultoa_invert+0x86>
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	61 05       	cpc	r22, r1
    2454:	71 05       	cpc	r23, r1
    2456:	08 95       	ret
    2458:	9b 01       	movw	r18, r22
    245a:	ac 01       	movw	r20, r24
    245c:	0a 2e       	mov	r0, r26
    245e:	06 94       	lsr	r0
    2460:	57 95       	ror	r21
    2462:	47 95       	ror	r20
    2464:	37 95       	ror	r19
    2466:	27 95       	ror	r18
    2468:	ba 95       	dec	r27
    246a:	c9 f7       	brne	.-14     	; 0x245e <__ultoa_invert+0xa2>
    246c:	62 0f       	add	r22, r18
    246e:	73 1f       	adc	r23, r19
    2470:	84 1f       	adc	r24, r20
    2472:	95 1f       	adc	r25, r21
    2474:	a0 1d       	adc	r26, r0
    2476:	08 95       	ret

00002478 <__prologue_saves__>:
    2478:	2f 92       	push	r2
    247a:	3f 92       	push	r3
    247c:	4f 92       	push	r4
    247e:	5f 92       	push	r5
    2480:	6f 92       	push	r6
    2482:	7f 92       	push	r7
    2484:	8f 92       	push	r8
    2486:	9f 92       	push	r9
    2488:	af 92       	push	r10
    248a:	bf 92       	push	r11
    248c:	cf 92       	push	r12
    248e:	df 92       	push	r13
    2490:	ef 92       	push	r14
    2492:	ff 92       	push	r15
    2494:	0f 93       	push	r16
    2496:	1f 93       	push	r17
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    24a0:	ca 1b       	sub	r28, r26
    24a2:	db 0b       	sbc	r29, r27
    24a4:	cd bf       	out	0x3d, r28	; 61
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	09 94       	ijmp

000024aa <__epilogue_restores__>:
    24aa:	2a 88       	ldd	r2, Y+18	; 0x12
    24ac:	39 88       	ldd	r3, Y+17	; 0x11
    24ae:	48 88       	ldd	r4, Y+16	; 0x10
    24b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    24b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    24b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    24b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    24b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    24ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    24bc:	b9 84       	ldd	r11, Y+9	; 0x09
    24be:	c8 84       	ldd	r12, Y+8	; 0x08
    24c0:	df 80       	ldd	r13, Y+7	; 0x07
    24c2:	ee 80       	ldd	r14, Y+6	; 0x06
    24c4:	fd 80       	ldd	r15, Y+5	; 0x05
    24c6:	0c 81       	ldd	r16, Y+4	; 0x04
    24c8:	1b 81       	ldd	r17, Y+3	; 0x03
    24ca:	aa 81       	ldd	r26, Y+2	; 0x02
    24cc:	b9 81       	ldd	r27, Y+1	; 0x01
    24ce:	ce 0f       	add	r28, r30
    24d0:	d1 1d       	adc	r29, r1
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	ed 01       	movw	r28, r26
    24d8:	08 95       	ret

000024da <_exit>:
    24da:	f8 94       	cli

000024dc <__stop_program>:
    24dc:	ff cf       	rjmp	.-2      	; 0x24dc <__stop_program>
