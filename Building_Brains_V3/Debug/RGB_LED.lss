
RGB_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  000004e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000012  0000843e  0000043e  000004d2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000012  00803e00  00803e00  000004e4  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000280  00000000  00000000  00000550  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000051fc  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002259  00000000  00000000  000059cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012c0  00000000  00000000  00007c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000035c  00000000  00000000  00008ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000020e8  00000000  00000000  00009244  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000672  00000000  00000000  0000b32c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000180  00000000  00000000  0000b99e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e0 e5       	ldi	r30, 0x50	; 80
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a2 31       	cpi	r26, 0x12	; 18
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	f4 d0       	rcall	.+488    	; 0x250 <main>
  68:	e8 c1       	rjmp	.+976    	; 0x43a <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
	system_init();
  6c:	85 d1       	rcall	.+778    	; 0x378 <system_init>
  6e:	08 95       	ret

00000070 <rainbows>:
 #include <atmel_start.h>
 #include "tinyCCLRGB/tinyCCLRGB.h"
 #include <util/delay.h>
 #include "rainbows.h"
void rainbows()
{
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	62 97       	sbiw	r28, 0x12	; 18
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	de bf       	out	0x3e, r29	; 62
	uint8_t red[6] = {0x20, 0x10, 0x0, 0x0, 0x0, 0x10};
  7e:	86 e0       	ldi	r24, 0x06	; 6
  80:	ee e3       	ldi	r30, 0x3E	; 62
  82:	f4 e8       	ldi	r31, 0x84	; 132
  84:	de 01       	movw	r26, r28
  86:	11 96       	adiw	r26, 0x01	; 1
  88:	01 90       	ld	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	8a 95       	dec	r24
  8e:	e1 f7       	brne	.-8      	; 0x88 <rainbows+0x18>
	uint8_t green[6] = {0x0, 0x10, 0x20, 0x10, 0x0, 0x0};
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	e4 e4       	ldi	r30, 0x44	; 68
  94:	f4 e8       	ldi	r31, 0x84	; 132
  96:	de 01       	movw	r26, r28
  98:	17 96       	adiw	r26, 0x07	; 7
  9a:	01 90       	ld	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	8a 95       	dec	r24
  a0:	e1 f7       	brne	.-8      	; 0x9a <rainbows+0x2a>
	uint8_t blue[6] = {0x0, 0x0, 0x0, 0x10, 0x20, 0x10};
  a2:	86 e0       	ldi	r24, 0x06	; 6
  a4:	ea e4       	ldi	r30, 0x4A	; 74
  a6:	f4 e8       	ldi	r31, 0x84	; 132
  a8:	de 01       	movw	r26, r28
  aa:	1d 96       	adiw	r26, 0x0d	; 13
  ac:	01 90       	ld	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	8a 95       	dec	r24
  b2:	e1 f7       	brne	.-8      	; 0xac <rainbows+0x3c>
  b4:	5e 01       	movw	r10, r28
  b6:	2d e0       	ldi	r18, 0x0D	; 13
  b8:	a2 0e       	add	r10, r18
  ba:	b1 1c       	adc	r11, r1
  bc:	6e 01       	movw	r12, r28
  be:	37 e0       	ldi	r19, 0x07	; 7
  c0:	c3 0e       	add	r12, r19
  c2:	d1 1c       	adc	r13, r1
  c4:	ce 01       	movw	r24, r28
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	7c 01       	movw	r14, r24
 #include <atmel_start.h>
 #include "tinyCCLRGB/tinyCCLRGB.h"
 #include <util/delay.h>
 #include "rainbows.h"
void rainbows()
{
  ca:	99 24       	eor	r9, r9
  cc:	93 94       	inc	r9
	uint8_t red[6] = {0x20, 0x10, 0x0, 0x0, 0x0, 0x10};
	uint8_t green[6] = {0x0, 0x10, 0x20, 0x10, 0x0, 0x0};
	uint8_t blue[6] = {0x0, 0x0, 0x0, 0x10, 0x20, 0x10};
	while (1)
	{
		for (int i = 0; i < 6; i++)
  ce:	00 e0       	ldi	r16, 0x00	; 0
  d0:	10 e0       	ldi	r17, 0x00	; 0
		{
			uint8_t next = i+1;
			uint8_t prev = i-1;
  d2:	0f 2e       	mov	r0, r31
  d4:	fe ef       	ldi	r31, 0xFE	; 254
  d6:	8f 2e       	mov	r8, r31
  d8:	f0 2d       	mov	r31, r0
  da:	89 0c       	add	r8, r9
			if(i == 0)
  dc:	01 15       	cp	r16, r1
  de:	11 05       	cpc	r17, r1
  e0:	29 f0       	breq	.+10     	; 0xec <rainbows+0x7c>
			{
				prev = 5;
			}
			if(i == 5)
  e2:	05 30       	cpi	r16, 0x05	; 5
  e4:	11 05       	cpc	r17, r1
  e6:	41 f4       	brne	.+16     	; 0xf8 <rainbows+0x88>
			{
				next = 0;
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	07 c0       	rjmp	.+14     	; 0xfa <rainbows+0x8a>
	uint8_t blue[6] = {0x0, 0x0, 0x0, 0x10, 0x20, 0x10};
	while (1)
	{
		for (int i = 0; i < 6; i++)
		{
			uint8_t next = i+1;
  ec:	89 2d       	mov	r24, r9
			uint8_t prev = i-1;
			if(i == 0)
			{
				prev = 5;
  ee:	0f 2e       	mov	r0, r31
  f0:	f5 e0       	ldi	r31, 0x05	; 5
  f2:	8f 2e       	mov	r8, r31
  f4:	f0 2d       	mov	r31, r0
  f6:	01 c0       	rjmp	.+2      	; 0xfa <rainbows+0x8a>
	uint8_t blue[6] = {0x0, 0x0, 0x0, 0x10, 0x20, 0x10};
	while (1)
	{
		for (int i = 0; i < 6; i++)
		{
			uint8_t next = i+1;
  f8:	89 2d       	mov	r24, r9
			}
			if(i == 5)
			{
				next = 0;
			}
			if((red[i] == 0x20) && (red[prev] > 0))
  fa:	f7 01       	movw	r30, r14
  fc:	91 91       	ld	r25, Z+
  fe:	7f 01       	movw	r14, r30
 100:	90 32       	cpi	r25, 0x20	; 32
 102:	e9 f4       	brne	.+58     	; 0x13e <rainbows+0xce>
 104:	28 2d       	mov	r18, r8
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	e1 e0       	ldi	r30, 0x01	; 1
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ec 0f       	add	r30, r28
 10e:	fd 1f       	adc	r31, r29
 110:	e2 0f       	add	r30, r18
 112:	f3 1f       	adc	r31, r19
 114:	90 81       	ld	r25, Z
 116:	99 23       	and	r25, r25
 118:	91 f0       	breq	.+36     	; 0x13e <rainbows+0xce>
			{
				red[next]++;
 11a:	e1 e0       	ldi	r30, 0x01	; 1
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	ec 0f       	add	r30, r28
 120:	fd 1f       	adc	r31, r29
 122:	e8 0f       	add	r30, r24
 124:	f1 1d       	adc	r31, r1
 126:	90 81       	ld	r25, Z
 128:	9f 5f       	subi	r25, 0xFF	; 255
 12a:	90 83       	st	Z, r25
				red[prev]--;
 12c:	e1 e0       	ldi	r30, 0x01	; 1
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	ec 0f       	add	r30, r28
 132:	fd 1f       	adc	r31, r29
 134:	e2 0f       	add	r30, r18
 136:	f3 1f       	adc	r31, r19
 138:	90 81       	ld	r25, Z
 13a:	91 50       	subi	r25, 0x01	; 1
 13c:	90 83       	st	Z, r25
			}
			if((green[i] == 0x20) && (green[prev] > 0))
 13e:	f6 01       	movw	r30, r12
 140:	91 91       	ld	r25, Z+
 142:	6f 01       	movw	r12, r30
 144:	90 32       	cpi	r25, 0x20	; 32
 146:	e9 f4       	brne	.+58     	; 0x182 <rainbows+0x112>
 148:	28 2d       	mov	r18, r8
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	e7 e0       	ldi	r30, 0x07	; 7
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ec 0f       	add	r30, r28
 152:	fd 1f       	adc	r31, r29
 154:	e2 0f       	add	r30, r18
 156:	f3 1f       	adc	r31, r19
 158:	90 81       	ld	r25, Z
 15a:	99 23       	and	r25, r25
 15c:	91 f0       	breq	.+36     	; 0x182 <rainbows+0x112>
			{
				green[next]++;
 15e:	e7 e0       	ldi	r30, 0x07	; 7
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	ec 0f       	add	r30, r28
 164:	fd 1f       	adc	r31, r29
 166:	e8 0f       	add	r30, r24
 168:	f1 1d       	adc	r31, r1
 16a:	90 81       	ld	r25, Z
 16c:	9f 5f       	subi	r25, 0xFF	; 255
 16e:	90 83       	st	Z, r25
				green[prev]--;
 170:	e7 e0       	ldi	r30, 0x07	; 7
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	ec 0f       	add	r30, r28
 176:	fd 1f       	adc	r31, r29
 178:	e2 0f       	add	r30, r18
 17a:	f3 1f       	adc	r31, r19
 17c:	90 81       	ld	r25, Z
 17e:	91 50       	subi	r25, 0x01	; 1
 180:	90 83       	st	Z, r25
			}
			if((blue[i] == 0x20) && (blue[prev] > 0))
 182:	f5 01       	movw	r30, r10
 184:	91 91       	ld	r25, Z+
 186:	5f 01       	movw	r10, r30
 188:	90 32       	cpi	r25, 0x20	; 32
 18a:	e9 f4       	brne	.+58     	; 0x1c6 <rainbows+0x156>
 18c:	28 2d       	mov	r18, r8
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	ed e0       	ldi	r30, 0x0D	; 13
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ec 0f       	add	r30, r28
 196:	fd 1f       	adc	r31, r29
 198:	e2 0f       	add	r30, r18
 19a:	f3 1f       	adc	r31, r19
 19c:	90 81       	ld	r25, Z
 19e:	99 23       	and	r25, r25
 1a0:	91 f0       	breq	.+36     	; 0x1c6 <rainbows+0x156>
			{
				blue[next]++;
 1a2:	ed e0       	ldi	r30, 0x0D	; 13
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	ec 0f       	add	r30, r28
 1a8:	fd 1f       	adc	r31, r29
 1aa:	e8 0f       	add	r30, r24
 1ac:	f1 1d       	adc	r31, r1
 1ae:	90 81       	ld	r25, Z
 1b0:	9f 5f       	subi	r25, 0xFF	; 255
 1b2:	90 83       	st	Z, r25
				blue[prev]--;
 1b4:	ed e0       	ldi	r30, 0x0D	; 13
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	ec 0f       	add	r30, r28
 1ba:	fd 1f       	adc	r31, r29
 1bc:	e2 0f       	add	r30, r18
 1be:	f3 1f       	adc	r31, r19
 1c0:	90 81       	ld	r25, Z
 1c2:	91 50       	subi	r25, 0x01	; 1
 1c4:	90 83       	st	Z, r25
			}
			tinyCCLRGB_setColor(next, red[next], green[next], blue[next]);
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	4d e0       	ldi	r20, 0x0D	; 13
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	4c 0f       	add	r20, r28
 1d0:	5d 1f       	adc	r21, r29
 1d2:	42 0f       	add	r20, r18
 1d4:	53 1f       	adc	r21, r19
 1d6:	a7 e0       	ldi	r26, 0x07	; 7
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	ac 0f       	add	r26, r28
 1dc:	bd 1f       	adc	r27, r29
 1de:	a2 0f       	add	r26, r18
 1e0:	b3 1f       	adc	r27, r19
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	6c 0f       	add	r22, r28
 1e8:	7d 1f       	adc	r23, r29
 1ea:	62 0f       	add	r22, r18
 1ec:	73 1f       	adc	r23, r19
 1ee:	fa 01       	movw	r30, r20
 1f0:	20 81       	ld	r18, Z
 1f2:	4c 91       	ld	r20, X
 1f4:	fb 01       	movw	r30, r22
 1f6:	60 81       	ld	r22, Z
 1f8:	fc d0       	rcall	.+504    	; 0x3f2 <tinyCCLRGB_setColor>
			tinyCCLRGB_setColor(prev, red[prev], green[prev], blue[prev]);
 1fa:	88 2d       	mov	r24, r8
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	ad e0       	ldi	r26, 0x0D	; 13
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	ac 0f       	add	r26, r28
 204:	bd 1f       	adc	r27, r29
 206:	a8 0f       	add	r26, r24
 208:	b9 1f       	adc	r27, r25
 20a:	e7 e0       	ldi	r30, 0x07	; 7
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	ec 0f       	add	r30, r28
 210:	fd 1f       	adc	r31, r29
 212:	e8 0f       	add	r30, r24
 214:	f9 1f       	adc	r31, r25
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	2c 0f       	add	r18, r28
 21c:	3d 1f       	adc	r19, r29
 21e:	82 0f       	add	r24, r18
 220:	93 1f       	adc	r25, r19
 222:	2c 91       	ld	r18, X
 224:	40 81       	ld	r20, Z
 226:	fc 01       	movw	r30, r24
 228:	60 81       	ld	r22, Z
 22a:	88 2d       	mov	r24, r8
 22c:	e2 d0       	rcall	.+452    	; 0x3f2 <tinyCCLRGB_setColor>
	uint8_t red[6] = {0x20, 0x10, 0x0, 0x0, 0x0, 0x10};
	uint8_t green[6] = {0x0, 0x10, 0x20, 0x10, 0x0, 0x0};
	uint8_t blue[6] = {0x0, 0x0, 0x0, 0x10, 0x20, 0x10};
	while (1)
	{
		for (int i = 0; i < 6; i++)
 22e:	0f 5f       	subi	r16, 0xFF	; 255
 230:	1f 4f       	sbci	r17, 0xFF	; 255
 232:	93 94       	inc	r9
 234:	f7 e0       	ldi	r31, 0x07	; 7
 236:	9f 12       	cpse	r9, r31
 238:	4c cf       	rjmp	.-360    	; 0xd2 <rainbows+0x62>
				blue[prev]--;
			}
			tinyCCLRGB_setColor(next, red[next], green[next], blue[next]);
			tinyCCLRGB_setColor(prev, red[prev], green[prev], blue[prev]);
		}
		tinyCCLRGB_uploadColorsToLeds();
 23a:	e8 d0       	rcall	.+464    	; 0x40c <tinyCCLRGB_uploadColorsToLeds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	2f e5       	ldi	r18, 0x5F	; 95
 23e:	3a ee       	ldi	r19, 0xEA	; 234
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	21 50       	subi	r18, 0x01	; 1
 244:	30 40       	sbci	r19, 0x00	; 0
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <rainbows+0x1d2>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <rainbows+0x1dc>
 24c:	00 00       	nop
 24e:	32 cf       	rjmp	.-412    	; 0xb4 <rainbows+0x44>

00000250 <main>:


int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 250:	0d df       	rcall	.-486    	; 0x6c <atmel_start_init>
	VREF.CTRLA = 0x33;
 252:	83 e3       	ldi	r24, 0x33	; 51
 254:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	while (1)
	{
		rainbows();		
 258:	0b df       	rcall	.-490    	; 0x70 <rainbows>
 25a:	fe cf       	rjmp	.-4      	; 0x258 <main+0x8>

0000025c <ADC_init>:

	// ADC0.WINHT = 0x0; /* Window Comparator High Threshold: 0x0 */

	// ADC0.WINLT = 0x0; /* Window Comparator Low Threshold: 0x0 */

	ADC0.CTRLA = 1 << ADC_ENABLE_bp     /* ADC Enable: enabled */
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
	             | 0 << ADC_FREERUN_bp  /* ADC Freerun mode: disabled */
	             | ADC_RESSEL_8BIT_gc   /* 8-bit mode */
	             | 0 << ADC_RUNSTBY_bp; /* Run standby mode: disabled */

	return 0;
}
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 95       	ret

00000266 <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	08 95       	ret

0000026a <DIGGSIGG_init>:
	//		 | CCL_EDGEDET_DIS_gc /* Edge detector is disabled */
	//		 | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	//		 | 0 << CCL_ENABLE_bp /* LUT Enable: disabled */
	//		 | 0 << CCL_OUTEN_bp; /* Output Enable: disabled */

	CCL.TRUTH1 = 168; /* Truth 1: 168 */
 26a:	e0 ec       	ldi	r30, 0xC0	; 192
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	88 ea       	ldi	r24, 0xA8	; 168
 270:	84 87       	std	Z+12, r24	; 0x0c

	CCL.LUT1CTRLC = CCL_INSEL2_TCA0_gc /* TCA0 WO2 input source */;
 272:	88 e0       	ldi	r24, 0x08	; 8
 274:	83 87       	std	Z+11, r24	; 0x0b

	CCL.LUT1CTRLB = CCL_INSEL0_SPI0_gc /* SPI0 SCK source */
 276:	8b eb       	ldi	r24, 0xBB	; 187
 278:	82 87       	std	Z+10, r24	; 0x0a
	                | CCL_INSEL1_SPI0_gc /* SPI0 MOSI input source */;

	CCL.LUT1CTRLA = 0 << CCL_CLKSRC_bp       /* Clock Source Selection: disabled */
 27a:	89 e0       	ldi	r24, 0x09	; 9
 27c:	81 87       	std	Z+9, r24	; 0x09
	                | CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	                | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	                | 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	                | 1 << CCL_OUTEN_bp;     /* Output Enable: enabled */

	CCL.CTRLA = 1 << CCL_ENABLE_bp      /* Enable: enabled */
 27e:	81 e4       	ldi	r24, 0x41	; 65
 280:	80 83       	st	Z, r24
	            | 1 << CCL_RUNSTDBY_bp; /* Run in Standby: enabled */

	return 0;
}
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	08 95       	ret

00000286 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	68 ed       	ldi	r22, 0xD8	; 216
 28a:	81 e6       	ldi	r24, 0x61	; 97
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	7f d0       	rcall	.+254    	; 0x38e <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	08 95       	ret

00000294 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	08 95       	ret

00000298 <DAC_init>:
int8_t DAC_init()
{

	// DAC0.DATA = 0x0; /* DATA Register: 0x0 */

	DAC0.CTRLA = 1 << DAC_ENABLE_bp      /* DAC Enable: enabled */
 298:	81 e4       	ldi	r24, 0x41	; 65
 29a:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
	             | 1 << DAC_OUTEN_bp     /* Output Buffer Enable: enabled */
	             | 0 << DAC_RUNSTDBY_bp; /* Run in Standby Mode: disabled */

	return 0;
}
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	08 95       	ret

000002a2 <mcu_init>:

/* configure pins and initialize registers */
void DAC_initialization(void)
{

	DAC_init();
 2a2:	e0 e1       	ldi	r30, 0x10	; 16
 2a4:	f4 e0       	ldi	r31, 0x04	; 4
 2a6:	80 81       	ld	r24, Z
 2a8:	88 60       	ori	r24, 0x08	; 8
 2aa:	81 93       	st	Z+, r24
 2ac:	e8 31       	cpi	r30, 0x18	; 24
 2ae:	84 e0       	ldi	r24, 0x04	; 4
 2b0:	f8 07       	cpc	r31, r24
 2b2:	c9 f7       	brne	.-14     	; 0x2a6 <mcu_init+0x4>
 2b4:	e0 e3       	ldi	r30, 0x30	; 48
 2b6:	f4 e0       	ldi	r31, 0x04	; 4
 2b8:	80 81       	ld	r24, Z
 2ba:	88 60       	ori	r24, 0x08	; 8
 2bc:	81 93       	st	Z+, r24
 2be:	e8 33       	cpi	r30, 0x38	; 56
 2c0:	84 e0       	ldi	r24, 0x04	; 4
 2c2:	f8 07       	cpc	r31, r24
 2c4:	c9 f7       	brne	.-14     	; 0x2b8 <mcu_init+0x16>
 2c6:	e0 e5       	ldi	r30, 0x50	; 80
 2c8:	f4 e0       	ldi	r31, 0x04	; 4
 2ca:	80 81       	ld	r24, Z
 2cc:	88 60       	ori	r24, 0x08	; 8
 2ce:	81 93       	st	Z+, r24
 2d0:	e8 35       	cpi	r30, 0x58	; 88
 2d2:	84 e0       	ldi	r24, 0x04	; 4
 2d4:	f8 07       	cpc	r31, r24
 2d6:	c9 f7       	brne	.-14     	; 0x2ca <mcu_init+0x28>
 2d8:	08 95       	ret

000002da <ADC_initialization>:
 2da:	e5 e1       	ldi	r30, 0x15	; 21
 2dc:	f4 e0       	ldi	r31, 0x04	; 4
 2de:	80 81       	ld	r24, Z
 2e0:	88 7f       	andi	r24, 0xF8	; 248
 2e2:	84 60       	ori	r24, 0x04	; 4
 2e4:	80 83       	st	Z, r24
 2e6:	80 81       	ld	r24, Z
 2e8:	87 7f       	andi	r24, 0xF7	; 247
 2ea:	80 83       	st	Z, r24
 2ec:	e7 e1       	ldi	r30, 0x17	; 23
 2ee:	f4 e0       	ldi	r31, 0x04	; 4
 2f0:	80 81       	ld	r24, Z
 2f2:	88 7f       	andi	r24, 0xF8	; 248
 2f4:	84 60       	ori	r24, 0x04	; 4
 2f6:	80 83       	st	Z, r24
 2f8:	80 81       	ld	r24, Z
 2fa:	87 7f       	andi	r24, 0xF7	; 247
 2fc:	80 83       	st	Z, r24
 2fe:	e4 e3       	ldi	r30, 0x34	; 52
 300:	f4 e0       	ldi	r31, 0x04	; 4
 302:	80 81       	ld	r24, Z
 304:	88 7f       	andi	r24, 0xF8	; 248
 306:	84 60       	ori	r24, 0x04	; 4
 308:	80 83       	st	Z, r24
 30a:	80 81       	ld	r24, Z
 30c:	87 7f       	andi	r24, 0xF7	; 247
 30e:	80 83       	st	Z, r24
 310:	e1 e3       	ldi	r30, 0x31	; 49
 312:	f4 e0       	ldi	r31, 0x04	; 4
 314:	80 81       	ld	r24, Z
 316:	88 7f       	andi	r24, 0xF8	; 248
 318:	84 60       	ori	r24, 0x04	; 4
 31a:	80 83       	st	Z, r24
 31c:	80 81       	ld	r24, Z
 31e:	87 7f       	andi	r24, 0xF7	; 247
 320:	80 83       	st	Z, r24
 322:	e0 e3       	ldi	r30, 0x30	; 48
 324:	f4 e0       	ldi	r31, 0x04	; 4
 326:	80 81       	ld	r24, Z
 328:	88 7f       	andi	r24, 0xF8	; 248
 32a:	84 60       	ori	r24, 0x04	; 4
 32c:	80 83       	st	Z, r24
 32e:	80 81       	ld	r24, Z
 330:	87 7f       	andi	r24, 0xF7	; 247
 332:	80 83       	st	Z, r24
 334:	93 df       	rcall	.-218    	; 0x25c <ADC_init>
 336:	08 95       	ret

00000338 <TIMER_0_initialization>:
 338:	25 9a       	sbi	0x04, 5	; 4
 33a:	2d 98       	cbi	0x05, 5	; 5
 33c:	e0 e0       	ldi	r30, 0x00	; 0
 33e:	f2 e0       	ldi	r31, 0x02	; 2
 340:	82 81       	ldd	r24, Z+2	; 0x02
 342:	84 60       	ori	r24, 0x04	; 4
 344:	82 83       	std	Z+2, r24	; 0x02
 346:	31 d0       	rcall	.+98     	; 0x3aa <TIMER_0_init>
 348:	08 95       	ret

0000034a <DIGGSIGG_initialization>:
 34a:	41 9a       	sbi	0x08, 1	; 8
 34c:	49 98       	cbi	0x09, 1	; 9
 34e:	e0 e0       	ldi	r30, 0x00	; 0
 350:	f2 e0       	ldi	r31, 0x02	; 2
 352:	80 81       	ld	r24, Z
 354:	80 62       	ori	r24, 0x20	; 32
 356:	80 83       	st	Z, r24
 358:	88 df       	rcall	.-240    	; 0x26a <DIGGSIGG_init>
 35a:	08 95       	ret

0000035c <SPI_0_initialization>:
 35c:	02 98       	cbi	0x00, 2	; 0
 35e:	e2 e1       	ldi	r30, 0x12	; 18
 360:	f4 e0       	ldi	r31, 0x04	; 4
 362:	80 81       	ld	r24, Z
 364:	87 7f       	andi	r24, 0xF7	; 247
 366:	80 83       	st	Z, r24
 368:	01 9a       	sbi	0x00, 1	; 0
 36a:	09 98       	cbi	0x01, 1	; 1
 36c:	03 9a       	sbi	0x00, 3	; 0
 36e:	0b 98       	cbi	0x01, 3	; 1
 370:	04 9a       	sbi	0x00, 4	; 0
 372:	0c 98       	cbi	0x01, 4	; 1
 374:	12 d0       	rcall	.+36     	; 0x39a <SPI_0_init>
 376:	08 95       	ret

00000378 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 378:	94 df       	rcall	.-216    	; 0x2a2 <mcu_init>

	CLKCTRL_init();
 37a:	85 df       	rcall	.-246    	; 0x286 <CLKCTRL_init>

	ADC_initialization();
 37c:	ae df       	rcall	.-164    	; 0x2da <ADC_initialization>

	TIMER_0_initialization();
 37e:	dc df       	rcall	.-72     	; 0x338 <TIMER_0_initialization>

	DIGGSIGG_initialization();
 380:	e4 df       	rcall	.-56     	; 0x34a <DIGGSIGG_initialization>

	SPI_0_initialization();
 382:	ec df       	rcall	.-40     	; 0x35c <SPI_0_initialization>

/* configure pins and initialize registers */
void DAC_initialization(void)
{

	DAC_init();
 384:	89 df       	rcall	.-238    	; 0x298 <DAC_init>

	SPI_0_initialization();

	DAC_initialization();

	CPUINT_init();
 386:	86 df       	rcall	.-244    	; 0x294 <CPUINT_init>

	SLPCTRL_init();
 388:	06 d0       	rcall	.+12     	; 0x396 <SLPCTRL_init>

	BOD_init();
 38a:	6d df       	rcall	.-294    	; 0x266 <BOD_init>
 38c:	08 95       	ret

0000038e <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 38e:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 390:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 392:	40 83       	st	Z, r20
	ret                             // Return to caller
 394:	08 95       	ret

00000396 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	08 95       	ret

0000039a <SPI_0_init>:
 * \return Initialization status
 */
int8_t SPI_0_init()
{

	SPI0.CTRLA = 0 << SPI_CLK2X_bp     /* Enable Double Speed: disabled */
 39a:	e0 e2       	ldi	r30, 0x20	; 32
 39c:	f8 e0       	ldi	r31, 0x08	; 8
 39e:	83 e2       	ldi	r24, 0x23	; 35
 3a0:	80 83       	st	Z, r24
	             | 0 << SPI_DORD_bp    /* Data Order Setting: disabled */
	             | 1 << SPI_ENABLE_bp  /* Enable Module: enabled */
	             | 1 << SPI_MASTER_bp  /* SPI module in master mode */
	             | SPI_PRESC_DIV16_gc; /* System Clock / 16 */

	SPI0.CTRLB = 0 << SPI_BUFEN_bp   /* Buffer Mode Enable: disabled */
 3a2:	84 e0       	ldi	r24, 0x04	; 4
 3a4:	81 83       	std	Z+1, r24	; 0x01
	//		 | 0 << SPI_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << SPI_SSIE_bp /* Slave Select Trigger Interrupt Enable: disabled */
	//		 | 0 << SPI_TXCIE_bp; /* Transfer Complete Interrupt Enable: disabled */

	return 0;
}
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	08 95       	ret

000003aa <TIMER_0_init>:

	// TCA0.SINGLE.CMP0 = 0x0; /* Compare Register 0: 0x0 */

	// TCA0.SINGLE.CMP1 = 0x0; /* Compare Register 1: 0x0 */

	TCA0.SINGLE.CMP2 = 0x4; /* Compare Register 2: 0x4 */
 3aa:	e0 e0       	ldi	r30, 0x00	; 0
 3ac:	fa e0       	ldi	r31, 0x0A	; 10
 3ae:	84 e0       	ldi	r24, 0x04	; 4
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	84 a7       	std	Z+44, r24	; 0x2c
 3b4:	95 a7       	std	Z+45, r25	; 0x2d

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
 3b6:	83 e4       	ldi	r24, 0x43	; 67
 3b8:	81 83       	std	Z+1, r24	; 0x01
	                    | 0 << TCA_SINGLE_CMP0EN_bp         /* Compare 0 Enable: disabled */
	                    | 0 << TCA_SINGLE_CMP1EN_bp         /* Compare 1 Enable: disabled */
	                    | 1 << TCA_SINGLE_CMP2EN_bp         /* Compare 2 Enable: enabled */
	                    | TCA_SINGLE_WGMODE_SINGLESLOPE_gc; /*  */

	TCA0.SINGLE.CTRLC = 0 << TCA_SINGLE_CMP0OV_bp    /* Compare 0 Waveform Output Value: disabled */
 3ba:	84 e0       	ldi	r24, 0x04	; 4
 3bc:	82 83       	std	Z+2, r24	; 0x02
	// TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp /* Compare 0 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	TCA0.SINGLE.PER = 0x7; /* Period: 0x7 */
 3be:	87 e0       	ldi	r24, 0x07	; 7
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	86 a3       	std	Z+38, r24	; 0x26
 3c4:	97 a3       	std	Z+39, r25	; 0x27

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp; /* Module Enable: disabled */

	return 0;
}
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	08 95       	ret

000003ca <tinyCCLRGB_SPIWriteByte>:

static struct tinyCCLRGB_color tinyCCLRGB_colors[tinyCCLRGB_ledCount];


void tinyCCLRGB_init(uint8_t ledNumber)
{
 3ca:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
 3ce:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
 3d2:	e0 e0       	ldi	r30, 0x00	; 0
 3d4:	fa e0       	ldi	r31, 0x0A	; 10
 3d6:	10 a2       	std	Z+32, r1	; 0x20
 3d8:	11 a2       	std	Z+33, r1	; 0x21
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	90 83       	st	Z, r25
 3de:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
 3e2:	e0 e2       	ldi	r30, 0x20	; 32
 3e4:	f8 e0       	ldi	r31, 0x08	; 8
 3e6:	83 81       	ldd	r24, Z+3	; 0x03
 3e8:	88 23       	and	r24, r24
 3ea:	ec f7       	brge	.-6      	; 0x3e6 <tinyCCLRGB_SPIWriteByte+0x1c>
 3ec:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
 3f0:	08 95       	ret

000003f2 <tinyCCLRGB_setColor>:
	// TODO: Set up SPI, PWM and CCL here
}

void tinyCCLRGB_setColor(uint8_t led, uint8_t red, uint8_t green, uint8_t blue) 
{
	tinyCCLRGB_colors[led].red = red;
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	fc 01       	movw	r30, r24
 3f6:	ee 0f       	add	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	8e 0f       	add	r24, r30
 3fc:	9f 1f       	adc	r25, r31
 3fe:	fc 01       	movw	r30, r24
 400:	e0 50       	subi	r30, 0x00	; 0
 402:	f2 4c       	sbci	r31, 0xC2	; 194
 404:	60 83       	st	Z, r22
	tinyCCLRGB_colors[led].green = green;
 406:	41 83       	std	Z+1, r20	; 0x01
	tinyCCLRGB_colors[led].blue = blue;
 408:	22 83       	std	Z+2, r18	; 0x02
 40a:	08 95       	ret

0000040c <tinyCCLRGB_uploadColorsToLeds>:
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
}

//function to write to the ledpins, using CCL with different PWM-signals to create a readable signal for the LEDs.
void tinyCCLRGB_uploadColorsToLeds(void)
{
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	c0 e0       	ldi	r28, 0x00	; 0
 416:	de e3       	ldi	r29, 0x3E	; 62
 418:	02 e1       	ldi	r16, 0x12	; 18
 41a:	1e e3       	ldi	r17, 0x3E	; 62
	for (uint8_t i = 0; i < tinyCCLRGB_ledCount; i++)
	{
		//For some reason unknown to the writer the data-bus to the LEDs is serialized as GRB
		//which means the 24-bit data-bus will look like  (Green[0:7], Red[0:7], Blue[0:7])
		tinyCCLRGB_SPIWriteByte(tinyCCLRGB_colors[i].green);
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	d5 df       	rcall	.-86     	; 0x3ca <tinyCCLRGB_SPIWriteByte>
		tinyCCLRGB_SPIWriteByte(tinyCCLRGB_colors[i].red);
 420:	88 81       	ld	r24, Y
 422:	d3 df       	rcall	.-90     	; 0x3ca <tinyCCLRGB_SPIWriteByte>
		tinyCCLRGB_SPIWriteByte(tinyCCLRGB_colors[i].blue);
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	d1 df       	rcall	.-94     	; 0x3ca <tinyCCLRGB_SPIWriteByte>
 428:	23 96       	adiw	r28, 0x03	; 3
}

//function to write to the ledpins, using CCL with different PWM-signals to create a readable signal for the LEDs.
void tinyCCLRGB_uploadColorsToLeds(void)
{
	for (uint8_t i = 0; i < tinyCCLRGB_ledCount; i++)
 42a:	c0 17       	cp	r28, r16
 42c:	d1 07       	cpc	r29, r17
 42e:	b1 f7       	brne	.-20     	; 0x41c <tinyCCLRGB_uploadColorsToLeds+0x10>
		//which means the 24-bit data-bus will look like  (Green[0:7], Red[0:7], Blue[0:7])
		tinyCCLRGB_SPIWriteByte(tinyCCLRGB_colors[i].green);
		tinyCCLRGB_SPIWriteByte(tinyCCLRGB_colors[i].red);
		tinyCCLRGB_SPIWriteByte(tinyCCLRGB_colors[i].blue);
	}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	08 95       	ret

0000043a <_exit>:
 43a:	f8 94       	cli

0000043c <__stop_program>:
 43c:	ff cf       	rjmp	.-2      	; 0x43c <__stop_program>
