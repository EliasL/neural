
Building_Brains_V4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00803800  0000172a  000017de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016fe  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  000096fe  000016fe  000017b2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000055  00803816  00803816  000017f4  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001824  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004c8  00000000  00000000  00001868  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008528  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000035ef  00000000  00000000  0000a258  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000027ef  00000000  00000000  0000d847  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007fc  00000000  00000000  00010038  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000033f0  00000000  00000000  00010834  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001340  00000000  00000000  00013c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000340  00000000  00000000  00014f64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__vector_6>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	05 a8       	ldd	r0, Z+53	; 0x35
      a6:	4c cd       	rjmp	.-1384   	; 0xfffffb40 <__eeprom_end+0xff7efb40>
      a8:	b2 d4       	rcall	.+2404   	; 0xa0e <tinyLED_update+0x34a>
      aa:	4e b9       	out	0x0e, r20	; 14
      ac:	38 36       	cpi	r19, 0x68	; 104
      ae:	a9 02       	muls	r26, r25
      b0:	0c 50       	subi	r16, 0x0C	; 12
      b2:	b9 91       	ld	r27, Y+
      b4:	86 88       	ldd	r8, Z+22	; 0x16
      b6:	08 3c       	cpi	r16, 0xC8	; 200
      b8:	a6 aa       	std	Z+54, r10	; 0x36
      ba:	aa 2a       	or	r10, r26
      bc:	be 00       	.word	0x00be	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	cd bf       	out	0x3d, r28	; 61
      ca:	df e3       	ldi	r29, 0x3F	; 63
      cc:	de bf       	out	0x3e, r29	; 62

000000ce <__do_copy_data>:
      ce:	18 e3       	ldi	r17, 0x38	; 56
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b8 e3       	ldi	r27, 0x38	; 56
      d4:	ea e2       	ldi	r30, 0x2A	; 42
      d6:	f7 e1       	ldi	r31, 0x17	; 23
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a6 31       	cpi	r26, 0x16	; 22
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	28 e3       	ldi	r18, 0x38	; 56
      e6:	a6 e1       	ldi	r26, 0x16	; 22
      e8:	b8 e3       	ldi	r27, 0x38	; 56
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	ab 36       	cpi	r26, 0x6B	; 107
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <main>
      f8:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <atmel_start_init>:
     100:	0e 94 50 01 	call	0x2a0	; 0x2a0 <system_init>
     104:	08 95       	ret

00000106 <ADC_init>:
     106:	85 e0       	ldi	r24, 0x05	; 5
     108:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	08 95       	ret

00000110 <ADC_is_conversion_done>:
     110:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     114:	81 70       	andi	r24, 0x01	; 1
     116:	08 95       	ret

00000118 <ADC_get_conversion>:
     118:	e0 e0       	ldi	r30, 0x00	; 0
     11a:	f6 e0       	ldi	r31, 0x06	; 6
     11c:	86 83       	std	Z+6, r24	; 0x06
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	80 87       	std	Z+8, r24	; 0x08
     122:	0e 94 88 00 	call	0x110	; 0x110 <ADC_is_conversion_done>
     126:	88 23       	and	r24, r24
     128:	e1 f3       	breq	.-8      	; 0x122 <ADC_get_conversion+0xa>
     12a:	e0 e0       	ldi	r30, 0x00	; 0
     12c:	f6 e0       	ldi	r31, 0x06	; 6
     12e:	20 89       	ldd	r18, Z+16	; 0x10
     130:	31 89       	ldd	r19, Z+17	; 0x11
     132:	93 85       	ldd	r25, Z+11	; 0x0b
     134:	91 60       	ori	r25, 0x01	; 1
     136:	93 87       	std	Z+11, r25	; 0x0b
     138:	c9 01       	movw	r24, r18
     13a:	08 95       	ret

0000013c <BOD_init>:
     13c:	82 e0       	ldi	r24, 0x02	; 2
     13e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	08 95       	ret

00000146 <DIGGSIGG_init>:
     146:	e0 ec       	ldi	r30, 0xC0	; 192
     148:	f1 e0       	ldi	r31, 0x01	; 1
     14a:	88 ea       	ldi	r24, 0xA8	; 168
     14c:	84 87       	std	Z+12, r24	; 0x0c
     14e:	88 e0       	ldi	r24, 0x08	; 8
     150:	83 87       	std	Z+11, r24	; 0x0b
     152:	8b eb       	ldi	r24, 0xBB	; 187
     154:	82 87       	std	Z+10, r24	; 0x0a
     156:	89 e0       	ldi	r24, 0x09	; 9
     158:	81 87       	std	Z+9, r24	; 0x09
     15a:	81 e4       	ldi	r24, 0x41	; 65
     15c:	80 83       	st	Z, r24
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	08 95       	ret

00000162 <CLKCTRL_init>:
     162:	47 e0       	ldi	r20, 0x07	; 7
     164:	68 ed       	ldi	r22, 0xD8	; 216
     166:	8c e7       	ldi	r24, 0x7C	; 124
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <protected_write_io>
     16e:	41 e0       	ldi	r20, 0x01	; 1
     170:	68 ed       	ldi	r22, 0xD8	; 216
     172:	81 e6       	ldi	r24, 0x61	; 97
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 7d 01 	call	0x2fa	; 0x2fa <protected_write_io>
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	08 95       	ret

0000017e <CPUINT_init>:
     17e:	78 94       	sei
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	08 95       	ret

00000184 <DAC_init>:
     184:	81 e4       	ldi	r24, 0x41	; 65
     186:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	08 95       	ret

0000018e <DAC_set_output>:
     18e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     192:	08 95       	ret

00000194 <mcu_init>:
     194:	e0 e1       	ldi	r30, 0x10	; 16
     196:	f4 e0       	ldi	r31, 0x04	; 4
     198:	80 81       	ld	r24, Z
     19a:	88 60       	ori	r24, 0x08	; 8
     19c:	81 93       	st	Z+, r24
     19e:	e8 31       	cpi	r30, 0x18	; 24
     1a0:	84 e0       	ldi	r24, 0x04	; 4
     1a2:	f8 07       	cpc	r31, r24
     1a4:	c9 f7       	brne	.-14     	; 0x198 <mcu_init+0x4>
     1a6:	e0 e3       	ldi	r30, 0x30	; 48
     1a8:	f4 e0       	ldi	r31, 0x04	; 4
     1aa:	80 81       	ld	r24, Z
     1ac:	88 60       	ori	r24, 0x08	; 8
     1ae:	81 93       	st	Z+, r24
     1b0:	e8 33       	cpi	r30, 0x38	; 56
     1b2:	84 e0       	ldi	r24, 0x04	; 4
     1b4:	f8 07       	cpc	r31, r24
     1b6:	c9 f7       	brne	.-14     	; 0x1aa <mcu_init+0x16>
     1b8:	e0 e5       	ldi	r30, 0x50	; 80
     1ba:	f4 e0       	ldi	r31, 0x04	; 4
     1bc:	80 81       	ld	r24, Z
     1be:	88 60       	ori	r24, 0x08	; 8
     1c0:	81 93       	st	Z+, r24
     1c2:	e8 35       	cpi	r30, 0x58	; 88
     1c4:	84 e0       	ldi	r24, 0x04	; 4
     1c6:	f8 07       	cpc	r31, r24
     1c8:	c9 f7       	brne	.-14     	; 0x1bc <mcu_init+0x28>
     1ca:	08 95       	ret

000001cc <ADC_initialization>:
     1cc:	e5 e1       	ldi	r30, 0x15	; 21
     1ce:	f4 e0       	ldi	r31, 0x04	; 4
     1d0:	80 81       	ld	r24, Z
     1d2:	88 7f       	andi	r24, 0xF8	; 248
     1d4:	84 60       	ori	r24, 0x04	; 4
     1d6:	80 83       	st	Z, r24
     1d8:	80 81       	ld	r24, Z
     1da:	87 7f       	andi	r24, 0xF7	; 247
     1dc:	80 83       	st	Z, r24
     1de:	e7 e1       	ldi	r30, 0x17	; 23
     1e0:	f4 e0       	ldi	r31, 0x04	; 4
     1e2:	80 81       	ld	r24, Z
     1e4:	88 7f       	andi	r24, 0xF8	; 248
     1e6:	84 60       	ori	r24, 0x04	; 4
     1e8:	80 83       	st	Z, r24
     1ea:	80 81       	ld	r24, Z
     1ec:	87 7f       	andi	r24, 0xF7	; 247
     1ee:	80 83       	st	Z, r24
     1f0:	e4 e3       	ldi	r30, 0x34	; 52
     1f2:	f4 e0       	ldi	r31, 0x04	; 4
     1f4:	80 81       	ld	r24, Z
     1f6:	88 7f       	andi	r24, 0xF8	; 248
     1f8:	84 60       	ori	r24, 0x04	; 4
     1fa:	80 83       	st	Z, r24
     1fc:	80 81       	ld	r24, Z
     1fe:	87 7f       	andi	r24, 0xF7	; 247
     200:	80 83       	st	Z, r24
     202:	e1 e3       	ldi	r30, 0x31	; 49
     204:	f4 e0       	ldi	r31, 0x04	; 4
     206:	80 81       	ld	r24, Z
     208:	88 7f       	andi	r24, 0xF8	; 248
     20a:	84 60       	ori	r24, 0x04	; 4
     20c:	80 83       	st	Z, r24
     20e:	80 81       	ld	r24, Z
     210:	87 7f       	andi	r24, 0xF7	; 247
     212:	80 83       	st	Z, r24
     214:	e0 e3       	ldi	r30, 0x30	; 48
     216:	f4 e0       	ldi	r31, 0x04	; 4
     218:	80 81       	ld	r24, Z
     21a:	88 7f       	andi	r24, 0xF8	; 248
     21c:	84 60       	ori	r24, 0x04	; 4
     21e:	80 83       	st	Z, r24
     220:	80 81       	ld	r24, Z
     222:	87 7f       	andi	r24, 0xF7	; 247
     224:	80 83       	st	Z, r24
     226:	0e 94 83 00 	call	0x106	; 0x106 <ADC_init>
     22a:	08 95       	ret

0000022c <USART_0_initialization>:
     22c:	23 98       	cbi	0x04, 3	; 4
     22e:	e3 e3       	ldi	r30, 0x33	; 51
     230:	f4 e0       	ldi	r31, 0x04	; 4
     232:	80 81       	ld	r24, Z
     234:	87 7f       	andi	r24, 0xF7	; 247
     236:	80 83       	st	Z, r24
     238:	22 9a       	sbi	0x04, 2	; 4
     23a:	2a 98       	cbi	0x05, 2	; 5
     23c:	0e 94 b5 01 	call	0x36a	; 0x36a <USART_0_init>
     240:	08 95       	ret

00000242 <TIMER_0_initialization>:
     242:	25 9a       	sbi	0x04, 5	; 4
     244:	2d 98       	cbi	0x05, 5	; 5
     246:	e0 e0       	ldi	r30, 0x00	; 0
     248:	f2 e0       	ldi	r31, 0x02	; 2
     24a:	82 81       	ldd	r24, Z+2	; 0x02
     24c:	84 60       	ori	r24, 0x04	; 4
     24e:	82 83       	std	Z+2, r24	; 0x02
     250:	0e 94 a5 01 	call	0x34a	; 0x34a <TIMER_0_init>
     254:	08 95       	ret

00000256 <DIGGSIGG_initialization>:
     256:	41 9a       	sbi	0x08, 1	; 8
     258:	49 98       	cbi	0x09, 1	; 9
     25a:	e0 e0       	ldi	r30, 0x00	; 0
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	80 81       	ld	r24, Z
     260:	80 62       	ori	r24, 0x20	; 32
     262:	80 83       	st	Z, r24
     264:	0e 94 a3 00 	call	0x146	; 0x146 <DIGGSIGG_init>
     268:	08 95       	ret

0000026a <SPI_0_initialization>:
     26a:	02 98       	cbi	0x00, 2	; 0
     26c:	e2 e1       	ldi	r30, 0x12	; 18
     26e:	f4 e0       	ldi	r31, 0x04	; 4
     270:	80 81       	ld	r24, Z
     272:	87 7f       	andi	r24, 0xF7	; 247
     274:	80 83       	st	Z, r24
     276:	01 9a       	sbi	0x00, 1	; 0
     278:	09 98       	cbi	0x01, 1	; 1
     27a:	03 9a       	sbi	0x00, 3	; 0
     27c:	0b 98       	cbi	0x01, 3	; 1
     27e:	04 9a       	sbi	0x00, 4	; 0
     280:	0c 98       	cbi	0x01, 4	; 1
     282:	0e 94 9d 01 	call	0x33a	; 0x33a <SPI_0_init>
     286:	08 95       	ret

00000288 <DAC_initialization>:
     288:	e6 e1       	ldi	r30, 0x16	; 22
     28a:	f4 e0       	ldi	r31, 0x04	; 4
     28c:	80 81       	ld	r24, Z
     28e:	88 7f       	andi	r24, 0xF8	; 248
     290:	84 60       	ori	r24, 0x04	; 4
     292:	80 83       	st	Z, r24
     294:	80 81       	ld	r24, Z
     296:	87 7f       	andi	r24, 0xF7	; 247
     298:	80 83       	st	Z, r24
     29a:	0e 94 c2 00 	call	0x184	; 0x184 <DAC_init>
     29e:	08 95       	ret

000002a0 <system_init>:
     2a0:	0e 94 ca 00 	call	0x194	; 0x194 <mcu_init>
     2a4:	26 98       	cbi	0x04, 6	; 4
     2a6:	e6 e3       	ldi	r30, 0x36	; 54
     2a8:	f4 e0       	ldi	r31, 0x04	; 4
     2aa:	80 81       	ld	r24, Z
     2ac:	87 7f       	andi	r24, 0xF7	; 247
     2ae:	80 83       	st	Z, r24
     2b0:	27 98       	cbi	0x04, 7	; 4
     2b2:	e7 e3       	ldi	r30, 0x37	; 55
     2b4:	f4 e0       	ldi	r31, 0x04	; 4
     2b6:	80 81       	ld	r24, Z
     2b8:	87 7f       	andi	r24, 0xF7	; 247
     2ba:	80 83       	st	Z, r24
     2bc:	42 98       	cbi	0x08, 2	; 8
     2be:	e2 e5       	ldi	r30, 0x52	; 82
     2c0:	f4 e0       	ldi	r31, 0x04	; 4
     2c2:	80 81       	ld	r24, Z
     2c4:	88 60       	ori	r24, 0x08	; 8
     2c6:	80 83       	st	Z, r24
     2c8:	45 9a       	sbi	0x08, 5	; 8
     2ca:	4d 9a       	sbi	0x09, 5	; 9
     2cc:	0e 94 b1 00 	call	0x162	; 0x162 <CLKCTRL_init>
     2d0:	0e 94 81 01 	call	0x302	; 0x302 <RTC_init>
     2d4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <ADC_initialization>
     2d8:	0e 94 16 01 	call	0x22c	; 0x22c <USART_0_initialization>
     2dc:	0e 94 21 01 	call	0x242	; 0x242 <TIMER_0_initialization>
     2e0:	0e 94 2b 01 	call	0x256	; 0x256 <DIGGSIGG_initialization>
     2e4:	0e 94 35 01 	call	0x26a	; 0x26a <SPI_0_initialization>
     2e8:	0e 94 44 01 	call	0x288	; 0x288 <DAC_initialization>
     2ec:	0e 94 bf 00 	call	0x17e	; 0x17e <CPUINT_init>
     2f0:	0e 94 9b 01 	call	0x336	; 0x336 <SLPCTRL_init>
     2f4:	0e 94 9e 00 	call	0x13c	; 0x13c <BOD_init>
     2f8:	08 95       	ret

000002fa <protected_write_io>:
     2fa:	fc 01       	movw	r30, r24
     2fc:	64 bf       	out	0x34, r22	; 52
     2fe:	40 83       	st	Z, r20
     300:	08 95       	ret

00000302 <RTC_init>:
 * \return Initialization status.
 */
int8_t RTC_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     302:	e0 e4       	ldi	r30, 0x40	; 64
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	81 81       	ldd	r24, Z+1	; 0x01
     308:	81 11       	cpse	r24, r1
     30a:	fd cf       	rjmp	.-6      	; 0x306 <RTC_init+0x4>
	}

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	RTC.CNT = 0x20; /* Counter: 0x20 */
     30c:	e0 e4       	ldi	r30, 0x40	; 64
     30e:	f1 e0       	ldi	r31, 0x01	; 1
     310:	80 e2       	ldi	r24, 0x20	; 32
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	80 87       	std	Z+8, r24	; 0x08
     316:	91 87       	std	Z+9, r25	; 0x09

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     318:	21 e8       	ldi	r18, 0x81	; 129
     31a:	20 83       	st	Z, r18
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x20 / TIMESCALE; /* Period: 0x20 */
     31c:	82 87       	std	Z+10, r24	; 0x0a
     31e:	93 87       	std	Z+11, r25	; 0x0b

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	RTC.DBGCTRL = 1 << RTC_DBGRUN_bp; /* Run in debug: enabled */
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	85 83       	std	Z+5, r24	; 0x05

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
     324:	82 83       	std	Z+2, r24	; 0x02
	              | 1 << RTC_OVF_bp; /* Overflow Interrupt enable: enabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     326:	81 89       	ldd	r24, Z+17	; 0x11
     328:	81 11       	cpse	r24, r1
     32a:	fd cf       	rjmp	.-6      	; 0x326 <RTC_init+0x24>
	}

	RTC.PITCTRLA = RTC_PERIOD_OFF_gc    /* Off */
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	08 95       	ret

00000336 <SLPCTRL_init>:
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	08 95       	ret

0000033a <SPI_0_init>:
     33a:	e0 e2       	ldi	r30, 0x20	; 32
     33c:	f8 e0       	ldi	r31, 0x08	; 8
     33e:	83 e2       	ldi	r24, 0x23	; 35
     340:	80 83       	st	Z, r24
     342:	84 e0       	ldi	r24, 0x04	; 4
     344:	81 83       	std	Z+1, r24	; 0x01
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	08 95       	ret

0000034a <TIMER_0_init>:
     34a:	e0 e0       	ldi	r30, 0x00	; 0
     34c:	fa e0       	ldi	r31, 0x0A	; 10
     34e:	84 e0       	ldi	r24, 0x04	; 4
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	84 a7       	std	Z+44, r24	; 0x2c
     354:	95 a7       	std	Z+45, r25	; 0x2d
     356:	83 e4       	ldi	r24, 0x43	; 67
     358:	81 83       	std	Z+1, r24	; 0x01
     35a:	84 e0       	ldi	r24, 0x04	; 4
     35c:	82 83       	std	Z+2, r24	; 0x02
     35e:	87 e0       	ldi	r24, 0x07	; 7
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	86 a3       	std	Z+38, r24	; 0x26
     364:	97 a3       	std	Z+39, r25	; 0x27
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	08 95       	ret

0000036a <USART_0_init>:
     36a:	e0 e0       	ldi	r30, 0x00	; 0
     36c:	f8 e0       	ldi	r31, 0x08	; 8
     36e:	87 e4       	ldi	r24, 0x47	; 71
     370:	90 e1       	ldi	r25, 0x10	; 16
     372:	80 87       	std	Z+8, r24	; 0x08
     374:	91 87       	std	Z+9, r25	; 0x09
     376:	80 ec       	ldi	r24, 0xC0	; 192
     378:	86 83       	std	Z+6, r24	; 0x06
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	98 e3       	ldi	r25, 0x38	; 56
     37e:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <__iob+0x2>
     382:	90 93 68 38 	sts	0x3868, r25	; 0x803868 <__iob+0x3>
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	08 95       	ret

0000038a <USART_0_write>:
     38a:	e0 e0       	ldi	r30, 0x00	; 0
     38c:	f8 e0       	ldi	r31, 0x08	; 8
     38e:	94 81       	ldd	r25, Z+4	; 0x04
     390:	95 ff       	sbrs	r25, 5
     392:	fd cf       	rjmp	.-6      	; 0x38e <USART_0_write+0x4>
     394:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     398:	08 95       	ret

0000039a <USART_0_printCHAR>:
     39a:	0e 94 c5 01 	call	0x38a	; 0x38a <USART_0_write>
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	08 95       	ret

000003a4 <tinyCharge_is_connected_to_charger>:

_Bool connected_to_charger;

_Bool tinyCharge_is_connected_to_charger(){
	return connected_to_charger;
}
     3a4:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <connected_to_charger>
     3a8:	08 95       	ret

000003aa <tinyCharge_is_fully_charged>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     3aa:	86 b1       	in	r24, 0x06	; 6

_Bool tinyCharge_is_fully_charged(){
	return CHARGING_STATUS_PIN_get_level();
}
     3ac:	88 1f       	adc	r24, r24
     3ae:	88 27       	eor	r24, r24
     3b0:	88 1f       	adc	r24, r24
     3b2:	08 95       	ret

000003b4 <tinyCharge_switch_mode>:
	}
}

void tinyCharge_switch_mode(){
	
	if(connected_to_charger){
     3b4:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <connected_to_charger>
     3b8:	88 23       	and	r24, r24
     3ba:	51 f0       	breq	.+20     	; 0x3d0 <tinyCharge_switch_mode+0x1c>
		// Switch from main to charging mode
		
		// Set LED
		tinyLED_set_color(OUT_LED, OFF);
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 11 03 	call	0x622	; 0x622 <tinyLED_set_color>
		tinyLED_set_color_mode(INN_LED, CHARGING_COLOR, SWING);
     3c4:	42 e0       	ldi	r20, 0x02	; 2
     3c6:	61 e0       	ldi	r22, 0x01	; 1
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	0e 94 22 03 	call	0x644	; 0x644 <tinyLED_set_color_mode>
     3ce:	08 95       	ret
	}
	else{
		// Switch from charge to main mode
		
		// Set LED
		tinyLED_set_color(OUT_LED, OFF);
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	0e 94 11 03 	call	0x622	; 0x622 <tinyLED_set_color>
		tinyLED_set_color(INN_LED, OFF);
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	0e 94 11 03 	call	0x622	; 0x622 <tinyLED_set_color>
     3e0:	08 95       	ret

000003e2 <tinyCharge_set_charging_mode>:
_Bool tinyCharge_is_fully_charged(){
	return CHARGING_STATUS_PIN_get_level();
}

void tinyCharge_set_charging_mode(_Bool charging_status){
	if(charging_status != connected_to_charger){
     3e2:	90 91 58 38 	lds	r25, 0x3858	; 0x803858 <connected_to_charger>
     3e6:	98 17       	cp	r25, r24
     3e8:	21 f0       	breq	.+8      	; 0x3f2 <tinyCharge_set_charging_mode+0x10>
		connected_to_charger = charging_status;
     3ea:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <connected_to_charger>
		tinyCharge_switch_mode();
     3ee:	0e 94 da 01 	call	0x3b4	; 0x3b4 <tinyCharge_switch_mode>
     3f2:	08 95       	ret

000003f4 <tinyCharge_set_transistors>:
	}
}


void tinyCharge_set_transistors(){
	if(connected_to_charger){
     3f4:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <connected_to_charger>
     3f8:	88 23       	and	r24, r24
     3fa:	11 f0       	breq	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     3fc:	4d 98       	cbi	0x09, 5	; 9
     3fe:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     400:	4d 9a       	sbi	0x09, 5	; 9
     402:	08 95       	ret

00000404 <tinyDebugger_send_uint32>:
		char number[20]; // Arbitrary max
		dtostrf(value,1,NUMBER_OF_DECIMALS, number);
		printf("%s:%5s\t", name, number);
	}
}
void tinyDebugger_send_string(const char* name, char * value){
     404:	08 95       	ret

00000406 <tinyDebugger_send_uint8>:
     406:	08 95       	ret

00000408 <tinyDebugger_send_double>:
     408:	08 95       	ret

0000040a <tinyDebugger_end_line>:
}
void tinyDebugger_end_line(){
	if(DEBUGGING && tinyDebugger_send_message){
		printf("\r\n");
	}
	tinyDebugger_print_attempts++;
     40a:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <__data_end>
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <__data_end>
	tinyDebugger_send_message = tinyDebugger_print_attempts%DEBUG_EVERY == 0;
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <tinyDebugger_send_message>
     41a:	08 95       	ret

0000041c <tinyPulse_toggle_pulse_mode>:
uint32_t time_of_last_pulse = 0;
uint16_t time_since_last_pulse = 0;
uint16_t ideal_time_between_pulses = 1000/PULSEMODE_FREQUENCY;

void tinyPulse_toggle_pulse_mode(){
	pulse_mode = !pulse_mode;
     41c:	90 91 1d 38 	lds	r25, 0x381D	; 0x80381d <pulse_mode>
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	89 27       	eor	r24, r25
     424:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <pulse_mode>
     428:	08 95       	ret

0000042a <tinyPulse_update_potential>:
}

double tinyPulse_update_potential(double potential){
     42a:	cf 92       	push	r12
     42c:	df 92       	push	r13
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	6b 01       	movw	r12, r22
     434:	7c 01       	movw	r14, r24
	if(pulse_mode){
     436:	80 91 1d 38 	lds	r24, 0x381D	; 0x80381d <pulse_mode>
     43a:	88 23       	and	r24, r24
     43c:	39 f1       	breq	.+78     	; 0x48c <tinyPulse_update_potential+0x62>
		
		time_since_last_pulse = tinyTime_now() - time_of_last_pulse;
     43e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <tinyTime_now>
     442:	20 91 19 38 	lds	r18, 0x3819	; 0x803819 <time_of_last_pulse>
     446:	30 91 1a 38 	lds	r19, 0x381A	; 0x80381a <time_of_last_pulse+0x1>
     44a:	62 1b       	sub	r22, r18
     44c:	73 0b       	sbc	r23, r19
     44e:	60 93 17 38 	sts	0x3817, r22	; 0x803817 <time_since_last_pulse>
     452:	70 93 18 38 	sts	0x3818, r23	; 0x803818 <time_since_last_pulse+0x1>
		
		if(time_since_last_pulse >= ideal_time_between_pulses){
     456:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <ideal_time_between_pulses>
     45a:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <ideal_time_between_pulses+0x1>
     45e:	68 17       	cp	r22, r24
     460:	79 07       	cpc	r23, r25
     462:	a0 f0       	brcs	.+40     	; 0x48c <tinyPulse_update_potential+0x62>
			// This isn't actually a button press. You could have a separate variable for this, but it seems unnecessary.
			potential += BUTTON_PRESS_REACTION;
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	40 ed       	ldi	r20, 0xD0	; 208
     46a:	51 e4       	ldi	r21, 0x41	; 65
     46c:	c7 01       	movw	r24, r14
     46e:	b6 01       	movw	r22, r12
     470:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__addsf3>
     474:	6b 01       	movw	r12, r22
     476:	7c 01       	movw	r14, r24
			time_of_last_pulse = tinyTime_now();			
     478:	0e 94 61 02 	call	0x4c2	; 0x4c2 <tinyTime_now>
     47c:	60 93 19 38 	sts	0x3819, r22	; 0x803819 <time_of_last_pulse>
     480:	70 93 1a 38 	sts	0x381A, r23	; 0x80381a <time_of_last_pulse+0x1>
     484:	80 93 1b 38 	sts	0x381B, r24	; 0x80381b <time_of_last_pulse+0x2>
     488:	90 93 1c 38 	sts	0x381C, r25	; 0x80381c <time_of_last_pulse+0x3>
		}
	}
	return potential;
}
     48c:	c7 01       	movw	r24, r14
     48e:	b6 01       	movw	r22, r12
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	df 90       	pop	r13
     496:	cf 90       	pop	r12
     498:	08 95       	ret

0000049a <tinyTime_counter_increment>:
     49a:	80 91 1e 38 	lds	r24, 0x381E	; 0x80381e <time_counter>
     49e:	90 91 1f 38 	lds	r25, 0x381F	; 0x80381f <time_counter+0x1>
     4a2:	a0 91 20 38 	lds	r26, 0x3820	; 0x803820 <time_counter+0x2>
     4a6:	b0 91 21 38 	lds	r27, 0x3821	; 0x803821 <time_counter+0x3>
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	a1 1d       	adc	r26, r1
     4ae:	b1 1d       	adc	r27, r1
     4b0:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <time_counter>
     4b4:	90 93 1f 38 	sts	0x381F, r25	; 0x80381f <time_counter+0x1>
     4b8:	a0 93 20 38 	sts	0x3820, r26	; 0x803820 <time_counter+0x2>
     4bc:	b0 93 21 38 	sts	0x3821, r27	; 0x803821 <time_counter+0x3>
     4c0:	08 95       	ret

000004c2 <tinyTime_now>:
     4c2:	60 91 1e 38 	lds	r22, 0x381E	; 0x80381e <time_counter>
     4c6:	70 91 1f 38 	lds	r23, 0x381F	; 0x80381f <time_counter+0x1>
     4ca:	80 91 20 38 	lds	r24, 0x3820	; 0x803820 <time_counter+0x2>
     4ce:	90 91 21 38 	lds	r25, 0x3821	; 0x803821 <time_counter+0x3>
     4d2:	08 95       	ret

000004d4 <main>:

int main(void)
{	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     4d4:	0e 94 80 00 	call	0x100	; 0x100 <atmel_start_init>
	For some reason, the code below does not produce the desired results, but we suspect that since 35 is 00100011 in binary, this will give the desired settings
	
	VREF.CTRLA = VREF_ADC0REFSEL_2V5_gc;
	VREF.CTRLA = VREF_DAC0REFSEL_4V34_gc;
	*/
	VREF.CTRLA = 35;
     4d8:	83 e2       	ldi	r24, 0x23	; 35
     4da:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	 
	while (1)
	{
		// We don't want to update the neuron too often because of various reasons. The tinyISR_getflag is set every ms, and so the loop is only run once every ms.  
		if(tinyISR_getflag())
     4de:	0e 94 32 07 	call	0xe64	; 0xe64 <tinyISR_getflag>
     4e2:	88 23       	and	r24, r24
     4e4:	e1 f3       	breq	.-8      	; 0x4de <main+0xa>
		{			
			
			if(tinyCharge_is_connected_to_charger()){
     4e6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <tinyCharge_is_connected_to_charger>
     4ea:	88 23       	and	r24, r24
     4ec:	59 f0       	breq	.+22     	; 0x504 <main+0x30>
				// Charge loop
				
				if(tinyCharge_is_fully_charged()){
     4ee:	0e 94 d5 01 	call	0x3aa	; 0x3aa <tinyCharge_is_fully_charged>
     4f2:	88 23       	and	r24, r24
     4f4:	21 f0       	breq	.+8      	; 0x4fe <main+0x2a>
					tinyLED_set_color(OUT_LED, CHARGING_DONE_COLOR);
     4f6:	63 e0       	ldi	r22, 0x03	; 3
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	0e 94 11 03 	call	0x622	; 0x622 <tinyLED_set_color>
				}				
				// We check the Dendrites in order to detect if we have stopped charging
				tinyDendrite_update_signals();
     4fe:	0e 94 36 06 	call	0xc6c	; 0xc6c <tinyDendrite_update_signals>
     502:	0d c0       	rjmp	.+26     	; 0x51e <main+0x4a>
			}
			else{
				// Main loop			
				
				// Set LED
				if(tinyLED_get_color(OUT_LED) == OFF){
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	0e 94 1a 03 	call	0x634	; 0x634 <tinyLED_get_color>
     50a:	81 11       	cpse	r24, r1
     50c:	04 c0       	rjmp	.+8      	; 0x516 <main+0x42>
					tinyLED_set_color_mode(OUT_LED, PING_COLOR, PING);
     50e:	43 e0       	ldi	r20, 0x03	; 3
     510:	62 e0       	ldi	r22, 0x02	; 2
     512:	0e 94 22 03 	call	0x644	; 0x644 <tinyLED_set_color_mode>
				}
				
				// Update button	
				tinyButton_update();
     516:	0e 94 a1 02 	call	0x542	; 0x542 <tinyButton_update>
				
				// Update the potential (This is where most of the important stuff happens)
				tinyPotential_update();
     51a:	0e 94 35 07 	call	0xe6a	; 0xe6a <tinyPotential_update>
			}
			// Update LED
			tinyLED_update();
     51e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <tinyLED_update>
				
			// Switch transistors
			tinyCharge_set_transistors();
     522:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <tinyCharge_set_transistors>
			
			// Prepare for next cycle
			tinyISR_setflag(false);
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	0e 94 2f 07 	call	0xe5e	; 0xe5e <tinyISR_setflag>
			tinyDebugger_send_uint32("time", tinyTime_now());
     52c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <tinyTime_now>
     530:	ab 01       	movw	r20, r22
     532:	bc 01       	movw	r22, r24
     534:	8e ef       	ldi	r24, 0xFE	; 254
     536:	96 e9       	ldi	r25, 0x96	; 150
     538:	0e 94 02 02 	call	0x404	; 0x404 <tinyDebugger_send_uint32>
			tinyDebugger_end_line();
     53c:	0e 94 05 02 	call	0x40a	; 0x40a <tinyDebugger_end_line>
     540:	ce cf       	rjmp	.-100    	; 0x4de <main+0xa>

00000542 <tinyButton_update>:
/*
If the button has been let go, we change button_press to true. This only lasts one cycle, before it is set to false again.
If the button is held down for longer than PULSEMODE_BUTTON_PRESS_TIME, we toggle the pulse mode state.
*/
void tinyButton_update(void)
{
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
	button_press = false;
     54a:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <button_press>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return VPORTC.IN & (1 << pin);
     54e:	8a b1       	in	r24, 0x0a	; 10
	_Bool button_is_pushed_down = !BUTTON_PIN_get_level(); // The digital port will be read as low if the button is pushed down.
     550:	d1 e0       	ldi	r29, 0x01	; 1
     552:	c8 2f       	mov	r28, r24
     554:	c4 70       	andi	r28, 0x04	; 4
     556:	82 fd       	sbrc	r24, 2
     558:	d0 e0       	ldi	r29, 0x00	; 0

	if (button_is_pushed_down && !button_was_pushed_down)
     55a:	c1 11       	cpse	r28, r1
     55c:	33 c0       	rjmp	.+102    	; 0x5c4 <tinyButton_update+0x82>
     55e:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <button_was_pushed_down>
     562:	81 11       	cpse	r24, r1
     564:	0e c0       	rjmp	.+28     	; 0x582 <tinyButton_update+0x40>
	{
		tinyButton_start_time = tinyTime_now();
     566:	0e 94 61 02 	call	0x4c2	; 0x4c2 <tinyTime_now>
     56a:	60 93 22 38 	sts	0x3822, r22	; 0x803822 <tinyButton_start_time>
     56e:	70 93 23 38 	sts	0x3823, r23	; 0x803823 <tinyButton_start_time+0x1>
     572:	80 93 24 38 	sts	0x3824, r24	; 0x803824 <tinyButton_start_time+0x2>
     576:	90 93 25 38 	sts	0x3825, r25	; 0x803825 <tinyButton_start_time+0x3>
	}
	if (button_is_pushed_down && button_was_pushed_down)
     57a:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <button_was_pushed_down>
     57e:	88 23       	and	r24, r24
     580:	51 f1       	breq	.+84     	; 0x5d6 <tinyButton_update+0x94>
	{
		if ((tinyTime_now() - tinyButton_start_time) > PULSEMODE_BUTTON_PRESS_TIME)
     582:	0e 94 61 02 	call	0x4c2	; 0x4c2 <tinyTime_now>
     586:	00 91 22 38 	lds	r16, 0x3822	; 0x803822 <tinyButton_start_time>
     58a:	10 91 23 38 	lds	r17, 0x3823	; 0x803823 <tinyButton_start_time+0x1>
     58e:	20 91 24 38 	lds	r18, 0x3824	; 0x803824 <tinyButton_start_time+0x2>
     592:	30 91 25 38 	lds	r19, 0x3825	; 0x803825 <tinyButton_start_time+0x3>
     596:	dc 01       	movw	r26, r24
     598:	cb 01       	movw	r24, r22
     59a:	80 1b       	sub	r24, r16
     59c:	91 0b       	sbc	r25, r17
     59e:	a2 0b       	sbc	r26, r18
     5a0:	b3 0b       	sbc	r27, r19
     5a2:	81 3d       	cpi	r24, 0xD1	; 209
     5a4:	97 40       	sbci	r25, 0x07	; 7
     5a6:	a1 05       	cpc	r26, r1
     5a8:	b1 05       	cpc	r27, r1
     5aa:	60 f0       	brcs	.+24     	; 0x5c4 <tinyButton_update+0x82>
		{
			tinyPulse_toggle_pulse_mode();
     5ac:	0e 94 0e 02 	call	0x41c	; 0x41c <tinyPulse_toggle_pulse_mode>
			tinyButton_start_time = tinyTime_now();
     5b0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <tinyTime_now>
     5b4:	60 93 22 38 	sts	0x3822, r22	; 0x803822 <tinyButton_start_time>
     5b8:	70 93 23 38 	sts	0x3823, r23	; 0x803823 <tinyButton_start_time+0x1>
     5bc:	80 93 24 38 	sts	0x3824, r24	; 0x803824 <tinyButton_start_time+0x2>
     5c0:	90 93 25 38 	sts	0x3825, r25	; 0x803825 <tinyButton_start_time+0x3>
		}
	}
	if (!button_is_pushed_down && button_was_pushed_down)
     5c4:	cc 23       	and	r28, r28
     5c6:	39 f0       	breq	.+14     	; 0x5d6 <tinyButton_update+0x94>
     5c8:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <button_was_pushed_down>
     5cc:	88 23       	and	r24, r24
     5ce:	19 f0       	breq	.+6      	; 0x5d6 <tinyButton_update+0x94>
	{
		button_press = true;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <button_press>
	}
	button_was_pushed_down = button_is_pushed_down;
     5d6:	d0 93 27 38 	sts	0x3827, r29	; 0x803827 <button_was_pushed_down>
}
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	08 95       	ret

000005e4 <tinyButton_update_potential>:

double tinyButton_update_potential(double potential){
	if(button_press){
     5e4:	20 91 26 38 	lds	r18, 0x3826	; 0x803826 <button_press>
     5e8:	22 23       	and	r18, r18
     5ea:	31 f0       	breq	.+12     	; 0x5f8 <tinyButton_update_potential+0x14>
		potential += BUTTON_PRESS_REACTION;
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 ed       	ldi	r20, 0xD0	; 208
     5f2:	51 e4       	ldi	r21, 0x41	; 65
     5f4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__addsf3>
	}
	return potential;
}
     5f8:	08 95       	ret

000005fa <tinyLED_SPIWriteByte>:
Function used to send a byte over SPI, which in turn gets
translated to the bit-sequence required by the LEDs over the CCL.
*/
static void tinyLED_SPIWriteByte(uint8_t byte)
{
	SPI0.INTFLAGS = SPI0_INTFLAGS; // clear the write collision flag to allow writing
     5fa:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
     5fe:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
	TCA0.SINGLE.CNT = 0; // reset TCA counter register to ensure the first rising edge of the PWM is predictable
     602:	e0 e0       	ldi	r30, 0x00	; 0
     604:	fa e0       	ldi	r31, 0x0A	; 10
     606:	10 a2       	std	Z+32, r1	; 0x20
     608:	11 a2       	std	Z+33, r1	; 0x21
	
	// start TCA
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 1 << TCA_SPLIT_ENABLE_bp;
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	90 83       	st	Z, r25
	SPI0_DATA = byte;
     60e:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>

	while((SPI0.INTFLAGS & SPI_RXCIE_bm) == 0){} // wait for transfer to complete
     612:	e0 e2       	ldi	r30, 0x20	; 32
     614:	f8 e0       	ldi	r31, 0x08	; 8
     616:	83 81       	ldd	r24, Z+3	; 0x03
     618:	88 23       	and	r24, r24
     61a:	ec f7       	brge	.-6      	; 0x616 <tinyLED_SPIWriteByte+0x1c>
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
     61c:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     620:	08 95       	ret

00000622 <tinyLED_set_color>:
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color_mode(uint8_t LED_id, enum Colors color, enum ColorModes mode)
{
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_colors[LED_id] = setting;
     622:	e8 2f       	mov	r30, r24
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	ef 59       	subi	r30, 0x9F	; 159
     62c:	f7 4c       	sbci	r31, 0xC7	; 199
     62e:	60 83       	st	Z, r22
     630:	11 82       	std	Z+1, r1	; 0x01
     632:	08 95       	ret

00000634 <tinyLED_get_color>:
	tinyLED_set_color_mode(LED_id, color, STABLE);
}

enum Colors tinyLED_get_color(uint8_t LED_id)
{
	return tinyLED_colors[LED_id].color;
     634:	e8 2f       	mov	r30, r24
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	ef 59       	subi	r30, 0x9F	; 159
     63e:	f7 4c       	sbci	r31, 0xC7	; 199
}
     640:	80 81       	ld	r24, Z
     642:	08 95       	ret

00000644 <tinyLED_set_color_mode>:
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color_mode(uint8_t LED_id, enum Colors color, enum ColorModes mode)
{
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_colors[LED_id] = setting;
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	fc 01       	movw	r30, r24
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	ef 59       	subi	r30, 0x9F	; 159
     64e:	f7 4c       	sbci	r31, 0xC7	; 199
     650:	60 83       	st	Z, r22
     652:	41 83       	std	Z+1, r20	; 0x01
	if (mode == FLASH_ONCE)
     654:	44 30       	cpi	r20, 0x04	; 4
     656:	29 f4       	brne	.+10     	; 0x662 <tinyLED_set_color_mode+0x1e>
	{
		tinyLED_flash_once_time[LED_id] = 1000*FLASH_TIME;
     658:	fc 01       	movw	r30, r24
     65a:	e7 5a       	subi	r30, 0xA7	; 167
     65c:	f7 4c       	sbci	r31, 0xC7	; 199
     65e:	28 ec       	ldi	r18, 0xC8	; 200
     660:	20 83       	st	Z, r18
     662:	08 95       	ret

00000664 <tinyLED_RGB_Color_Compare>:
	}
	return rgb_color;
			
};

_Bool tinyLED_RGB_Color_Compare(struct RGB_Color* a, struct RGB_Color* b){
     664:	dc 01       	movw	r26, r24
     666:	fb 01       	movw	r30, r22
	for (int i=0; i<NUMBER_OF_LEDS; i++)
	{
		if(!(a[i].red==b[i].red && a[i].green==b[i].green && a[i].blue==b[i].blue)){
     668:	9c 91       	ld	r25, X
     66a:	80 81       	ld	r24, Z
     66c:	98 13       	cpse	r25, r24
     66e:	20 c0       	rjmp	.+64     	; 0x6b0 <tinyLED_RGB_Color_Compare+0x4c>
     670:	11 96       	adiw	r26, 0x01	; 1
     672:	9c 91       	ld	r25, X
     674:	11 97       	sbiw	r26, 0x01	; 1
     676:	81 81       	ldd	r24, Z+1	; 0x01
     678:	98 13       	cpse	r25, r24
     67a:	1c c0       	rjmp	.+56     	; 0x6b4 <tinyLED_RGB_Color_Compare+0x50>
     67c:	12 96       	adiw	r26, 0x02	; 2
     67e:	9c 91       	ld	r25, X
     680:	12 97       	sbiw	r26, 0x02	; 2
     682:	82 81       	ldd	r24, Z+2	; 0x02
     684:	98 13       	cpse	r25, r24
     686:	18 c0       	rjmp	.+48     	; 0x6b8 <tinyLED_RGB_Color_Compare+0x54>
     688:	13 96       	adiw	r26, 0x03	; 3
     68a:	9c 91       	ld	r25, X
     68c:	13 97       	sbiw	r26, 0x03	; 3
     68e:	83 81       	ldd	r24, Z+3	; 0x03
     690:	98 13       	cpse	r25, r24
     692:	14 c0       	rjmp	.+40     	; 0x6bc <tinyLED_RGB_Color_Compare+0x58>
     694:	14 96       	adiw	r26, 0x04	; 4
     696:	9c 91       	ld	r25, X
     698:	14 97       	sbiw	r26, 0x04	; 4
     69a:	84 81       	ldd	r24, Z+4	; 0x04
     69c:	98 13       	cpse	r25, r24
     69e:	10 c0       	rjmp	.+32     	; 0x6c0 <tinyLED_RGB_Color_Compare+0x5c>
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	15 96       	adiw	r26, 0x05	; 5
     6a4:	2c 91       	ld	r18, X
     6a6:	95 81       	ldd	r25, Z+5	; 0x05
     6a8:	29 17       	cp	r18, r25
     6aa:	59 f0       	breq	.+22     	; 0x6c2 <tinyLED_RGB_Color_Compare+0x5e>
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	08 95       	ret
			return false;
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	08 95       	ret
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	08 95       	ret
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	08 95       	ret
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	08 95       	ret
     6c0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
     6c2:	08 95       	ret

000006c4 <tinyLED_update>:
/*
function to write the current LED-array on to the LEDs and
effectively update the values stored in the LEDs to the values stored in the MCU.
*/
void tinyLED_update(void)
{
     6c4:	2f 92       	push	r2
     6c6:	3f 92       	push	r3
     6c8:	4f 92       	push	r4
     6ca:	5f 92       	push	r5
     6cc:	6f 92       	push	r6
     6ce:	7f 92       	push	r7
     6d0:	8f 92       	push	r8
     6d2:	9f 92       	push	r9
     6d4:	af 92       	push	r10
     6d6:	bf 92       	push	r11
     6d8:	cf 92       	push	r12
     6da:	df 92       	push	r13
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	6e 97       	sbiw	r28, 0x1e	; 30
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	de bf       	out	0x3e, r29	; 62
			
	uint32_t now = tinyTime_now();
     6f2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <tinyTime_now>
     6f6:	6b 01       	movw	r12, r22
     6f8:	7c 01       	movw	r14, r24
	double sinValue = 1+sin((double)now/(100*M_PI/SWING_RATE));
     6fa:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     6fe:	23 e6       	ldi	r18, 0x63	; 99
     700:	34 e1       	ldi	r19, 0x14	; 20
     702:	4d e1       	ldi	r20, 0x1D	; 29
     704:	54 e4       	ldi	r21, 0x44	; 68
     706:	0e 94 37 08 	call	0x106e	; 0x106e <__divsf3>
     70a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <sin>
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	40 e8       	ldi	r20, 0x80	; 128
     714:	5f e3       	ldi	r21, 0x3F	; 63
     716:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__addsf3>
     71a:	69 87       	std	Y+9, r22	; 0x09
     71c:	7a 87       	std	Y+10, r23	; 0x0a
     71e:	8b 87       	std	Y+11, r24	; 0x0b
     720:	9c 87       	std	Y+12, r25	; 0x0c
	_Bool flash_on = now%(uint32_t)(1000/FLASH_RATE)   <   500/FLASH_RATE;
     722:	c7 01       	movw	r24, r14
     724:	b6 01       	movw	r22, r12
     726:	28 ee       	ldi	r18, 0xE8	; 232
     728:	33 e0       	ldi	r19, 0x03	; 3
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__udivmodsi4>
     732:	21 e0       	ldi	r18, 0x01	; 1
     734:	2f 83       	std	Y+7, r18	; 0x07
     736:	64 3f       	cpi	r22, 0xF4	; 244
     738:	71 40       	sbci	r23, 0x01	; 1
     73a:	81 05       	cpc	r24, r1
     73c:	91 05       	cpc	r25, r1
     73e:	08 f0       	brcs	.+2      	; 0x742 <tinyLED_update+0x7e>
     740:	1f 82       	std	Y+7, r1	; 0x07
	_Bool ping_on = now%(uint32_t)(1000/PING_RATE)   <   1000*FLASH_TIME;
     742:	c7 01       	movw	r24, r14
     744:	b6 01       	movw	r22, r12
     746:	20 e1       	ldi	r18, 0x10	; 16
     748:	37 e2       	ldi	r19, 0x27	; 39
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__udivmodsi4>
     752:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	48 e4       	ldi	r20, 0x48	; 72
     75c:	53 e4       	ldi	r21, 0x43	; 67
     75e:	0e 94 32 08 	call	0x1064	; 0x1064 <__cmpsf2>
     762:	88 1f       	adc	r24, r24
     764:	88 27       	eor	r24, r24
     766:	88 1f       	adc	r24, r24
     768:	01 e6       	ldi	r16, 0x61	; 97
     76a:	18 e3       	ldi	r17, 0x38	; 56
     76c:	de 01       	movw	r26, r28
     76e:	11 96       	adiw	r26, 0x01	; 1
     770:	0f 2e       	mov	r0, r31
     772:	f9 e5       	ldi	r31, 0x59	; 89
     774:	4f 2e       	mov	r4, r31
     776:	f8 e3       	ldi	r31, 0x38	; 56
     778:	5f 2e       	mov	r5, r31
     77a:	f0 2d       	mov	r31, r0
     77c:	0f 2e       	mov	r0, r31
     77e:	f5 e6       	ldi	r31, 0x65	; 101
     780:	6f 2e       	mov	r6, r31
     782:	f8 e3       	ldi	r31, 0x38	; 56
     784:	7f 2e       	mov	r7, r31
     786:	f0 2d       	mov	r31, r0
     788:	1d 01       	movw	r2, r26
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
				break;
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     78a:	88 2e       	mov	r8, r24
     78c:	91 2c       	mov	r9, r1
     78e:	a1 2c       	mov	r10, r1
     790:	b1 2c       	mov	r11, r1
     792:	ad 87       	std	Y+13, r26	; 0x0d
     794:	be 87       	std	Y+14, r27	; 0x0e
     796:	df 80       	ldd	r13, Y+7	; 0x07
     798:	f8 01       	movw	r30, r16
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
}

static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
     79a:	80 81       	ld	r24, Z
     79c:	82 30       	cpi	r24, 0x02	; 2
     79e:	a1 f0       	breq	.+40     	; 0x7c8 <tinyLED_update+0x104>
     7a0:	18 f4       	brcc	.+6      	; 0x7a8 <tinyLED_update+0xe4>
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	31 f0       	breq	.+12     	; 0x7b2 <tinyLED_update+0xee>
     7a6:	21 c0       	rjmp	.+66     	; 0x7ea <tinyLED_update+0x126>
     7a8:	83 30       	cpi	r24, 0x03	; 3
     7aa:	39 f0       	breq	.+14     	; 0x7ba <tinyLED_update+0xf6>
     7ac:	84 30       	cpi	r24, 0x04	; 4
     7ae:	99 f0       	breq	.+38     	; 0x7d6 <tinyLED_update+0x112>
     7b0:	1c c0       	rjmp	.+56     	; 0x7ea <tinyLED_update+0x126>
	{
		case OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
			break;
		case RED:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 0, 0};
     7b2:	f1 2c       	mov	r15, r1
     7b4:	e1 2c       	mov	r14, r1
     7b6:	69 e1       	ldi	r22, 0x19	; 25
     7b8:	1b c0       	rjmp	.+54     	; 0x7f0 <tinyLED_update+0x12c>
			break;
		case GREEN:
			rgb_color = (struct RGB_Color){0, 255*LED_BRIGHTNESS, 0};
     7ba:	f1 2c       	mov	r15, r1
     7bc:	0f 2e       	mov	r0, r31
     7be:	f9 e1       	ldi	r31, 0x19	; 25
     7c0:	ef 2e       	mov	r14, r31
     7c2:	f0 2d       	mov	r31, r0
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	14 c0       	rjmp	.+40     	; 0x7f0 <tinyLED_update+0x12c>
			break;
		case BLUE:
			rgb_color = (struct RGB_Color){0, 0, 255*LED_BRIGHTNESS};
     7c8:	0f 2e       	mov	r0, r31
     7ca:	f9 e1       	ldi	r31, 0x19	; 25
     7cc:	ff 2e       	mov	r15, r31
     7ce:	f0 2d       	mov	r31, r0
     7d0:	e1 2c       	mov	r14, r1
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	0d c0       	rjmp	.+26     	; 0x7f0 <tinyLED_update+0x12c>
			// Should the /3 be there? This requires testing.
			// After testing, findings were that at 0.1 brightness, one would see the three LEDs instead of one white led
			// We try with /2 instead.
			// We find that the best results come from not dividing by anything. At leasts in the lower brightness settings, and that
			// is where we suspect it will be most of the time.
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS};
     7d6:	0f 2e       	mov	r0, r31
     7d8:	f9 e1       	ldi	r31, 0x19	; 25
     7da:	ff 2e       	mov	r15, r31
     7dc:	f0 2d       	mov	r31, r0
     7de:	0f 2e       	mov	r0, r31
     7e0:	f9 e1       	ldi	r31, 0x19	; 25
     7e2:	ef 2e       	mov	r14, r31
     7e4:	f0 2d       	mov	r31, r0
     7e6:	69 e1       	ldi	r22, 0x19	; 25
     7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <tinyLED_update+0x12c>
static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
	{
		case OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
     7ea:	f1 2c       	mov	r15, r1
     7ec:	e1 2c       	mov	r14, r1
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	2f 82       	std	Y+7, r2	; 0x07
     7f2:	38 86       	std	Y+8, r3	; 0x08
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
	{		
		// Convert enum to RGB_Color
		rgb_colors[i] = tinyLED_enum_to_RGB_Color(tinyLED_colors[i].color);
     7f4:	d1 01       	movw	r26, r2
     7f6:	6c 93       	st	X, r22
     7f8:	11 96       	adiw	r26, 0x01	; 1
     7fa:	ec 92       	st	X, r14
     7fc:	11 97       	sbiw	r26, 0x01	; 1
     7fe:	12 96       	adiw	r26, 0x02	; 2
     800:	fc 92       	st	X, r15
			
		// Adjust colors according to mode
		switch(tinyLED_colors[i].mode)
     802:	81 81       	ldd	r24, Z+1	; 0x01
     804:	82 30       	cpi	r24, 0x02	; 2
     806:	d1 f0       	breq	.+52     	; 0x83c <tinyLED_update+0x178>
     808:	18 f4       	brcc	.+6      	; 0x810 <tinyLED_update+0x14c>
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	41 f0       	breq	.+16     	; 0x81e <tinyLED_update+0x15a>
     80e:	cd c0       	rjmp	.+410    	; 0x9aa <tinyLED_update+0x2e6>
     810:	83 30       	cpi	r24, 0x03	; 3
     812:	09 f4       	brne	.+2      	; 0x816 <tinyLED_update+0x152>
     814:	44 c0       	rjmp	.+136    	; 0x89e <tinyLED_update+0x1da>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	09 f4       	brne	.+2      	; 0x81c <tinyLED_update+0x158>
     81a:	bf c0       	rjmp	.+382    	; 0x99a <tinyLED_update+0x2d6>
     81c:	c6 c0       	rjmp	.+396    	; 0x9aa <tinyLED_update+0x2e6>
		{
			case STABLE:
				break;
			case FLASH:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*flash_on, rgb_colors[i].green*flash_on, rgb_colors[i].blue*flash_on};
     81e:	d6 9e       	mul	r13, r22
     820:	60 2d       	mov	r22, r0
     822:	11 24       	eor	r1, r1
     824:	ef 81       	ldd	r30, Y+7	; 0x07
     826:	f8 85       	ldd	r31, Y+8	; 0x08
     828:	60 83       	st	Z, r22
     82a:	de 9c       	mul	r13, r14
     82c:	e0 2c       	mov	r14, r0
     82e:	11 24       	eor	r1, r1
     830:	e1 82       	std	Z+1, r14	; 0x01
     832:	df 9c       	mul	r13, r15
     834:	f0 2c       	mov	r15, r0
     836:	11 24       	eor	r1, r1
     838:	f2 82       	std	Z+2, r15	; 0x02
				break;
     83a:	b7 c0       	rjmp	.+366    	; 0x9aa <tinyLED_update+0x2e6>
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 14 09 	call	0x1228	; 0x1228 <__floatsisf>
     846:	29 85       	ldd	r18, Y+9	; 0x09
     848:	3a 85       	ldd	r19, Y+10	; 0x0a
     84a:	4b 85       	ldd	r20, Y+11	; 0x0b
     84c:	5c 85       	ldd	r21, Y+12	; 0x0c
     84e:	0e 94 85 0a 	call	0x150a	; 0x150a <__mulsf3>
     852:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fixunssfsi>
     856:	d1 01       	movw	r26, r2
     858:	6c 93       	st	X, r22
     85a:	6e 2d       	mov	r22, r14
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 14 09 	call	0x1228	; 0x1228 <__floatsisf>
     866:	29 85       	ldd	r18, Y+9	; 0x09
     868:	3a 85       	ldd	r19, Y+10	; 0x0a
     86a:	4b 85       	ldd	r20, Y+11	; 0x0b
     86c:	5c 85       	ldd	r21, Y+12	; 0x0c
     86e:	0e 94 85 0a 	call	0x150a	; 0x150a <__mulsf3>
     872:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fixunssfsi>
     876:	f1 01       	movw	r30, r2
     878:	61 83       	std	Z+1, r22	; 0x01
     87a:	6f 2d       	mov	r22, r15
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 14 09 	call	0x1228	; 0x1228 <__floatsisf>
     886:	29 85       	ldd	r18, Y+9	; 0x09
     888:	3a 85       	ldd	r19, Y+10	; 0x0a
     88a:	4b 85       	ldd	r20, Y+11	; 0x0b
     88c:	5c 85       	ldd	r21, Y+12	; 0x0c
     88e:	0e 94 85 0a 	call	0x150a	; 0x150a <__mulsf3>
     892:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fixunssfsi>
     896:	d1 01       	movw	r26, r2
     898:	12 96       	adiw	r26, 0x02	; 2
     89a:	6c 93       	st	X, r22
				break;
     89c:	86 c0       	rjmp	.+268    	; 0x9aa <tinyLED_update+0x2e6>
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     8a8:	9b 01       	movw	r18, r22
     8aa:	ac 01       	movw	r20, r24
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	80 e8       	ldi	r24, 0x80	; 128
     8b2:	9f e3       	ldi	r25, 0x3F	; 63
     8b4:	0e 94 4f 09 	call	0x129e	; 0x129e <fmin>
     8b8:	6b 8b       	std	Y+19, r22	; 0x13
     8ba:	7c 8b       	std	Y+20, r23	; 0x14
     8bc:	8d 8b       	std	Y+21, r24	; 0x15
     8be:	9e 8b       	std	Y+22, r25	; 0x16
     8c0:	c5 01       	movw	r24, r10
     8c2:	b4 01       	movw	r22, r8
     8c4:	0e 94 14 09 	call	0x1228	; 0x1228 <__floatsisf>
     8c8:	6f 87       	std	Y+15, r22	; 0x0f
     8ca:	78 8b       	std	Y+16, r23	; 0x10
     8cc:	89 8b       	std	Y+17, r24	; 0x11
     8ce:	9a 8b       	std	Y+18, r25	; 0x12
     8d0:	6e 2d       	mov	r22, r14
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     8dc:	9b 01       	movw	r18, r22
     8de:	ac 01       	movw	r20, r24
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e8       	ldi	r24, 0x80	; 128
     8e6:	9f e3       	ldi	r25, 0x3F	; 63
     8e8:	0e 94 4f 09 	call	0x129e	; 0x129e <fmin>
     8ec:	6f 8b       	std	Y+23, r22	; 0x17
     8ee:	78 8f       	std	Y+24, r23	; 0x18
     8f0:	89 8f       	std	Y+25, r24	; 0x19
     8f2:	9a 8f       	std	Y+26, r25	; 0x1a
     8f4:	6f 2d       	mov	r22, r15
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     900:	9b 01       	movw	r18, r22
     902:	ac 01       	movw	r20, r24
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	80 e8       	ldi	r24, 0x80	; 128
     90a:	9f e3       	ldi	r25, 0x3F	; 63
     90c:	0e 94 4f 09 	call	0x129e	; 0x129e <fmin>
     910:	6b 8f       	std	Y+27, r22	; 0x1b
     912:	7c 8f       	std	Y+28, r23	; 0x1c
     914:	8d 8f       	std	Y+29, r24	; 0x1d
     916:	9e 8f       	std	Y+30, r25	; 0x1e
     918:	23 e3       	ldi	r18, 0x33	; 51
     91a:	33 e3       	ldi	r19, 0x33	; 51
     91c:	43 ea       	ldi	r20, 0xA3	; 163
     91e:	50 e4       	ldi	r21, 0x40	; 64
     920:	6b 89       	ldd	r22, Y+19	; 0x13
     922:	7c 89       	ldd	r23, Y+20	; 0x14
     924:	8d 89       	ldd	r24, Y+21	; 0x15
     926:	9e 89       	ldd	r25, Y+22	; 0x16
     928:	0e 94 85 0a 	call	0x150a	; 0x150a <__mulsf3>
     92c:	2f 85       	ldd	r18, Y+15	; 0x0f
     92e:	38 89       	ldd	r19, Y+16	; 0x10
     930:	49 89       	ldd	r20, Y+17	; 0x11
     932:	5a 89       	ldd	r21, Y+18	; 0x12
     934:	0e 94 85 0a 	call	0x150a	; 0x150a <__mulsf3>
     938:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fixunssfsi>
     93c:	ef 81       	ldd	r30, Y+7	; 0x07
     93e:	f8 85       	ldd	r31, Y+8	; 0x08
     940:	60 83       	st	Z, r22
     942:	23 e3       	ldi	r18, 0x33	; 51
     944:	33 e3       	ldi	r19, 0x33	; 51
     946:	43 ea       	ldi	r20, 0xA3	; 163
     948:	50 e4       	ldi	r21, 0x40	; 64
     94a:	6f 89       	ldd	r22, Y+23	; 0x17
     94c:	78 8d       	ldd	r23, Y+24	; 0x18
     94e:	89 8d       	ldd	r24, Y+25	; 0x19
     950:	9a 8d       	ldd	r25, Y+26	; 0x1a
     952:	0e 94 85 0a 	call	0x150a	; 0x150a <__mulsf3>
     956:	2f 85       	ldd	r18, Y+15	; 0x0f
     958:	38 89       	ldd	r19, Y+16	; 0x10
     95a:	49 89       	ldd	r20, Y+17	; 0x11
     95c:	5a 89       	ldd	r21, Y+18	; 0x12
     95e:	0e 94 85 0a 	call	0x150a	; 0x150a <__mulsf3>
     962:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fixunssfsi>
     966:	af 81       	ldd	r26, Y+7	; 0x07
     968:	b8 85       	ldd	r27, Y+8	; 0x08
     96a:	11 96       	adiw	r26, 0x01	; 1
     96c:	6c 93       	st	X, r22
     96e:	23 e3       	ldi	r18, 0x33	; 51
     970:	33 e3       	ldi	r19, 0x33	; 51
     972:	43 ea       	ldi	r20, 0xA3	; 163
     974:	50 e4       	ldi	r21, 0x40	; 64
     976:	6b 8d       	ldd	r22, Y+27	; 0x1b
     978:	7c 8d       	ldd	r23, Y+28	; 0x1c
     97a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     97c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     97e:	0e 94 85 0a 	call	0x150a	; 0x150a <__mulsf3>
     982:	2f 85       	ldd	r18, Y+15	; 0x0f
     984:	38 89       	ldd	r19, Y+16	; 0x10
     986:	49 89       	ldd	r20, Y+17	; 0x11
     988:	5a 89       	ldd	r21, Y+18	; 0x12
     98a:	0e 94 85 0a 	call	0x150a	; 0x150a <__mulsf3>
     98e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fixunssfsi>
     992:	ef 81       	ldd	r30, Y+7	; 0x07
     994:	f8 85       	ldd	r31, Y+8	; 0x08
     996:	62 83       	std	Z+2, r22	; 0x02
				break;
     998:	08 c0       	rjmp	.+16     	; 0x9aa <tinyLED_update+0x2e6>
			case FLASH_ONCE:
				if(tinyLED_flash_once_time[i]>0){
     99a:	d2 01       	movw	r26, r4
     99c:	8c 91       	ld	r24, X
     99e:	88 23       	and	r24, r24
     9a0:	19 f0       	breq	.+6      	; 0x9a8 <tinyLED_update+0x2e4>
					rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red, rgb_colors[i].green, rgb_colors[i].blue};
					tinyLED_flash_once_time[i]--;
     9a2:	81 50       	subi	r24, 0x01	; 1
     9a4:	8c 93       	st	X, r24
     9a6:	01 c0       	rjmp	.+2      	; 0x9aa <tinyLED_update+0x2e6>
				}
				else{
					tinyLED_colors[i].color = OFF;
     9a8:	10 82       	st	Z, r1
     9aa:	0e 5f       	subi	r16, 0xFE	; 254
     9ac:	1f 4f       	sbci	r17, 0xFF	; 255
     9ae:	b3 e0       	ldi	r27, 0x03	; 3
     9b0:	2b 0e       	add	r2, r27
     9b2:	31 1c       	adc	r3, r1
     9b4:	ef ef       	ldi	r30, 0xFF	; 255
     9b6:	4e 1a       	sub	r4, r30
     9b8:	5e 0a       	sbc	r5, r30
	_Bool flash_on = now%(uint32_t)(1000/FLASH_RATE)   <   500/FLASH_RATE;
	_Bool ping_on = now%(uint32_t)(1000/PING_RATE)   <   1000*FLASH_TIME;
	struct RGB_Color rgb_colors[NUMBER_OF_LEDS];
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
     9ba:	06 15       	cp	r16, r6
     9bc:	17 05       	cpc	r17, r7
     9be:	09 f0       	breq	.+2      	; 0x9c2 <tinyLED_update+0x2fe>
     9c0:	eb ce       	rjmp	.-554    	; 0x798 <tinyLED_update+0xd4>
     9c2:	cd 84       	ldd	r12, Y+13	; 0x0d
     9c4:	de 84       	ldd	r13, Y+14	; 0x0e
				break;
			default:
				break;
		}
	}
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
     9c6:	6b e5       	ldi	r22, 0x5B	; 91
     9c8:	78 e3       	ldi	r23, 0x38	; 56
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	0e 94 32 03 	call	0x664	; 0x664 <tinyLED_RGB_Color_Compare>
     9d2:	81 11       	cpse	r24, r1
     9d4:	21 c0       	rjmp	.+66     	; 0xa18 <tinyLED_update+0x354>
     9d6:	0b e5       	ldi	r16, 0x5B	; 91
     9d8:	18 e3       	ldi	r17, 0x38	; 56
     9da:	7e 01       	movw	r14, r28
     9dc:	f7 e0       	ldi	r31, 0x07	; 7
     9de:	ef 0e       	add	r14, r31
     9e0:	f1 1c       	adc	r15, r1
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
		{
			// Write to LEDs
			//For some reason unknown to the writer the data-bus to the LEDs is serialized as GRB
			//which means the 24-bit data-bus will look like [Green[0:7], Red[0:7], Blue[0:7]]
			tinyLED_SPIWriteByte(rgb_colors[i].green);
     9e2:	d6 01       	movw	r26, r12
     9e4:	11 96       	adiw	r26, 0x01	; 1
     9e6:	8c 91       	ld	r24, X
     9e8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].red);
     9ec:	f6 01       	movw	r30, r12
     9ee:	80 81       	ld	r24, Z
     9f0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
     9f4:	d6 01       	movw	r26, r12
     9f6:	12 96       	adiw	r26, 0x02	; 2
     9f8:	8c 91       	ld	r24, X
     9fa:	0e 94 fd 02 	call	0x5fa	; 0x5fa <tinyLED_SPIWriteByte>
			tinyLED_old_colors[i] = rgb_colors[i];
     9fe:	f6 01       	movw	r30, r12
     a00:	81 91       	ld	r24, Z+
     a02:	91 91       	ld	r25, Z+
     a04:	a1 91       	ld	r26, Z+
     a06:	6f 01       	movw	r12, r30
     a08:	f8 01       	movw	r30, r16
     a0a:	81 93       	st	Z+, r24
     a0c:	91 93       	st	Z+, r25
     a0e:	a1 93       	st	Z+, r26
     a10:	8f 01       	movw	r16, r30
			default:
				break;
		}
	}
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
     a12:	ce 14       	cp	r12, r14
     a14:	df 04       	cpc	r13, r15
     a16:	29 f7       	brne	.-54     	; 0x9e2 <tinyLED_update+0x31e>
			tinyLED_SPIWriteByte(rgb_colors[i].red);
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
			tinyLED_old_colors[i] = rgb_colors[i];
		}
	}
}
     a18:	6e 96       	adiw	r28, 0x1e	; 30
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	df 90       	pop	r13
     a2c:	cf 90       	pop	r12
     a2e:	bf 90       	pop	r11
     a30:	af 90       	pop	r10
     a32:	9f 90       	pop	r9
     a34:	8f 90       	pop	r8
     a36:	7f 90       	pop	r7
     a38:	6f 90       	pop	r6
     a3a:	5f 90       	pop	r5
     a3c:	4f 90       	pop	r4
     a3e:	3f 90       	pop	r3
     a40:	2f 90       	pop	r2
     a42:	08 95       	ret

00000a44 <tinyAxon_add_pulse>:
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
	{
		if(pulse_queue[i] == 0){
     a44:	20 91 29 38 	lds	r18, 0x3829	; 0x803829 <pulse_queue>
     a48:	30 91 2a 38 	lds	r19, 0x382A	; 0x80382a <pulse_queue+0x1>
     a4c:	23 2b       	or	r18, r19
     a4e:	51 f0       	breq	.+20     	; 0xa64 <tinyAxon_add_pulse+0x20>
     a50:	eb e2       	ldi	r30, 0x2B	; 43
     a52:	f8 e3       	ldi	r31, 0x38	; 56
     a54:	21 e0       	ldi	r18, 0x01	; 1
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	b9 01       	movw	r22, r18
     a5a:	41 91       	ld	r20, Z+
     a5c:	51 91       	ld	r21, Z+
     a5e:	45 2b       	or	r20, r21
     a60:	81 f4       	brne	.+32     	; 0xa82 <tinyAxon_add_pulse+0x3e>
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <tinyAxon_add_pulse+0x24>
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
			pulse_queue[i] = new_pulse;
     a68:	66 0f       	add	r22, r22
     a6a:	77 1f       	adc	r23, r23
     a6c:	fb 01       	movw	r30, r22
     a6e:	e7 5d       	subi	r30, 0xD7	; 215
     a70:	f7 4c       	sbci	r31, 0xC7	; 199
     a72:	80 83       	st	Z, r24
     a74:	91 83       	std	Z+1, r25	; 0x01
			pulses_in_queue++;
     a76:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <pulses_in_queue>
     a7a:	8f 5f       	subi	r24, 0xFF	; 255
     a7c:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <pulses_in_queue>
			// We return so we only ever add one
			break;
     a80:	08 95       	ret
     a82:	2f 5f       	subi	r18, 0xFF	; 255
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
*/
static void tinyAxon_add_pulse(uint16_t new_pulse)
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     a86:	2a 30       	cpi	r18, 0x0A	; 10
     a88:	31 05       	cpc	r19, r1
     a8a:	31 f7       	brne	.-52     	; 0xa58 <tinyAxon_add_pulse+0x14>
     a8c:	08 95       	ret

00000a8e <find_newest_pulse>:
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
     a8e:	40 91 29 38 	lds	r20, 0x3829	; 0x803829 <pulse_queue>
     a92:	50 91 2a 38 	lds	r21, 0x382A	; 0x80382a <pulse_queue+0x1>
     a96:	eb e2       	ldi	r30, 0x2B	; 43
     a98:	f8 e3       	ldi	r31, 0x38	; 56
	
// This function will be used with pulse_queue to find the newest pulse
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
     a9a:	80 e0       	ldi	r24, 0x00	; 0
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     a9c:	91 e0       	ldi	r25, 0x01	; 1
		if (pulse_queue[current_index] > max) {
     a9e:	21 91       	ld	r18, Z+
     aa0:	31 91       	ld	r19, Z+
     aa2:	42 17       	cp	r20, r18
     aa4:	53 07       	cpc	r21, r19
     aa6:	10 f4       	brcc	.+4      	; 0xaac <find_newest_pulse+0x1e>
     aa8:	89 2f       	mov	r24, r25
			return_index = current_index;
			max = pulse_queue[current_index];
     aaa:	a9 01       	movw	r20, r18
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     aac:	9f 5f       	subi	r25, 0xFF	; 255
     aae:	9a 30       	cpi	r25, 0x0A	; 10
     ab0:	b1 f7       	brne	.-20     	; 0xa9e <find_newest_pulse+0x10>
			return_index = current_index;
			max = pulse_queue[current_index];
		}
	}
	return return_index;
}
     ab2:	08 95       	ret

00000ab4 <tinyAxon_remove_pulse>:

/*
If the potential is very low, we want to try to remove a pulse.
*/
bool tinyAxon_remove_pulse(void)
{
     ab4:	cf 93       	push	r28
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
     ab6:	c0 91 3d 38 	lds	r28, 0x383D	; 0x80383d <pulses_in_queue>
     aba:	cc 23       	and	r28, r28
     abc:	c9 f0       	breq	.+50     	; 0xaf0 <tinyAxon_remove_pulse+0x3c>
		//There was no pulse to remove.
		return false;
	}
	else{
		// If we are to remove a pulse, we want to remove the one that will fire last.
		uint8_t pulse_index = find_newest_pulse();
     abe:	0e 94 47 05 	call	0xa8e	; 0xa8e <find_newest_pulse>
		uint16_t newest_pulse = pulse_queue[pulse_index];
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	fc 01       	movw	r30, r24
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	e7 5d       	subi	r30, 0xD7	; 215
     acc:	f7 4c       	sbci	r31, 0xC7	; 199
	
		// Now we want to check if the pulse is too far away to be affected by the low potential, or close enough that we decide to remove it.
		// (When we say that the pulse is too far away, it refers to the biological process of how the potential spreads from Dendrites to axon).
		if(newest_pulse > PULSE_NO_RETURN_TIME){
     ace:	20 81       	ld	r18, Z
     ad0:	31 81       	ldd	r19, Z+1	; 0x01
     ad2:	2d 33       	cpi	r18, 0x3D	; 61
     ad4:	31 05       	cpc	r19, r1
     ad6:	70 f0       	brcs	.+28     	; 0xaf4 <tinyAxon_remove_pulse+0x40>
			// We decided to remove the pulse
			pulse_queue[pulse_index] = 0;
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	fc 01       	movw	r30, r24
     ade:	e7 5d       	subi	r30, 0xD7	; 215
     ae0:	f7 4c       	sbci	r31, 0xC7	; 199
     ae2:	10 82       	st	Z, r1
     ae4:	11 82       	std	Z+1, r1	; 0x01
			pulses_in_queue--;
     ae6:	c1 50       	subi	r28, 0x01	; 1
     ae8:	c0 93 3d 38 	sts	0x383D, r28	; 0x80383d <pulses_in_queue>
			return true;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <tinyAxon_remove_pulse+0x42>
bool tinyAxon_remove_pulse(void)
{
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
		//There was no pulse to remove.
		return false;
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	01 c0       	rjmp	.+2      	; 0xaf6 <tinyAxon_remove_pulse+0x42>
			pulses_in_queue--;
			return true;
		}
		// Here we have found that there is a pulse queued, but it is old enough to let pass anyway, so now we need to put it back into the queue.
		else{
			return false;
     af4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     af6:	cf 91       	pop	r28
     af8:	08 95       	ret

00000afa <tinyAxon_update_potential>:
/*
Decides whether or not the axon should fire
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
     afa:	cf 92       	push	r12
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	6b 01       	movw	r12, r22
     b04:	7c 01       	movw	r14, r24
	//While the neuron has enough potential to fire, we want to fire more
	while (potential > THRESHOLD_POTENTIAL)
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	48 ec       	ldi	r20, 0xC8	; 200
     b0c:	51 e4       	ldi	r21, 0x41	; 65
     b0e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__gesf2>
     b12:	18 16       	cp	r1, r24
     b14:	bc f5       	brge	.+110    	; 0xb84 <tinyAxon_update_potential+0x8a>
	{
		// We have to check if there are already queued pulses, so that the frequency never exceeds FIRE_DELAY
		if(pulses_in_queue>0){
     b16:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <pulses_in_queue>
     b1a:	88 23       	and	r24, r24
     b1c:	b1 f0       	breq	.+44     	; 0xb4a <tinyAxon_update_potential+0x50>
			uint16_t newest_pulse = pulse_queue[find_newest_pulse()];
     b1e:	0e 94 47 05 	call	0xa8e	; 0xa8e <find_newest_pulse>
     b22:	e8 2f       	mov	r30, r24
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	ee 0f       	add	r30, r30
     b28:	ff 1f       	adc	r31, r31
     b2a:	e7 5d       	subi	r30, 0xD7	; 215
     b2c:	f7 4c       	sbci	r31, 0xC7	; 199
			
			// There is at least one pulse in the queue, and it is so close, that we need to offset the new pulse, so that we keep at least
			// one FIRE_DELAY between each pulse
			if(newest_pulse + FIRE_DELAY > TRAVLE_DELAY){
     b2e:	80 81       	ld	r24, Z
     b30:	91 81       	ldd	r25, Z+1	; 0x01
     b32:	c2 96       	adiw	r24, 0x32	; 50
     b34:	85 36       	cpi	r24, 0x65	; 101
     b36:	91 05       	cpc	r25, r1
     b38:	18 f0       	brcs	.+6      	; 0xb40 <tinyAxon_update_potential+0x46>
				tinyAxon_add_pulse(newest_pulse + FIRE_DELAY);
     b3a:	0e 94 22 05 	call	0xa44	; 0xa44 <tinyAxon_add_pulse>
     b3e:	09 c0       	rjmp	.+18     	; 0xb52 <tinyAxon_update_potential+0x58>
			}
			// There is at least one pulse in the queue, but it's far enough away to ignore
			else{
				tinyAxon_add_pulse(TRAVLE_DELAY);
     b40:	84 e6       	ldi	r24, 0x64	; 100
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 22 05 	call	0xa44	; 0xa44 <tinyAxon_add_pulse>
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <tinyAxon_update_potential+0x58>
			}
		}
		// There are no pulses in the queue, so we add a pulse as normal
		else{
			tinyAxon_add_pulse(TRAVLE_DELAY);		
     b4a:	84 e6       	ldi	r24, 0x64	; 100
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 22 05 	call	0xa44	; 0xa44 <tinyAxon_add_pulse>
		}
		
		potential += POSTFIRE_POTENTIAL_REACTION; // This is usually defined as a negative value, don't be confused by the +=
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	40 ef       	ldi	r20, 0xF0	; 240
     b58:	51 e4       	ldi	r21, 0x41	; 65
     b5a:	c7 01       	movw	r24, r14
     b5c:	b6 01       	movw	r22, r12
     b5e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__subsf3>
     b62:	6b 01       	movw	r12, r22
     b64:	7c 01       	movw	r14, r24
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     b66:	44 e0       	ldi	r20, 0x04	; 4
     b68:	63 e0       	ldi	r22, 0x03	; 3
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	0e 94 22 03 	call	0x644	; 0x644 <tinyLED_set_color_mode>
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
	//While the neuron has enough potential to fire, we want to fire more
	while (potential > THRESHOLD_POTENTIAL)
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	48 ec       	ldi	r20, 0xC8	; 200
     b76:	51 e4       	ldi	r21, 0x41	; 65
     b78:	c7 01       	movw	r24, r14
     b7a:	b6 01       	movw	r22, r12
     b7c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__gesf2>
     b80:	18 16       	cp	r1, r24
     b82:	4c f2       	brlt	.-110    	; 0xb16 <tinyAxon_update_potential+0x1c>
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
	}
	
	// If the neuron has a very low potential, we want to remove a pulse from the queue (if there is one)
	if(potential < -THRESHOLD_POTENTIAL && pulses_in_queue > 0) // Perhaps this should be a separate variable? For now, we will just simply use -THRESHOLD_POTENTIAL
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	48 ec       	ldi	r20, 0xC8	; 200
     b8a:	51 ec       	ldi	r21, 0xC1	; 193
     b8c:	c7 01       	movw	r24, r14
     b8e:	b6 01       	movw	r22, r12
     b90:	0e 94 32 08 	call	0x1064	; 0x1064 <__cmpsf2>
     b94:	88 23       	and	r24, r24
     b96:	0c f0       	brlt	.+2      	; 0xb9a <tinyAxon_update_potential+0xa0>
     b98:	4b c0       	rjmp	.+150    	; 0xc30 <tinyAxon_update_potential+0x136>
     b9a:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <pulses_in_queue>
     b9e:	88 23       	and	r24, r24
     ba0:	19 f1       	breq	.+70     	; 0xbe8 <tinyAxon_update_potential+0xee>
	{
		// The neurons potential is low enough to attempt to remove a queued fire (Fire less)
		if(tinyAxon_remove_pulse())
     ba2:	0e 94 5a 05 	call	0xab4	; 0xab4 <tinyAxon_remove_pulse>
     ba6:	88 23       	and	r24, r24
     ba8:	09 f4       	brne	.+2      	; 0xbac <tinyAxon_update_potential+0xb2>
     baa:	42 c0       	rjmp	.+132    	; 0xc30 <tinyAxon_update_potential+0x136>
		{
			// The potential has evened out a bit
			potential += THRESHOLD_POTENTIAL;
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	48 ec       	ldi	r20, 0xC8	; 200
     bb2:	51 e4       	ldi	r21, 0x41	; 65
     bb4:	c7 01       	movw	r24, r14
     bb6:	b6 01       	movw	r22, r12
     bb8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__addsf3>
     bbc:	6b 01       	movw	r12, r22
     bbe:	7c 01       	movw	r14, r24
     bc0:	37 c0       	rjmp	.+110    	; 0xc30 <tinyAxon_update_potential+0x136>
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
		{
			if(pulse_queue[i] != 0){
     bc2:	80 81       	ld	r24, Z
     bc4:	91 81       	ldd	r25, Z+1	; 0x01
     bc6:	00 97       	sbiw	r24, 0x00	; 0
     bc8:	39 f0       	breq	.+14     	; 0xbd8 <tinyAxon_update_potential+0xde>
				pulse_queue[i]--;
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	80 83       	st	Z, r24
     bce:	91 83       	std	Z+1, r25	; 0x01
				
				// If the time went from 1 to 0, we fire the axon
				if(pulse_queue[i] == 0){
     bd0:	89 2b       	or	r24, r25
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <tinyAxon_update_potential+0xde>
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
	pulses_in_queue--;
     bd4:	41 50       	subi	r20, 0x01	; 1
Function to set firing.
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
     bd6:	51 e0       	ldi	r21, 0x01	; 1
     bd8:	32 96       	adiw	r30, 0x02	; 2
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     bda:	e2 17       	cp	r30, r18
     bdc:	f3 07       	cpc	r31, r19
     bde:	89 f7       	brne	.-30     	; 0xbc2 <tinyAxon_update_potential+0xc8>
     be0:	50 93 3e 38 	sts	0x383E, r21	; 0x80383e <tinyAxon_should_fire>
     be4:	40 93 3d 38 	sts	0x383D, r20	; 0x80383d <pulses_in_queue>
The function should set the DAC to fire for two
update cycles once the pulse flag is set high.
*/
static void tinyAxon_update_pulse_transmitter(void)
{
	if (tinyAxon_should_fire)
     be8:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <tinyAxon_should_fire>
     bec:	88 23       	and	r24, r24
     bee:	91 f0       	breq	.+36     	; 0xc14 <tinyAxon_update_potential+0x11a>
	{
		tinyAxon_should_fire = false;
     bf0:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <tinyAxon_should_fire>
		tinyAxon_has_fired = true;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <tinyAxon_has_fired>
*/
static void tinyAxon_start_sending_pulse()
{
	if (NEURONTYPE == EXCITATORY_NEURON)
	{
		DAC_set_output(EXCITATORY_NEURON_OUTPUT);
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 c7 00 	call	0x18e	; 0x18e <DAC_set_output>
		axonOutputValue=EXCITATORY_NEURON_OUTPUT;
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <axonOutputValue>
	{
		DAC_set_output(INHIBITORY_NEURON_OUTPUT);
		axonOutputValue=INHIBITORY_NEURON_OUTPUT;
	}
	
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
     c08:	44 e0       	ldi	r20, 0x04	; 4
     c0a:	64 e0       	ldi	r22, 0x04	; 4
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	0e 94 22 03 	call	0x644	; 0x644 <tinyLED_set_color_mode>
     c12:	19 c0       	rjmp	.+50     	; 0xc46 <tinyAxon_update_potential+0x14c>
		tinyAxon_should_fire = false;
		tinyAxon_has_fired = true;
		
		tinyAxon_start_sending_pulse();
	}
	else if (tinyAxon_has_fired)
     c14:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <tinyAxon_has_fired>
     c18:	88 23       	and	r24, r24
     c1a:	19 f0       	breq	.+6      	; 0xc22 <tinyAxon_update_potential+0x128>
	{
		tinyAxon_has_fired = false;
     c1c:	10 92 3f 38 	sts	0x383F, r1	; 0x80383f <tinyAxon_has_fired>
     c20:	12 c0       	rjmp	.+36     	; 0xc46 <tinyAxon_update_potential+0x14c>
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
}

static void tinyAxon_stop_sending_pulse()
{
	DAC_set_output(NO_SIGNAL_OUTPUT);
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 c7 00 	call	0x18e	; 0x18e <DAC_set_output>
	axonOutputValue=NO_SIGNAL_OUTPUT;
     c2a:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <axonOutputValue>
     c2e:	0b c0       	rjmp	.+22     	; 0xc46 <tinyAxon_update_potential+0x14c>
			potential += THRESHOLD_POTENTIAL;
		}
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
     c30:	40 91 3d 38 	lds	r20, 0x383D	; 0x80383d <pulses_in_queue>
     c34:	44 23       	and	r20, r20
     c36:	c1 f2       	breq	.-80     	; 0xbe8 <tinyAxon_update_potential+0xee>
     c38:	50 91 3e 38 	lds	r21, 0x383E	; 0x80383e <tinyAxon_should_fire>
     c3c:	e9 e2       	ldi	r30, 0x29	; 41
     c3e:	f8 e3       	ldi	r31, 0x38	; 56
     c40:	2d e3       	ldi	r18, 0x3D	; 61
     c42:	38 e3       	ldi	r19, 0x38	; 56
     c44:	be cf       	rjmp	.-132    	; 0xbc2 <tinyAxon_update_potential+0xc8>
	}
	
	// Here we set the actual output of the DAC (Digital to Analog Converter)
	tinyAxon_update_pulse_transmitter();
	
	tinyDebugger_send_uint8("Axon", axonOutputValue);
     c46:	60 91 28 38 	lds	r22, 0x3828	; 0x803828 <axonOutputValue>
     c4a:	83 e0       	ldi	r24, 0x03	; 3
     c4c:	97 e9       	ldi	r25, 0x97	; 151
     c4e:	0e 94 03 02 	call	0x406	; 0x406 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("Pulses", pulses_in_queue);
     c52:	60 91 3d 38 	lds	r22, 0x383D	; 0x80383d <pulses_in_queue>
     c56:	88 e0       	ldi	r24, 0x08	; 8
     c58:	97 e9       	ldi	r25, 0x97	; 151
     c5a:	0e 94 03 02 	call	0x406	; 0x406 <tinyDebugger_send_uint8>
	
	return potential;
}
     c5e:	c7 01       	movw	r24, r14
     c60:	b6 01       	movw	r22, r12
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	df 90       	pop	r13
     c68:	cf 90       	pop	r12
     c6a:	08 95       	ret

00000c6c <tinyDendrite_update_signals>:
/*
This function converts the 8 bit value from the ADC into one of the signal types defined in DendriteSignal
We also update the charging state
*/
void tinyDendrite_update_signals(void)
{
     c6c:	af 92       	push	r10
     c6e:	bf 92       	push	r11
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	c1 e1       	ldi	r28, 0x11	; 17
     c82:	d8 e3       	ldi	r29, 0x38	; 56
     c84:	0a e4       	ldi	r16, 0x4A	; 74
     c86:	18 e3       	ldi	r17, 0x38	; 56
     c88:	0f 2e       	mov	r0, r31
     c8a:	f6 e1       	ldi	r31, 0x16	; 22
     c8c:	cf 2e       	mov	r12, r31
     c8e:	f8 e3       	ldi	r31, 0x38	; 56
     c90:	df 2e       	mov	r13, r31
     c92:	f0 2d       	mov	r31, r0
     c94:	78 01       	movw	r14, r16
*/
static void tinyDendrite_read_signals(void)
{
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_values[i] = ADC_get_conversion(Dendrite_ports[i]);
     c96:	89 91       	ld	r24, Y+
     c98:	0e 94 8c 00 	call	0x118	; 0x118 <ADC_get_conversion>
     c9c:	d7 01       	movw	r26, r14
     c9e:	8d 93       	st	X+, r24
     ca0:	7d 01       	movw	r14, r26
/*
This function reads the voltage at the Dendrite inputs with the ADC
*/
static void tinyDendrite_read_signals(void)
{
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
     ca2:	cc 15       	cp	r28, r12
     ca4:	dd 05       	cpc	r29, r13
     ca6:	b9 f7       	brne	.-18     	; 0xc96 <tinyDendrite_update_signals+0x2a>
	{
		tinyDendrite_values[i] = ADC_get_conversion(Dendrite_ports[i]);
	}
	tinyDebugger_send_uint8("D1", tinyDendrite_values[0]);
     ca8:	ca e4       	ldi	r28, 0x4A	; 74
     caa:	d8 e3       	ldi	r29, 0x38	; 56
     cac:	68 81       	ld	r22, Y
     cae:	8f e0       	ldi	r24, 0x0F	; 15
     cb0:	97 e9       	ldi	r25, 0x97	; 151
     cb2:	0e 94 03 02 	call	0x406	; 0x406 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D2", tinyDendrite_values[1]);
     cb6:	69 81       	ldd	r22, Y+1	; 0x01
     cb8:	82 e1       	ldi	r24, 0x12	; 18
     cba:	97 e9       	ldi	r25, 0x97	; 151
     cbc:	0e 94 03 02 	call	0x406	; 0x406 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D3", tinyDendrite_values[2]);
     cc0:	6a 81       	ldd	r22, Y+2	; 0x02
     cc2:	85 e1       	ldi	r24, 0x15	; 21
     cc4:	97 e9       	ldi	r25, 0x97	; 151
     cc6:	0e 94 03 02 	call	0x406	; 0x406 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
     cca:	6b 81       	ldd	r22, Y+3	; 0x03
     ccc:	88 e1       	ldi	r24, 0x18	; 24
     cce:	97 e9       	ldi	r25, 0x97	; 151
     cd0:	0e 94 03 02 	call	0x406	; 0x406 <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
     cd4:	6c 81       	ldd	r22, Y+4	; 0x04
     cd6:	8b e1       	ldi	r24, 0x1B	; 27
     cd8:	97 e9       	ldi	r25, 0x97	; 151
     cda:	0e 94 03 02 	call	0x406	; 0x406 <tinyDebugger_send_uint8>
     cde:	e5 e4       	ldi	r30, 0x45	; 69
     ce0:	f8 e3       	ldi	r31, 0x38	; 56
     ce2:	c0 e4       	ldi	r28, 0x40	; 64
     ce4:	d8 e3       	ldi	r29, 0x38	; 56
     ce6:	4a e4       	ldi	r20, 0x4A	; 74
     ce8:	58 e3       	ldi	r21, 0x38	; 56
{
	
	//Read the analog voltage values on each of the Dendrites
	tinyDendrite_read_signals();
	
	_Bool charging = false;
     cea:	80 e0       	ldi	r24, 0x00	; 0
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     cec:	31 e0       	ldi	r19, 0x01	; 1
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     cee:	0f 2e       	mov	r0, r31
     cf0:	f3 e0       	ldi	r31, 0x03	; 3
     cf2:	cf 2e       	mov	r12, r31
     cf4:	f0 2d       	mov	r31, r0
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     cf6:	68 94       	set
     cf8:	dd 24       	eor	r13, r13
     cfa:	d1 f8       	bld	r13, 1
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     cfc:	68 94       	set
     cfe:	ee 24       	eor	r14, r14
     d00:	e2 f8       	bld	r14, 2
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     d02:	0f 2e       	mov	r0, r31
     d04:	f6 e0       	ldi	r31, 0x06	; 6
     d06:	ff 2e       	mov	r15, r31
     d08:	f0 2d       	mov	r31, r0
			tinyDendrite_current_signals[i] = CHARGING;
			charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     d0a:	75 e0       	ldi	r23, 0x05	; 5
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     d0c:	67 e0       	ldi	r22, 0x07	; 7
     d0e:	5f 01       	movw	r10, r30
	
	_Bool charging = false;
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     d10:	90 81       	ld	r25, Z
     d12:	99 93       	st	Y+, r25
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     d14:	d8 01       	movw	r26, r16
     d16:	2d 91       	ld	r18, X+
     d18:	8d 01       	movw	r16, r26
     d1a:	29 3e       	cpi	r18, 0xE9	; 233
     d1c:	18 f0       	brcs	.+6      	; 0xd24 <tinyDendrite_update_signals+0xb8>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     d1e:	60 83       	st	Z, r22
			charging = true;
     d20:	83 2f       	mov	r24, r19
     d22:	19 c0       	rjmp	.+50     	; 0xd56 <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
     d24:	28 3c       	cpi	r18, 0xC8	; 200
     d26:	10 f0       	brcs	.+4      	; 0xd2c <tinyDendrite_update_signals+0xc0>
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     d28:	70 83       	st	Z, r23
     d2a:	15 c0       	rjmp	.+42     	; 0xd56 <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
     d2c:	27 3a       	cpi	r18, 0xA7	; 167
     d2e:	10 f0       	brcs	.+4      	; 0xd34 <tinyDendrite_update_signals+0xc8>
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     d30:	f0 82       	st	Z, r15
     d32:	11 c0       	rjmp	.+34     	; 0xd56 <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
     d34:	25 38       	cpi	r18, 0x85	; 133
     d36:	10 f0       	brcs	.+4      	; 0xd3c <tinyDendrite_update_signals+0xd0>
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     d38:	e0 82       	st	Z, r14
     d3a:	0d c0       	rjmp	.+26     	; 0xd56 <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
     d3c:	24 36       	cpi	r18, 0x64	; 100
     d3e:	10 f0       	brcs	.+4      	; 0xd44 <tinyDendrite_update_signals+0xd8>
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     d40:	d0 82       	st	Z, r13
     d42:	09 c0       	rjmp	.+18     	; 0xd56 <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
     d44:	23 34       	cpi	r18, 0x43	; 67
     d46:	10 f0       	brcs	.+4      	; 0xd4c <tinyDendrite_update_signals+0xe0>
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     d48:	c0 82       	st	Z, r12
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
     d4c:	22 32       	cpi	r18, 0x22	; 34
     d4e:	10 f0       	brcs	.+4      	; 0xd54 <tinyDendrite_update_signals+0xe8>
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     d50:	30 83       	st	Z, r19
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <tinyDendrite_update_signals+0xea>
		}
		else
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     d54:	10 82       	st	Z, r1
		}
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
     d56:	d5 01       	movw	r26, r10
     d58:	2c 91       	ld	r18, X
     d5a:	92 13       	cpse	r25, r18
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <tinyDendrite_update_signals+0xf4>
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     d5e:	1c 92       	st	X, r1
     d60:	31 96       	adiw	r30, 0x01	; 1
	//Read the analog voltage values on each of the Dendrites
	tinyDendrite_read_signals();
	
	_Bool charging = false;
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     d62:	e4 17       	cp	r30, r20
     d64:	f5 07       	cpc	r31, r21
     d66:	99 f6       	brne	.-90     	; 0xd0e <tinyDendrite_update_signals+0xa2>
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
		}
	}
	tinyCharge_set_charging_mode(charging);
     d68:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <tinyCharge_set_charging_mode>
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	cf 90       	pop	r12
     d7c:	bf 90       	pop	r11
     d7e:	af 90       	pop	r10
     d80:	08 95       	ret

00000d82 <tinyDendrite_get_potential>:
outside. It uses the previously declared functions to return the potential.
*/
int16_t tinyDendrite_get_potential()
{
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
     d82:	0e 94 36 06 	call	0xc6c	; 0xc6c <tinyDendrite_update_signals>
     d86:	e5 e4       	ldi	r30, 0x45	; 69
     d88:	f8 e3       	ldi	r31, 0x38	; 56
     d8a:	4a e4       	ldi	r20, 0x4A	; 74
     d8c:	58 e3       	ldi	r21, 0x38	; 56
	
	int16_t return_potential_val = 0;
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		switch(tinyDendrite_current_signals[i])
     d92:	91 91       	ld	r25, Z+
     d94:	93 30       	cpi	r25, 0x03	; 3
     d96:	a1 f0       	breq	.+40     	; 0xdc0 <tinyDendrite_get_potential+0x3e>
     d98:	28 f4       	brcc	.+10     	; 0xda4 <tinyDendrite_get_potential+0x22>
     d9a:	91 30       	cpi	r25, 0x01	; 1
     d9c:	b9 f0       	breq	.+46     	; 0xdcc <tinyDendrite_get_potential+0x4a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	91 f0       	breq	.+36     	; 0xdc6 <tinyDendrite_get_potential+0x44>
     da2:	16 c0       	rjmp	.+44     	; 0xdd0 <tinyDendrite_get_potential+0x4e>
     da4:	95 30       	cpi	r25, 0x05	; 5
     da6:	31 f0       	breq	.+12     	; 0xdb4 <tinyDendrite_get_potential+0x32>
     da8:	40 f0       	brcs	.+16     	; 0xdba <tinyDendrite_get_potential+0x38>
     daa:	96 30       	cpi	r25, 0x06	; 6
     dac:	89 f4       	brne	.+34     	; 0xdd0 <tinyDendrite_get_potential+0x4e>
		{
			case NO_SIGNAL:
				return_potential_val += NO_SIGNAL_REACTION;
				break;
			case HIGH_EXCITE:
				return_potential_val += HIGH_EXCITE_REACTION;
     dae:	2c 5c       	subi	r18, 0xCC	; 204
     db0:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
     db2:	0e c0       	rjmp	.+28     	; 0xdd0 <tinyDendrite_get_potential+0x4e>
			case NORMAL_EXCITE:
				return_potential_val += NORMAL_EXCITE_REACTION;
     db4:	26 5e       	subi	r18, 0xE6	; 230
     db6:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
     db8:	0b c0       	rjmp	.+22     	; 0xdd0 <tinyDendrite_get_potential+0x4e>
			case LOW_EXCITE:
				return_potential_val += LOW_EXCITE_REACTION;
     dba:	2c 5e       	subi	r18, 0xEC	; 236
     dbc:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
     dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <tinyDendrite_get_potential+0x4e>
			case HIGH_INHIB:
				return_potential_val += HIGH_INHIB_REACTION;
     dc0:	22 53       	subi	r18, 0x32	; 50
     dc2:	31 09       	sbc	r19, r1
				break;
     dc4:	05 c0       	rjmp	.+10     	; 0xdd0 <tinyDendrite_get_potential+0x4e>
			case NORMAL_INHIB:
				return_potential_val += NORMAL_INHIB_REACTION;
     dc6:	2a 51       	subi	r18, 0x1A	; 26
     dc8:	31 09       	sbc	r19, r1
				break;
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <tinyDendrite_get_potential+0x4e>
			case LOW_INHIB:
				return_potential_val += LOW_INHIB_REACTION;
     dcc:	24 51       	subi	r18, 0x14	; 20
     dce:	31 09       	sbc	r19, r1
{
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
	
	int16_t return_potential_val = 0;
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     dd0:	e4 17       	cp	r30, r20
     dd2:	f5 07       	cpc	r31, r21
     dd4:	f1 f6       	brne	.-68     	; 0xd92 <tinyDendrite_get_potential+0x10>
			default:
				break;
		}
	}
	return return_potential_val;
}
     dd6:	c9 01       	movw	r24, r18
     dd8:	08 95       	ret

00000dda <tinyDendrite_update_potential>:

double tinyDendrite_update_potential(double potential){
     dda:	cf 92       	push	r12
     ddc:	df 92       	push	r13
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	6b 01       	movw	r12, r22
     de4:	7c 01       	movw	r14, r24
	
	int16_t potential_change = tinyDendrite_get_potential();
     de6:	0e 94 c1 06 	call	0xd82	; 0xd82 <tinyDendrite_get_potential>
	potential += potential_change;
	return potential;
     dea:	bc 01       	movw	r22, r24
     dec:	99 0f       	add	r25, r25
     dee:	88 0b       	sbc	r24, r24
     df0:	99 0b       	sbc	r25, r25
     df2:	0e 94 14 09 	call	0x1228	; 0x1228 <__floatsisf>
     df6:	a7 01       	movw	r20, r14
     df8:	96 01       	movw	r18, r12
     dfa:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__addsf3>
     dfe:	ff 90       	pop	r15
     e00:	ef 90       	pop	r14
     e02:	df 90       	pop	r13
     e04:	cf 90       	pop	r12
     e06:	08 95       	ret

00000e08 <__vector_6>:
     e08:	1f 92       	push	r1
     e0a:	0f 92       	push	r0
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	0f 92       	push	r0
     e10:	11 24       	eor	r1, r1
     e12:	2f 93       	push	r18
     e14:	3f 93       	push	r19
     e16:	4f 93       	push	r20
     e18:	5f 93       	push	r21
     e1a:	6f 93       	push	r22
     e1c:	7f 93       	push	r23
     e1e:	8f 93       	push	r24
     e20:	9f 93       	push	r25
     e22:	af 93       	push	r26
     e24:	bf 93       	push	r27
     e26:	cf 93       	push	r28
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
     e2c:	c1 e0       	ldi	r28, 0x01	; 1
     e2e:	c0 93 4f 38 	sts	0x384F, r28	; 0x80384f <tinyISR_interrupt_flag>
     e32:	0e 94 4d 02 	call	0x49a	; 0x49a <tinyTime_counter_increment>
     e36:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	cf 91       	pop	r28
     e40:	bf 91       	pop	r27
     e42:	af 91       	pop	r26
     e44:	9f 91       	pop	r25
     e46:	8f 91       	pop	r24
     e48:	7f 91       	pop	r23
     e4a:	6f 91       	pop	r22
     e4c:	5f 91       	pop	r21
     e4e:	4f 91       	pop	r20
     e50:	3f 91       	pop	r19
     e52:	2f 91       	pop	r18
     e54:	0f 90       	pop	r0
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	0f 90       	pop	r0
     e5a:	1f 90       	pop	r1
     e5c:	18 95       	reti

00000e5e <tinyISR_setflag>:
     e5e:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <tinyISR_interrupt_flag>
     e62:	08 95       	ret

00000e64 <tinyISR_getflag>:
     e64:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <tinyISR_interrupt_flag>
     e68:	08 95       	ret

00000e6a <tinyPotential_update>:

/*
Update the potential
*/
void tinyPotential_update()
{
     e6a:	cf 92       	push	r12
     e6c:	df 92       	push	r13
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
Function to decay the potential towards 0
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
     e72:	0e 94 61 02 	call	0x4c2	; 0x4c2 <tinyTime_now>
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
     e76:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <previous_update_time>
     e7a:	68 1b       	sub	r22, r24
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	48 ec       	ldi	r20, 0xC8	; 200
     e8c:	52 e4       	ldi	r21, 0x42	; 66
     e8e:	0e 94 37 08 	call	0x106e	; 0x106e <__divsf3>
     e92:	90 58       	subi	r25, 0x80	; 128
     e94:	0e 94 b1 08 	call	0x1162	; 0x1162 <exp>
     e98:	20 91 54 38 	lds	r18, 0x3854	; 0x803854 <tinyPotential_potential>
     e9c:	30 91 55 38 	lds	r19, 0x3855	; 0x803855 <tinyPotential_potential+0x1>
     ea0:	40 91 56 38 	lds	r20, 0x3856	; 0x803856 <tinyPotential_potential+0x2>
     ea4:	50 91 57 38 	lds	r21, 0x3857	; 0x803857 <tinyPotential_potential+0x3>
     ea8:	0e 94 85 0a 	call	0x150a	; 0x150a <__mulsf3>
     eac:	6b 01       	movw	r12, r22
     eae:	7c 01       	movw	r14, r24
	if(fabs(tinyPotential_potential)<0.1){
     eb0:	9f 77       	andi	r25, 0x7F	; 127
     eb2:	2d ec       	ldi	r18, 0xCD	; 205
     eb4:	3c ec       	ldi	r19, 0xCC	; 204
     eb6:	4c ec       	ldi	r20, 0xCC	; 204
     eb8:	5d e3       	ldi	r21, 0x3D	; 61
     eba:	0e 94 32 08 	call	0x1064	; 0x1064 <__cmpsf2>
     ebe:	88 23       	and	r24, r24
     ec0:	4c f0       	brlt	.+18     	; 0xed4 <tinyPotential_update+0x6a>
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
     ec2:	c0 92 54 38 	sts	0x3854, r12	; 0x803854 <tinyPotential_potential>
     ec6:	d0 92 55 38 	sts	0x3855, r13	; 0x803855 <tinyPotential_potential+0x1>
     eca:	e0 92 56 38 	sts	0x3856, r14	; 0x803856 <tinyPotential_potential+0x2>
     ece:	f0 92 57 38 	sts	0x3857, r15	; 0x803857 <tinyPotential_potential+0x3>
     ed2:	08 c0       	rjmp	.+16     	; 0xee4 <tinyPotential_update+0x7a>
	if(fabs(tinyPotential_potential)<0.1){
		tinyPotential_potential=0;
     ed4:	10 92 54 38 	sts	0x3854, r1	; 0x803854 <tinyPotential_potential>
     ed8:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <tinyPotential_potential+0x1>
     edc:	10 92 56 38 	sts	0x3856, r1	; 0x803856 <tinyPotential_potential+0x2>
     ee0:	10 92 57 38 	sts	0x3857, r1	; 0x803857 <tinyPotential_potential+0x3>
	}
	previous_update_time = tinyTime_now();
     ee4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <tinyTime_now>
     ee8:	60 93 50 38 	sts	0x3850, r22	; 0x803850 <previous_update_time>
     eec:	70 93 51 38 	sts	0x3851, r23	; 0x803851 <previous_update_time+0x1>
     ef0:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <previous_update_time+0x2>
     ef4:	90 93 53 38 	sts	0x3853, r25	; 0x803853 <previous_update_time+0x3>
void tinyPotential_update()
{
	//Some of the potential in the neuron has decayed away
	tinyPotential_decay();
	// Update potential with values from Dendrites
	tinyPotential_potential = tinyDendrite_update_potential(tinyPotential_potential);
     ef8:	60 91 54 38 	lds	r22, 0x3854	; 0x803854 <tinyPotential_potential>
     efc:	70 91 55 38 	lds	r23, 0x3855	; 0x803855 <tinyPotential_potential+0x1>
     f00:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <tinyPotential_potential+0x2>
     f04:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <tinyPotential_potential+0x3>
     f08:	0e 94 ed 06 	call	0xdda	; 0xdda <tinyDendrite_update_potential>
     f0c:	ab 01       	movw	r20, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	40 93 54 38 	sts	0x3854, r20	; 0x803854 <tinyPotential_potential>
     f14:	50 93 55 38 	sts	0x3855, r21	; 0x803855 <tinyPotential_potential+0x1>
     f18:	60 93 56 38 	sts	0x3856, r22	; 0x803856 <tinyPotential_potential+0x2>
     f1c:	70 93 57 38 	sts	0x3857, r23	; 0x803857 <tinyPotential_potential+0x3>
	tinyDebugger_send_double("DendP", tinyPotential_potential);
     f20:	8e e1       	ldi	r24, 0x1E	; 30
     f22:	97 e9       	ldi	r25, 0x97	; 151
     f24:	0e 94 04 02 	call	0x408	; 0x408 <tinyDebugger_send_double>
	
	// Update potential from button press
	tinyPotential_potential = tinyButton_update_potential(tinyPotential_potential);
     f28:	60 91 54 38 	lds	r22, 0x3854	; 0x803854 <tinyPotential_potential>
     f2c:	70 91 55 38 	lds	r23, 0x3855	; 0x803855 <tinyPotential_potential+0x1>
     f30:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <tinyPotential_potential+0x2>
     f34:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <tinyPotential_potential+0x3>
     f38:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <tinyButton_update_potential>
     f3c:	60 93 54 38 	sts	0x3854, r22	; 0x803854 <tinyPotential_potential>
     f40:	70 93 55 38 	sts	0x3855, r23	; 0x803855 <tinyPotential_potential+0x1>
     f44:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <tinyPotential_potential+0x2>
     f48:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <tinyPotential_potential+0x3>
	
	// Update potential with values from spontaneous pulse.
	tinyPotential_potential = tinyPulse_update_potential(tinyPotential_potential);
     f4c:	0e 94 15 02 	call	0x42a	; 0x42a <tinyPulse_update_potential>
     f50:	60 93 54 38 	sts	0x3854, r22	; 0x803854 <tinyPotential_potential>
     f54:	70 93 55 38 	sts	0x3855, r23	; 0x803855 <tinyPotential_potential+0x1>
     f58:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <tinyPotential_potential+0x2>
     f5c:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <tinyPotential_potential+0x3>
	
	// Let the axon affect the potential
	// This is also where we decide whether or not the axon should fire
	tinyPotential_potential = tinyAxon_update_potential(tinyPotential_potential);
     f60:	0e 94 7d 05 	call	0xafa	; 0xafa <tinyAxon_update_potential>
     f64:	ab 01       	movw	r20, r22
     f66:	bc 01       	movw	r22, r24
     f68:	40 93 54 38 	sts	0x3854, r20	; 0x803854 <tinyPotential_potential>
     f6c:	50 93 55 38 	sts	0x3855, r21	; 0x803855 <tinyPotential_potential+0x1>
     f70:	60 93 56 38 	sts	0x3856, r22	; 0x803856 <tinyPotential_potential+0x2>
     f74:	70 93 57 38 	sts	0x3857, r23	; 0x803857 <tinyPotential_potential+0x3>
	tinyDebugger_send_double("AxonP", tinyPotential_potential);
     f78:	84 e2       	ldi	r24, 0x24	; 36
     f7a:	97 e9       	ldi	r25, 0x97	; 151
     f7c:	0e 94 04 02 	call	0x408	; 0x408 <tinyDebugger_send_double>
}
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	df 90       	pop	r13
     f86:	cf 90       	pop	r12
     f88:	08 95       	ret

00000f8a <__subsf3>:
     f8a:	50 58       	subi	r21, 0x80	; 128

00000f8c <__addsf3>:
     f8c:	bb 27       	eor	r27, r27
     f8e:	aa 27       	eor	r26, r26
     f90:	0e 94 dd 07 	call	0xfba	; 0xfba <__addsf3x>
     f94:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__fp_round>
     f98:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fp_pscA>
     f9c:	38 f0       	brcs	.+14     	; 0xfac <__addsf3+0x20>
     f9e:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fp_pscB>
     fa2:	20 f0       	brcs	.+8      	; 0xfac <__addsf3+0x20>
     fa4:	39 f4       	brne	.+14     	; 0xfb4 <__addsf3+0x28>
     fa6:	9f 3f       	cpi	r25, 0xFF	; 255
     fa8:	19 f4       	brne	.+6      	; 0xfb0 <__addsf3+0x24>
     faa:	26 f4       	brtc	.+8      	; 0xfb4 <__addsf3+0x28>
     fac:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__fp_nan>
     fb0:	0e f4       	brtc	.+2      	; 0xfb4 <__addsf3+0x28>
     fb2:	e0 95       	com	r30
     fb4:	e7 fb       	bst	r30, 7
     fb6:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__fp_inf>

00000fba <__addsf3x>:
     fba:	e9 2f       	mov	r30, r25
     fbc:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fp_split3>
     fc0:	58 f3       	brcs	.-42     	; 0xf98 <__addsf3+0xc>
     fc2:	ba 17       	cp	r27, r26
     fc4:	62 07       	cpc	r22, r18
     fc6:	73 07       	cpc	r23, r19
     fc8:	84 07       	cpc	r24, r20
     fca:	95 07       	cpc	r25, r21
     fcc:	20 f0       	brcs	.+8      	; 0xfd6 <__addsf3x+0x1c>
     fce:	79 f4       	brne	.+30     	; 0xfee <__addsf3x+0x34>
     fd0:	a6 f5       	brtc	.+104    	; 0x103a <__addsf3x+0x80>
     fd2:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__fp_zero>
     fd6:	0e f4       	brtc	.+2      	; 0xfda <__addsf3x+0x20>
     fd8:	e0 95       	com	r30
     fda:	0b 2e       	mov	r0, r27
     fdc:	ba 2f       	mov	r27, r26
     fde:	a0 2d       	mov	r26, r0
     fe0:	0b 01       	movw	r0, r22
     fe2:	b9 01       	movw	r22, r18
     fe4:	90 01       	movw	r18, r0
     fe6:	0c 01       	movw	r0, r24
     fe8:	ca 01       	movw	r24, r20
     fea:	a0 01       	movw	r20, r0
     fec:	11 24       	eor	r1, r1
     fee:	ff 27       	eor	r31, r31
     ff0:	59 1b       	sub	r21, r25
     ff2:	99 f0       	breq	.+38     	; 0x101a <__addsf3x+0x60>
     ff4:	59 3f       	cpi	r21, 0xF9	; 249
     ff6:	50 f4       	brcc	.+20     	; 0x100c <__addsf3x+0x52>
     ff8:	50 3e       	cpi	r21, 0xE0	; 224
     ffa:	68 f1       	brcs	.+90     	; 0x1056 <__addsf3x+0x9c>
     ffc:	1a 16       	cp	r1, r26
     ffe:	f0 40       	sbci	r31, 0x00	; 0
    1000:	a2 2f       	mov	r26, r18
    1002:	23 2f       	mov	r18, r19
    1004:	34 2f       	mov	r19, r20
    1006:	44 27       	eor	r20, r20
    1008:	58 5f       	subi	r21, 0xF8	; 248
    100a:	f3 cf       	rjmp	.-26     	; 0xff2 <__addsf3x+0x38>
    100c:	46 95       	lsr	r20
    100e:	37 95       	ror	r19
    1010:	27 95       	ror	r18
    1012:	a7 95       	ror	r26
    1014:	f0 40       	sbci	r31, 0x00	; 0
    1016:	53 95       	inc	r21
    1018:	c9 f7       	brne	.-14     	; 0x100c <__addsf3x+0x52>
    101a:	7e f4       	brtc	.+30     	; 0x103a <__addsf3x+0x80>
    101c:	1f 16       	cp	r1, r31
    101e:	ba 0b       	sbc	r27, r26
    1020:	62 0b       	sbc	r22, r18
    1022:	73 0b       	sbc	r23, r19
    1024:	84 0b       	sbc	r24, r20
    1026:	ba f0       	brmi	.+46     	; 0x1056 <__addsf3x+0x9c>
    1028:	91 50       	subi	r25, 0x01	; 1
    102a:	a1 f0       	breq	.+40     	; 0x1054 <__addsf3x+0x9a>
    102c:	ff 0f       	add	r31, r31
    102e:	bb 1f       	adc	r27, r27
    1030:	66 1f       	adc	r22, r22
    1032:	77 1f       	adc	r23, r23
    1034:	88 1f       	adc	r24, r24
    1036:	c2 f7       	brpl	.-16     	; 0x1028 <__addsf3x+0x6e>
    1038:	0e c0       	rjmp	.+28     	; 0x1056 <__addsf3x+0x9c>
    103a:	ba 0f       	add	r27, r26
    103c:	62 1f       	adc	r22, r18
    103e:	73 1f       	adc	r23, r19
    1040:	84 1f       	adc	r24, r20
    1042:	48 f4       	brcc	.+18     	; 0x1056 <__addsf3x+0x9c>
    1044:	87 95       	ror	r24
    1046:	77 95       	ror	r23
    1048:	67 95       	ror	r22
    104a:	b7 95       	ror	r27
    104c:	f7 95       	ror	r31
    104e:	9e 3f       	cpi	r25, 0xFE	; 254
    1050:	08 f0       	brcs	.+2      	; 0x1054 <__addsf3x+0x9a>
    1052:	b0 cf       	rjmp	.-160    	; 0xfb4 <__addsf3+0x28>
    1054:	93 95       	inc	r25
    1056:	88 0f       	add	r24, r24
    1058:	08 f0       	brcs	.+2      	; 0x105c <__addsf3x+0xa2>
    105a:	99 27       	eor	r25, r25
    105c:	ee 0f       	add	r30, r30
    105e:	97 95       	ror	r25
    1060:	87 95       	ror	r24
    1062:	08 95       	ret

00001064 <__cmpsf2>:
    1064:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_cmp>
    1068:	08 f4       	brcc	.+2      	; 0x106c <__cmpsf2+0x8>
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	08 95       	ret

0000106e <__divsf3>:
    106e:	0e 94 4b 08 	call	0x1096	; 0x1096 <__divsf3x>
    1072:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__fp_round>
    1076:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fp_pscB>
    107a:	58 f0       	brcs	.+22     	; 0x1092 <__divsf3+0x24>
    107c:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fp_pscA>
    1080:	40 f0       	brcs	.+16     	; 0x1092 <__divsf3+0x24>
    1082:	29 f4       	brne	.+10     	; 0x108e <__divsf3+0x20>
    1084:	5f 3f       	cpi	r21, 0xFF	; 255
    1086:	29 f0       	breq	.+10     	; 0x1092 <__divsf3+0x24>
    1088:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__fp_inf>
    108c:	51 11       	cpse	r21, r1
    108e:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__fp_szero>
    1092:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__fp_nan>

00001096 <__divsf3x>:
    1096:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fp_split3>
    109a:	68 f3       	brcs	.-38     	; 0x1076 <__divsf3+0x8>

0000109c <__divsf3_pse>:
    109c:	99 23       	and	r25, r25
    109e:	b1 f3       	breq	.-20     	; 0x108c <__divsf3+0x1e>
    10a0:	55 23       	and	r21, r21
    10a2:	91 f3       	breq	.-28     	; 0x1088 <__divsf3+0x1a>
    10a4:	95 1b       	sub	r25, r21
    10a6:	55 0b       	sbc	r21, r21
    10a8:	bb 27       	eor	r27, r27
    10aa:	aa 27       	eor	r26, r26
    10ac:	62 17       	cp	r22, r18
    10ae:	73 07       	cpc	r23, r19
    10b0:	84 07       	cpc	r24, r20
    10b2:	38 f0       	brcs	.+14     	; 0x10c2 <__divsf3_pse+0x26>
    10b4:	9f 5f       	subi	r25, 0xFF	; 255
    10b6:	5f 4f       	sbci	r21, 0xFF	; 255
    10b8:	22 0f       	add	r18, r18
    10ba:	33 1f       	adc	r19, r19
    10bc:	44 1f       	adc	r20, r20
    10be:	aa 1f       	adc	r26, r26
    10c0:	a9 f3       	breq	.-22     	; 0x10ac <__divsf3_pse+0x10>
    10c2:	35 d0       	rcall	.+106    	; 0x112e <__divsf3_pse+0x92>
    10c4:	0e 2e       	mov	r0, r30
    10c6:	3a f0       	brmi	.+14     	; 0x10d6 <__divsf3_pse+0x3a>
    10c8:	e0 e8       	ldi	r30, 0x80	; 128
    10ca:	32 d0       	rcall	.+100    	; 0x1130 <__divsf3_pse+0x94>
    10cc:	91 50       	subi	r25, 0x01	; 1
    10ce:	50 40       	sbci	r21, 0x00	; 0
    10d0:	e6 95       	lsr	r30
    10d2:	00 1c       	adc	r0, r0
    10d4:	ca f7       	brpl	.-14     	; 0x10c8 <__divsf3_pse+0x2c>
    10d6:	2b d0       	rcall	.+86     	; 0x112e <__divsf3_pse+0x92>
    10d8:	fe 2f       	mov	r31, r30
    10da:	29 d0       	rcall	.+82     	; 0x112e <__divsf3_pse+0x92>
    10dc:	66 0f       	add	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	88 1f       	adc	r24, r24
    10e2:	bb 1f       	adc	r27, r27
    10e4:	26 17       	cp	r18, r22
    10e6:	37 07       	cpc	r19, r23
    10e8:	48 07       	cpc	r20, r24
    10ea:	ab 07       	cpc	r26, r27
    10ec:	b0 e8       	ldi	r27, 0x80	; 128
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <__divsf3_pse+0x56>
    10f0:	bb 0b       	sbc	r27, r27
    10f2:	80 2d       	mov	r24, r0
    10f4:	bf 01       	movw	r22, r30
    10f6:	ff 27       	eor	r31, r31
    10f8:	93 58       	subi	r25, 0x83	; 131
    10fa:	5f 4f       	sbci	r21, 0xFF	; 255
    10fc:	3a f0       	brmi	.+14     	; 0x110c <__divsf3_pse+0x70>
    10fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1100:	51 05       	cpc	r21, r1
    1102:	78 f0       	brcs	.+30     	; 0x1122 <__divsf3_pse+0x86>
    1104:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__fp_inf>
    1108:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__fp_szero>
    110c:	5f 3f       	cpi	r21, 0xFF	; 255
    110e:	e4 f3       	brlt	.-8      	; 0x1108 <__divsf3_pse+0x6c>
    1110:	98 3e       	cpi	r25, 0xE8	; 232
    1112:	d4 f3       	brlt	.-12     	; 0x1108 <__divsf3_pse+0x6c>
    1114:	86 95       	lsr	r24
    1116:	77 95       	ror	r23
    1118:	67 95       	ror	r22
    111a:	b7 95       	ror	r27
    111c:	f7 95       	ror	r31
    111e:	9f 5f       	subi	r25, 0xFF	; 255
    1120:	c9 f7       	brne	.-14     	; 0x1114 <__divsf3_pse+0x78>
    1122:	88 0f       	add	r24, r24
    1124:	91 1d       	adc	r25, r1
    1126:	96 95       	lsr	r25
    1128:	87 95       	ror	r24
    112a:	97 f9       	bld	r25, 7
    112c:	08 95       	ret
    112e:	e1 e0       	ldi	r30, 0x01	; 1
    1130:	66 0f       	add	r22, r22
    1132:	77 1f       	adc	r23, r23
    1134:	88 1f       	adc	r24, r24
    1136:	bb 1f       	adc	r27, r27
    1138:	62 17       	cp	r22, r18
    113a:	73 07       	cpc	r23, r19
    113c:	84 07       	cpc	r24, r20
    113e:	ba 07       	cpc	r27, r26
    1140:	20 f0       	brcs	.+8      	; 0x114a <__divsf3_pse+0xae>
    1142:	62 1b       	sub	r22, r18
    1144:	73 0b       	sbc	r23, r19
    1146:	84 0b       	sbc	r24, r20
    1148:	ba 0b       	sbc	r27, r26
    114a:	ee 1f       	adc	r30, r30
    114c:	88 f7       	brcc	.-30     	; 0x1130 <__divsf3_pse+0x94>
    114e:	e0 95       	com	r30
    1150:	08 95       	ret
    1152:	29 f4       	brne	.+10     	; 0x115e <__divsf3_pse+0xc2>
    1154:	16 f0       	brts	.+4      	; 0x115a <__divsf3_pse+0xbe>
    1156:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__fp_inf>
    115a:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__fp_zero>
    115e:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__fp_nan>

00001162 <exp>:
    1162:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_splitA>
    1166:	a8 f3       	brcs	.-22     	; 0x1152 <__divsf3_pse+0xb6>
    1168:	96 38       	cpi	r25, 0x86	; 134
    116a:	a0 f7       	brcc	.-24     	; 0x1154 <__divsf3_pse+0xb8>
    116c:	07 f8       	bld	r0, 7
    116e:	0f 92       	push	r0
    1170:	e8 94       	clt
    1172:	2b e3       	ldi	r18, 0x3B	; 59
    1174:	3a ea       	ldi	r19, 0xAA	; 170
    1176:	48 eb       	ldi	r20, 0xB8	; 184
    1178:	5f e7       	ldi	r21, 0x7F	; 127
    117a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__mulsf3_pse>
    117e:	0f 92       	push	r0
    1180:	0f 92       	push	r0
    1182:	0f 92       	push	r0
    1184:	4d b7       	in	r20, 0x3d	; 61
    1186:	5e b7       	in	r21, 0x3e	; 62
    1188:	0f 92       	push	r0
    118a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <modf>
    118e:	ec e7       	ldi	r30, 0x7C	; 124
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fp_powser>
    1196:	4f 91       	pop	r20
    1198:	5f 91       	pop	r21
    119a:	ef 91       	pop	r30
    119c:	ff 91       	pop	r31
    119e:	e5 95       	asr	r30
    11a0:	ee 1f       	adc	r30, r30
    11a2:	ff 1f       	adc	r31, r31
    11a4:	49 f0       	breq	.+18     	; 0x11b8 <exp+0x56>
    11a6:	fe 57       	subi	r31, 0x7E	; 126
    11a8:	e0 68       	ori	r30, 0x80	; 128
    11aa:	44 27       	eor	r20, r20
    11ac:	ee 0f       	add	r30, r30
    11ae:	44 1f       	adc	r20, r20
    11b0:	fa 95       	dec	r31
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <exp+0x4a>
    11b4:	41 95       	neg	r20
    11b6:	55 0b       	sbc	r21, r21
    11b8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <ldexp>
    11bc:	0f 90       	pop	r0
    11be:	07 fe       	sbrs	r0, 7
    11c0:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <inverse>
    11c4:	08 95       	ret

000011c6 <__fixunssfsi>:
    11c6:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_splitA>
    11ca:	88 f0       	brcs	.+34     	; 0x11ee <__fixunssfsi+0x28>
    11cc:	9f 57       	subi	r25, 0x7F	; 127
    11ce:	98 f0       	brcs	.+38     	; 0x11f6 <__fixunssfsi+0x30>
    11d0:	b9 2f       	mov	r27, r25
    11d2:	99 27       	eor	r25, r25
    11d4:	b7 51       	subi	r27, 0x17	; 23
    11d6:	b0 f0       	brcs	.+44     	; 0x1204 <__fixunssfsi+0x3e>
    11d8:	e1 f0       	breq	.+56     	; 0x1212 <__fixunssfsi+0x4c>
    11da:	66 0f       	add	r22, r22
    11dc:	77 1f       	adc	r23, r23
    11de:	88 1f       	adc	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	1a f0       	brmi	.+6      	; 0x11ea <__fixunssfsi+0x24>
    11e4:	ba 95       	dec	r27
    11e6:	c9 f7       	brne	.-14     	; 0x11da <__fixunssfsi+0x14>
    11e8:	14 c0       	rjmp	.+40     	; 0x1212 <__fixunssfsi+0x4c>
    11ea:	b1 30       	cpi	r27, 0x01	; 1
    11ec:	91 f0       	breq	.+36     	; 0x1212 <__fixunssfsi+0x4c>
    11ee:	0e 94 03 0a 	call	0x1406	; 0x1406 <__fp_zero>
    11f2:	b1 e0       	ldi	r27, 0x01	; 1
    11f4:	08 95       	ret
    11f6:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__fp_zero>
    11fa:	67 2f       	mov	r22, r23
    11fc:	78 2f       	mov	r23, r24
    11fe:	88 27       	eor	r24, r24
    1200:	b8 5f       	subi	r27, 0xF8	; 248
    1202:	39 f0       	breq	.+14     	; 0x1212 <__fixunssfsi+0x4c>
    1204:	b9 3f       	cpi	r27, 0xF9	; 249
    1206:	cc f3       	brlt	.-14     	; 0x11fa <__fixunssfsi+0x34>
    1208:	86 95       	lsr	r24
    120a:	77 95       	ror	r23
    120c:	67 95       	ror	r22
    120e:	b3 95       	inc	r27
    1210:	d9 f7       	brne	.-10     	; 0x1208 <__fixunssfsi+0x42>
    1212:	3e f4       	brtc	.+14     	; 0x1222 <__fixunssfsi+0x5c>
    1214:	90 95       	com	r25
    1216:	80 95       	com	r24
    1218:	70 95       	com	r23
    121a:	61 95       	neg	r22
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	8f 4f       	sbci	r24, 0xFF	; 255
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	08 95       	ret

00001224 <__floatunsisf>:
    1224:	e8 94       	clt
    1226:	09 c0       	rjmp	.+18     	; 0x123a <__floatsisf+0x12>

00001228 <__floatsisf>:
    1228:	97 fb       	bst	r25, 7
    122a:	3e f4       	brtc	.+14     	; 0x123a <__floatsisf+0x12>
    122c:	90 95       	com	r25
    122e:	80 95       	com	r24
    1230:	70 95       	com	r23
    1232:	61 95       	neg	r22
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	8f 4f       	sbci	r24, 0xFF	; 255
    1238:	9f 4f       	sbci	r25, 0xFF	; 255
    123a:	99 23       	and	r25, r25
    123c:	a9 f0       	breq	.+42     	; 0x1268 <__floatsisf+0x40>
    123e:	f9 2f       	mov	r31, r25
    1240:	96 e9       	ldi	r25, 0x96	; 150
    1242:	bb 27       	eor	r27, r27
    1244:	93 95       	inc	r25
    1246:	f6 95       	lsr	r31
    1248:	87 95       	ror	r24
    124a:	77 95       	ror	r23
    124c:	67 95       	ror	r22
    124e:	b7 95       	ror	r27
    1250:	f1 11       	cpse	r31, r1
    1252:	f8 cf       	rjmp	.-16     	; 0x1244 <__floatsisf+0x1c>
    1254:	fa f4       	brpl	.+62     	; 0x1294 <__floatsisf+0x6c>
    1256:	bb 0f       	add	r27, r27
    1258:	11 f4       	brne	.+4      	; 0x125e <__floatsisf+0x36>
    125a:	60 ff       	sbrs	r22, 0
    125c:	1b c0       	rjmp	.+54     	; 0x1294 <__floatsisf+0x6c>
    125e:	6f 5f       	subi	r22, 0xFF	; 255
    1260:	7f 4f       	sbci	r23, 0xFF	; 255
    1262:	8f 4f       	sbci	r24, 0xFF	; 255
    1264:	9f 4f       	sbci	r25, 0xFF	; 255
    1266:	16 c0       	rjmp	.+44     	; 0x1294 <__floatsisf+0x6c>
    1268:	88 23       	and	r24, r24
    126a:	11 f0       	breq	.+4      	; 0x1270 <__floatsisf+0x48>
    126c:	96 e9       	ldi	r25, 0x96	; 150
    126e:	11 c0       	rjmp	.+34     	; 0x1292 <__floatsisf+0x6a>
    1270:	77 23       	and	r23, r23
    1272:	21 f0       	breq	.+8      	; 0x127c <__floatsisf+0x54>
    1274:	9e e8       	ldi	r25, 0x8E	; 142
    1276:	87 2f       	mov	r24, r23
    1278:	76 2f       	mov	r23, r22
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <__floatsisf+0x5e>
    127c:	66 23       	and	r22, r22
    127e:	71 f0       	breq	.+28     	; 0x129c <__floatsisf+0x74>
    1280:	96 e8       	ldi	r25, 0x86	; 134
    1282:	86 2f       	mov	r24, r22
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	2a f0       	brmi	.+10     	; 0x1294 <__floatsisf+0x6c>
    128a:	9a 95       	dec	r25
    128c:	66 0f       	add	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	88 1f       	adc	r24, r24
    1292:	da f7       	brpl	.-10     	; 0x128a <__floatsisf+0x62>
    1294:	88 0f       	add	r24, r24
    1296:	96 95       	lsr	r25
    1298:	87 95       	ror	r24
    129a:	97 f9       	bld	r25, 7
    129c:	08 95       	ret

0000129e <fmin>:
    129e:	99 0f       	add	r25, r25
    12a0:	bb 0b       	sbc	r27, r27
    12a2:	55 0f       	add	r21, r21
    12a4:	aa 0b       	sbc	r26, r26
    12a6:	e0 e8       	ldi	r30, 0x80	; 128
    12a8:	fe ef       	ldi	r31, 0xFE	; 254
    12aa:	16 16       	cp	r1, r22
    12ac:	17 06       	cpc	r1, r23
    12ae:	e8 07       	cpc	r30, r24
    12b0:	f9 07       	cpc	r31, r25
    12b2:	70 f0       	brcs	.+28     	; 0x12d0 <fmin+0x32>
    12b4:	12 16       	cp	r1, r18
    12b6:	13 06       	cpc	r1, r19
    12b8:	e4 07       	cpc	r30, r20
    12ba:	f5 07       	cpc	r31, r21
    12bc:	60 f0       	brcs	.+24     	; 0x12d6 <fmin+0x38>
    12be:	ba 17       	cp	r27, r26
    12c0:	54 f0       	brlt	.+20     	; 0x12d6 <fmin+0x38>
    12c2:	31 f4       	brne	.+12     	; 0x12d0 <fmin+0x32>
    12c4:	26 17       	cp	r18, r22
    12c6:	37 07       	cpc	r19, r23
    12c8:	48 07       	cpc	r20, r24
    12ca:	59 07       	cpc	r21, r25
    12cc:	a7 95       	ror	r26
    12ce:	1b f4       	brvc	.+6      	; 0x12d6 <fmin+0x38>
    12d0:	b9 01       	movw	r22, r18
    12d2:	ca 01       	movw	r24, r20
    12d4:	ba 2f       	mov	r27, r26
    12d6:	b6 95       	lsr	r27
    12d8:	97 95       	ror	r25
    12da:	08 95       	ret

000012dc <__fp_cmp>:
    12dc:	99 0f       	add	r25, r25
    12de:	00 08       	sbc	r0, r0
    12e0:	55 0f       	add	r21, r21
    12e2:	aa 0b       	sbc	r26, r26
    12e4:	e0 e8       	ldi	r30, 0x80	; 128
    12e6:	fe ef       	ldi	r31, 0xFE	; 254
    12e8:	16 16       	cp	r1, r22
    12ea:	17 06       	cpc	r1, r23
    12ec:	e8 07       	cpc	r30, r24
    12ee:	f9 07       	cpc	r31, r25
    12f0:	c0 f0       	brcs	.+48     	; 0x1322 <__fp_cmp+0x46>
    12f2:	12 16       	cp	r1, r18
    12f4:	13 06       	cpc	r1, r19
    12f6:	e4 07       	cpc	r30, r20
    12f8:	f5 07       	cpc	r31, r21
    12fa:	98 f0       	brcs	.+38     	; 0x1322 <__fp_cmp+0x46>
    12fc:	62 1b       	sub	r22, r18
    12fe:	73 0b       	sbc	r23, r19
    1300:	84 0b       	sbc	r24, r20
    1302:	95 0b       	sbc	r25, r21
    1304:	39 f4       	brne	.+14     	; 0x1314 <__fp_cmp+0x38>
    1306:	0a 26       	eor	r0, r26
    1308:	61 f0       	breq	.+24     	; 0x1322 <__fp_cmp+0x46>
    130a:	23 2b       	or	r18, r19
    130c:	24 2b       	or	r18, r20
    130e:	25 2b       	or	r18, r21
    1310:	21 f4       	brne	.+8      	; 0x131a <__fp_cmp+0x3e>
    1312:	08 95       	ret
    1314:	0a 26       	eor	r0, r26
    1316:	09 f4       	brne	.+2      	; 0x131a <__fp_cmp+0x3e>
    1318:	a1 40       	sbci	r26, 0x01	; 1
    131a:	a6 95       	lsr	r26
    131c:	8f ef       	ldi	r24, 0xFF	; 255
    131e:	81 1d       	adc	r24, r1
    1320:	81 1d       	adc	r24, r1
    1322:	08 95       	ret

00001324 <__fp_inf>:
    1324:	97 f9       	bld	r25, 7
    1326:	9f 67       	ori	r25, 0x7F	; 127
    1328:	80 e8       	ldi	r24, 0x80	; 128
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	08 95       	ret

00001330 <__fp_nan>:
    1330:	9f ef       	ldi	r25, 0xFF	; 255
    1332:	80 ec       	ldi	r24, 0xC0	; 192
    1334:	08 95       	ret

00001336 <__fp_powser>:
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	1f 93       	push	r17
    133c:	0f 93       	push	r16
    133e:	ff 92       	push	r15
    1340:	ef 92       	push	r14
    1342:	df 92       	push	r13
    1344:	7b 01       	movw	r14, r22
    1346:	8c 01       	movw	r16, r24
    1348:	68 94       	set
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <__fp_powser+0x22>
    134c:	da 2e       	mov	r13, r26
    134e:	ef 01       	movw	r28, r30
    1350:	0e 94 98 0a 	call	0x1530	; 0x1530 <__mulsf3x>
    1354:	fe 01       	movw	r30, r28
    1356:	e8 94       	clt
    1358:	a5 91       	lpm	r26, Z+
    135a:	25 91       	lpm	r18, Z+
    135c:	35 91       	lpm	r19, Z+
    135e:	45 91       	lpm	r20, Z+
    1360:	55 91       	lpm	r21, Z+
    1362:	a6 f3       	brts	.-24     	; 0x134c <__fp_powser+0x16>
    1364:	ef 01       	movw	r28, r30
    1366:	0e 94 dd 07 	call	0xfba	; 0xfba <__addsf3x>
    136a:	fe 01       	movw	r30, r28
    136c:	97 01       	movw	r18, r14
    136e:	a8 01       	movw	r20, r16
    1370:	da 94       	dec	r13
    1372:	69 f7       	brne	.-38     	; 0x134e <__fp_powser+0x18>
    1374:	df 90       	pop	r13
    1376:	ef 90       	pop	r14
    1378:	ff 90       	pop	r15
    137a:	0f 91       	pop	r16
    137c:	1f 91       	pop	r17
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <__fp_pscA>:
    1384:	00 24       	eor	r0, r0
    1386:	0a 94       	dec	r0
    1388:	16 16       	cp	r1, r22
    138a:	17 06       	cpc	r1, r23
    138c:	18 06       	cpc	r1, r24
    138e:	09 06       	cpc	r0, r25
    1390:	08 95       	ret

00001392 <__fp_pscB>:
    1392:	00 24       	eor	r0, r0
    1394:	0a 94       	dec	r0
    1396:	12 16       	cp	r1, r18
    1398:	13 06       	cpc	r1, r19
    139a:	14 06       	cpc	r1, r20
    139c:	05 06       	cpc	r0, r21
    139e:	08 95       	ret

000013a0 <__fp_round>:
    13a0:	09 2e       	mov	r0, r25
    13a2:	03 94       	inc	r0
    13a4:	00 0c       	add	r0, r0
    13a6:	11 f4       	brne	.+4      	; 0x13ac <__fp_round+0xc>
    13a8:	88 23       	and	r24, r24
    13aa:	52 f0       	brmi	.+20     	; 0x13c0 <__fp_round+0x20>
    13ac:	bb 0f       	add	r27, r27
    13ae:	40 f4       	brcc	.+16     	; 0x13c0 <__fp_round+0x20>
    13b0:	bf 2b       	or	r27, r31
    13b2:	11 f4       	brne	.+4      	; 0x13b8 <__fp_round+0x18>
    13b4:	60 ff       	sbrs	r22, 0
    13b6:	04 c0       	rjmp	.+8      	; 0x13c0 <__fp_round+0x20>
    13b8:	6f 5f       	subi	r22, 0xFF	; 255
    13ba:	7f 4f       	sbci	r23, 0xFF	; 255
    13bc:	8f 4f       	sbci	r24, 0xFF	; 255
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	08 95       	ret

000013c2 <__fp_split3>:
    13c2:	57 fd       	sbrc	r21, 7
    13c4:	90 58       	subi	r25, 0x80	; 128
    13c6:	44 0f       	add	r20, r20
    13c8:	55 1f       	adc	r21, r21
    13ca:	59 f0       	breq	.+22     	; 0x13e2 <__fp_splitA+0x10>
    13cc:	5f 3f       	cpi	r21, 0xFF	; 255
    13ce:	71 f0       	breq	.+28     	; 0x13ec <__fp_splitA+0x1a>
    13d0:	47 95       	ror	r20

000013d2 <__fp_splitA>:
    13d2:	88 0f       	add	r24, r24
    13d4:	97 fb       	bst	r25, 7
    13d6:	99 1f       	adc	r25, r25
    13d8:	61 f0       	breq	.+24     	; 0x13f2 <__fp_splitA+0x20>
    13da:	9f 3f       	cpi	r25, 0xFF	; 255
    13dc:	79 f0       	breq	.+30     	; 0x13fc <__fp_splitA+0x2a>
    13de:	87 95       	ror	r24
    13e0:	08 95       	ret
    13e2:	12 16       	cp	r1, r18
    13e4:	13 06       	cpc	r1, r19
    13e6:	14 06       	cpc	r1, r20
    13e8:	55 1f       	adc	r21, r21
    13ea:	f2 cf       	rjmp	.-28     	; 0x13d0 <__fp_split3+0xe>
    13ec:	46 95       	lsr	r20
    13ee:	f1 df       	rcall	.-30     	; 0x13d2 <__fp_splitA>
    13f0:	08 c0       	rjmp	.+16     	; 0x1402 <__fp_splitA+0x30>
    13f2:	16 16       	cp	r1, r22
    13f4:	17 06       	cpc	r1, r23
    13f6:	18 06       	cpc	r1, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	f1 cf       	rjmp	.-30     	; 0x13de <__fp_splitA+0xc>
    13fc:	86 95       	lsr	r24
    13fe:	71 05       	cpc	r23, r1
    1400:	61 05       	cpc	r22, r1
    1402:	08 94       	sec
    1404:	08 95       	ret

00001406 <__fp_zero>:
    1406:	e8 94       	clt

00001408 <__fp_szero>:
    1408:	bb 27       	eor	r27, r27
    140a:	66 27       	eor	r22, r22
    140c:	77 27       	eor	r23, r23
    140e:	cb 01       	movw	r24, r22
    1410:	97 f9       	bld	r25, 7
    1412:	08 95       	ret

00001414 <__gesf2>:
    1414:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_cmp>
    1418:	08 f4       	brcc	.+2      	; 0x141c <__gesf2+0x8>
    141a:	8f ef       	ldi	r24, 0xFF	; 255
    141c:	08 95       	ret

0000141e <inverse>:
    141e:	9b 01       	movw	r18, r22
    1420:	ac 01       	movw	r20, r24
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	80 e8       	ldi	r24, 0x80	; 128
    1428:	9f e3       	ldi	r25, 0x3F	; 63
    142a:	0c 94 37 08 	jmp	0x106e	; 0x106e <__divsf3>
    142e:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__fp_inf>
    1432:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <__fp_mpack>

00001436 <ldexp>:
    1436:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_splitA>
    143a:	d8 f3       	brcs	.-10     	; 0x1432 <inverse+0x14>
    143c:	99 23       	and	r25, r25
    143e:	c9 f3       	breq	.-14     	; 0x1432 <inverse+0x14>
    1440:	94 0f       	add	r25, r20
    1442:	51 1d       	adc	r21, r1
    1444:	a3 f3       	brvs	.-24     	; 0x142e <inverse+0x10>
    1446:	91 50       	subi	r25, 0x01	; 1
    1448:	50 40       	sbci	r21, 0x00	; 0
    144a:	94 f0       	brlt	.+36     	; 0x1470 <ldexp+0x3a>
    144c:	59 f0       	breq	.+22     	; 0x1464 <ldexp+0x2e>
    144e:	88 23       	and	r24, r24
    1450:	32 f0       	brmi	.+12     	; 0x145e <ldexp+0x28>
    1452:	66 0f       	add	r22, r22
    1454:	77 1f       	adc	r23, r23
    1456:	88 1f       	adc	r24, r24
    1458:	91 50       	subi	r25, 0x01	; 1
    145a:	50 40       	sbci	r21, 0x00	; 0
    145c:	c1 f7       	brne	.-16     	; 0x144e <ldexp+0x18>
    145e:	9e 3f       	cpi	r25, 0xFE	; 254
    1460:	51 05       	cpc	r21, r1
    1462:	2c f7       	brge	.-54     	; 0x142e <inverse+0x10>
    1464:	88 0f       	add	r24, r24
    1466:	91 1d       	adc	r25, r1
    1468:	96 95       	lsr	r25
    146a:	87 95       	ror	r24
    146c:	97 f9       	bld	r25, 7
    146e:	08 95       	ret
    1470:	5f 3f       	cpi	r21, 0xFF	; 255
    1472:	ac f0       	brlt	.+42     	; 0x149e <ldexp+0x68>
    1474:	98 3e       	cpi	r25, 0xE8	; 232
    1476:	9c f0       	brlt	.+38     	; 0x149e <ldexp+0x68>
    1478:	bb 27       	eor	r27, r27
    147a:	86 95       	lsr	r24
    147c:	77 95       	ror	r23
    147e:	67 95       	ror	r22
    1480:	b7 95       	ror	r27
    1482:	08 f4       	brcc	.+2      	; 0x1486 <ldexp+0x50>
    1484:	b1 60       	ori	r27, 0x01	; 1
    1486:	93 95       	inc	r25
    1488:	c1 f7       	brne	.-16     	; 0x147a <ldexp+0x44>
    148a:	bb 0f       	add	r27, r27
    148c:	58 f7       	brcc	.-42     	; 0x1464 <ldexp+0x2e>
    148e:	11 f4       	brne	.+4      	; 0x1494 <ldexp+0x5e>
    1490:	60 ff       	sbrs	r22, 0
    1492:	e8 cf       	rjmp	.-48     	; 0x1464 <ldexp+0x2e>
    1494:	6f 5f       	subi	r22, 0xFF	; 255
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	8f 4f       	sbci	r24, 0xFF	; 255
    149a:	9f 4f       	sbci	r25, 0xFF	; 255
    149c:	e3 cf       	rjmp	.-58     	; 0x1464 <ldexp+0x2e>
    149e:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__fp_szero>

000014a2 <modf>:
    14a2:	fa 01       	movw	r30, r20
    14a4:	dc 01       	movw	r26, r24
    14a6:	aa 0f       	add	r26, r26
    14a8:	bb 1f       	adc	r27, r27
    14aa:	9b 01       	movw	r18, r22
    14ac:	ac 01       	movw	r20, r24
    14ae:	bf 57       	subi	r27, 0x7F	; 127
    14b0:	28 f4       	brcc	.+10     	; 0x14bc <modf+0x1a>
    14b2:	22 27       	eor	r18, r18
    14b4:	33 27       	eor	r19, r19
    14b6:	44 27       	eor	r20, r20
    14b8:	50 78       	andi	r21, 0x80	; 128
    14ba:	20 c0       	rjmp	.+64     	; 0x14fc <modf+0x5a>
    14bc:	b7 51       	subi	r27, 0x17	; 23
    14be:	90 f4       	brcc	.+36     	; 0x14e4 <modf+0x42>
    14c0:	ab 2f       	mov	r26, r27
    14c2:	00 24       	eor	r0, r0
    14c4:	46 95       	lsr	r20
    14c6:	37 95       	ror	r19
    14c8:	27 95       	ror	r18
    14ca:	01 1c       	adc	r0, r1
    14cc:	a3 95       	inc	r26
    14ce:	d2 f3       	brmi	.-12     	; 0x14c4 <modf+0x22>
    14d0:	00 20       	and	r0, r0
    14d2:	71 f0       	breq	.+28     	; 0x14f0 <modf+0x4e>
    14d4:	22 0f       	add	r18, r18
    14d6:	33 1f       	adc	r19, r19
    14d8:	44 1f       	adc	r20, r20
    14da:	b3 95       	inc	r27
    14dc:	da f3       	brmi	.-10     	; 0x14d4 <modf+0x32>
    14de:	0e d0       	rcall	.+28     	; 0x14fc <modf+0x5a>
    14e0:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__subsf3>
    14e4:	61 30       	cpi	r22, 0x01	; 1
    14e6:	71 05       	cpc	r23, r1
    14e8:	a0 e8       	ldi	r26, 0x80	; 128
    14ea:	8a 07       	cpc	r24, r26
    14ec:	b9 46       	sbci	r27, 0x69	; 105
    14ee:	30 f4       	brcc	.+12     	; 0x14fc <modf+0x5a>
    14f0:	9b 01       	movw	r18, r22
    14f2:	ac 01       	movw	r20, r24
    14f4:	66 27       	eor	r22, r22
    14f6:	77 27       	eor	r23, r23
    14f8:	88 27       	eor	r24, r24
    14fa:	90 78       	andi	r25, 0x80	; 128
    14fc:	30 96       	adiw	r30, 0x00	; 0
    14fe:	21 f0       	breq	.+8      	; 0x1508 <modf+0x66>
    1500:	20 83       	st	Z, r18
    1502:	31 83       	std	Z+1, r19	; 0x01
    1504:	42 83       	std	Z+2, r20	; 0x02
    1506:	53 83       	std	Z+3, r21	; 0x03
    1508:	08 95       	ret

0000150a <__mulsf3>:
    150a:	0e 94 98 0a 	call	0x1530	; 0x1530 <__mulsf3x>
    150e:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__fp_round>
    1512:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fp_pscA>
    1516:	38 f0       	brcs	.+14     	; 0x1526 <__mulsf3+0x1c>
    1518:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fp_pscB>
    151c:	20 f0       	brcs	.+8      	; 0x1526 <__mulsf3+0x1c>
    151e:	95 23       	and	r25, r21
    1520:	11 f0       	breq	.+4      	; 0x1526 <__mulsf3+0x1c>
    1522:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__fp_inf>
    1526:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__fp_nan>
    152a:	11 24       	eor	r1, r1
    152c:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__fp_szero>

00001530 <__mulsf3x>:
    1530:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fp_split3>
    1534:	70 f3       	brcs	.-36     	; 0x1512 <__mulsf3+0x8>

00001536 <__mulsf3_pse>:
    1536:	95 9f       	mul	r25, r21
    1538:	c1 f3       	breq	.-16     	; 0x152a <__mulsf3+0x20>
    153a:	95 0f       	add	r25, r21
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	55 1f       	adc	r21, r21
    1540:	62 9f       	mul	r22, r18
    1542:	f0 01       	movw	r30, r0
    1544:	72 9f       	mul	r23, r18
    1546:	bb 27       	eor	r27, r27
    1548:	f0 0d       	add	r31, r0
    154a:	b1 1d       	adc	r27, r1
    154c:	63 9f       	mul	r22, r19
    154e:	aa 27       	eor	r26, r26
    1550:	f0 0d       	add	r31, r0
    1552:	b1 1d       	adc	r27, r1
    1554:	aa 1f       	adc	r26, r26
    1556:	64 9f       	mul	r22, r20
    1558:	66 27       	eor	r22, r22
    155a:	b0 0d       	add	r27, r0
    155c:	a1 1d       	adc	r26, r1
    155e:	66 1f       	adc	r22, r22
    1560:	82 9f       	mul	r24, r18
    1562:	22 27       	eor	r18, r18
    1564:	b0 0d       	add	r27, r0
    1566:	a1 1d       	adc	r26, r1
    1568:	62 1f       	adc	r22, r18
    156a:	73 9f       	mul	r23, r19
    156c:	b0 0d       	add	r27, r0
    156e:	a1 1d       	adc	r26, r1
    1570:	62 1f       	adc	r22, r18
    1572:	83 9f       	mul	r24, r19
    1574:	a0 0d       	add	r26, r0
    1576:	61 1d       	adc	r22, r1
    1578:	22 1f       	adc	r18, r18
    157a:	74 9f       	mul	r23, r20
    157c:	33 27       	eor	r19, r19
    157e:	a0 0d       	add	r26, r0
    1580:	61 1d       	adc	r22, r1
    1582:	23 1f       	adc	r18, r19
    1584:	84 9f       	mul	r24, r20
    1586:	60 0d       	add	r22, r0
    1588:	21 1d       	adc	r18, r1
    158a:	82 2f       	mov	r24, r18
    158c:	76 2f       	mov	r23, r22
    158e:	6a 2f       	mov	r22, r26
    1590:	11 24       	eor	r1, r1
    1592:	9f 57       	subi	r25, 0x7F	; 127
    1594:	50 40       	sbci	r21, 0x00	; 0
    1596:	9a f0       	brmi	.+38     	; 0x15be <__mulsf3_pse+0x88>
    1598:	f1 f0       	breq	.+60     	; 0x15d6 <__mulsf3_pse+0xa0>
    159a:	88 23       	and	r24, r24
    159c:	4a f0       	brmi	.+18     	; 0x15b0 <__mulsf3_pse+0x7a>
    159e:	ee 0f       	add	r30, r30
    15a0:	ff 1f       	adc	r31, r31
    15a2:	bb 1f       	adc	r27, r27
    15a4:	66 1f       	adc	r22, r22
    15a6:	77 1f       	adc	r23, r23
    15a8:	88 1f       	adc	r24, r24
    15aa:	91 50       	subi	r25, 0x01	; 1
    15ac:	50 40       	sbci	r21, 0x00	; 0
    15ae:	a9 f7       	brne	.-22     	; 0x159a <__mulsf3_pse+0x64>
    15b0:	9e 3f       	cpi	r25, 0xFE	; 254
    15b2:	51 05       	cpc	r21, r1
    15b4:	80 f0       	brcs	.+32     	; 0x15d6 <__mulsf3_pse+0xa0>
    15b6:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__fp_inf>
    15ba:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__fp_szero>
    15be:	5f 3f       	cpi	r21, 0xFF	; 255
    15c0:	e4 f3       	brlt	.-8      	; 0x15ba <__mulsf3_pse+0x84>
    15c2:	98 3e       	cpi	r25, 0xE8	; 232
    15c4:	d4 f3       	brlt	.-12     	; 0x15ba <__mulsf3_pse+0x84>
    15c6:	86 95       	lsr	r24
    15c8:	77 95       	ror	r23
    15ca:	67 95       	ror	r22
    15cc:	b7 95       	ror	r27
    15ce:	f7 95       	ror	r31
    15d0:	e7 95       	ror	r30
    15d2:	9f 5f       	subi	r25, 0xFF	; 255
    15d4:	c1 f7       	brne	.-16     	; 0x15c6 <__mulsf3_pse+0x90>
    15d6:	fe 2b       	or	r31, r30
    15d8:	88 0f       	add	r24, r24
    15da:	91 1d       	adc	r25, r1
    15dc:	96 95       	lsr	r25
    15de:	87 95       	ror	r24
    15e0:	97 f9       	bld	r25, 7
    15e2:	08 95       	ret

000015e4 <sin>:
    15e4:	9f 93       	push	r25
    15e6:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__fp_rempio2>
    15ea:	0f 90       	pop	r0
    15ec:	07 fc       	sbrc	r0, 7
    15ee:	ee 5f       	subi	r30, 0xFE	; 254
    15f0:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__fp_sinus>

000015f4 <__fp_mpack>:
    15f4:	9f 3f       	cpi	r25, 0xFF	; 255
    15f6:	31 f0       	breq	.+12     	; 0x1604 <__fp_mpack_finite+0xc>

000015f8 <__fp_mpack_finite>:
    15f8:	91 50       	subi	r25, 0x01	; 1
    15fa:	20 f4       	brcc	.+8      	; 0x1604 <__fp_mpack_finite+0xc>
    15fc:	87 95       	ror	r24
    15fe:	77 95       	ror	r23
    1600:	67 95       	ror	r22
    1602:	b7 95       	ror	r27
    1604:	88 0f       	add	r24, r24
    1606:	91 1d       	adc	r25, r1
    1608:	96 95       	lsr	r25
    160a:	87 95       	ror	r24
    160c:	97 f9       	bld	r25, 7
    160e:	08 95       	ret
    1610:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__fp_nan>

00001614 <__fp_rempio2>:
    1614:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_splitA>
    1618:	d8 f3       	brcs	.-10     	; 0x1610 <__fp_mpack_finite+0x18>
    161a:	e8 94       	clt
    161c:	e0 e0       	ldi	r30, 0x00	; 0
    161e:	bb 27       	eor	r27, r27
    1620:	9f 57       	subi	r25, 0x7F	; 127
    1622:	f0 f0       	brcs	.+60     	; 0x1660 <__fp_rempio2+0x4c>
    1624:	2a ed       	ldi	r18, 0xDA	; 218
    1626:	3f e0       	ldi	r19, 0x0F	; 15
    1628:	49 ec       	ldi	r20, 0xC9	; 201
    162a:	06 c0       	rjmp	.+12     	; 0x1638 <__fp_rempio2+0x24>
    162c:	ee 0f       	add	r30, r30
    162e:	bb 0f       	add	r27, r27
    1630:	66 1f       	adc	r22, r22
    1632:	77 1f       	adc	r23, r23
    1634:	88 1f       	adc	r24, r24
    1636:	28 f0       	brcs	.+10     	; 0x1642 <__fp_rempio2+0x2e>
    1638:	b2 3a       	cpi	r27, 0xA2	; 162
    163a:	62 07       	cpc	r22, r18
    163c:	73 07       	cpc	r23, r19
    163e:	84 07       	cpc	r24, r20
    1640:	28 f0       	brcs	.+10     	; 0x164c <__fp_rempio2+0x38>
    1642:	b2 5a       	subi	r27, 0xA2	; 162
    1644:	62 0b       	sbc	r22, r18
    1646:	73 0b       	sbc	r23, r19
    1648:	84 0b       	sbc	r24, r20
    164a:	e3 95       	inc	r30
    164c:	9a 95       	dec	r25
    164e:	72 f7       	brpl	.-36     	; 0x162c <__fp_rempio2+0x18>
    1650:	80 38       	cpi	r24, 0x80	; 128
    1652:	30 f4       	brcc	.+12     	; 0x1660 <__fp_rempio2+0x4c>
    1654:	9a 95       	dec	r25
    1656:	bb 0f       	add	r27, r27
    1658:	66 1f       	adc	r22, r22
    165a:	77 1f       	adc	r23, r23
    165c:	88 1f       	adc	r24, r24
    165e:	d2 f7       	brpl	.-12     	; 0x1654 <__fp_rempio2+0x40>
    1660:	90 48       	sbci	r25, 0x80	; 128
    1662:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__fp_mpack_finite>

00001666 <__fp_sinus>:
    1666:	ef 93       	push	r30
    1668:	e0 ff       	sbrs	r30, 0
    166a:	07 c0       	rjmp	.+14     	; 0x167a <__fp_sinus+0x14>
    166c:	a2 ea       	ldi	r26, 0xA2	; 162
    166e:	2a ed       	ldi	r18, 0xDA	; 218
    1670:	3f e0       	ldi	r19, 0x0F	; 15
    1672:	49 ec       	ldi	r20, 0xC9	; 201
    1674:	5f eb       	ldi	r21, 0xBF	; 191
    1676:	0e 94 dd 07 	call	0xfba	; 0xfba <__addsf3x>
    167a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__fp_round>
    167e:	0f 90       	pop	r0
    1680:	03 94       	inc	r0
    1682:	01 fc       	sbrc	r0, 1
    1684:	90 58       	subi	r25, 0x80	; 128
    1686:	e4 ea       	ldi	r30, 0xA4	; 164
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_powsodd>

0000168e <__fp_powsodd>:
    168e:	9f 93       	push	r25
    1690:	8f 93       	push	r24
    1692:	7f 93       	push	r23
    1694:	6f 93       	push	r22
    1696:	ff 93       	push	r31
    1698:	ef 93       	push	r30
    169a:	9b 01       	movw	r18, r22
    169c:	ac 01       	movw	r20, r24
    169e:	0e 94 85 0a 	call	0x150a	; 0x150a <__mulsf3>
    16a2:	ef 91       	pop	r30
    16a4:	ff 91       	pop	r31
    16a6:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fp_powser>
    16aa:	2f 91       	pop	r18
    16ac:	3f 91       	pop	r19
    16ae:	4f 91       	pop	r20
    16b0:	5f 91       	pop	r21
    16b2:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__mulsf3>

000016b6 <__udivmodsi4>:
    16b6:	a1 e2       	ldi	r26, 0x21	; 33
    16b8:	1a 2e       	mov	r1, r26
    16ba:	aa 1b       	sub	r26, r26
    16bc:	bb 1b       	sub	r27, r27
    16be:	fd 01       	movw	r30, r26
    16c0:	0d c0       	rjmp	.+26     	; 0x16dc <__udivmodsi4_ep>

000016c2 <__udivmodsi4_loop>:
    16c2:	aa 1f       	adc	r26, r26
    16c4:	bb 1f       	adc	r27, r27
    16c6:	ee 1f       	adc	r30, r30
    16c8:	ff 1f       	adc	r31, r31
    16ca:	a2 17       	cp	r26, r18
    16cc:	b3 07       	cpc	r27, r19
    16ce:	e4 07       	cpc	r30, r20
    16d0:	f5 07       	cpc	r31, r21
    16d2:	20 f0       	brcs	.+8      	; 0x16dc <__udivmodsi4_ep>
    16d4:	a2 1b       	sub	r26, r18
    16d6:	b3 0b       	sbc	r27, r19
    16d8:	e4 0b       	sbc	r30, r20
    16da:	f5 0b       	sbc	r31, r21

000016dc <__udivmodsi4_ep>:
    16dc:	66 1f       	adc	r22, r22
    16de:	77 1f       	adc	r23, r23
    16e0:	88 1f       	adc	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	1a 94       	dec	r1
    16e6:	69 f7       	brne	.-38     	; 0x16c2 <__udivmodsi4_loop>
    16e8:	60 95       	com	r22
    16ea:	70 95       	com	r23
    16ec:	80 95       	com	r24
    16ee:	90 95       	com	r25
    16f0:	9b 01       	movw	r18, r22
    16f2:	ac 01       	movw	r20, r24
    16f4:	bd 01       	movw	r22, r26
    16f6:	cf 01       	movw	r24, r30
    16f8:	08 95       	ret

000016fa <_exit>:
    16fa:	f8 94       	cli

000016fc <__stop_program>:
    16fc:	ff cf       	rjmp	.-2      	; 0x16fc <__stop_program>
