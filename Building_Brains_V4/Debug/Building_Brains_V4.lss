
Building_Brains_V4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00803e00  00001c7c  00001d30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c26  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000056  00009c26  00001c26  00001cda  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000055  00803e16  00803e16  00001d46  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001d46  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001da4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004c8  00000000  00000000  00001de0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007b8f  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000030cf  00000000  00000000  00009e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000027d6  00000000  00000000  0000cf06  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000890  00000000  00000000  0000f6dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000030a3  00000000  00000000  0000ff6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000016d7  00000000  00000000  0001300f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000340  00000000  00000000  000146e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	aa c0       	rjmp	.+340    	; 0x156 <__ctors_end>
       2:	c4 c0       	rjmp	.+392    	; 0x18c <__bad_interrupt>
       4:	c3 c0       	rjmp	.+390    	; 0x18c <__bad_interrupt>
       6:	c2 c0       	rjmp	.+388    	; 0x18c <__bad_interrupt>
       8:	c1 c0       	rjmp	.+386    	; 0x18c <__bad_interrupt>
       a:	c0 c0       	rjmp	.+384    	; 0x18c <__bad_interrupt>
       c:	26 c5       	rjmp	.+2636   	; 0xa5a <__vector_6>
       e:	be c0       	rjmp	.+380    	; 0x18c <__bad_interrupt>
      10:	bd c0       	rjmp	.+378    	; 0x18c <__bad_interrupt>
      12:	bc c0       	rjmp	.+376    	; 0x18c <__bad_interrupt>
      14:	bb c0       	rjmp	.+374    	; 0x18c <__bad_interrupt>
      16:	ba c0       	rjmp	.+372    	; 0x18c <__bad_interrupt>
      18:	b9 c0       	rjmp	.+370    	; 0x18c <__bad_interrupt>
      1a:	b8 c0       	rjmp	.+368    	; 0x18c <__bad_interrupt>
      1c:	b7 c0       	rjmp	.+366    	; 0x18c <__bad_interrupt>
      1e:	b6 c0       	rjmp	.+364    	; 0x18c <__bad_interrupt>
      20:	b5 c0       	rjmp	.+362    	; 0x18c <__bad_interrupt>
      22:	b4 c0       	rjmp	.+360    	; 0x18c <__bad_interrupt>
      24:	b3 c0       	rjmp	.+358    	; 0x18c <__bad_interrupt>
      26:	b2 c0       	rjmp	.+356    	; 0x18c <__bad_interrupt>
      28:	b1 c0       	rjmp	.+354    	; 0x18c <__bad_interrupt>
      2a:	b0 c0       	rjmp	.+352    	; 0x18c <__bad_interrupt>
      2c:	af c0       	rjmp	.+350    	; 0x18c <__bad_interrupt>
      2e:	ae c0       	rjmp	.+348    	; 0x18c <__bad_interrupt>
      30:	ad c0       	rjmp	.+346    	; 0x18c <__bad_interrupt>
      32:	ac c0       	rjmp	.+344    	; 0x18c <__bad_interrupt>
      34:	07 63       	ori	r16, 0x37	; 55
      36:	42 36       	cpi	r20, 0x62	; 98
      38:	b7 9b       	sbis	0x16, 7	; 22
      3a:	d8 a7       	std	Y+40, r29	; 0x28
      3c:	1a 39       	cpi	r17, 0x9A	; 154
      3e:	68 56       	subi	r22, 0x68	; 104
      40:	18 ae       	std	Y+56, r1	; 0x38
      42:	ba ab       	std	Y+50, r27	; 0x32
      44:	55 8c       	ldd	r5, Z+29	; 0x1d
      46:	1d 3c       	cpi	r17, 0xCD	; 205
      48:	b7 cc       	rjmp	.-1682   	; 0xfffff9b8 <__eeprom_end+0xff7ef9b8>
      4a:	57 63       	ori	r21, 0x37	; 55
      4c:	bd 6d       	ori	r27, 0xDD	; 221
      4e:	ed fd       	.word	0xfded	; ????
      50:	75 3e       	cpi	r23, 0xE5	; 229
      52:	f6 17       	cp	r31, r22
      54:	72 31       	cpi	r23, 0x12	; 18
      56:	bf 00       	.word	0x00bf	; ????
      58:	00 00       	nop
      5a:	80 3f       	cpi	r24, 0xF0	; 240

0000005c <__trampolines_end>:
      5c:	00 40       	sbci	r16, 0x00	; 0
      5e:	7a 10       	cpse	r7, r10
      60:	f3 5a       	subi	r31, 0xA3	; 163
      62:	00 a0       	ldd	r0, Z+32	; 0x20
      64:	72 4e       	sbci	r23, 0xE2	; 226
      66:	18 09       	sbc	r17, r8
      68:	00 10       	cpse	r0, r0
      6a:	a5 d4       	rcall	.+2378   	; 0x9b6 <tinyDendrite_update_signals+0xe2>
      6c:	e8 00       	.word	0x00e8	; ????
      6e:	00 e8       	ldi	r16, 0x80	; 128
      70:	76 48       	sbci	r23, 0x86	; 134
      72:	17 00       	.word	0x0017	; ????
      74:	00 e4       	ldi	r16, 0x40	; 64
      76:	0b 54       	subi	r16, 0x4B	; 75
      78:	02 00       	.word	0x0002	; ????
      7a:	00 ca       	rjmp	.-3072   	; 0xfffff47c <__eeprom_end+0xff7ef47c>
      7c:	9a 3b       	cpi	r25, 0xBA	; 186
      7e:	00 00       	nop
      80:	00 e1       	ldi	r16, 0x10	; 16
      82:	f5 05       	cpc	r31, r5
      84:	00 00       	nop
      86:	80 96       	adiw	r24, 0x20	; 32
      88:	98 00       	.word	0x0098	; ????
      8a:	00 00       	nop
      8c:	40 42       	sbci	r20, 0x20	; 32
      8e:	0f 00       	.word	0x000f	; ????
      90:	00 00       	nop
      92:	a0 86       	std	Z+8, r10	; 0x08
      94:	01 00       	.word	0x0001	; ????
      96:	00 00       	nop
      98:	10 27       	eor	r17, r16
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	e8 03       	fmulsu	r22, r16
      a0:	00 00       	nop
      a2:	00 00       	nop
      a4:	64 00       	.word	0x0064	; ????
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	0a 00       	.word	0x000a	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	01 00       	.word	0x0001	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	2c 76       	andi	r18, 0x6C	; 108
      b8:	d8 88       	ldd	r13, Y+16	; 0x10
      ba:	dc 67       	ori	r29, 0x7C	; 124
      bc:	4f 08       	sbc	r4, r15
      be:	23 df       	rcall	.-442    	; 0xffffff06 <__eeprom_end+0xff7eff06>
      c0:	c1 df       	rcall	.-126    	; 0x44 <__SREG__+0x5>
      c2:	ae 59       	subi	r26, 0x9E	; 158
      c4:	e1 b1       	in	r30, 0x01	; 1
      c6:	b7 96       	adiw	r30, 0x27	; 39
      c8:	e5 e3       	ldi	r30, 0x35	; 53
      ca:	e4 53       	subi	r30, 0x34	; 52
      cc:	c6 3a       	cpi	r28, 0xA6	; 166
      ce:	e6 51       	subi	r30, 0x16	; 22
      d0:	99 76       	andi	r25, 0x69	; 105
      d2:	96 e8       	ldi	r25, 0x86	; 134
      d4:	e6 c2       	rjmp	.+1484   	; 0x6a2 <tinyButton_update_potential+0x6>
      d6:	84 26       	eor	r8, r20
      d8:	eb 89       	ldd	r30, Y+19	; 0x13
      da:	8c 9b       	sbis	0x11, 4	; 17
      dc:	62 ed       	ldi	r22, 0xD2	; 210
      de:	40 7c       	andi	r20, 0xC0	; 192
      e0:	6f fc       	.word	0xfc6f	; ????
      e2:	ef bc       	out	0x2f, r14	; 47
      e4:	9c 9f       	mul	r25, r28
      e6:	40 f2       	brcs	.-112    	; 0x78 <__trampolines_end+0x1c>
      e8:	ba a5       	ldd	r27, Y+42	; 0x2a
      ea:	6f a5       	ldd	r22, Y+47	; 0x2f
      ec:	f4 90       	lpm	r15, Z
      ee:	05 5a       	subi	r16, 0xA5	; 165
      f0:	2a f7       	brpl	.-54     	; 0xbc <__trampolines_end+0x60>
      f2:	5c 93       	st	X, r21
      f4:	6b 6c       	ori	r22, 0xCB	; 203
      f6:	f9 67       	ori	r31, 0x79	; 121
      f8:	6d c1       	rjmp	.+730    	; 0x3d4 <USART_0_init+0x4>
      fa:	1b fc       	.word	0xfc1b	; ????
      fc:	e0 e4       	ldi	r30, 0x40	; 64
      fe:	0d 47       	sbci	r16, 0x7D	; 125
     100:	fe f5       	brtc	.+126    	; 0x180 <.do_clear_bss_loop>
     102:	20 e6       	ldi	r18, 0x60	; 96
     104:	b5 00       	.word	0x00b5	; ????
     106:	d0 ed       	ldi	r29, 0xD0	; 208
     108:	90 2e       	mov	r9, r16
     10a:	03 00       	.word	0x0003	; ????
     10c:	94 35       	cpi	r25, 0x54	; 84
     10e:	77 05       	cpc	r23, r7
     110:	00 80       	ld	r0, Z
     112:	84 1e       	adc	r8, r20
     114:	08 00       	.word	0x0008	; ????
     116:	00 20       	and	r0, r0
     118:	4e 0a       	sbc	r4, r30
     11a:	00 00       	nop
     11c:	00 c8       	rjmp	.-4096   	; 0xfffff11e <__eeprom_end+0xff7ef11e>
     11e:	0c 33       	cpi	r16, 0x3C	; 60
     120:	33 33       	cpi	r19, 0x33	; 51
     122:	33 0f       	add	r19, r19
     124:	98 6e       	ori	r25, 0xE8	; 232
     126:	12 83       	std	Z+2, r17	; 0x02
     128:	11 41       	sbci	r17, 0x11	; 17
     12a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     12c:	21 14       	cp	r2, r1
     12e:	89 3b       	cpi	r24, 0xB9	; 185
     130:	e6 55       	subi	r30, 0x56	; 86
     132:	16 cf       	rjmp	.-468    	; 0xffffff60 <__eeprom_end+0xff7eff60>
     134:	fe e6       	ldi	r31, 0x6E	; 110
     136:	db 18       	sub	r13, r11
     138:	d1 84       	ldd	r13, Z+9	; 0x09
     13a:	4b 38       	cpi	r20, 0x8B	; 139
     13c:	1b f7       	brvc	.-58     	; 0x104 <__trampolines_end+0xa8>
     13e:	7c 1d       	adc	r23, r12
     140:	90 1d       	adc	r25, r0
     142:	a4 bb       	out	0x14, r26	; 20
     144:	e4 24       	eor	r14, r4
     146:	20 32       	cpi	r18, 0x20	; 32
     148:	84 72       	andi	r24, 0x24	; 36
     14a:	5e 22       	and	r5, r30
     14c:	81 00       	.word	0x0081	; ????
     14e:	c9 f1       	breq	.+114    	; 0x1c2 <ADC_get_conversion+0x1e>
     150:	24 ec       	ldi	r18, 0xC4	; 196
     152:	a1 e5       	ldi	r26, 0x51	; 81
     154:	3d 27       	eor	r19, r29

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf ef       	ldi	r28, 0xFF	; 255
     15c:	cd bf       	out	0x3d, r28	; 61
     15e:	df e3       	ldi	r29, 0x3F	; 63
     160:	de bf       	out	0x3e, r29	; 62

00000162 <__do_copy_data>:
     162:	1e e3       	ldi	r17, 0x3E	; 62
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	be e3       	ldi	r27, 0x3E	; 62
     168:	ec e7       	ldi	r30, 0x7C	; 124
     16a:	fc e1       	ldi	r31, 0x1C	; 28
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a6 31       	cpi	r26, 0x16	; 22
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	2e e3       	ldi	r18, 0x3E	; 62
     17a:	a6 e1       	ldi	r26, 0x16	; 22
     17c:	be e3       	ldi	r27, 0x3E	; 62
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	ab 36       	cpi	r26, 0x6B	; 107
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	21 d2       	rcall	.+1090   	; 0x5cc <main>
     18a:	4b cd       	rjmp	.-1386   	; 0xfffffc22 <__eeprom_end+0xff7efc22>

0000018c <__bad_interrupt>:
     18c:	39 cf       	rjmp	.-398    	; 0x0 <__vectors>

0000018e <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     18e:	c5 d0       	rcall	.+394    	; 0x31a <system_init>
     190:	08 95       	ret

00000192 <ADC_init>:
 * \return Conversion result read from the ADC ADC module
 */
adc_result_t ADC_get_conversion_result(void)
{
	return (ADC0.RES);
}
     192:	85 e0       	ldi	r24, 0x05	; 5
     194:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	08 95       	ret

0000019c <ADC_is_conversion_done>:
     19c:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     1a0:	81 70       	andi	r24, 0x01	; 1
     1a2:	08 95       	ret

000001a4 <ADC_get_conversion>:
 *
 * \return Nothing
 */
void ADC_start_conversion(adc_0_channel_t channel)
{
	ADC0.MUXPOS  = channel;
     1a4:	e0 e0       	ldi	r30, 0x00	; 0
     1a6:	f6 e0       	ldi	r31, 0x06	; 6
     1a8:	86 83       	std	Z+6, r24	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm;
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	80 87       	std	Z+8, r24	; 0x08
adc_result_t ADC_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_start_conversion(channel);
	while (!ADC_is_conversion_done())
     1ae:	f6 df       	rcall	.-20     	; 0x19c <ADC_is_conversion_done>
     1b0:	88 23       	and	r24, r24
     1b2:	e9 f3       	breq	.-6      	; 0x1ae <ADC_get_conversion+0xa>
 *
 * \return Conversion result read from the ADC ADC module
 */
adc_result_t ADC_get_conversion_result(void)
{
	return (ADC0.RES);
     1b4:	e0 e0       	ldi	r30, 0x00	; 0
     1b6:	f6 e0       	ldi	r31, 0x06	; 6
     1b8:	20 89       	ldd	r18, Z+16	; 0x10
     1ba:	31 89       	ldd	r19, Z+17	; 0x11

	ADC_start_conversion(channel);
	while (!ADC_is_conversion_done())
		;
	res = ADC_get_conversion_result();
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
     1bc:	93 85       	ldd	r25, Z+11	; 0x0b
     1be:	91 60       	ori	r25, 0x01	; 1
     1c0:	93 87       	std	Z+11, r25	; 0x0b
	return res;
}
     1c2:	c9 01       	movw	r24, r18
     1c4:	08 95       	ret

000001c6 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp      /* voltage level monitor interrrupt enable: disabled */
     1c6:	82 e0       	ldi	r24, 0x02	; 2
     1c8:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	              | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	08 95       	ret

000001d0 <DIGGSIGG_init>:
	//		 | CCL_EDGEDET_DIS_gc /* Edge detector is disabled */
	//		 | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	//		 | 0 << CCL_ENABLE_bp /* LUT Enable: disabled */
	//		 | 0 << CCL_OUTEN_bp; /* Output Enable: disabled */

	CCL.TRUTH1 = 168; /* Truth 1: 168 */
     1d0:	e0 ec       	ldi	r30, 0xC0	; 192
     1d2:	f1 e0       	ldi	r31, 0x01	; 1
     1d4:	88 ea       	ldi	r24, 0xA8	; 168
     1d6:	84 87       	std	Z+12, r24	; 0x0c

	CCL.LUT1CTRLC = CCL_INSEL2_TCA0_gc /* TCA0 WO2 input source */;
     1d8:	88 e0       	ldi	r24, 0x08	; 8
     1da:	83 87       	std	Z+11, r24	; 0x0b

	CCL.LUT1CTRLB = CCL_INSEL0_SPI0_gc /* SPI0 SCK source */
     1dc:	8b eb       	ldi	r24, 0xBB	; 187
     1de:	82 87       	std	Z+10, r24	; 0x0a
	                | CCL_INSEL1_SPI0_gc /* SPI0 MOSI input source */;

	CCL.LUT1CTRLA = 0 << CCL_CLKSRC_bp       /* Clock Source Selection: disabled */
     1e0:	89 e0       	ldi	r24, 0x09	; 9
     1e2:	81 87       	std	Z+9, r24	; 0x09
	                | CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	                | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	                | 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	                | 1 << CCL_OUTEN_bp;     /* Output Enable: enabled */

	CCL.CTRLA = 1 << CCL_ENABLE_bp      /* Enable: enabled */
     1e4:	81 e4       	ldi	r24, 0x41	; 65
     1e6:	80 83       	st	Z, r24
	            | 1 << CCL_RUNSTDBY_bp; /* Run in Standby: enabled */

	return 0;
}
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	08 95       	ret

000001ec <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     1ec:	47 e0       	ldi	r20, 0x07	; 7
     1ee:	68 ed       	ldi	r22, 0xD8	; 216
     1f0:	8c e7       	ldi	r24, 0x7C	; 124
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	b3 d0       	rcall	.+358    	; 0x35c <protected_write_io>
     1f6:	41 e0       	ldi	r20, 0x01	; 1
     1f8:	68 ed       	ldi	r22, 0xD8	; 216
     1fa:	81 e6       	ldi	r24, 0x61	; 97
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	ae d0       	rcall	.+348    	; 0x35c <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	08 95       	ret

00000204 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     204:	78 94       	sei

	return 0;
}
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	08 95       	ret

0000020a <DAC_init>:
 *
 * \return Nothing
 */
void DAC_disable()
{
	DAC0.CTRLA &= ~DAC_ENABLE_bm;
     20a:	81 e4       	ldi	r24, 0x41	; 65
     20c:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	08 95       	ret

00000214 <DAC_set_output>:
 *
 * \return Nothing
 */
void DAC_set_output(dac_resolution_t value)
{
	DAC0.DATA = value;
     214:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
     218:	08 95       	ret

0000021a <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     21a:	e0 e1       	ldi	r30, 0x10	; 16
     21c:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     21e:	80 81       	ld	r24, Z
     220:	88 60       	ori	r24, 0x08	; 8
     222:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     224:	e8 31       	cpi	r30, 0x18	; 24
     226:	84 e0       	ldi	r24, 0x04	; 4
     228:	f8 07       	cpc	r31, r24
     22a:	c9 f7       	brne	.-14     	; 0x21e <mcu_init+0x4>
     22c:	e0 e3       	ldi	r30, 0x30	; 48
     22e:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     230:	80 81       	ld	r24, Z
     232:	88 60       	ori	r24, 0x08	; 8
     234:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     236:	e8 33       	cpi	r30, 0x38	; 56
     238:	84 e0       	ldi	r24, 0x04	; 4
     23a:	f8 07       	cpc	r31, r24
     23c:	c9 f7       	brne	.-14     	; 0x230 <mcu_init+0x16>
     23e:	e0 e5       	ldi	r30, 0x50	; 80
     240:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     242:	80 81       	ld	r24, Z
     244:	88 60       	ori	r24, 0x08	; 8
     246:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     248:	e8 35       	cpi	r30, 0x58	; 88
     24a:	84 e0       	ldi	r24, 0x04	; 4
     24c:	f8 07       	cpc	r31, r24
     24e:	c9 f7       	brne	.-14     	; 0x242 <mcu_init+0x28>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     250:	08 95       	ret

00000252 <ADC_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     252:	e5 e1       	ldi	r30, 0x15	; 21
     254:	f4 e0       	ldi	r31, 0x04	; 4
     256:	80 81       	ld	r24, Z
     258:	88 7f       	andi	r24, 0xF8	; 248
     25a:	84 60       	ori	r24, 0x04	; 4
     25c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     25e:	80 81       	ld	r24, Z
     260:	87 7f       	andi	r24, 0xF7	; 247
     262:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     264:	e7 e1       	ldi	r30, 0x17	; 23
     266:	f4 e0       	ldi	r31, 0x04	; 4
     268:	80 81       	ld	r24, Z
     26a:	88 7f       	andi	r24, 0xF8	; 248
     26c:	84 60       	ori	r24, 0x04	; 4
     26e:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     270:	80 81       	ld	r24, Z
     272:	87 7f       	andi	r24, 0xF7	; 247
     274:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     276:	e4 e3       	ldi	r30, 0x34	; 52
     278:	f4 e0       	ldi	r31, 0x04	; 4
     27a:	80 81       	ld	r24, Z
     27c:	88 7f       	andi	r24, 0xF8	; 248
     27e:	84 60       	ori	r24, 0x04	; 4
     280:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     282:	80 81       	ld	r24, Z
     284:	87 7f       	andi	r24, 0xF7	; 247
     286:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     288:	e1 e3       	ldi	r30, 0x31	; 49
     28a:	f4 e0       	ldi	r31, 0x04	; 4
     28c:	80 81       	ld	r24, Z
     28e:	88 7f       	andi	r24, 0xF8	; 248
     290:	84 60       	ori	r24, 0x04	; 4
     292:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     294:	80 81       	ld	r24, Z
     296:	87 7f       	andi	r24, 0xF7	; 247
     298:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     29a:	e0 e3       	ldi	r30, 0x30	; 48
     29c:	f4 e0       	ldi	r31, 0x04	; 4
     29e:	80 81       	ld	r24, Z
     2a0:	88 7f       	andi	r24, 0xF8	; 248
     2a2:	84 60       	ori	r24, 0x04	; 4
     2a4:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     2a6:	80 81       	ld	r24, Z
     2a8:	87 7f       	andi	r24, 0xF7	; 247
     2aa:	80 83       	st	Z, r24
	// Disable digital input buffer
	DEN4_PIN_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	DEN4_PIN_set_pull_mode(PORT_PULL_OFF);

	ADC_init();
     2ac:	72 df       	rcall	.-284    	; 0x192 <ADC_init>
     2ae:	08 95       	ret

000002b0 <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     2b0:	23 98       	cbi	0x04, 3	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     2b2:	e3 e3       	ldi	r30, 0x33	; 51
     2b4:	f4 e0       	ldi	r31, 0x04	; 4
     2b6:	80 81       	ld	r24, Z
     2b8:	87 7f       	andi	r24, 0xF7	; 247
     2ba:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     2bc:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     2be:	2a 98       	cbi	0x05, 2	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     2c0:	87 d0       	rcall	.+270    	; 0x3d0 <USART_0_init>
     2c2:	08 95       	ret

000002c4 <TIMER_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     2c4:	25 9a       	sbi	0x04, 5	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     2c6:	2d 98       	cbi	0x05, 5	; 5
	    // <false"> Low
	    // <true"> High
	    false);

	/* set the alternate pin mux */
	PORTMUX.CTRLC |= PORTMUX_TCA02_bm;
     2c8:	e0 e0       	ldi	r30, 0x00	; 0
     2ca:	f2 e0       	ldi	r31, 0x02	; 2
     2cc:	82 81       	ldd	r24, Z+2	; 0x02
     2ce:	84 60       	ori	r24, 0x04	; 4
     2d0:	82 83       	std	Z+2, r24	; 0x02

	TIMER_0_init();
     2d2:	6e d0       	rcall	.+220    	; 0x3b0 <TIMER_0_init>
     2d4:	08 95       	ret

000002d6 <DIGGSIGG_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     2d6:	41 9a       	sbi	0x08, 1	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     2d8:	49 98       	cbi	0x09, 1	; 9
	    // <false"> Low
	    // <true"> High
	    false);

	/* set the alternate pin mux */
	PORTMUX.CTRLA |= PORTMUX_LUT1_bm;
     2da:	e0 e0       	ldi	r30, 0x00	; 0
     2dc:	f2 e0       	ldi	r31, 0x02	; 2
     2de:	80 81       	ld	r24, Z
     2e0:	80 62       	ori	r24, 0x20	; 32
     2e2:	80 83       	st	Z, r24

	DIGGSIGG_init();
     2e4:	75 df       	rcall	.-278    	; 0x1d0 <DIGGSIGG_init>
     2e6:	08 95       	ret

000002e8 <SPI_0_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     2e8:	02 98       	cbi	0x00, 2	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     2ea:	e2 e1       	ldi	r30, 0x12	; 18
     2ec:	f4 e0       	ldi	r31, 0x04	; 4
     2ee:	80 81       	ld	r24, Z
     2f0:	87 7f       	andi	r24, 0xF7	; 247
     2f2:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     2f4:	01 9a       	sbi	0x00, 1	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     2f6:	09 98       	cbi	0x01, 1	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     2f8:	03 9a       	sbi	0x00, 3	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     2fa:	0b 98       	cbi	0x01, 3	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     2fc:	04 9a       	sbi	0x00, 4	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     2fe:	0c 98       	cbi	0x01, 4	; 1
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
     300:	4f d0       	rcall	.+158    	; 0x3a0 <SPI_0_init>
     302:	08 95       	ret

00000304 <DAC_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     304:	e6 e1       	ldi	r30, 0x16	; 22
     306:	f4 e0       	ldi	r31, 0x04	; 4
     308:	80 81       	ld	r24, Z
     30a:	88 7f       	andi	r24, 0xF8	; 248
     30c:	84 60       	ori	r24, 0x04	; 4
     30e:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     310:	80 81       	ld	r24, Z
     312:	87 7f       	andi	r24, 0xF7	; 247
     314:	80 83       	st	Z, r24
	// Disable digital input buffer
	AXON_PIN_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	AXON_PIN_set_pull_mode(PORT_PULL_OFF);

	DAC_init();
     316:	79 df       	rcall	.-270    	; 0x20a <DAC_init>
     318:	08 95       	ret

0000031a <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     31a:	7f df       	rcall	.-258    	; 0x21a <mcu_init>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     31c:	26 98       	cbi	0x04, 6	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     31e:	e6 e3       	ldi	r30, 0x36	; 54
     320:	f4 e0       	ldi	r31, 0x04	; 4
     322:	80 81       	ld	r24, Z
     324:	87 7f       	andi	r24, 0xF7	; 247
     326:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     328:	27 98       	cbi	0x04, 7	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     32a:	e7 e3       	ldi	r30, 0x37	; 55
     32c:	f4 e0       	ldi	r31, 0x04	; 4
     32e:	80 81       	ld	r24, Z
     330:	87 7f       	andi	r24, 0xF7	; 247
     332:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     334:	42 98       	cbi	0x08, 2	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     336:	e2 e5       	ldi	r30, 0x52	; 82
     338:	f4 e0       	ldi	r31, 0x04	; 4
     33a:	80 81       	ld	r24, Z
     33c:	88 60       	ori	r24, 0x08	; 8
     33e:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     340:	45 9a       	sbi	0x08, 5	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     342:	4d 9a       	sbi	0x09, 5	; 9
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    true);

	CLKCTRL_init();
     344:	53 df       	rcall	.-346    	; 0x1ec <CLKCTRL_init>

	RTC_init();
     346:	0e d0       	rcall	.+28     	; 0x364 <RTC_init>

	ADC_initialization();
     348:	84 df       	rcall	.-248    	; 0x252 <ADC_initialization>

	USART_0_initialization();
     34a:	b2 df       	rcall	.-156    	; 0x2b0 <USART_0_initialization>

	TIMER_0_initialization();
     34c:	bb df       	rcall	.-138    	; 0x2c4 <TIMER_0_initialization>

	DIGGSIGG_initialization();
     34e:	c3 df       	rcall	.-122    	; 0x2d6 <DIGGSIGG_initialization>

	SPI_0_initialization();
     350:	cb df       	rcall	.-106    	; 0x2e8 <SPI_0_initialization>

	DAC_initialization();
     352:	d8 df       	rcall	.-80     	; 0x304 <DAC_initialization>

	CPUINT_init();
     354:	57 df       	rcall	.-338    	; 0x204 <CPUINT_init>

	SLPCTRL_init();
     356:	22 d0       	rcall	.+68     	; 0x39c <SLPCTRL_init>

	BOD_init();
     358:	36 df       	rcall	.-404    	; 0x1c6 <BOD_init>
     35a:	08 95       	ret

0000035c <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     35c:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     35e:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     360:	40 83       	st	Z, r20
	ret                             // Return to caller
     362:	08 95       	ret

00000364 <RTC_init>:
 * \return Initialization status.
 */
int8_t RTC_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     364:	e0 e4       	ldi	r30, 0x40	; 64
     366:	f1 e0       	ldi	r31, 0x01	; 1
     368:	81 81       	ldd	r24, Z+1	; 0x01
     36a:	81 11       	cpse	r24, r1
     36c:	fd cf       	rjmp	.-6      	; 0x368 <RTC_init+0x4>
	}

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	RTC.CNT = 0x20; /* Counter: 0x20 */
     36e:	e0 e4       	ldi	r30, 0x40	; 64
     370:	f1 e0       	ldi	r31, 0x01	; 1
     372:	80 e2       	ldi	r24, 0x20	; 32
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	80 87       	std	Z+8, r24	; 0x08
     378:	91 87       	std	Z+9, r25	; 0x09

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     37a:	81 e8       	ldi	r24, 0x81	; 129
     37c:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x20 / TIMESCALE; /* Period: 0x20 */
     37e:	80 e8       	ldi	r24, 0x80	; 128
     380:	92 e0       	ldi	r25, 0x02	; 2
     382:	82 87       	std	Z+10, r24	; 0x0a
     384:	93 87       	std	Z+11, r25	; 0x0b

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	RTC.DBGCTRL = 1 << RTC_DBGRUN_bp; /* Run in debug: enabled */
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	85 83       	std	Z+5, r24	; 0x05

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
     38a:	82 83       	std	Z+2, r24	; 0x02
	              | 1 << RTC_OVF_bp; /* Overflow Interrupt enable: enabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     38c:	81 89       	ldd	r24, Z+17	; 0x11
     38e:	81 11       	cpse	r24, r1
     390:	fd cf       	rjmp	.-6      	; 0x38c <RTC_init+0x28>
	}

	RTC.PITCTRLA = RTC_PERIOD_OFF_gc    /* Off */
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	08 95       	ret

0000039c <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	08 95       	ret

000003a0 <SPI_0_init>:
 * \return Initialization status
 */
int8_t SPI_0_init()
{

	SPI0.CTRLA = 0 << SPI_CLK2X_bp     /* Enable Double Speed: disabled */
     3a0:	e0 e2       	ldi	r30, 0x20	; 32
     3a2:	f8 e0       	ldi	r31, 0x08	; 8
     3a4:	83 e2       	ldi	r24, 0x23	; 35
     3a6:	80 83       	st	Z, r24
	             | 0 << SPI_DORD_bp    /* Data Order Setting: disabled */
	             | 1 << SPI_ENABLE_bp  /* Enable Module: enabled */
	             | 1 << SPI_MASTER_bp  /* SPI module in master mode */
	             | SPI_PRESC_DIV16_gc; /* System Clock / 16 */

	SPI0.CTRLB = 0 << SPI_BUFEN_bp   /* Buffer Mode Enable: disabled */
     3a8:	84 e0       	ldi	r24, 0x04	; 4
     3aa:	81 83       	std	Z+1, r24	; 0x01
	//		 | 0 << SPI_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << SPI_SSIE_bp /* Slave Select Trigger Interrupt Enable: disabled */
	//		 | 0 << SPI_TXCIE_bp; /* Transfer Complete Interrupt Enable: disabled */

	return 0;
}
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	08 95       	ret

000003b0 <TIMER_0_init>:

	// TCA0.SINGLE.CMP0 = 0x0; /* Compare Register 0: 0x0 */

	// TCA0.SINGLE.CMP1 = 0x0; /* Compare Register 1: 0x0 */

	TCA0.SINGLE.CMP2 = 0x4; /* Compare Register 2: 0x4 */
     3b0:	e0 e0       	ldi	r30, 0x00	; 0
     3b2:	fa e0       	ldi	r31, 0x0A	; 10
     3b4:	84 e0       	ldi	r24, 0x04	; 4
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	84 a7       	std	Z+44, r24	; 0x2c
     3ba:	95 a7       	std	Z+45, r25	; 0x2d

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
     3bc:	83 e4       	ldi	r24, 0x43	; 67
     3be:	81 83       	std	Z+1, r24	; 0x01
	                    | 0 << TCA_SINGLE_CMP0EN_bp         /* Compare 0 Enable: disabled */
	                    | 0 << TCA_SINGLE_CMP1EN_bp         /* Compare 1 Enable: disabled */
	                    | 1 << TCA_SINGLE_CMP2EN_bp         /* Compare 2 Enable: enabled */
	                    | TCA_SINGLE_WGMODE_SINGLESLOPE_gc; /*  */

	TCA0.SINGLE.CTRLC = 0 << TCA_SINGLE_CMP0OV_bp    /* Compare 0 Waveform Output Value: disabled */
     3c0:	84 e0       	ldi	r24, 0x04	; 4
     3c2:	82 83       	std	Z+2, r24	; 0x02
	// TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp /* Compare 0 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	TCA0.SINGLE.PER = 0x7; /* Period: 0x7 */
     3c4:	87 e0       	ldi	r24, 0x07	; 7
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	86 a3       	std	Z+38, r24	; 0x26
     3ca:	97 a3       	std	Z+39, r25	; 0x27

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp; /* Module Enable: disabled */

	return 0;
}
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	08 95       	ret

000003d0 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART0.STATUS & USART_RXCIF_bm))
		;
	return USART0.RXDATAL;
}
     3d0:	e0 e0       	ldi	r30, 0x00	; 0
     3d2:	f8 e0       	ldi	r31, 0x08	; 8
     3d4:	87 e4       	ldi	r24, 0x47	; 71
     3d6:	90 e1       	ldi	r25, 0x10	; 16
     3d8:	80 87       	std	Z+8, r24	; 0x08
     3da:	91 87       	std	Z+9, r25	; 0x09
     3dc:	80 ec       	ldi	r24, 0xC0	; 192
     3de:	86 83       	std	Z+6, r24	; 0x06
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	9e e3       	ldi	r25, 0x3E	; 62
     3e4:	80 93 67 3e 	sts	0x3E67, r24	; 0x803e67 <__iob+0x2>
     3e8:	90 93 68 3e 	sts	0x3E68, r25	; 0x803e68 <__iob+0x3>
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	08 95       	ret

000003f0 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
     3f0:	e0 e0       	ldi	r30, 0x00	; 0
     3f2:	f8 e0       	ldi	r31, 0x08	; 8
     3f4:	94 81       	ldd	r25, Z+4	; 0x04
     3f6:	95 ff       	sbrs	r25, 5
     3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <USART_0_write+0x4>
		;
	USART0.TXDATAL = data;
     3fa:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     3fe:	08 95       	ret

00000400 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
     400:	f7 df       	rcall	.-18     	; 0x3f0 <USART_0_write>
	return 0;
}
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	08 95       	ret

00000408 <tinyCharge_is_connected_to_charger>:
		connected_to_charger = charging_status;
		tinyCharge_switch_mode();
	}
}

void tinyCharge_switch_mode(){
     408:	80 91 58 3e 	lds	r24, 0x3E58	; 0x803e58 <connected_to_charger>
     40c:	08 95       	ret

0000040e <tinyCharge_is_fully_charged>:
     40e:	86 b1       	in	r24, 0x06	; 6
     410:	88 1f       	adc	r24, r24
     412:	88 27       	eor	r24, r24
     414:	88 1f       	adc	r24, r24
     416:	08 95       	ret

00000418 <tinyCharge_set_charging_mode>:
     418:	90 91 58 3e 	lds	r25, 0x3E58	; 0x803e58 <connected_to_charger>
     41c:	98 13       	cpse	r25, r24
     41e:	80 93 58 3e 	sts	0x3E58, r24	; 0x803e58 <connected_to_charger>
     422:	08 95       	ret

00000424 <tinyCharge_set_transistors>:
	}
}


void tinyCharge_set_transistors(){
	if(connected_to_charger){
     424:	80 91 58 3e 	lds	r24, 0x3E58	; 0x803e58 <connected_to_charger>
     428:	88 23       	and	r24, r24
     42a:	11 f0       	breq	.+4      	; 0x430 <tinyCharge_set_transistors+0xc>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     42c:	4d 98       	cbi	0x09, 5	; 9
     42e:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     430:	4d 9a       	sbi	0x09, 5	; 9
     432:	08 95       	ret

00000434 <tinyDebugger_send_uint32>:
		printf("%s:%5s\t", name, number);
	}
}
void tinyDebugger_send_string(const char* name, char * value){
	if(DEBUGGING && tinyDebugger_send_message){
		printf("%s:%s\t", name, value);
     434:	20 91 0e 3e 	lds	r18, 0x3E0E	; 0x803e0e <tinyDebugger_send_message>
     438:	22 23       	and	r18, r18
     43a:	81 f0       	breq	.+32     	; 0x45c <tinyDebugger_send_uint32+0x28>
     43c:	7f 93       	push	r23
     43e:	6f 93       	push	r22
     440:	5f 93       	push	r21
     442:	4f 93       	push	r20
     444:	9f 93       	push	r25
     446:	8f 93       	push	r24
     448:	8e e2       	ldi	r24, 0x2E	; 46
     44a:	9c e9       	ldi	r25, 0x9C	; 156
     44c:	9f 93       	push	r25
     44e:	8f 93       	push	r24
     450:	c3 d6       	rcall	.+3462   	; 0x11d8 <printf>
     452:	8d b7       	in	r24, 0x3d	; 61
     454:	9e b7       	in	r25, 0x3e	; 62
     456:	08 96       	adiw	r24, 0x08	; 8
     458:	8d bf       	out	0x3d, r24	; 61
     45a:	9e bf       	out	0x3e, r25	; 62
     45c:	08 95       	ret

0000045e <tinyDebugger_send_uint8>:
     45e:	20 91 0e 3e 	lds	r18, 0x3E0E	; 0x803e0e <tinyDebugger_send_message>
     462:	22 23       	and	r18, r18
     464:	79 f0       	breq	.+30     	; 0x484 <tinyDebugger_send_uint8+0x26>
     466:	1f 92       	push	r1
     468:	6f 93       	push	r22
     46a:	9f 93       	push	r25
     46c:	8f 93       	push	r24
     46e:	87 e3       	ldi	r24, 0x37	; 55
     470:	9c e9       	ldi	r25, 0x9C	; 156
     472:	9f 93       	push	r25
     474:	8f 93       	push	r24
     476:	b0 d6       	rcall	.+3424   	; 0x11d8 <printf>
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	08 95       	ret

00000486 <tinyDebugger_send_double>:
     486:	cf 92       	push	r12
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	64 97       	sbiw	r28, 0x14	; 20
     49c:	cd bf       	out	0x3d, r28	; 61
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	38 2f       	mov	r19, r24
     4a2:	e9 2f       	mov	r30, r25
     4a4:	20 91 0e 3e 	lds	r18, 0x3E0E	; 0x803e0e <tinyDebugger_send_message>
     4a8:	22 23       	and	r18, r18
     4aa:	d9 f0       	breq	.+54     	; 0x4e2 <tinyDebugger_send_double+0x5c>
     4ac:	cb 01       	movw	r24, r22
     4ae:	ba 01       	movw	r22, r20
     4b0:	ee 2e       	mov	r14, r30
     4b2:	f3 2e       	mov	r15, r19
     4b4:	9e 01       	movw	r18, r28
     4b6:	2f 5f       	subi	r18, 0xFF	; 255
     4b8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ba:	69 01       	movw	r12, r18
     4bc:	89 01       	movw	r16, r18
     4be:	21 e0       	ldi	r18, 0x01	; 1
     4c0:	41 e0       	ldi	r20, 0x01	; 1
     4c2:	6b d6       	rcall	.+3286   	; 0x119a <dtostrf>
     4c4:	df 92       	push	r13
     4c6:	cf 92       	push	r12
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	8f e3       	ldi	r24, 0x3F	; 63
     4ce:	9c e9       	ldi	r25, 0x9C	; 156
     4d0:	9f 93       	push	r25
     4d2:	8f 93       	push	r24
     4d4:	81 d6       	rcall	.+3330   	; 0x11d8 <printf>
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	64 96       	adiw	r28, 0x14	; 20
     4e4:	cd bf       	out	0x3d, r28	; 61
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	df 90       	pop	r13
     4f6:	cf 90       	pop	r12
     4f8:	08 95       	ret

000004fa <tinyDebugger_end_line>:
	}
}
void tinyDebugger_end_line(){
	if(DEBUGGING && tinyDebugger_send_message){
     4fa:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <tinyDebugger_send_message>
     4fe:	88 23       	and	r24, r24
     500:	19 f0       	breq	.+6      	; 0x508 <tinyDebugger_end_line+0xe>
		printf("\r\n");
     502:	8e e4       	ldi	r24, 0x4E	; 78
     504:	9c e9       	ldi	r25, 0x9C	; 156
     506:	7b d6       	rcall	.+3318   	; 0x11fe <puts>
	}
	tinyDebugger_print_attempts++;
     508:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <__data_end>
     50c:	8f 5f       	subi	r24, 0xFF	; 255
     50e:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <__data_end>
	tinyDebugger_send_message = tinyDebugger_print_attempts%DEBUG_EVERY == 0;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <tinyDebugger_send_message>
     518:	08 95       	ret

0000051a <tinyPulse_toggle_pulse_mode>:
uint32_t time_of_last_pulse = 0;
uint16_t time_since_last_pulse = 0;
uint16_t ideal_time_between_pulses = 1000/PULSEMODE_FREQUENCY;

void tinyPulse_toggle_pulse_mode(){
	pulse_mode = !pulse_mode;
     51a:	90 91 1d 3e 	lds	r25, 0x3E1D	; 0x803e1d <pulse_mode>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	89 27       	eor	r24, r25
     522:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <pulse_mode>
     526:	08 95       	ret

00000528 <tinyPulse_update_potential>:
}

double tinyPulse_update_potential(double potential){
     528:	cf 92       	push	r12
     52a:	df 92       	push	r13
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	6b 01       	movw	r12, r22
     532:	7c 01       	movw	r14, r24
	if(pulse_mode){
     534:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <pulse_mode>
     538:	88 23       	and	r24, r24
     53a:	21 f1       	breq	.+72     	; 0x584 <tinyPulse_update_potential+0x5c>
		
		time_since_last_pulse = tinyTime_now() - time_of_last_pulse;
     53c:	3e d0       	rcall	.+124    	; 0x5ba <tinyTime_now>
     53e:	20 91 19 3e 	lds	r18, 0x3E19	; 0x803e19 <time_of_last_pulse>
     542:	30 91 1a 3e 	lds	r19, 0x3E1A	; 0x803e1a <time_of_last_pulse+0x1>
     546:	62 1b       	sub	r22, r18
     548:	73 0b       	sbc	r23, r19
     54a:	60 93 17 3e 	sts	0x3E17, r22	; 0x803e17 <time_since_last_pulse>
     54e:	70 93 18 3e 	sts	0x3E18, r23	; 0x803e18 <time_since_last_pulse+0x1>
		
		if(time_since_last_pulse >= ideal_time_between_pulses){
     552:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <ideal_time_between_pulses>
     556:	90 91 10 3e 	lds	r25, 0x3E10	; 0x803e10 <ideal_time_between_pulses+0x1>
     55a:	68 17       	cp	r22, r24
     55c:	79 07       	cpc	r23, r25
     55e:	90 f0       	brcs	.+36     	; 0x584 <tinyPulse_update_potential+0x5c>
			potential += BUTTON_PRESS_REACTION;
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	40 ed       	ldi	r20, 0xD0	; 208
     566:	51 e4       	ldi	r21, 0x41	; 65
     568:	c7 01       	movw	r24, r14
     56a:	b6 01       	movw	r22, r12
     56c:	2a d3       	rcall	.+1620   	; 0xbc2 <__addsf3>
     56e:	6b 01       	movw	r12, r22
     570:	7c 01       	movw	r14, r24
			time_of_last_pulse = tinyTime_now();			
     572:	23 d0       	rcall	.+70     	; 0x5ba <tinyTime_now>
     574:	60 93 19 3e 	sts	0x3E19, r22	; 0x803e19 <time_of_last_pulse>
     578:	70 93 1a 3e 	sts	0x3E1A, r23	; 0x803e1a <time_of_last_pulse+0x1>
     57c:	80 93 1b 3e 	sts	0x3E1B, r24	; 0x803e1b <time_of_last_pulse+0x2>
     580:	90 93 1c 3e 	sts	0x3E1C, r25	; 0x803e1c <time_of_last_pulse+0x3>
		}
	}
	return potential;
}
     584:	c7 01       	movw	r24, r14
     586:	b6 01       	movw	r22, r12
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	08 95       	ret

00000592 <tinyTime_counter_increment>:
If the Interrupt Service Routine is clocked by a crystal oscillator
it gives a very precise timer-counter.
*/
void tinyTime_counter_increment(void)
{
	time_counter++;
     592:	80 91 1e 3e 	lds	r24, 0x3E1E	; 0x803e1e <time_counter>
     596:	90 91 1f 3e 	lds	r25, 0x3E1F	; 0x803e1f <time_counter+0x1>
     59a:	a0 91 20 3e 	lds	r26, 0x3E20	; 0x803e20 <time_counter+0x2>
     59e:	b0 91 21 3e 	lds	r27, 0x3E21	; 0x803e21 <time_counter+0x3>
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	a1 1d       	adc	r26, r1
     5a6:	b1 1d       	adc	r27, r1
     5a8:	80 93 1e 3e 	sts	0x3E1E, r24	; 0x803e1e <time_counter>
     5ac:	90 93 1f 3e 	sts	0x3E1F, r25	; 0x803e1f <time_counter+0x1>
     5b0:	a0 93 20 3e 	sts	0x3E20, r26	; 0x803e20 <time_counter+0x2>
     5b4:	b0 93 21 3e 	sts	0x3E21, r27	; 0x803e21 <time_counter+0x3>
     5b8:	08 95       	ret

000005ba <tinyTime_now>:
/*
This function is callable by external libraries to give them the counted time so far.
*/
uint32_t tinyTime_now(void)
{
	return time_counter;
     5ba:	60 91 1e 3e 	lds	r22, 0x3E1E	; 0x803e1e <time_counter>
     5be:	70 91 1f 3e 	lds	r23, 0x3E1F	; 0x803e1f <time_counter+0x1>
     5c2:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <time_counter+0x2>
     5c6:	90 91 21 3e 	lds	r25, 0x3E21	; 0x803e21 <time_counter+0x3>
     5ca:	08 95       	ret

000005cc <main>:

int main(void)
{	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     5cc:	e0 dd       	rcall	.-1088   	; 0x18e <atmel_start_init>
	For some reason, the code below does not produce the desired results, but we suspect that since 35 is 00100011 in binary, this will give the desired settings
	
	VREF.CTRLA = VREF_ADC0REFSEL_2V5_gc;
	VREF.CTRLA = VREF_DAC0REFSEL_4V34_gc;
	*/
	VREF.CTRLA = 35;
     5ce:	83 e2       	ldi	r24, 0x23	; 35
     5d0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	 
	while (1)
	{
		// We don't want to update the neuron too often because of various reasons. The tinyISR_getflag is set every ms, and so the loop is only run once every ms.  
		if(tinyISR_getflag())
     5d4:	6f d2       	rcall	.+1246   	; 0xab4 <tinyISR_getflag>
     5d6:	88 23       	and	r24, r24
     5d8:	e9 f3       	breq	.-6      	; 0x5d4 <main+0x8>
		{			
			
			if(tinyCharge_is_connected_to_charger()){
     5da:	16 df       	rcall	.-468    	; 0x408 <tinyCharge_is_connected_to_charger>
     5dc:	88 23       	and	r24, r24
     5de:	19 f0       	breq	.+6      	; 0x5e6 <main+0x1a>
				// Charge loop
				
				if(tinyCharge_is_fully_charged()){
     5e0:	16 df       	rcall	.-468    	; 0x40e <tinyCharge_is_fully_charged>
					//tinyLED_set_color(OUT_LED, CHARGING_DONE_COLOR);
				}				
				// We check the Dendrites in order to detect if we have stopped charging
				tinyDendrite_update_signals();
     5e2:	78 d1       	rcall	.+752    	; 0x8d4 <tinyDendrite_update_signals>
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <main+0x1e>
				//if(tinyLED_get_color(OUT_LED) == OFF){
				//	tinyLED_set_color_mode(OUT_LED, PING_COLOR, PING);
				//}
				
				// Update button	
				tinyButton_update();
     5e6:	0c d0       	rcall	.+24     	; 0x600 <tinyButton_update>
				
				// Update the potential (This is where most of the important stuff happens)
				tinyPotential_update();
     5e8:	68 d2       	rcall	.+1232   	; 0xaba <tinyPotential_update>
			}
			// Update LED
			//tinyLED_update();
				
			// Switch transistors
			tinyCharge_set_transistors();
     5ea:	1c df       	rcall	.-456    	; 0x424 <tinyCharge_set_transistors>
			
			// Prepare for next cycle
			tinyISR_setflag(false);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	5f d2       	rcall	.+1214   	; 0xaae <tinyISR_setflag>
			tinyDebugger_send_uint32("time", tinyTime_now());
     5f0:	e4 df       	rcall	.-56     	; 0x5ba <tinyTime_now>
     5f2:	ab 01       	movw	r20, r22
     5f4:	bc 01       	movw	r22, r24
     5f6:	80 e5       	ldi	r24, 0x50	; 80
     5f8:	9c e9       	ldi	r25, 0x9C	; 156
     5fa:	1c df       	rcall	.-456    	; 0x434 <tinyDebugger_send_uint32>
			tinyDebugger_end_line();
     5fc:	7e df       	rcall	.-260    	; 0x4fa <tinyDebugger_end_line>
     5fe:	ea cf       	rjmp	.-44     	; 0x5d4 <main+0x8>

00000600 <tinyButton_update>:
/*
If the button has been let go, we change button_press to true. This only lasts one cycle, before it is set to false again.
If the button is held down for longer than PULSEMODE_BUTTON_PRESS_TIME, we toggle the pulse mode state.
*/
void tinyButton_update(void)
{
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
	button_press = false;
     608:	10 92 26 3e 	sts	0x3E26, r1	; 0x803e26 <button_press>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return VPORTC.IN & (1 << pin);
     60c:	8a b1       	in	r24, 0x0a	; 10
	_Bool button_is_pushed_down = !BUTTON_PIN_get_level(); // The digital port will be read as low if the button is pushed down.
     60e:	d1 e0       	ldi	r29, 0x01	; 1
     610:	c8 2f       	mov	r28, r24
     612:	c4 70       	andi	r28, 0x04	; 4
     614:	82 fd       	sbrc	r24, 2
     616:	d0 e0       	ldi	r29, 0x00	; 0

	if (button_is_pushed_down && !button_was_pushed_down)
     618:	c1 11       	cpse	r28, r1
     61a:	30 c0       	rjmp	.+96     	; 0x67c <tinyButton_update+0x7c>
     61c:	80 91 27 3e 	lds	r24, 0x3E27	; 0x803e27 <button_was_pushed_down>
     620:	81 11       	cpse	r24, r1
     622:	0d c0       	rjmp	.+26     	; 0x63e <tinyButton_update+0x3e>
	{
		tinyButton_start_time = tinyTime_now();
     624:	ca df       	rcall	.-108    	; 0x5ba <tinyTime_now>
     626:	60 93 22 3e 	sts	0x3E22, r22	; 0x803e22 <tinyButton_start_time>
     62a:	70 93 23 3e 	sts	0x3E23, r23	; 0x803e23 <tinyButton_start_time+0x1>
     62e:	80 93 24 3e 	sts	0x3E24, r24	; 0x803e24 <tinyButton_start_time+0x2>
     632:	90 93 25 3e 	sts	0x3E25, r25	; 0x803e25 <tinyButton_start_time+0x3>
	}
	if (button_is_pushed_down && button_was_pushed_down)
     636:	80 91 27 3e 	lds	r24, 0x3E27	; 0x803e27 <button_was_pushed_down>
     63a:	88 23       	and	r24, r24
     63c:	41 f1       	breq	.+80     	; 0x68e <tinyButton_update+0x8e>
	{
		if ((tinyTime_now() - tinyButton_start_time) > PULSEMODE_BUTTON_PRESS_TIME)
     63e:	bd df       	rcall	.-134    	; 0x5ba <tinyTime_now>
     640:	00 91 22 3e 	lds	r16, 0x3E22	; 0x803e22 <tinyButton_start_time>
     644:	10 91 23 3e 	lds	r17, 0x3E23	; 0x803e23 <tinyButton_start_time+0x1>
     648:	20 91 24 3e 	lds	r18, 0x3E24	; 0x803e24 <tinyButton_start_time+0x2>
     64c:	30 91 25 3e 	lds	r19, 0x3E25	; 0x803e25 <tinyButton_start_time+0x3>
     650:	60 1b       	sub	r22, r16
     652:	71 0b       	sbc	r23, r17
     654:	82 0b       	sbc	r24, r18
     656:	93 0b       	sbc	r25, r19
     658:	d1 d3       	rcall	.+1954   	; 0xdfc <__floatunsisf>
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	48 ec       	ldi	r20, 0xC8	; 200
     660:	52 e4       	ldi	r21, 0x42	; 66
     662:	a5 d4       	rcall	.+2378   	; 0xfae <__gesf2>
     664:	18 16       	cp	r1, r24
     666:	54 f4       	brge	.+20     	; 0x67c <tinyButton_update+0x7c>
		{
			tinyPulse_toggle_pulse_mode();
     668:	58 df       	rcall	.-336    	; 0x51a <tinyPulse_toggle_pulse_mode>
			tinyButton_start_time = tinyTime_now();
     66a:	a7 df       	rcall	.-178    	; 0x5ba <tinyTime_now>
     66c:	60 93 22 3e 	sts	0x3E22, r22	; 0x803e22 <tinyButton_start_time>
     670:	70 93 23 3e 	sts	0x3E23, r23	; 0x803e23 <tinyButton_start_time+0x1>
     674:	80 93 24 3e 	sts	0x3E24, r24	; 0x803e24 <tinyButton_start_time+0x2>
     678:	90 93 25 3e 	sts	0x3E25, r25	; 0x803e25 <tinyButton_start_time+0x3>
		}
	}
	if (!button_is_pushed_down && button_was_pushed_down)
     67c:	cc 23       	and	r28, r28
     67e:	39 f0       	breq	.+14     	; 0x68e <tinyButton_update+0x8e>
     680:	80 91 27 3e 	lds	r24, 0x3E27	; 0x803e27 <button_was_pushed_down>
     684:	88 23       	and	r24, r24
     686:	19 f0       	breq	.+6      	; 0x68e <tinyButton_update+0x8e>
	{
		button_press = true;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	80 93 26 3e 	sts	0x3E26, r24	; 0x803e26 <button_press>
	}
	button_was_pushed_down = button_is_pushed_down;
     68e:	d0 93 27 3e 	sts	0x3E27, r29	; 0x803e27 <button_was_pushed_down>
}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	08 95       	ret

0000069c <tinyButton_update_potential>:

double tinyButton_update_potential(double potential){
	if(button_press){
     69c:	20 91 26 3e 	lds	r18, 0x3E26	; 0x803e26 <button_press>
     6a0:	22 23       	and	r18, r18
     6a2:	29 f0       	breq	.+10     	; 0x6ae <tinyButton_update_potential+0x12>
		potential += BUTTON_PRESS_REACTION;
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	40 ed       	ldi	r20, 0xD0	; 208
     6aa:	51 e4       	ldi	r21, 0x41	; 65
     6ac:	8a d2       	rcall	.+1300   	; 0xbc2 <__addsf3>
	}
	return potential;
}
     6ae:	08 95       	ret

000006b0 <tinyLED_set_color_mode>:
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color_mode(uint8_t LED_id, enum Colors color, enum ColorModes mode)
{
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_colors[LED_id] = setting;
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	fc 01       	movw	r30, r24
     6b4:	ee 0f       	add	r30, r30
     6b6:	ff 1f       	adc	r31, r31
     6b8:	ef 59       	subi	r30, 0x9F	; 159
     6ba:	f1 4c       	sbci	r31, 0xC1	; 193
     6bc:	60 83       	st	Z, r22
     6be:	41 83       	std	Z+1, r20	; 0x01
	if (mode == FLASH_ONCE)
     6c0:	44 30       	cpi	r20, 0x04	; 4
     6c2:	29 f4       	brne	.+10     	; 0x6ce <tinyLED_set_color_mode+0x1e>
	{
		tinyLED_flash_once_time[LED_id] = 1000*FLASH_TIME;
     6c4:	fc 01       	movw	r30, r24
     6c6:	e7 5a       	subi	r30, 0xA7	; 167
     6c8:	f1 4c       	sbci	r31, 0xC1	; 193
     6ca:	2a e0       	ldi	r18, 0x0A	; 10
     6cc:	20 83       	st	Z, r18
     6ce:	08 95       	ret

000006d0 <tinyAxon_add_pulse>:
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
	{
		if(pulse_queue[i] == 0){
     6d0:	20 91 29 3e 	lds	r18, 0x3E29	; 0x803e29 <pulse_queue>
     6d4:	30 91 2a 3e 	lds	r19, 0x3E2A	; 0x803e2a <pulse_queue+0x1>
     6d8:	23 2b       	or	r18, r19
     6da:	51 f0       	breq	.+20     	; 0x6f0 <tinyAxon_add_pulse+0x20>
     6dc:	eb e2       	ldi	r30, 0x2B	; 43
     6de:	fe e3       	ldi	r31, 0x3E	; 62
     6e0:	21 e0       	ldi	r18, 0x01	; 1
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	b9 01       	movw	r22, r18
     6e6:	41 91       	ld	r20, Z+
     6e8:	51 91       	ld	r21, Z+
     6ea:	45 2b       	or	r20, r21
     6ec:	81 f4       	brne	.+32     	; 0x70e <tinyAxon_add_pulse+0x3e>
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <tinyAxon_add_pulse+0x24>
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	70 e0       	ldi	r23, 0x00	; 0
			pulse_queue[i] = new_pulse;
     6f4:	66 0f       	add	r22, r22
     6f6:	77 1f       	adc	r23, r23
     6f8:	fb 01       	movw	r30, r22
     6fa:	e7 5d       	subi	r30, 0xD7	; 215
     6fc:	f1 4c       	sbci	r31, 0xC1	; 193
     6fe:	80 83       	st	Z, r24
     700:	91 83       	std	Z+1, r25	; 0x01
			pulses_in_queue++;
     702:	80 91 3d 3e 	lds	r24, 0x3E3D	; 0x803e3d <pulses_in_queue>
     706:	8f 5f       	subi	r24, 0xFF	; 255
     708:	80 93 3d 3e 	sts	0x3E3D, r24	; 0x803e3d <pulses_in_queue>
			// We return so we only ever add one
			break;
     70c:	08 95       	ret
     70e:	2f 5f       	subi	r18, 0xFF	; 255
     710:	3f 4f       	sbci	r19, 0xFF	; 255
*/
static void tinyAxon_add_pulse(uint16_t new_pulse)
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     712:	2a 30       	cpi	r18, 0x0A	; 10
     714:	31 05       	cpc	r19, r1
     716:	31 f7       	brne	.-52     	; 0x6e4 <tinyAxon_add_pulse+0x14>
     718:	08 95       	ret

0000071a <find_newest_pulse>:
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
     71a:	40 91 29 3e 	lds	r20, 0x3E29	; 0x803e29 <pulse_queue>
     71e:	50 91 2a 3e 	lds	r21, 0x3E2A	; 0x803e2a <pulse_queue+0x1>
     722:	eb e2       	ldi	r30, 0x2B	; 43
     724:	fe e3       	ldi	r31, 0x3E	; 62
	
// This function will be used with pulse_queue to find the newest pulse
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
     726:	80 e0       	ldi	r24, 0x00	; 0
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     728:	91 e0       	ldi	r25, 0x01	; 1
		if (pulse_queue[current_index] > max) {
     72a:	21 91       	ld	r18, Z+
     72c:	31 91       	ld	r19, Z+
     72e:	42 17       	cp	r20, r18
     730:	53 07       	cpc	r21, r19
     732:	10 f4       	brcc	.+4      	; 0x738 <find_newest_pulse+0x1e>
     734:	89 2f       	mov	r24, r25
			return_index = current_index;
			max = pulse_queue[current_index];
     736:	a9 01       	movw	r20, r18
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     738:	9f 5f       	subi	r25, 0xFF	; 255
     73a:	9a 30       	cpi	r25, 0x0A	; 10
     73c:	b1 f7       	brne	.-20     	; 0x72a <find_newest_pulse+0x10>
			return_index = current_index;
			max = pulse_queue[current_index];
		}
	}
	return return_index;
}
     73e:	08 95       	ret

00000740 <tinyAxon_remove_pulse>:

/*
If the potential is very low, we want to try to remove a pulse.
*/
bool tinyAxon_remove_pulse(void)
{
     740:	cf 93       	push	r28
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
     742:	c0 91 3d 3e 	lds	r28, 0x3E3D	; 0x803e3d <pulses_in_queue>
     746:	cc 23       	and	r28, r28
     748:	c1 f0       	breq	.+48     	; 0x77a <tinyAxon_remove_pulse+0x3a>
		//There was no pulse to remove.
		return false;
	}
	else{
		// If we are to remove a pulse, we want to remove the one that will fire last.
		uint8_t pulse_index = find_newest_pulse();
     74a:	e7 df       	rcall	.-50     	; 0x71a <find_newest_pulse>
		uint16_t newest_pulse = pulse_queue[pulse_index];
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	fc 01       	movw	r30, r24
     750:	ee 0f       	add	r30, r30
     752:	ff 1f       	adc	r31, r31
     754:	e7 5d       	subi	r30, 0xD7	; 215
     756:	f1 4c       	sbci	r31, 0xC1	; 193
	
		// Now we want to check if the pulse is too far away to be affected by the low potential, or close enough that we decide to remove it.
		// (When we say that the pulse is too far away, it refers to the biological process of how the potential spreads from Dendrites to axon).
		if(newest_pulse > PULSE_NO_RETURN_TIME){
     758:	20 81       	ld	r18, Z
     75a:	31 81       	ldd	r19, Z+1	; 0x01
     75c:	2d 33       	cpi	r18, 0x3D	; 61
     75e:	31 05       	cpc	r19, r1
     760:	70 f0       	brcs	.+28     	; 0x77e <tinyAxon_remove_pulse+0x3e>
			// We decided to remove the pulse
			pulse_queue[pulse_index] = 0;
     762:	88 0f       	add	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	fc 01       	movw	r30, r24
     768:	e7 5d       	subi	r30, 0xD7	; 215
     76a:	f1 4c       	sbci	r31, 0xC1	; 193
     76c:	10 82       	st	Z, r1
     76e:	11 82       	std	Z+1, r1	; 0x01
			pulses_in_queue--;
     770:	c1 50       	subi	r28, 0x01	; 1
     772:	c0 93 3d 3e 	sts	0x3E3D, r28	; 0x803e3d <pulses_in_queue>
			return true;
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	03 c0       	rjmp	.+6      	; 0x780 <tinyAxon_remove_pulse+0x40>
bool tinyAxon_remove_pulse(void)
{
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
		//There was no pulse to remove.
		return false;
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	01 c0       	rjmp	.+2      	; 0x780 <tinyAxon_remove_pulse+0x40>
			pulses_in_queue--;
			return true;
		}
		// Here we have found that there is a pulse queued, but it is old enough to let pass anyway, so now we need to put it back into the queue.
		else{
			return false;
     77e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <tinyAxon_update_potential>:
/*
Decides whether or not the axon should fire
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
     784:	cf 92       	push	r12
     786:	df 92       	push	r13
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	6b 01       	movw	r12, r22
     78e:	7c 01       	movw	r14, r24
	//While the neuron has enough potential to fire, we want to fire more
	while (potential > THRESHOLD_POTENTIAL)
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	48 ec       	ldi	r20, 0xC8	; 200
     796:	51 e4       	ldi	r21, 0x41	; 65
     798:	0a d4       	rcall	.+2068   	; 0xfae <__gesf2>
     79a:	18 16       	cp	r1, r24
     79c:	84 f5       	brge	.+96     	; 0x7fe <tinyAxon_update_potential+0x7a>
	{
		// We have to check if there are already queued pulses, so that the frequency never exceeds FIRE_DELAY
		if(pulses_in_queue>0){
     79e:	80 91 3d 3e 	lds	r24, 0x3E3D	; 0x803e3d <pulses_in_queue>
     7a2:	88 23       	and	r24, r24
     7a4:	99 f0       	breq	.+38     	; 0x7cc <tinyAxon_update_potential+0x48>
			uint16_t newest_pulse = pulse_queue[find_newest_pulse()];
     7a6:	b9 df       	rcall	.-142    	; 0x71a <find_newest_pulse>
     7a8:	e8 2f       	mov	r30, r24
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	ee 0f       	add	r30, r30
     7ae:	ff 1f       	adc	r31, r31
     7b0:	e7 5d       	subi	r30, 0xD7	; 215
     7b2:	f1 4c       	sbci	r31, 0xC1	; 193
			
			// There is at least one pulse in the queue, and it is so close, that we need to offset the new pulse, so that we keep at least
			// one FIRE_DELAY between each pulse
			if(newest_pulse + FIRE_DELAY > TRAVLE_DELAY){
     7b4:	80 81       	ld	r24, Z
     7b6:	91 81       	ldd	r25, Z+1	; 0x01
     7b8:	c2 96       	adiw	r24, 0x32	; 50
     7ba:	85 36       	cpi	r24, 0x65	; 101
     7bc:	91 05       	cpc	r25, r1
     7be:	10 f0       	brcs	.+4      	; 0x7c4 <tinyAxon_update_potential+0x40>
				tinyAxon_add_pulse(newest_pulse + FIRE_DELAY);
     7c0:	87 df       	rcall	.-242    	; 0x6d0 <tinyAxon_add_pulse>
     7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <tinyAxon_update_potential+0x4e>
			}
			// There is at least one pulse in the queue, but it's far enough away to ignore
			else{
				tinyAxon_add_pulse(TRAVLE_DELAY);
     7c4:	84 e6       	ldi	r24, 0x64	; 100
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	83 df       	rcall	.-250    	; 0x6d0 <tinyAxon_add_pulse>
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <tinyAxon_update_potential+0x4e>
			}
		}
		// There are no pulses in the queue, so we add a pulse as normal
		else{
			tinyAxon_add_pulse(TRAVLE_DELAY);		
     7cc:	84 e6       	ldi	r24, 0x64	; 100
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	7f df       	rcall	.-258    	; 0x6d0 <tinyAxon_add_pulse>
		}
		
		potential += POSTFIRE_POTENTIAL_REACTION; // This is usually defined as a negative value, don't be confused by the +=
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 ef       	ldi	r20, 0xF0	; 240
     7d8:	51 e4       	ldi	r21, 0x41	; 65
     7da:	c7 01       	movw	r24, r14
     7dc:	b6 01       	movw	r22, r12
     7de:	f0 d1       	rcall	.+992    	; 0xbc0 <__subsf3>
     7e0:	6b 01       	movw	r12, r22
     7e2:	7c 01       	movw	r14, r24
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     7e4:	44 e0       	ldi	r20, 0x04	; 4
     7e6:	63 e0       	ldi	r22, 0x03	; 3
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	62 df       	rcall	.-316    	; 0x6b0 <tinyLED_set_color_mode>
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
	//While the neuron has enough potential to fire, we want to fire more
	while (potential > THRESHOLD_POTENTIAL)
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	48 ec       	ldi	r20, 0xC8	; 200
     7f2:	51 e4       	ldi	r21, 0x41	; 65
     7f4:	c7 01       	movw	r24, r14
     7f6:	b6 01       	movw	r22, r12
     7f8:	da d3       	rcall	.+1972   	; 0xfae <__gesf2>
     7fa:	18 16       	cp	r1, r24
     7fc:	84 f2       	brlt	.-96     	; 0x79e <tinyAxon_update_potential+0x1a>
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
	}
	
	// If the neuron has a very low potential, we want to remove a pulse from the queue (if there is one)
	if(potential < -THRESHOLD_POTENTIAL && pulses_in_queue > 0) // Perhaps this should be a separate variable? For now, we will just simply use -THRESHOLD_POTENTIAL
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	48 ec       	ldi	r20, 0xC8	; 200
     804:	51 ec       	ldi	r21, 0xC1	; 193
     806:	c7 01       	movw	r24, r14
     808:	b6 01       	movw	r22, r12
     80a:	47 d2       	rcall	.+1166   	; 0xc9a <__cmpsf2>
     80c:	88 23       	and	r24, r24
     80e:	0c f0       	brlt	.+2      	; 0x812 <tinyAxon_update_potential+0x8e>
     810:	45 c0       	rjmp	.+138    	; 0x89c <tinyAxon_update_potential+0x118>
     812:	80 91 3d 3e 	lds	r24, 0x3E3D	; 0x803e3d <pulses_in_queue>
     816:	88 23       	and	r24, r24
     818:	01 f1       	breq	.+64     	; 0x85a <tinyAxon_update_potential+0xd6>
	{
		// The neurons potential is low enough to attempt to remove a queued fire (Fire less)
		if(tinyAxon_remove_pulse())
     81a:	92 df       	rcall	.-220    	; 0x740 <tinyAxon_remove_pulse>
     81c:	88 23       	and	r24, r24
     81e:	f1 f1       	breq	.+124    	; 0x89c <tinyAxon_update_potential+0x118>
		{
			// The potential has evened out a bit
			potential += THRESHOLD_POTENTIAL;
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	48 ec       	ldi	r20, 0xC8	; 200
     826:	51 e4       	ldi	r21, 0x41	; 65
     828:	c7 01       	movw	r24, r14
     82a:	b6 01       	movw	r22, r12
     82c:	ca d1       	rcall	.+916    	; 0xbc2 <__addsf3>
     82e:	6b 01       	movw	r12, r22
     830:	7c 01       	movw	r14, r24
     832:	34 c0       	rjmp	.+104    	; 0x89c <tinyAxon_update_potential+0x118>
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
		{
			if(pulse_queue[i] != 0){
     834:	80 81       	ld	r24, Z
     836:	91 81       	ldd	r25, Z+1	; 0x01
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	39 f0       	breq	.+14     	; 0x84a <tinyAxon_update_potential+0xc6>
				pulse_queue[i]--;
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	80 83       	st	Z, r24
     840:	91 83       	std	Z+1, r25	; 0x01
				
				// If the time went from 1 to 0, we fire the axon
				if(pulse_queue[i] == 0){
     842:	89 2b       	or	r24, r25
     844:	11 f4       	brne	.+4      	; 0x84a <tinyAxon_update_potential+0xc6>
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
	pulses_in_queue--;
     846:	41 50       	subi	r20, 0x01	; 1
Function to set firing.
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
     848:	51 e0       	ldi	r21, 0x01	; 1
     84a:	32 96       	adiw	r30, 0x02	; 2
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     84c:	e2 17       	cp	r30, r18
     84e:	f3 07       	cpc	r31, r19
     850:	89 f7       	brne	.-30     	; 0x834 <tinyAxon_update_potential+0xb0>
     852:	50 93 3e 3e 	sts	0x3E3E, r21	; 0x803e3e <tinyAxon_should_fire>
     856:	40 93 3d 3e 	sts	0x3E3D, r20	; 0x803e3d <pulses_in_queue>
The function should set the DAC to fire for two
update cycles once the pulse flag is set high.
*/
static void tinyAxon_update_pulse_transmitter(void)
{
	if (tinyAxon_should_fire)
     85a:	80 91 3e 3e 	lds	r24, 0x3E3E	; 0x803e3e <tinyAxon_should_fire>
     85e:	88 23       	and	r24, r24
     860:	81 f0       	breq	.+32     	; 0x882 <tinyAxon_update_potential+0xfe>
	{
		tinyAxon_should_fire = false;
     862:	10 92 3e 3e 	sts	0x3E3E, r1	; 0x803e3e <tinyAxon_should_fire>
		tinyAxon_has_fired = true;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	80 93 3f 3e 	sts	0x3E3F, r24	; 0x803e3f <tinyAxon_has_fired>
*/
static void tinyAxon_start_sending_pulse()
{
	if (NEURONTYPE == EXCITATORY_NEURON)
	{
		DAC_set_output(EXCITATORY_NEURON_OUTPUT);
     86c:	8f ef       	ldi	r24, 0xFF	; 255
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	d1 dc       	rcall	.-1630   	; 0x214 <DAC_set_output>
		axonOutputValue=EXCITATORY_NEURON_OUTPUT;
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	80 93 28 3e 	sts	0x3E28, r24	; 0x803e28 <axonOutputValue>
	{
		DAC_set_output(INHIBITORY_NEURON_OUTPUT);
		axonOutputValue=INHIBITORY_NEURON_OUTPUT;
	}
	
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
     878:	44 e0       	ldi	r20, 0x04	; 4
     87a:	64 e0       	ldi	r22, 0x04	; 4
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	18 df       	rcall	.-464    	; 0x6b0 <tinyLED_set_color_mode>
     880:	18 c0       	rjmp	.+48     	; 0x8b2 <tinyAxon_update_potential+0x12e>
		tinyAxon_should_fire = false;
		tinyAxon_has_fired = true;
		
		tinyAxon_start_sending_pulse();
	}
	else if (tinyAxon_has_fired)
     882:	80 91 3f 3e 	lds	r24, 0x3E3F	; 0x803e3f <tinyAxon_has_fired>
     886:	88 23       	and	r24, r24
     888:	19 f0       	breq	.+6      	; 0x890 <tinyAxon_update_potential+0x10c>
	{
		tinyAxon_has_fired = false;
     88a:	10 92 3f 3e 	sts	0x3E3F, r1	; 0x803e3f <tinyAxon_has_fired>
     88e:	11 c0       	rjmp	.+34     	; 0x8b2 <tinyAxon_update_potential+0x12e>
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
}

static void tinyAxon_stop_sending_pulse()
{
	DAC_set_output(NO_SIGNAL_OUTPUT);
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	bf dc       	rcall	.-1666   	; 0x214 <DAC_set_output>
	axonOutputValue=NO_SIGNAL_OUTPUT;
     896:	10 92 28 3e 	sts	0x3E28, r1	; 0x803e28 <axonOutputValue>
     89a:	0b c0       	rjmp	.+22     	; 0x8b2 <tinyAxon_update_potential+0x12e>
			potential += THRESHOLD_POTENTIAL;
		}
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
     89c:	40 91 3d 3e 	lds	r20, 0x3E3D	; 0x803e3d <pulses_in_queue>
     8a0:	44 23       	and	r20, r20
     8a2:	d9 f2       	breq	.-74     	; 0x85a <tinyAxon_update_potential+0xd6>
     8a4:	50 91 3e 3e 	lds	r21, 0x3E3E	; 0x803e3e <tinyAxon_should_fire>
     8a8:	e9 e2       	ldi	r30, 0x29	; 41
     8aa:	fe e3       	ldi	r31, 0x3E	; 62
     8ac:	2d e3       	ldi	r18, 0x3D	; 61
     8ae:	3e e3       	ldi	r19, 0x3E	; 62
     8b0:	c1 cf       	rjmp	.-126    	; 0x834 <tinyAxon_update_potential+0xb0>
	}
	
	// Here we set the actual output of the DAC (Digital to Analog Converter)
	tinyAxon_update_pulse_transmitter();
	
	tinyDebugger_send_uint8("Axon", axonOutputValue);
     8b2:	60 91 28 3e 	lds	r22, 0x3E28	; 0x803e28 <axonOutputValue>
     8b6:	85 e5       	ldi	r24, 0x55	; 85
     8b8:	9c e9       	ldi	r25, 0x9C	; 156
     8ba:	d1 dd       	rcall	.-1118   	; 0x45e <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("Pulses", pulses_in_queue);
     8bc:	60 91 3d 3e 	lds	r22, 0x3E3D	; 0x803e3d <pulses_in_queue>
     8c0:	8a e5       	ldi	r24, 0x5A	; 90
     8c2:	9c e9       	ldi	r25, 0x9C	; 156
     8c4:	cc dd       	rcall	.-1128   	; 0x45e <tinyDebugger_send_uint8>
	
	return potential;
}
     8c6:	c7 01       	movw	r24, r14
     8c8:	b6 01       	movw	r22, r12
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	df 90       	pop	r13
     8d0:	cf 90       	pop	r12
     8d2:	08 95       	ret

000008d4 <tinyDendrite_update_signals>:
/*
This function converts the 8 bit value from the ADC into one of the signal types defined in DendriteSignal
We also update the charging state
*/
void tinyDendrite_update_signals(void)
{
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	c1 e1       	ldi	r28, 0x11	; 17
     8ea:	de e3       	ldi	r29, 0x3E	; 62
     8ec:	0a e4       	ldi	r16, 0x4A	; 74
     8ee:	1e e3       	ldi	r17, 0x3E	; 62
     8f0:	0f 2e       	mov	r0, r31
     8f2:	f6 e1       	ldi	r31, 0x16	; 22
     8f4:	cf 2e       	mov	r12, r31
     8f6:	fe e3       	ldi	r31, 0x3E	; 62
     8f8:	df 2e       	mov	r13, r31
     8fa:	f0 2d       	mov	r31, r0
     8fc:	78 01       	movw	r14, r16
*/
static void tinyDendrite_read_signals(void)
{
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_values[i] = ADC_get_conversion(Dendrite_ports[i]);
     8fe:	89 91       	ld	r24, Y+
     900:	51 dc       	rcall	.-1886   	; 0x1a4 <ADC_get_conversion>
     902:	d7 01       	movw	r26, r14
     904:	8d 93       	st	X+, r24
     906:	7d 01       	movw	r14, r26
/*
This function reads the voltage at the Dendrite inputs with the ADC
*/
static void tinyDendrite_read_signals(void)
{
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
     908:	cc 15       	cp	r28, r12
     90a:	dd 05       	cpc	r29, r13
     90c:	c1 f7       	brne	.-16     	; 0x8fe <tinyDendrite_update_signals+0x2a>
	{
		tinyDendrite_values[i] = ADC_get_conversion(Dendrite_ports[i]);
	}
	tinyDebugger_send_uint8("D1", tinyDendrite_values[0]);
     90e:	ca e4       	ldi	r28, 0x4A	; 74
     910:	de e3       	ldi	r29, 0x3E	; 62
     912:	68 81       	ld	r22, Y
     914:	81 e6       	ldi	r24, 0x61	; 97
     916:	9c e9       	ldi	r25, 0x9C	; 156
     918:	a2 dd       	rcall	.-1212   	; 0x45e <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D2", tinyDendrite_values[1]);
     91a:	69 81       	ldd	r22, Y+1	; 0x01
     91c:	84 e6       	ldi	r24, 0x64	; 100
     91e:	9c e9       	ldi	r25, 0x9C	; 156
     920:	9e dd       	rcall	.-1220   	; 0x45e <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D3", tinyDendrite_values[2]);
     922:	6a 81       	ldd	r22, Y+2	; 0x02
     924:	87 e6       	ldi	r24, 0x67	; 103
     926:	9c e9       	ldi	r25, 0x9C	; 156
     928:	9a dd       	rcall	.-1228   	; 0x45e <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
     92a:	6b 81       	ldd	r22, Y+3	; 0x03
     92c:	8a e6       	ldi	r24, 0x6A	; 106
     92e:	9c e9       	ldi	r25, 0x9C	; 156
     930:	96 dd       	rcall	.-1236   	; 0x45e <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
     932:	6c 81       	ldd	r22, Y+4	; 0x04
     934:	8d e6       	ldi	r24, 0x6D	; 109
     936:	9c e9       	ldi	r25, 0x9C	; 156
     938:	92 dd       	rcall	.-1244   	; 0x45e <tinyDebugger_send_uint8>
     93a:	e5 e4       	ldi	r30, 0x45	; 69
     93c:	fe e3       	ldi	r31, 0x3E	; 62
     93e:	c0 e4       	ldi	r28, 0x40	; 64
     940:	de e3       	ldi	r29, 0x3E	; 62
     942:	4a e4       	ldi	r20, 0x4A	; 74
     944:	5e e3       	ldi	r21, 0x3E	; 62
{
	
	//Read the analog voltage values on each of the Dendrites
	tinyDendrite_read_signals();
	
	_Bool charging = false;
     946:	80 e0       	ldi	r24, 0x00	; 0
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     948:	31 e0       	ldi	r19, 0x01	; 1
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     94a:	0f 2e       	mov	r0, r31
     94c:	f3 e0       	ldi	r31, 0x03	; 3
     94e:	cf 2e       	mov	r12, r31
     950:	f0 2d       	mov	r31, r0
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     952:	68 94       	set
     954:	dd 24       	eor	r13, r13
     956:	d1 f8       	bld	r13, 1
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     958:	68 94       	set
     95a:	ee 24       	eor	r14, r14
     95c:	e2 f8       	bld	r14, 2
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     95e:	0f 2e       	mov	r0, r31
     960:	f6 e0       	ldi	r31, 0x06	; 6
     962:	ff 2e       	mov	r15, r31
     964:	f0 2d       	mov	r31, r0
			tinyDendrite_current_signals[i] = CHARGING;
			charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     966:	75 e0       	ldi	r23, 0x05	; 5
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     968:	67 e0       	ldi	r22, 0x07	; 7
     96a:	5f 01       	movw	r10, r30
	
	_Bool charging = false;
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     96c:	90 81       	ld	r25, Z
     96e:	99 93       	st	Y+, r25
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     970:	d8 01       	movw	r26, r16
     972:	2d 91       	ld	r18, X+
     974:	8d 01       	movw	r16, r26
     976:	29 3e       	cpi	r18, 0xE9	; 233
     978:	18 f0       	brcs	.+6      	; 0x980 <tinyDendrite_update_signals+0xac>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     97a:	60 83       	st	Z, r22
			charging = true;
     97c:	83 2f       	mov	r24, r19
     97e:	19 c0       	rjmp	.+50     	; 0x9b2 <tinyDendrite_update_signals+0xde>
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
     980:	28 3c       	cpi	r18, 0xC8	; 200
     982:	10 f0       	brcs	.+4      	; 0x988 <tinyDendrite_update_signals+0xb4>
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     984:	70 83       	st	Z, r23
     986:	15 c0       	rjmp	.+42     	; 0x9b2 <tinyDendrite_update_signals+0xde>
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
     988:	27 3a       	cpi	r18, 0xA7	; 167
     98a:	10 f0       	brcs	.+4      	; 0x990 <tinyDendrite_update_signals+0xbc>
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     98c:	f0 82       	st	Z, r15
     98e:	11 c0       	rjmp	.+34     	; 0x9b2 <tinyDendrite_update_signals+0xde>
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
     990:	25 38       	cpi	r18, 0x85	; 133
     992:	10 f0       	brcs	.+4      	; 0x998 <tinyDendrite_update_signals+0xc4>
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     994:	e0 82       	st	Z, r14
     996:	0d c0       	rjmp	.+26     	; 0x9b2 <tinyDendrite_update_signals+0xde>
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
     998:	24 36       	cpi	r18, 0x64	; 100
     99a:	10 f0       	brcs	.+4      	; 0x9a0 <tinyDendrite_update_signals+0xcc>
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     99c:	d0 82       	st	Z, r13
     99e:	09 c0       	rjmp	.+18     	; 0x9b2 <tinyDendrite_update_signals+0xde>
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
     9a0:	23 34       	cpi	r18, 0x43	; 67
     9a2:	10 f0       	brcs	.+4      	; 0x9a8 <tinyDendrite_update_signals+0xd4>
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     9a4:	c0 82       	st	Z, r12
     9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <tinyDendrite_update_signals+0xde>
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
     9a8:	22 32       	cpi	r18, 0x22	; 34
     9aa:	10 f0       	brcs	.+4      	; 0x9b0 <tinyDendrite_update_signals+0xdc>
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     9ac:	30 83       	st	Z, r19
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <tinyDendrite_update_signals+0xde>
		}
		else
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     9b0:	10 82       	st	Z, r1
		}
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
     9b2:	d5 01       	movw	r26, r10
     9b4:	2c 91       	ld	r18, X
     9b6:	92 13       	cpse	r25, r18
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <tinyDendrite_update_signals+0xe8>
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     9ba:	1c 92       	st	X, r1
     9bc:	31 96       	adiw	r30, 0x01	; 1
	//Read the analog voltage values on each of the Dendrites
	tinyDendrite_read_signals();
	
	_Bool charging = false;
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     9be:	e4 17       	cp	r30, r20
     9c0:	f5 07       	cpc	r31, r21
     9c2:	99 f6       	brne	.-90     	; 0x96a <tinyDendrite_update_signals+0x96>
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
		}
	}
	tinyCharge_set_charging_mode(charging);
     9c4:	29 dd       	rcall	.-1454   	; 0x418 <tinyCharge_set_charging_mode>
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	df 90       	pop	r13
     9d4:	cf 90       	pop	r12
     9d6:	bf 90       	pop	r11
     9d8:	af 90       	pop	r10
     9da:	08 95       	ret

000009dc <tinyDendrite_get_potential>:
outside. It uses the previously declared functions to return the potential.
*/
int16_t tinyDendrite_get_potential()
{
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
     9dc:	7b df       	rcall	.-266    	; 0x8d4 <tinyDendrite_update_signals>
     9de:	e5 e4       	ldi	r30, 0x45	; 69
     9e0:	fe e3       	ldi	r31, 0x3E	; 62
     9e2:	4a e4       	ldi	r20, 0x4A	; 74
     9e4:	5e e3       	ldi	r21, 0x3E	; 62
	
	int16_t return_potential_val = 0;
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		switch(tinyDendrite_current_signals[i])
     9ea:	91 91       	ld	r25, Z+
     9ec:	93 30       	cpi	r25, 0x03	; 3
     9ee:	a1 f0       	breq	.+40     	; 0xa18 <tinyDendrite_get_potential+0x3c>
     9f0:	28 f4       	brcc	.+10     	; 0x9fc <tinyDendrite_get_potential+0x20>
     9f2:	91 30       	cpi	r25, 0x01	; 1
     9f4:	b9 f0       	breq	.+46     	; 0xa24 <tinyDendrite_get_potential+0x48>
     9f6:	92 30       	cpi	r25, 0x02	; 2
     9f8:	91 f0       	breq	.+36     	; 0xa1e <tinyDendrite_get_potential+0x42>
     9fa:	16 c0       	rjmp	.+44     	; 0xa28 <tinyDendrite_get_potential+0x4c>
     9fc:	95 30       	cpi	r25, 0x05	; 5
     9fe:	31 f0       	breq	.+12     	; 0xa0c <tinyDendrite_get_potential+0x30>
     a00:	40 f0       	brcs	.+16     	; 0xa12 <tinyDendrite_get_potential+0x36>
     a02:	96 30       	cpi	r25, 0x06	; 6
     a04:	89 f4       	brne	.+34     	; 0xa28 <tinyDendrite_get_potential+0x4c>
		{
			case NO_SIGNAL:
				return_potential_val += NO_SIGNAL_REACTION;
				break;
			case HIGH_EXCITE:
				return_potential_val += HIGH_EXCITE_REACTION;
     a06:	2c 5c       	subi	r18, 0xCC	; 204
     a08:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
     a0a:	0e c0       	rjmp	.+28     	; 0xa28 <tinyDendrite_get_potential+0x4c>
			case NORMAL_EXCITE:
				return_potential_val += NORMAL_EXCITE_REACTION;
     a0c:	26 5e       	subi	r18, 0xE6	; 230
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
     a10:	0b c0       	rjmp	.+22     	; 0xa28 <tinyDendrite_get_potential+0x4c>
			case LOW_EXCITE:
				return_potential_val += LOW_EXCITE_REACTION;
     a12:	2c 5e       	subi	r18, 0xEC	; 236
     a14:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
     a16:	08 c0       	rjmp	.+16     	; 0xa28 <tinyDendrite_get_potential+0x4c>
			case HIGH_INHIB:
				return_potential_val += HIGH_INHIB_REACTION;
     a18:	22 53       	subi	r18, 0x32	; 50
     a1a:	31 09       	sbc	r19, r1
				break;
     a1c:	05 c0       	rjmp	.+10     	; 0xa28 <tinyDendrite_get_potential+0x4c>
			case NORMAL_INHIB:
				return_potential_val += NORMAL_INHIB_REACTION;
     a1e:	2a 51       	subi	r18, 0x1A	; 26
     a20:	31 09       	sbc	r19, r1
				break;
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <tinyDendrite_get_potential+0x4c>
			case LOW_INHIB:
				return_potential_val += LOW_INHIB_REACTION;
     a24:	24 51       	subi	r18, 0x14	; 20
     a26:	31 09       	sbc	r19, r1
{
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
	
	int16_t return_potential_val = 0;
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     a28:	e4 17       	cp	r30, r20
     a2a:	f5 07       	cpc	r31, r21
     a2c:	f1 f6       	brne	.-68     	; 0x9ea <tinyDendrite_get_potential+0xe>
			default:
				break;
		}
	}
	return return_potential_val;
}
     a2e:	c9 01       	movw	r24, r18
     a30:	08 95       	ret

00000a32 <tinyDendrite_update_potential>:

double tinyDendrite_update_potential(double potential){
     a32:	cf 92       	push	r12
     a34:	df 92       	push	r13
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	6b 01       	movw	r12, r22
     a3c:	7c 01       	movw	r14, r24
	
	int16_t potential_change = tinyDendrite_get_potential();
     a3e:	ce df       	rcall	.-100    	; 0x9dc <tinyDendrite_get_potential>
	potential += potential_change;
	return potential;
     a40:	bc 01       	movw	r22, r24
     a42:	99 0f       	add	r25, r25
     a44:	88 0b       	sbc	r24, r24
     a46:	99 0b       	sbc	r25, r25
     a48:	db d1       	rcall	.+950    	; 0xe00 <__floatsisf>
     a4a:	a7 01       	movw	r20, r14
     a4c:	96 01       	movw	r18, r12
     a4e:	b9 d0       	rcall	.+370    	; 0xbc2 <__addsf3>
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	08 95       	ret

00000a5a <__vector_6>:
This function is called every time the RTC (Real Time Clock) counter overflows.
With the current settings, it will be called every ms.
The RTC clock runs at 1kHz, and the number of cycles before overflow is set with RTC.PER = someHexValue (e.g. 0x20) in src/rtc.c
*/
ISR(RTC_CNT_vect)
{
     a5a:	1f 92       	push	r1
     a5c:	0f 92       	push	r0
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	0f 92       	push	r0
     a62:	11 24       	eor	r1, r1
     a64:	2f 93       	push	r18
     a66:	3f 93       	push	r19
     a68:	4f 93       	push	r20
     a6a:	5f 93       	push	r21
     a6c:	6f 93       	push	r22
     a6e:	7f 93       	push	r23
     a70:	8f 93       	push	r24
     a72:	9f 93       	push	r25
     a74:	af 93       	push	r26
     a76:	bf 93       	push	r27
     a78:	cf 93       	push	r28
     a7a:	ef 93       	push	r30
     a7c:	ff 93       	push	r31
static _Bool tinyISR_interrupt_flag = false;


void tinyISR_setflag(_Bool new_flag_val)
{
	tinyISR_interrupt_flag = new_flag_val;
     a7e:	c1 e0       	ldi	r28, 0x01	; 1
     a80:	c0 93 4f 3e 	sts	0x3E4F, r28	; 0x803e4f <tinyISR_interrupt_flag>
{
	// Set flag to let main loop run a new cycle
	tinyISR_setflag(true);
	
	// Timer counter incrementation
	tinyTime_counter_increment();
     a84:	86 dd       	rcall	.-1268   	; 0x592 <tinyTime_counter_increment>

	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
     a86:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
}
     a8a:	ff 91       	pop	r31
     a8c:	ef 91       	pop	r30
     a8e:	cf 91       	pop	r28
     a90:	bf 91       	pop	r27
     a92:	af 91       	pop	r26
     a94:	9f 91       	pop	r25
     a96:	8f 91       	pop	r24
     a98:	7f 91       	pop	r23
     a9a:	6f 91       	pop	r22
     a9c:	5f 91       	pop	r21
     a9e:	4f 91       	pop	r20
     aa0:	3f 91       	pop	r19
     aa2:	2f 91       	pop	r18
     aa4:	0f 90       	pop	r0
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	0f 90       	pop	r0
     aaa:	1f 90       	pop	r1
     aac:	18 95       	reti

00000aae <tinyISR_setflag>:
static _Bool tinyISR_interrupt_flag = false;


void tinyISR_setflag(_Bool new_flag_val)
{
	tinyISR_interrupt_flag = new_flag_val;
     aae:	80 93 4f 3e 	sts	0x3E4F, r24	; 0x803e4f <tinyISR_interrupt_flag>
     ab2:	08 95       	ret

00000ab4 <tinyISR_getflag>:
}

_Bool tinyISR_getflag(void)
{
	return tinyISR_interrupt_flag;
}
     ab4:	80 91 4f 3e 	lds	r24, 0x3E4F	; 0x803e4f <tinyISR_interrupt_flag>
     ab8:	08 95       	ret

00000aba <tinyPotential_update>:
/*
The function which will run in the main loop.
This function will run on interrupts by the RTC module.
*/
void tinyPotential_update()
{
     aba:	cf 92       	push	r12
     abc:	df 92       	push	r13
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
Function to decay the potential towards 0
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
     ac2:	7b dd       	rcall	.-1290   	; 0x5ba <tinyTime_now>
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
     ac4:	80 91 50 3e 	lds	r24, 0x3E50	; 0x803e50 <previous_update_time>
     ac8:	68 1b       	sub	r22, r24
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	95 d1       	rcall	.+810    	; 0xdfc <__floatunsisf>
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	48 ec       	ldi	r20, 0xC8	; 200
     ad8:	52 e4       	ldi	r21, 0x42	; 66
     ada:	e4 d0       	rcall	.+456    	; 0xca4 <__divsf3>
     adc:	90 58       	subi	r25, 0x80	; 128
     ade:	5c d1       	rcall	.+696    	; 0xd98 <exp>
     ae0:	20 91 54 3e 	lds	r18, 0x3E54	; 0x803e54 <tinyPotential_potential>
     ae4:	30 91 55 3e 	lds	r19, 0x3E55	; 0x803e55 <tinyPotential_potential+0x1>
     ae8:	40 91 56 3e 	lds	r20, 0x3E56	; 0x803e56 <tinyPotential_potential+0x2>
     aec:	50 91 57 3e 	lds	r21, 0x3E57	; 0x803e57 <tinyPotential_potential+0x3>
     af0:	d9 d2       	rcall	.+1458   	; 0x10a4 <__mulsf3>
     af2:	6b 01       	movw	r12, r22
     af4:	7c 01       	movw	r14, r24
	if(fabs(tinyPotential_potential)<0.1){
     af6:	9f 77       	andi	r25, 0x7F	; 127
     af8:	2d ec       	ldi	r18, 0xCD	; 205
     afa:	3c ec       	ldi	r19, 0xCC	; 204
     afc:	4c ec       	ldi	r20, 0xCC	; 204
     afe:	5d e3       	ldi	r21, 0x3D	; 61
     b00:	cc d0       	rcall	.+408    	; 0xc9a <__cmpsf2>
     b02:	88 23       	and	r24, r24
     b04:	4c f0       	brlt	.+18     	; 0xb18 <tinyPotential_update+0x5e>
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
     b06:	c0 92 54 3e 	sts	0x3E54, r12	; 0x803e54 <tinyPotential_potential>
     b0a:	d0 92 55 3e 	sts	0x3E55, r13	; 0x803e55 <tinyPotential_potential+0x1>
     b0e:	e0 92 56 3e 	sts	0x3E56, r14	; 0x803e56 <tinyPotential_potential+0x2>
     b12:	f0 92 57 3e 	sts	0x3E57, r15	; 0x803e57 <tinyPotential_potential+0x3>
     b16:	08 c0       	rjmp	.+16     	; 0xb28 <tinyPotential_update+0x6e>
	if(fabs(tinyPotential_potential)<0.1){
		tinyPotential_potential=0;
     b18:	10 92 54 3e 	sts	0x3E54, r1	; 0x803e54 <tinyPotential_potential>
     b1c:	10 92 55 3e 	sts	0x3E55, r1	; 0x803e55 <tinyPotential_potential+0x1>
     b20:	10 92 56 3e 	sts	0x3E56, r1	; 0x803e56 <tinyPotential_potential+0x2>
     b24:	10 92 57 3e 	sts	0x3E57, r1	; 0x803e57 <tinyPotential_potential+0x3>
	}
	previous_update_time = tinyTime_now();
     b28:	48 dd       	rcall	.-1392   	; 0x5ba <tinyTime_now>
     b2a:	60 93 50 3e 	sts	0x3E50, r22	; 0x803e50 <previous_update_time>
     b2e:	70 93 51 3e 	sts	0x3E51, r23	; 0x803e51 <previous_update_time+0x1>
     b32:	80 93 52 3e 	sts	0x3E52, r24	; 0x803e52 <previous_update_time+0x2>
     b36:	90 93 53 3e 	sts	0x3E53, r25	; 0x803e53 <previous_update_time+0x3>
void tinyPotential_update()
{
	//Some of the potential in the neuron has decayed away
	tinyPotential_decay();
	// Update potential with values from Dendrites
	tinyPotential_potential = tinyDendrite_update_potential(tinyPotential_potential);
     b3a:	60 91 54 3e 	lds	r22, 0x3E54	; 0x803e54 <tinyPotential_potential>
     b3e:	70 91 55 3e 	lds	r23, 0x3E55	; 0x803e55 <tinyPotential_potential+0x1>
     b42:	80 91 56 3e 	lds	r24, 0x3E56	; 0x803e56 <tinyPotential_potential+0x2>
     b46:	90 91 57 3e 	lds	r25, 0x3E57	; 0x803e57 <tinyPotential_potential+0x3>
     b4a:	73 df       	rcall	.-282    	; 0xa32 <tinyDendrite_update_potential>
     b4c:	ab 01       	movw	r20, r22
     b4e:	bc 01       	movw	r22, r24
     b50:	40 93 54 3e 	sts	0x3E54, r20	; 0x803e54 <tinyPotential_potential>
     b54:	50 93 55 3e 	sts	0x3E55, r21	; 0x803e55 <tinyPotential_potential+0x1>
     b58:	60 93 56 3e 	sts	0x3E56, r22	; 0x803e56 <tinyPotential_potential+0x2>
     b5c:	70 93 57 3e 	sts	0x3E57, r23	; 0x803e57 <tinyPotential_potential+0x3>
	tinyDebugger_send_double("DendP", tinyPotential_potential);
     b60:	80 e7       	ldi	r24, 0x70	; 112
     b62:	9c e9       	ldi	r25, 0x9C	; 156
     b64:	90 dc       	rcall	.-1760   	; 0x486 <tinyDebugger_send_double>
	
	// Update potential from button press
	tinyPotential_potential = tinyButton_update_potential(tinyPotential_potential);
     b66:	60 91 54 3e 	lds	r22, 0x3E54	; 0x803e54 <tinyPotential_potential>
     b6a:	70 91 55 3e 	lds	r23, 0x3E55	; 0x803e55 <tinyPotential_potential+0x1>
     b6e:	80 91 56 3e 	lds	r24, 0x3E56	; 0x803e56 <tinyPotential_potential+0x2>
     b72:	90 91 57 3e 	lds	r25, 0x3E57	; 0x803e57 <tinyPotential_potential+0x3>
     b76:	92 dd       	rcall	.-1244   	; 0x69c <tinyButton_update_potential>
     b78:	60 93 54 3e 	sts	0x3E54, r22	; 0x803e54 <tinyPotential_potential>
     b7c:	70 93 55 3e 	sts	0x3E55, r23	; 0x803e55 <tinyPotential_potential+0x1>
     b80:	80 93 56 3e 	sts	0x3E56, r24	; 0x803e56 <tinyPotential_potential+0x2>
     b84:	90 93 57 3e 	sts	0x3E57, r25	; 0x803e57 <tinyPotential_potential+0x3>
	
	// Update potential with values from spontaneous pulse.
	tinyPotential_potential = tinyPulse_update_potential(tinyPotential_potential);
     b88:	cf dc       	rcall	.-1634   	; 0x528 <tinyPulse_update_potential>
     b8a:	60 93 54 3e 	sts	0x3E54, r22	; 0x803e54 <tinyPotential_potential>
     b8e:	70 93 55 3e 	sts	0x3E55, r23	; 0x803e55 <tinyPotential_potential+0x1>
     b92:	80 93 56 3e 	sts	0x3E56, r24	; 0x803e56 <tinyPotential_potential+0x2>
     b96:	90 93 57 3e 	sts	0x3E57, r25	; 0x803e57 <tinyPotential_potential+0x3>
	
	// Let the axon affect the potential
	// This is also where we decide whether or not the axon should fire
	tinyPotential_potential = tinyAxon_update_potential(tinyPotential_potential);
     b9a:	f4 dd       	rcall	.-1048   	; 0x784 <tinyAxon_update_potential>
     b9c:	ab 01       	movw	r20, r22
     b9e:	bc 01       	movw	r22, r24
     ba0:	40 93 54 3e 	sts	0x3E54, r20	; 0x803e54 <tinyPotential_potential>
     ba4:	50 93 55 3e 	sts	0x3E55, r21	; 0x803e55 <tinyPotential_potential+0x1>
     ba8:	60 93 56 3e 	sts	0x3E56, r22	; 0x803e56 <tinyPotential_potential+0x2>
     bac:	70 93 57 3e 	sts	0x3E57, r23	; 0x803e57 <tinyPotential_potential+0x3>
	tinyDebugger_send_double("AxonP", tinyPotential_potential);
     bb0:	86 e7       	ldi	r24, 0x76	; 118
     bb2:	9c e9       	ldi	r25, 0x9C	; 156
     bb4:	68 dc       	rcall	.-1840   	; 0x486 <tinyDebugger_send_double>
}
     bb6:	ff 90       	pop	r15
     bb8:	ef 90       	pop	r14
     bba:	df 90       	pop	r13
     bbc:	cf 90       	pop	r12
     bbe:	08 95       	ret

00000bc0 <__subsf3>:
     bc0:	50 58       	subi	r21, 0x80	; 128

00000bc2 <__addsf3>:
     bc2:	bb 27       	eor	r27, r27
     bc4:	aa 27       	eor	r26, r26
     bc6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__addsf3x>
     bca:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_round>
     bce:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__fp_pscA>
     bd2:	38 f0       	brcs	.+14     	; 0xbe2 <__addsf3+0x20>
     bd4:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fp_pscB>
     bd8:	20 f0       	brcs	.+8      	; 0xbe2 <__addsf3+0x20>
     bda:	39 f4       	brne	.+14     	; 0xbea <__addsf3+0x28>
     bdc:	9f 3f       	cpi	r25, 0xFF	; 255
     bde:	19 f4       	brne	.+6      	; 0xbe6 <__addsf3+0x24>
     be0:	26 f4       	brtc	.+8      	; 0xbea <__addsf3+0x28>
     be2:	0c 94 65 07 	jmp	0xeca	; 0xeca <__fp_nan>
     be6:	0e f4       	brtc	.+2      	; 0xbea <__addsf3+0x28>
     be8:	e0 95       	com	r30
     bea:	e7 fb       	bst	r30, 7
     bec:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__fp_inf>

00000bf0 <__addsf3x>:
     bf0:	e9 2f       	mov	r30, r25
     bf2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fp_split3>
     bf6:	58 f3       	brcs	.-42     	; 0xbce <__addsf3+0xc>
     bf8:	ba 17       	cp	r27, r26
     bfa:	62 07       	cpc	r22, r18
     bfc:	73 07       	cpc	r23, r19
     bfe:	84 07       	cpc	r24, r20
     c00:	95 07       	cpc	r25, r21
     c02:	20 f0       	brcs	.+8      	; 0xc0c <__addsf3x+0x1c>
     c04:	79 f4       	brne	.+30     	; 0xc24 <__addsf3x+0x34>
     c06:	a6 f5       	brtc	.+104    	; 0xc70 <__addsf3x+0x80>
     c08:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_zero>
     c0c:	0e f4       	brtc	.+2      	; 0xc10 <__addsf3x+0x20>
     c0e:	e0 95       	com	r30
     c10:	0b 2e       	mov	r0, r27
     c12:	ba 2f       	mov	r27, r26
     c14:	a0 2d       	mov	r26, r0
     c16:	0b 01       	movw	r0, r22
     c18:	b9 01       	movw	r22, r18
     c1a:	90 01       	movw	r18, r0
     c1c:	0c 01       	movw	r0, r24
     c1e:	ca 01       	movw	r24, r20
     c20:	a0 01       	movw	r20, r0
     c22:	11 24       	eor	r1, r1
     c24:	ff 27       	eor	r31, r31
     c26:	59 1b       	sub	r21, r25
     c28:	99 f0       	breq	.+38     	; 0xc50 <__addsf3x+0x60>
     c2a:	59 3f       	cpi	r21, 0xF9	; 249
     c2c:	50 f4       	brcc	.+20     	; 0xc42 <__addsf3x+0x52>
     c2e:	50 3e       	cpi	r21, 0xE0	; 224
     c30:	68 f1       	brcs	.+90     	; 0xc8c <__addsf3x+0x9c>
     c32:	1a 16       	cp	r1, r26
     c34:	f0 40       	sbci	r31, 0x00	; 0
     c36:	a2 2f       	mov	r26, r18
     c38:	23 2f       	mov	r18, r19
     c3a:	34 2f       	mov	r19, r20
     c3c:	44 27       	eor	r20, r20
     c3e:	58 5f       	subi	r21, 0xF8	; 248
     c40:	f3 cf       	rjmp	.-26     	; 0xc28 <__addsf3x+0x38>
     c42:	46 95       	lsr	r20
     c44:	37 95       	ror	r19
     c46:	27 95       	ror	r18
     c48:	a7 95       	ror	r26
     c4a:	f0 40       	sbci	r31, 0x00	; 0
     c4c:	53 95       	inc	r21
     c4e:	c9 f7       	brne	.-14     	; 0xc42 <__addsf3x+0x52>
     c50:	7e f4       	brtc	.+30     	; 0xc70 <__addsf3x+0x80>
     c52:	1f 16       	cp	r1, r31
     c54:	ba 0b       	sbc	r27, r26
     c56:	62 0b       	sbc	r22, r18
     c58:	73 0b       	sbc	r23, r19
     c5a:	84 0b       	sbc	r24, r20
     c5c:	ba f0       	brmi	.+46     	; 0xc8c <__addsf3x+0x9c>
     c5e:	91 50       	subi	r25, 0x01	; 1
     c60:	a1 f0       	breq	.+40     	; 0xc8a <__addsf3x+0x9a>
     c62:	ff 0f       	add	r31, r31
     c64:	bb 1f       	adc	r27, r27
     c66:	66 1f       	adc	r22, r22
     c68:	77 1f       	adc	r23, r23
     c6a:	88 1f       	adc	r24, r24
     c6c:	c2 f7       	brpl	.-16     	; 0xc5e <__addsf3x+0x6e>
     c6e:	0e c0       	rjmp	.+28     	; 0xc8c <__addsf3x+0x9c>
     c70:	ba 0f       	add	r27, r26
     c72:	62 1f       	adc	r22, r18
     c74:	73 1f       	adc	r23, r19
     c76:	84 1f       	adc	r24, r20
     c78:	48 f4       	brcc	.+18     	; 0xc8c <__addsf3x+0x9c>
     c7a:	87 95       	ror	r24
     c7c:	77 95       	ror	r23
     c7e:	67 95       	ror	r22
     c80:	b7 95       	ror	r27
     c82:	f7 95       	ror	r31
     c84:	9e 3f       	cpi	r25, 0xFE	; 254
     c86:	08 f0       	brcs	.+2      	; 0xc8a <__addsf3x+0x9a>
     c88:	b0 cf       	rjmp	.-160    	; 0xbea <__addsf3+0x28>
     c8a:	93 95       	inc	r25
     c8c:	88 0f       	add	r24, r24
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <__addsf3x+0xa2>
     c90:	99 27       	eor	r25, r25
     c92:	ee 0f       	add	r30, r30
     c94:	97 95       	ror	r25
     c96:	87 95       	ror	r24
     c98:	08 95       	ret

00000c9a <__cmpsf2>:
     c9a:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_cmp>
     c9e:	08 f4       	brcc	.+2      	; 0xca2 <__cmpsf2+0x8>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	08 95       	ret

00000ca4 <__divsf3>:
     ca4:	0e 94 66 06 	call	0xccc	; 0xccc <__divsf3x>
     ca8:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_round>
     cac:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fp_pscB>
     cb0:	58 f0       	brcs	.+22     	; 0xcc8 <__divsf3+0x24>
     cb2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__fp_pscA>
     cb6:	40 f0       	brcs	.+16     	; 0xcc8 <__divsf3+0x24>
     cb8:	29 f4       	brne	.+10     	; 0xcc4 <__divsf3+0x20>
     cba:	5f 3f       	cpi	r21, 0xFF	; 255
     cbc:	29 f0       	breq	.+10     	; 0xcc8 <__divsf3+0x24>
     cbe:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__fp_inf>
     cc2:	51 11       	cpse	r21, r1
     cc4:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_szero>
     cc8:	0c 94 65 07 	jmp	0xeca	; 0xeca <__fp_nan>

00000ccc <__divsf3x>:
     ccc:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fp_split3>
     cd0:	68 f3       	brcs	.-38     	; 0xcac <__divsf3+0x8>

00000cd2 <__divsf3_pse>:
     cd2:	99 23       	and	r25, r25
     cd4:	b1 f3       	breq	.-20     	; 0xcc2 <__divsf3+0x1e>
     cd6:	55 23       	and	r21, r21
     cd8:	91 f3       	breq	.-28     	; 0xcbe <__divsf3+0x1a>
     cda:	95 1b       	sub	r25, r21
     cdc:	55 0b       	sbc	r21, r21
     cde:	bb 27       	eor	r27, r27
     ce0:	aa 27       	eor	r26, r26
     ce2:	62 17       	cp	r22, r18
     ce4:	73 07       	cpc	r23, r19
     ce6:	84 07       	cpc	r24, r20
     ce8:	38 f0       	brcs	.+14     	; 0xcf8 <__divsf3_pse+0x26>
     cea:	9f 5f       	subi	r25, 0xFF	; 255
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	44 1f       	adc	r20, r20
     cf4:	aa 1f       	adc	r26, r26
     cf6:	a9 f3       	breq	.-22     	; 0xce2 <__divsf3_pse+0x10>
     cf8:	35 d0       	rcall	.+106    	; 0xd64 <__divsf3_pse+0x92>
     cfa:	0e 2e       	mov	r0, r30
     cfc:	3a f0       	brmi	.+14     	; 0xd0c <__divsf3_pse+0x3a>
     cfe:	e0 e8       	ldi	r30, 0x80	; 128
     d00:	32 d0       	rcall	.+100    	; 0xd66 <__divsf3_pse+0x94>
     d02:	91 50       	subi	r25, 0x01	; 1
     d04:	50 40       	sbci	r21, 0x00	; 0
     d06:	e6 95       	lsr	r30
     d08:	00 1c       	adc	r0, r0
     d0a:	ca f7       	brpl	.-14     	; 0xcfe <__divsf3_pse+0x2c>
     d0c:	2b d0       	rcall	.+86     	; 0xd64 <__divsf3_pse+0x92>
     d0e:	fe 2f       	mov	r31, r30
     d10:	29 d0       	rcall	.+82     	; 0xd64 <__divsf3_pse+0x92>
     d12:	66 0f       	add	r22, r22
     d14:	77 1f       	adc	r23, r23
     d16:	88 1f       	adc	r24, r24
     d18:	bb 1f       	adc	r27, r27
     d1a:	26 17       	cp	r18, r22
     d1c:	37 07       	cpc	r19, r23
     d1e:	48 07       	cpc	r20, r24
     d20:	ab 07       	cpc	r26, r27
     d22:	b0 e8       	ldi	r27, 0x80	; 128
     d24:	09 f0       	breq	.+2      	; 0xd28 <__divsf3_pse+0x56>
     d26:	bb 0b       	sbc	r27, r27
     d28:	80 2d       	mov	r24, r0
     d2a:	bf 01       	movw	r22, r30
     d2c:	ff 27       	eor	r31, r31
     d2e:	93 58       	subi	r25, 0x83	; 131
     d30:	5f 4f       	sbci	r21, 0xFF	; 255
     d32:	3a f0       	brmi	.+14     	; 0xd42 <__divsf3_pse+0x70>
     d34:	9e 3f       	cpi	r25, 0xFE	; 254
     d36:	51 05       	cpc	r21, r1
     d38:	78 f0       	brcs	.+30     	; 0xd58 <__divsf3_pse+0x86>
     d3a:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__fp_inf>
     d3e:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_szero>
     d42:	5f 3f       	cpi	r21, 0xFF	; 255
     d44:	e4 f3       	brlt	.-8      	; 0xd3e <__divsf3_pse+0x6c>
     d46:	98 3e       	cpi	r25, 0xE8	; 232
     d48:	d4 f3       	brlt	.-12     	; 0xd3e <__divsf3_pse+0x6c>
     d4a:	86 95       	lsr	r24
     d4c:	77 95       	ror	r23
     d4e:	67 95       	ror	r22
     d50:	b7 95       	ror	r27
     d52:	f7 95       	ror	r31
     d54:	9f 5f       	subi	r25, 0xFF	; 255
     d56:	c9 f7       	brne	.-14     	; 0xd4a <__divsf3_pse+0x78>
     d58:	88 0f       	add	r24, r24
     d5a:	91 1d       	adc	r25, r1
     d5c:	96 95       	lsr	r25
     d5e:	87 95       	ror	r24
     d60:	97 f9       	bld	r25, 7
     d62:	08 95       	ret
     d64:	e1 e0       	ldi	r30, 0x01	; 1
     d66:	66 0f       	add	r22, r22
     d68:	77 1f       	adc	r23, r23
     d6a:	88 1f       	adc	r24, r24
     d6c:	bb 1f       	adc	r27, r27
     d6e:	62 17       	cp	r22, r18
     d70:	73 07       	cpc	r23, r19
     d72:	84 07       	cpc	r24, r20
     d74:	ba 07       	cpc	r27, r26
     d76:	20 f0       	brcs	.+8      	; 0xd80 <__divsf3_pse+0xae>
     d78:	62 1b       	sub	r22, r18
     d7a:	73 0b       	sbc	r23, r19
     d7c:	84 0b       	sbc	r24, r20
     d7e:	ba 0b       	sbc	r27, r26
     d80:	ee 1f       	adc	r30, r30
     d82:	88 f7       	brcc	.-30     	; 0xd66 <__divsf3_pse+0x94>
     d84:	e0 95       	com	r30
     d86:	08 95       	ret
     d88:	29 f4       	brne	.+10     	; 0xd94 <__divsf3_pse+0xc2>
     d8a:	16 f0       	brts	.+4      	; 0xd90 <__divsf3_pse+0xbe>
     d8c:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__fp_inf>
     d90:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_zero>
     d94:	0c 94 65 07 	jmp	0xeca	; 0xeca <__fp_nan>

00000d98 <exp>:
     d98:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_splitA>
     d9c:	a8 f3       	brcs	.-22     	; 0xd88 <__divsf3_pse+0xb6>
     d9e:	96 38       	cpi	r25, 0x86	; 134
     da0:	a0 f7       	brcc	.-24     	; 0xd8a <__divsf3_pse+0xb8>
     da2:	07 f8       	bld	r0, 7
     da4:	0f 92       	push	r0
     da6:	e8 94       	clt
     da8:	2b e3       	ldi	r18, 0x3B	; 59
     daa:	3a ea       	ldi	r19, 0xAA	; 170
     dac:	48 eb       	ldi	r20, 0xB8	; 184
     dae:	5f e7       	ldi	r21, 0x7F	; 127
     db0:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__mulsf3_pse>
     db4:	0f 92       	push	r0
     db6:	0f 92       	push	r0
     db8:	0f 92       	push	r0
     dba:	4d b7       	in	r20, 0x3d	; 61
     dbc:	5e b7       	in	r21, 0x3e	; 62
     dbe:	0f 92       	push	r0
     dc0:	0e 94 1e 08 	call	0x103c	; 0x103c <modf>
     dc4:	e4 e3       	ldi	r30, 0x34	; 52
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	0e 94 68 07 	call	0xed0	; 0xed0 <__fp_powser>
     dcc:	4f 91       	pop	r20
     dce:	5f 91       	pop	r21
     dd0:	ef 91       	pop	r30
     dd2:	ff 91       	pop	r31
     dd4:	e5 95       	asr	r30
     dd6:	ee 1f       	adc	r30, r30
     dd8:	ff 1f       	adc	r31, r31
     dda:	49 f0       	breq	.+18     	; 0xdee <exp+0x56>
     ddc:	fe 57       	subi	r31, 0x7E	; 126
     dde:	e0 68       	ori	r30, 0x80	; 128
     de0:	44 27       	eor	r20, r20
     de2:	ee 0f       	add	r30, r30
     de4:	44 1f       	adc	r20, r20
     de6:	fa 95       	dec	r31
     de8:	e1 f7       	brne	.-8      	; 0xde2 <exp+0x4a>
     dea:	41 95       	neg	r20
     dec:	55 0b       	sbc	r21, r21
     dee:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <ldexp>
     df2:	0f 90       	pop	r0
     df4:	07 fe       	sbrs	r0, 7
     df6:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <inverse>
     dfa:	08 95       	ret

00000dfc <__floatunsisf>:
     dfc:	e8 94       	clt
     dfe:	09 c0       	rjmp	.+18     	; 0xe12 <__floatsisf+0x12>

00000e00 <__floatsisf>:
     e00:	97 fb       	bst	r25, 7
     e02:	3e f4       	brtc	.+14     	; 0xe12 <__floatsisf+0x12>
     e04:	90 95       	com	r25
     e06:	80 95       	com	r24
     e08:	70 95       	com	r23
     e0a:	61 95       	neg	r22
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	8f 4f       	sbci	r24, 0xFF	; 255
     e10:	9f 4f       	sbci	r25, 0xFF	; 255
     e12:	99 23       	and	r25, r25
     e14:	a9 f0       	breq	.+42     	; 0xe40 <__floatsisf+0x40>
     e16:	f9 2f       	mov	r31, r25
     e18:	96 e9       	ldi	r25, 0x96	; 150
     e1a:	bb 27       	eor	r27, r27
     e1c:	93 95       	inc	r25
     e1e:	f6 95       	lsr	r31
     e20:	87 95       	ror	r24
     e22:	77 95       	ror	r23
     e24:	67 95       	ror	r22
     e26:	b7 95       	ror	r27
     e28:	f1 11       	cpse	r31, r1
     e2a:	f8 cf       	rjmp	.-16     	; 0xe1c <__floatsisf+0x1c>
     e2c:	fa f4       	brpl	.+62     	; 0xe6c <__floatsisf+0x6c>
     e2e:	bb 0f       	add	r27, r27
     e30:	11 f4       	brne	.+4      	; 0xe36 <__floatsisf+0x36>
     e32:	60 ff       	sbrs	r22, 0
     e34:	1b c0       	rjmp	.+54     	; 0xe6c <__floatsisf+0x6c>
     e36:	6f 5f       	subi	r22, 0xFF	; 255
     e38:	7f 4f       	sbci	r23, 0xFF	; 255
     e3a:	8f 4f       	sbci	r24, 0xFF	; 255
     e3c:	9f 4f       	sbci	r25, 0xFF	; 255
     e3e:	16 c0       	rjmp	.+44     	; 0xe6c <__floatsisf+0x6c>
     e40:	88 23       	and	r24, r24
     e42:	11 f0       	breq	.+4      	; 0xe48 <__floatsisf+0x48>
     e44:	96 e9       	ldi	r25, 0x96	; 150
     e46:	11 c0       	rjmp	.+34     	; 0xe6a <__floatsisf+0x6a>
     e48:	77 23       	and	r23, r23
     e4a:	21 f0       	breq	.+8      	; 0xe54 <__floatsisf+0x54>
     e4c:	9e e8       	ldi	r25, 0x8E	; 142
     e4e:	87 2f       	mov	r24, r23
     e50:	76 2f       	mov	r23, r22
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <__floatsisf+0x5e>
     e54:	66 23       	and	r22, r22
     e56:	71 f0       	breq	.+28     	; 0xe74 <__floatsisf+0x74>
     e58:	96 e8       	ldi	r25, 0x86	; 134
     e5a:	86 2f       	mov	r24, r22
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	2a f0       	brmi	.+10     	; 0xe6c <__floatsisf+0x6c>
     e62:	9a 95       	dec	r25
     e64:	66 0f       	add	r22, r22
     e66:	77 1f       	adc	r23, r23
     e68:	88 1f       	adc	r24, r24
     e6a:	da f7       	brpl	.-10     	; 0xe62 <__floatsisf+0x62>
     e6c:	88 0f       	add	r24, r24
     e6e:	96 95       	lsr	r25
     e70:	87 95       	ror	r24
     e72:	97 f9       	bld	r25, 7
     e74:	08 95       	ret

00000e76 <__fp_cmp>:
     e76:	99 0f       	add	r25, r25
     e78:	00 08       	sbc	r0, r0
     e7a:	55 0f       	add	r21, r21
     e7c:	aa 0b       	sbc	r26, r26
     e7e:	e0 e8       	ldi	r30, 0x80	; 128
     e80:	fe ef       	ldi	r31, 0xFE	; 254
     e82:	16 16       	cp	r1, r22
     e84:	17 06       	cpc	r1, r23
     e86:	e8 07       	cpc	r30, r24
     e88:	f9 07       	cpc	r31, r25
     e8a:	c0 f0       	brcs	.+48     	; 0xebc <__fp_cmp+0x46>
     e8c:	12 16       	cp	r1, r18
     e8e:	13 06       	cpc	r1, r19
     e90:	e4 07       	cpc	r30, r20
     e92:	f5 07       	cpc	r31, r21
     e94:	98 f0       	brcs	.+38     	; 0xebc <__fp_cmp+0x46>
     e96:	62 1b       	sub	r22, r18
     e98:	73 0b       	sbc	r23, r19
     e9a:	84 0b       	sbc	r24, r20
     e9c:	95 0b       	sbc	r25, r21
     e9e:	39 f4       	brne	.+14     	; 0xeae <__fp_cmp+0x38>
     ea0:	0a 26       	eor	r0, r26
     ea2:	61 f0       	breq	.+24     	; 0xebc <__fp_cmp+0x46>
     ea4:	23 2b       	or	r18, r19
     ea6:	24 2b       	or	r18, r20
     ea8:	25 2b       	or	r18, r21
     eaa:	21 f4       	brne	.+8      	; 0xeb4 <__fp_cmp+0x3e>
     eac:	08 95       	ret
     eae:	0a 26       	eor	r0, r26
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <__fp_cmp+0x3e>
     eb2:	a1 40       	sbci	r26, 0x01	; 1
     eb4:	a6 95       	lsr	r26
     eb6:	8f ef       	ldi	r24, 0xFF	; 255
     eb8:	81 1d       	adc	r24, r1
     eba:	81 1d       	adc	r24, r1
     ebc:	08 95       	ret

00000ebe <__fp_inf>:
     ebe:	97 f9       	bld	r25, 7
     ec0:	9f 67       	ori	r25, 0x7F	; 127
     ec2:	80 e8       	ldi	r24, 0x80	; 128
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	08 95       	ret

00000eca <__fp_nan>:
     eca:	9f ef       	ldi	r25, 0xFF	; 255
     ecc:	80 ec       	ldi	r24, 0xC0	; 192
     ece:	08 95       	ret

00000ed0 <__fp_powser>:
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	1f 93       	push	r17
     ed6:	0f 93       	push	r16
     ed8:	ff 92       	push	r15
     eda:	ef 92       	push	r14
     edc:	df 92       	push	r13
     ede:	7b 01       	movw	r14, r22
     ee0:	8c 01       	movw	r16, r24
     ee2:	68 94       	set
     ee4:	06 c0       	rjmp	.+12     	; 0xef2 <__fp_powser+0x22>
     ee6:	da 2e       	mov	r13, r26
     ee8:	ef 01       	movw	r28, r30
     eea:	0e 94 65 08 	call	0x10ca	; 0x10ca <__mulsf3x>
     eee:	fe 01       	movw	r30, r28
     ef0:	e8 94       	clt
     ef2:	a5 91       	lpm	r26, Z+
     ef4:	25 91       	lpm	r18, Z+
     ef6:	35 91       	lpm	r19, Z+
     ef8:	45 91       	lpm	r20, Z+
     efa:	55 91       	lpm	r21, Z+
     efc:	a6 f3       	brts	.-24     	; 0xee6 <__fp_powser+0x16>
     efe:	ef 01       	movw	r28, r30
     f00:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__addsf3x>
     f04:	fe 01       	movw	r30, r28
     f06:	97 01       	movw	r18, r14
     f08:	a8 01       	movw	r20, r16
     f0a:	da 94       	dec	r13
     f0c:	69 f7       	brne	.-38     	; 0xee8 <__fp_powser+0x18>
     f0e:	df 90       	pop	r13
     f10:	ef 90       	pop	r14
     f12:	ff 90       	pop	r15
     f14:	0f 91       	pop	r16
     f16:	1f 91       	pop	r17
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <__fp_pscA>:
     f1e:	00 24       	eor	r0, r0
     f20:	0a 94       	dec	r0
     f22:	16 16       	cp	r1, r22
     f24:	17 06       	cpc	r1, r23
     f26:	18 06       	cpc	r1, r24
     f28:	09 06       	cpc	r0, r25
     f2a:	08 95       	ret

00000f2c <__fp_pscB>:
     f2c:	00 24       	eor	r0, r0
     f2e:	0a 94       	dec	r0
     f30:	12 16       	cp	r1, r18
     f32:	13 06       	cpc	r1, r19
     f34:	14 06       	cpc	r1, r20
     f36:	05 06       	cpc	r0, r21
     f38:	08 95       	ret

00000f3a <__fp_round>:
     f3a:	09 2e       	mov	r0, r25
     f3c:	03 94       	inc	r0
     f3e:	00 0c       	add	r0, r0
     f40:	11 f4       	brne	.+4      	; 0xf46 <__fp_round+0xc>
     f42:	88 23       	and	r24, r24
     f44:	52 f0       	brmi	.+20     	; 0xf5a <__fp_round+0x20>
     f46:	bb 0f       	add	r27, r27
     f48:	40 f4       	brcc	.+16     	; 0xf5a <__fp_round+0x20>
     f4a:	bf 2b       	or	r27, r31
     f4c:	11 f4       	brne	.+4      	; 0xf52 <__fp_round+0x18>
     f4e:	60 ff       	sbrs	r22, 0
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__fp_round+0x20>
     f52:	6f 5f       	subi	r22, 0xFF	; 255
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	8f 4f       	sbci	r24, 0xFF	; 255
     f58:	9f 4f       	sbci	r25, 0xFF	; 255
     f5a:	08 95       	ret

00000f5c <__fp_split3>:
     f5c:	57 fd       	sbrc	r21, 7
     f5e:	90 58       	subi	r25, 0x80	; 128
     f60:	44 0f       	add	r20, r20
     f62:	55 1f       	adc	r21, r21
     f64:	59 f0       	breq	.+22     	; 0xf7c <__fp_splitA+0x10>
     f66:	5f 3f       	cpi	r21, 0xFF	; 255
     f68:	71 f0       	breq	.+28     	; 0xf86 <__fp_splitA+0x1a>
     f6a:	47 95       	ror	r20

00000f6c <__fp_splitA>:
     f6c:	88 0f       	add	r24, r24
     f6e:	97 fb       	bst	r25, 7
     f70:	99 1f       	adc	r25, r25
     f72:	61 f0       	breq	.+24     	; 0xf8c <__fp_splitA+0x20>
     f74:	9f 3f       	cpi	r25, 0xFF	; 255
     f76:	79 f0       	breq	.+30     	; 0xf96 <__fp_splitA+0x2a>
     f78:	87 95       	ror	r24
     f7a:	08 95       	ret
     f7c:	12 16       	cp	r1, r18
     f7e:	13 06       	cpc	r1, r19
     f80:	14 06       	cpc	r1, r20
     f82:	55 1f       	adc	r21, r21
     f84:	f2 cf       	rjmp	.-28     	; 0xf6a <__fp_split3+0xe>
     f86:	46 95       	lsr	r20
     f88:	f1 df       	rcall	.-30     	; 0xf6c <__fp_splitA>
     f8a:	08 c0       	rjmp	.+16     	; 0xf9c <__fp_splitA+0x30>
     f8c:	16 16       	cp	r1, r22
     f8e:	17 06       	cpc	r1, r23
     f90:	18 06       	cpc	r1, r24
     f92:	99 1f       	adc	r25, r25
     f94:	f1 cf       	rjmp	.-30     	; 0xf78 <__fp_splitA+0xc>
     f96:	86 95       	lsr	r24
     f98:	71 05       	cpc	r23, r1
     f9a:	61 05       	cpc	r22, r1
     f9c:	08 94       	sec
     f9e:	08 95       	ret

00000fa0 <__fp_zero>:
     fa0:	e8 94       	clt

00000fa2 <__fp_szero>:
     fa2:	bb 27       	eor	r27, r27
     fa4:	66 27       	eor	r22, r22
     fa6:	77 27       	eor	r23, r23
     fa8:	cb 01       	movw	r24, r22
     faa:	97 f9       	bld	r25, 7
     fac:	08 95       	ret

00000fae <__gesf2>:
     fae:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_cmp>
     fb2:	08 f4       	brcc	.+2      	; 0xfb6 <__gesf2+0x8>
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	08 95       	ret

00000fb8 <inverse>:
     fb8:	9b 01       	movw	r18, r22
     fba:	ac 01       	movw	r20, r24
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	80 e8       	ldi	r24, 0x80	; 128
     fc2:	9f e3       	ldi	r25, 0x3F	; 63
     fc4:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__divsf3>
     fc8:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__fp_inf>
     fcc:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_mpack>

00000fd0 <ldexp>:
     fd0:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_splitA>
     fd4:	d8 f3       	brcs	.-10     	; 0xfcc <inverse+0x14>
     fd6:	99 23       	and	r25, r25
     fd8:	c9 f3       	breq	.-14     	; 0xfcc <inverse+0x14>
     fda:	94 0f       	add	r25, r20
     fdc:	51 1d       	adc	r21, r1
     fde:	a3 f3       	brvs	.-24     	; 0xfc8 <inverse+0x10>
     fe0:	91 50       	subi	r25, 0x01	; 1
     fe2:	50 40       	sbci	r21, 0x00	; 0
     fe4:	94 f0       	brlt	.+36     	; 0x100a <ldexp+0x3a>
     fe6:	59 f0       	breq	.+22     	; 0xffe <ldexp+0x2e>
     fe8:	88 23       	and	r24, r24
     fea:	32 f0       	brmi	.+12     	; 0xff8 <ldexp+0x28>
     fec:	66 0f       	add	r22, r22
     fee:	77 1f       	adc	r23, r23
     ff0:	88 1f       	adc	r24, r24
     ff2:	91 50       	subi	r25, 0x01	; 1
     ff4:	50 40       	sbci	r21, 0x00	; 0
     ff6:	c1 f7       	brne	.-16     	; 0xfe8 <ldexp+0x18>
     ff8:	9e 3f       	cpi	r25, 0xFE	; 254
     ffa:	51 05       	cpc	r21, r1
     ffc:	2c f7       	brge	.-54     	; 0xfc8 <inverse+0x10>
     ffe:	88 0f       	add	r24, r24
    1000:	91 1d       	adc	r25, r1
    1002:	96 95       	lsr	r25
    1004:	87 95       	ror	r24
    1006:	97 f9       	bld	r25, 7
    1008:	08 95       	ret
    100a:	5f 3f       	cpi	r21, 0xFF	; 255
    100c:	ac f0       	brlt	.+42     	; 0x1038 <ldexp+0x68>
    100e:	98 3e       	cpi	r25, 0xE8	; 232
    1010:	9c f0       	brlt	.+38     	; 0x1038 <ldexp+0x68>
    1012:	bb 27       	eor	r27, r27
    1014:	86 95       	lsr	r24
    1016:	77 95       	ror	r23
    1018:	67 95       	ror	r22
    101a:	b7 95       	ror	r27
    101c:	08 f4       	brcc	.+2      	; 0x1020 <ldexp+0x50>
    101e:	b1 60       	ori	r27, 0x01	; 1
    1020:	93 95       	inc	r25
    1022:	c1 f7       	brne	.-16     	; 0x1014 <ldexp+0x44>
    1024:	bb 0f       	add	r27, r27
    1026:	58 f7       	brcc	.-42     	; 0xffe <ldexp+0x2e>
    1028:	11 f4       	brne	.+4      	; 0x102e <ldexp+0x5e>
    102a:	60 ff       	sbrs	r22, 0
    102c:	e8 cf       	rjmp	.-48     	; 0xffe <ldexp+0x2e>
    102e:	6f 5f       	subi	r22, 0xFF	; 255
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	8f 4f       	sbci	r24, 0xFF	; 255
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	e3 cf       	rjmp	.-58     	; 0xffe <ldexp+0x2e>
    1038:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_szero>

0000103c <modf>:
    103c:	fa 01       	movw	r30, r20
    103e:	dc 01       	movw	r26, r24
    1040:	aa 0f       	add	r26, r26
    1042:	bb 1f       	adc	r27, r27
    1044:	9b 01       	movw	r18, r22
    1046:	ac 01       	movw	r20, r24
    1048:	bf 57       	subi	r27, 0x7F	; 127
    104a:	28 f4       	brcc	.+10     	; 0x1056 <modf+0x1a>
    104c:	22 27       	eor	r18, r18
    104e:	33 27       	eor	r19, r19
    1050:	44 27       	eor	r20, r20
    1052:	50 78       	andi	r21, 0x80	; 128
    1054:	20 c0       	rjmp	.+64     	; 0x1096 <modf+0x5a>
    1056:	b7 51       	subi	r27, 0x17	; 23
    1058:	90 f4       	brcc	.+36     	; 0x107e <modf+0x42>
    105a:	ab 2f       	mov	r26, r27
    105c:	00 24       	eor	r0, r0
    105e:	46 95       	lsr	r20
    1060:	37 95       	ror	r19
    1062:	27 95       	ror	r18
    1064:	01 1c       	adc	r0, r1
    1066:	a3 95       	inc	r26
    1068:	d2 f3       	brmi	.-12     	; 0x105e <modf+0x22>
    106a:	00 20       	and	r0, r0
    106c:	71 f0       	breq	.+28     	; 0x108a <modf+0x4e>
    106e:	22 0f       	add	r18, r18
    1070:	33 1f       	adc	r19, r19
    1072:	44 1f       	adc	r20, r20
    1074:	b3 95       	inc	r27
    1076:	da f3       	brmi	.-10     	; 0x106e <modf+0x32>
    1078:	0e d0       	rcall	.+28     	; 0x1096 <modf+0x5a>
    107a:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__subsf3>
    107e:	61 30       	cpi	r22, 0x01	; 1
    1080:	71 05       	cpc	r23, r1
    1082:	a0 e8       	ldi	r26, 0x80	; 128
    1084:	8a 07       	cpc	r24, r26
    1086:	b9 46       	sbci	r27, 0x69	; 105
    1088:	30 f4       	brcc	.+12     	; 0x1096 <modf+0x5a>
    108a:	9b 01       	movw	r18, r22
    108c:	ac 01       	movw	r20, r24
    108e:	66 27       	eor	r22, r22
    1090:	77 27       	eor	r23, r23
    1092:	88 27       	eor	r24, r24
    1094:	90 78       	andi	r25, 0x80	; 128
    1096:	30 96       	adiw	r30, 0x00	; 0
    1098:	21 f0       	breq	.+8      	; 0x10a2 <modf+0x66>
    109a:	20 83       	st	Z, r18
    109c:	31 83       	std	Z+1, r19	; 0x01
    109e:	42 83       	std	Z+2, r20	; 0x02
    10a0:	53 83       	std	Z+3, r21	; 0x03
    10a2:	08 95       	ret

000010a4 <__mulsf3>:
    10a4:	0e 94 65 08 	call	0x10ca	; 0x10ca <__mulsf3x>
    10a8:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_round>
    10ac:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__fp_pscA>
    10b0:	38 f0       	brcs	.+14     	; 0x10c0 <__mulsf3+0x1c>
    10b2:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fp_pscB>
    10b6:	20 f0       	brcs	.+8      	; 0x10c0 <__mulsf3+0x1c>
    10b8:	95 23       	and	r25, r21
    10ba:	11 f0       	breq	.+4      	; 0x10c0 <__mulsf3+0x1c>
    10bc:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__fp_inf>
    10c0:	0c 94 65 07 	jmp	0xeca	; 0xeca <__fp_nan>
    10c4:	11 24       	eor	r1, r1
    10c6:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_szero>

000010ca <__mulsf3x>:
    10ca:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fp_split3>
    10ce:	70 f3       	brcs	.-36     	; 0x10ac <__mulsf3+0x8>

000010d0 <__mulsf3_pse>:
    10d0:	95 9f       	mul	r25, r21
    10d2:	c1 f3       	breq	.-16     	; 0x10c4 <__mulsf3+0x20>
    10d4:	95 0f       	add	r25, r21
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	55 1f       	adc	r21, r21
    10da:	62 9f       	mul	r22, r18
    10dc:	f0 01       	movw	r30, r0
    10de:	72 9f       	mul	r23, r18
    10e0:	bb 27       	eor	r27, r27
    10e2:	f0 0d       	add	r31, r0
    10e4:	b1 1d       	adc	r27, r1
    10e6:	63 9f       	mul	r22, r19
    10e8:	aa 27       	eor	r26, r26
    10ea:	f0 0d       	add	r31, r0
    10ec:	b1 1d       	adc	r27, r1
    10ee:	aa 1f       	adc	r26, r26
    10f0:	64 9f       	mul	r22, r20
    10f2:	66 27       	eor	r22, r22
    10f4:	b0 0d       	add	r27, r0
    10f6:	a1 1d       	adc	r26, r1
    10f8:	66 1f       	adc	r22, r22
    10fa:	82 9f       	mul	r24, r18
    10fc:	22 27       	eor	r18, r18
    10fe:	b0 0d       	add	r27, r0
    1100:	a1 1d       	adc	r26, r1
    1102:	62 1f       	adc	r22, r18
    1104:	73 9f       	mul	r23, r19
    1106:	b0 0d       	add	r27, r0
    1108:	a1 1d       	adc	r26, r1
    110a:	62 1f       	adc	r22, r18
    110c:	83 9f       	mul	r24, r19
    110e:	a0 0d       	add	r26, r0
    1110:	61 1d       	adc	r22, r1
    1112:	22 1f       	adc	r18, r18
    1114:	74 9f       	mul	r23, r20
    1116:	33 27       	eor	r19, r19
    1118:	a0 0d       	add	r26, r0
    111a:	61 1d       	adc	r22, r1
    111c:	23 1f       	adc	r18, r19
    111e:	84 9f       	mul	r24, r20
    1120:	60 0d       	add	r22, r0
    1122:	21 1d       	adc	r18, r1
    1124:	82 2f       	mov	r24, r18
    1126:	76 2f       	mov	r23, r22
    1128:	6a 2f       	mov	r22, r26
    112a:	11 24       	eor	r1, r1
    112c:	9f 57       	subi	r25, 0x7F	; 127
    112e:	50 40       	sbci	r21, 0x00	; 0
    1130:	9a f0       	brmi	.+38     	; 0x1158 <__mulsf3_pse+0x88>
    1132:	f1 f0       	breq	.+60     	; 0x1170 <__mulsf3_pse+0xa0>
    1134:	88 23       	and	r24, r24
    1136:	4a f0       	brmi	.+18     	; 0x114a <__mulsf3_pse+0x7a>
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	bb 1f       	adc	r27, r27
    113e:	66 1f       	adc	r22, r22
    1140:	77 1f       	adc	r23, r23
    1142:	88 1f       	adc	r24, r24
    1144:	91 50       	subi	r25, 0x01	; 1
    1146:	50 40       	sbci	r21, 0x00	; 0
    1148:	a9 f7       	brne	.-22     	; 0x1134 <__mulsf3_pse+0x64>
    114a:	9e 3f       	cpi	r25, 0xFE	; 254
    114c:	51 05       	cpc	r21, r1
    114e:	80 f0       	brcs	.+32     	; 0x1170 <__mulsf3_pse+0xa0>
    1150:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__fp_inf>
    1154:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_szero>
    1158:	5f 3f       	cpi	r21, 0xFF	; 255
    115a:	e4 f3       	brlt	.-8      	; 0x1154 <__mulsf3_pse+0x84>
    115c:	98 3e       	cpi	r25, 0xE8	; 232
    115e:	d4 f3       	brlt	.-12     	; 0x1154 <__mulsf3_pse+0x84>
    1160:	86 95       	lsr	r24
    1162:	77 95       	ror	r23
    1164:	67 95       	ror	r22
    1166:	b7 95       	ror	r27
    1168:	f7 95       	ror	r31
    116a:	e7 95       	ror	r30
    116c:	9f 5f       	subi	r25, 0xFF	; 255
    116e:	c1 f7       	brne	.-16     	; 0x1160 <__mulsf3_pse+0x90>
    1170:	fe 2b       	or	r31, r30
    1172:	88 0f       	add	r24, r24
    1174:	91 1d       	adc	r25, r1
    1176:	96 95       	lsr	r25
    1178:	87 95       	ror	r24
    117a:	97 f9       	bld	r25, 7
    117c:	08 95       	ret

0000117e <__fp_mpack>:
    117e:	9f 3f       	cpi	r25, 0xFF	; 255
    1180:	31 f0       	breq	.+12     	; 0x118e <__fp_mpack_finite+0xc>

00001182 <__fp_mpack_finite>:
    1182:	91 50       	subi	r25, 0x01	; 1
    1184:	20 f4       	brcc	.+8      	; 0x118e <__fp_mpack_finite+0xc>
    1186:	87 95       	ror	r24
    1188:	77 95       	ror	r23
    118a:	67 95       	ror	r22
    118c:	b7 95       	ror	r27
    118e:	88 0f       	add	r24, r24
    1190:	91 1d       	adc	r25, r1
    1192:	96 95       	lsr	r25
    1194:	87 95       	ror	r24
    1196:	97 f9       	bld	r25, 7
    1198:	08 95       	ret

0000119a <dtostrf>:
    119a:	ef 92       	push	r14
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	e8 01       	movw	r28, r16
    11a6:	47 fd       	sbrc	r20, 7
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <dtostrf+0x14>
    11aa:	34 e0       	ldi	r19, 0x04	; 4
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <dtostrf+0x16>
    11ae:	34 e1       	ldi	r19, 0x14	; 20
    11b0:	04 2e       	mov	r0, r20
    11b2:	00 0c       	add	r0, r0
    11b4:	55 0b       	sbc	r21, r21
    11b6:	57 ff       	sbrs	r21, 7
    11b8:	03 c0       	rjmp	.+6      	; 0x11c0 <dtostrf+0x26>
    11ba:	51 95       	neg	r21
    11bc:	41 95       	neg	r20
    11be:	51 09       	sbc	r21, r1
    11c0:	e3 2e       	mov	r14, r19
    11c2:	02 2f       	mov	r16, r18
    11c4:	24 2f       	mov	r18, r20
    11c6:	ae 01       	movw	r20, r28
    11c8:	1c d2       	rcall	.+1080   	; 0x1602 <dtoa_prf>
    11ca:	ce 01       	movw	r24, r28
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	ef 90       	pop	r14
    11d6:	08 95       	ret

000011d8 <printf>:
    11d8:	a0 e0       	ldi	r26, 0x00	; 0
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e1 ef       	ldi	r30, 0xF1	; 241
    11de:	f8 e0       	ldi	r31, 0x08	; 8
    11e0:	ff c4       	rjmp	.+2558   	; 0x1be0 <__prologue_saves__+0x20>
    11e2:	ae 01       	movw	r20, r28
    11e4:	4b 5f       	subi	r20, 0xFB	; 251
    11e6:	5f 4f       	sbci	r21, 0xFF	; 255
    11e8:	fa 01       	movw	r30, r20
    11ea:	61 91       	ld	r22, Z+
    11ec:	71 91       	ld	r23, Z+
    11ee:	af 01       	movw	r20, r30
    11f0:	80 91 67 3e 	lds	r24, 0x3E67	; 0x803e67 <__iob+0x2>
    11f4:	90 91 68 3e 	lds	r25, 0x3E68	; 0x803e68 <__iob+0x3>
    11f8:	32 d0       	rcall	.+100    	; 0x125e <vfprintf>
    11fa:	e2 e0       	ldi	r30, 0x02	; 2
    11fc:	0a c5       	rjmp	.+2580   	; 0x1c12 <__epilogue_restores__+0x20>

000011fe <puts>:
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	e0 91 67 3e 	lds	r30, 0x3E67	; 0x803e67 <__iob+0x2>
    120a:	f0 91 68 3e 	lds	r31, 0x3E68	; 0x803e68 <__iob+0x3>
    120e:	23 81       	ldd	r18, Z+3	; 0x03
    1210:	21 ff       	sbrs	r18, 1
    1212:	1b c0       	rjmp	.+54     	; 0x124a <puts+0x4c>
    1214:	8c 01       	movw	r16, r24
    1216:	d0 e0       	ldi	r29, 0x00	; 0
    1218:	c0 e0       	ldi	r28, 0x00	; 0
    121a:	f8 01       	movw	r30, r16
    121c:	81 91       	ld	r24, Z+
    121e:	8f 01       	movw	r16, r30
    1220:	60 91 67 3e 	lds	r22, 0x3E67	; 0x803e67 <__iob+0x2>
    1224:	70 91 68 3e 	lds	r23, 0x3E68	; 0x803e68 <__iob+0x3>
    1228:	db 01       	movw	r26, r22
    122a:	18 96       	adiw	r26, 0x08	; 8
    122c:	ed 91       	ld	r30, X+
    122e:	fc 91       	ld	r31, X
    1230:	19 97       	sbiw	r26, 0x09	; 9
    1232:	88 23       	and	r24, r24
    1234:	31 f0       	breq	.+12     	; 0x1242 <puts+0x44>
    1236:	09 95       	icall
    1238:	89 2b       	or	r24, r25
    123a:	79 f3       	breq	.-34     	; 0x121a <puts+0x1c>
    123c:	df ef       	ldi	r29, 0xFF	; 255
    123e:	cf ef       	ldi	r28, 0xFF	; 255
    1240:	ec cf       	rjmp	.-40     	; 0x121a <puts+0x1c>
    1242:	8a e0       	ldi	r24, 0x0A	; 10
    1244:	09 95       	icall
    1246:	89 2b       	or	r24, r25
    1248:	19 f0       	breq	.+6      	; 0x1250 <puts+0x52>
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	9f ef       	ldi	r25, 0xFF	; 255
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <puts+0x56>
    1250:	8d 2f       	mov	r24, r29
    1252:	9c 2f       	mov	r25, r28
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	08 95       	ret

0000125e <vfprintf>:
    125e:	ab e0       	ldi	r26, 0x0B	; 11
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e4 e3       	ldi	r30, 0x34	; 52
    1264:	f9 e0       	ldi	r31, 0x09	; 9
    1266:	ac c4       	rjmp	.+2392   	; 0x1bc0 <__prologue_saves__>
    1268:	6c 01       	movw	r12, r24
    126a:	7b 01       	movw	r14, r22
    126c:	8a 01       	movw	r16, r20
    126e:	fc 01       	movw	r30, r24
    1270:	16 82       	std	Z+6, r1	; 0x06
    1272:	17 82       	std	Z+7, r1	; 0x07
    1274:	83 81       	ldd	r24, Z+3	; 0x03
    1276:	81 ff       	sbrs	r24, 1
    1278:	bf c1       	rjmp	.+894    	; 0x15f8 <vfprintf+0x39a>
    127a:	ce 01       	movw	r24, r28
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	3c 01       	movw	r6, r24
    1280:	f6 01       	movw	r30, r12
    1282:	93 81       	ldd	r25, Z+3	; 0x03
    1284:	f7 01       	movw	r30, r14
    1286:	93 fd       	sbrc	r25, 3
    1288:	85 91       	lpm	r24, Z+
    128a:	93 ff       	sbrs	r25, 3
    128c:	81 91       	ld	r24, Z+
    128e:	7f 01       	movw	r14, r30
    1290:	88 23       	and	r24, r24
    1292:	09 f4       	brne	.+2      	; 0x1296 <vfprintf+0x38>
    1294:	ad c1       	rjmp	.+858    	; 0x15f0 <vfprintf+0x392>
    1296:	85 32       	cpi	r24, 0x25	; 37
    1298:	39 f4       	brne	.+14     	; 0x12a8 <vfprintf+0x4a>
    129a:	93 fd       	sbrc	r25, 3
    129c:	85 91       	lpm	r24, Z+
    129e:	93 ff       	sbrs	r25, 3
    12a0:	81 91       	ld	r24, Z+
    12a2:	7f 01       	movw	r14, r30
    12a4:	85 32       	cpi	r24, 0x25	; 37
    12a6:	21 f4       	brne	.+8      	; 0x12b0 <vfprintf+0x52>
    12a8:	b6 01       	movw	r22, r12
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	ef d3       	rcall	.+2014   	; 0x1a8c <fputc>
    12ae:	e8 cf       	rjmp	.-48     	; 0x1280 <vfprintf+0x22>
    12b0:	91 2c       	mov	r9, r1
    12b2:	21 2c       	mov	r2, r1
    12b4:	31 2c       	mov	r3, r1
    12b6:	ff e1       	ldi	r31, 0x1F	; 31
    12b8:	f3 15       	cp	r31, r3
    12ba:	d8 f0       	brcs	.+54     	; 0x12f2 <vfprintf+0x94>
    12bc:	8b 32       	cpi	r24, 0x2B	; 43
    12be:	79 f0       	breq	.+30     	; 0x12de <vfprintf+0x80>
    12c0:	38 f4       	brcc	.+14     	; 0x12d0 <vfprintf+0x72>
    12c2:	80 32       	cpi	r24, 0x20	; 32
    12c4:	79 f0       	breq	.+30     	; 0x12e4 <vfprintf+0x86>
    12c6:	83 32       	cpi	r24, 0x23	; 35
    12c8:	a1 f4       	brne	.+40     	; 0x12f2 <vfprintf+0x94>
    12ca:	23 2d       	mov	r18, r3
    12cc:	20 61       	ori	r18, 0x10	; 16
    12ce:	1d c0       	rjmp	.+58     	; 0x130a <vfprintf+0xac>
    12d0:	8d 32       	cpi	r24, 0x2D	; 45
    12d2:	61 f0       	breq	.+24     	; 0x12ec <vfprintf+0x8e>
    12d4:	80 33       	cpi	r24, 0x30	; 48
    12d6:	69 f4       	brne	.+26     	; 0x12f2 <vfprintf+0x94>
    12d8:	23 2d       	mov	r18, r3
    12da:	21 60       	ori	r18, 0x01	; 1
    12dc:	16 c0       	rjmp	.+44     	; 0x130a <vfprintf+0xac>
    12de:	83 2d       	mov	r24, r3
    12e0:	82 60       	ori	r24, 0x02	; 2
    12e2:	38 2e       	mov	r3, r24
    12e4:	e3 2d       	mov	r30, r3
    12e6:	e4 60       	ori	r30, 0x04	; 4
    12e8:	3e 2e       	mov	r3, r30
    12ea:	2a c0       	rjmp	.+84     	; 0x1340 <vfprintf+0xe2>
    12ec:	f3 2d       	mov	r31, r3
    12ee:	f8 60       	ori	r31, 0x08	; 8
    12f0:	1d c0       	rjmp	.+58     	; 0x132c <vfprintf+0xce>
    12f2:	37 fc       	sbrc	r3, 7
    12f4:	2d c0       	rjmp	.+90     	; 0x1350 <vfprintf+0xf2>
    12f6:	20 ed       	ldi	r18, 0xD0	; 208
    12f8:	28 0f       	add	r18, r24
    12fa:	2a 30       	cpi	r18, 0x0A	; 10
    12fc:	40 f0       	brcs	.+16     	; 0x130e <vfprintf+0xb0>
    12fe:	8e 32       	cpi	r24, 0x2E	; 46
    1300:	b9 f4       	brne	.+46     	; 0x1330 <vfprintf+0xd2>
    1302:	36 fc       	sbrc	r3, 6
    1304:	75 c1       	rjmp	.+746    	; 0x15f0 <vfprintf+0x392>
    1306:	23 2d       	mov	r18, r3
    1308:	20 64       	ori	r18, 0x40	; 64
    130a:	32 2e       	mov	r3, r18
    130c:	19 c0       	rjmp	.+50     	; 0x1340 <vfprintf+0xe2>
    130e:	36 fe       	sbrs	r3, 6
    1310:	06 c0       	rjmp	.+12     	; 0x131e <vfprintf+0xc0>
    1312:	8a e0       	ldi	r24, 0x0A	; 10
    1314:	98 9e       	mul	r9, r24
    1316:	20 0d       	add	r18, r0
    1318:	11 24       	eor	r1, r1
    131a:	92 2e       	mov	r9, r18
    131c:	11 c0       	rjmp	.+34     	; 0x1340 <vfprintf+0xe2>
    131e:	ea e0       	ldi	r30, 0x0A	; 10
    1320:	2e 9e       	mul	r2, r30
    1322:	20 0d       	add	r18, r0
    1324:	11 24       	eor	r1, r1
    1326:	22 2e       	mov	r2, r18
    1328:	f3 2d       	mov	r31, r3
    132a:	f0 62       	ori	r31, 0x20	; 32
    132c:	3f 2e       	mov	r3, r31
    132e:	08 c0       	rjmp	.+16     	; 0x1340 <vfprintf+0xe2>
    1330:	8c 36       	cpi	r24, 0x6C	; 108
    1332:	21 f4       	brne	.+8      	; 0x133c <vfprintf+0xde>
    1334:	83 2d       	mov	r24, r3
    1336:	80 68       	ori	r24, 0x80	; 128
    1338:	38 2e       	mov	r3, r24
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <vfprintf+0xe2>
    133c:	88 36       	cpi	r24, 0x68	; 104
    133e:	41 f4       	brne	.+16     	; 0x1350 <vfprintf+0xf2>
    1340:	f7 01       	movw	r30, r14
    1342:	93 fd       	sbrc	r25, 3
    1344:	85 91       	lpm	r24, Z+
    1346:	93 ff       	sbrs	r25, 3
    1348:	81 91       	ld	r24, Z+
    134a:	7f 01       	movw	r14, r30
    134c:	81 11       	cpse	r24, r1
    134e:	b3 cf       	rjmp	.-154    	; 0x12b6 <vfprintf+0x58>
    1350:	98 2f       	mov	r25, r24
    1352:	9f 7d       	andi	r25, 0xDF	; 223
    1354:	95 54       	subi	r25, 0x45	; 69
    1356:	93 30       	cpi	r25, 0x03	; 3
    1358:	28 f4       	brcc	.+10     	; 0x1364 <vfprintf+0x106>
    135a:	0c 5f       	subi	r16, 0xFC	; 252
    135c:	1f 4f       	sbci	r17, 0xFF	; 255
    135e:	9f e3       	ldi	r25, 0x3F	; 63
    1360:	99 83       	std	Y+1, r25	; 0x01
    1362:	0d c0       	rjmp	.+26     	; 0x137e <vfprintf+0x120>
    1364:	83 36       	cpi	r24, 0x63	; 99
    1366:	31 f0       	breq	.+12     	; 0x1374 <vfprintf+0x116>
    1368:	83 37       	cpi	r24, 0x73	; 115
    136a:	71 f0       	breq	.+28     	; 0x1388 <vfprintf+0x12a>
    136c:	83 35       	cpi	r24, 0x53	; 83
    136e:	09 f0       	breq	.+2      	; 0x1372 <vfprintf+0x114>
    1370:	55 c0       	rjmp	.+170    	; 0x141c <vfprintf+0x1be>
    1372:	20 c0       	rjmp	.+64     	; 0x13b4 <vfprintf+0x156>
    1374:	f8 01       	movw	r30, r16
    1376:	80 81       	ld	r24, Z
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	0e 5f       	subi	r16, 0xFE	; 254
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	88 24       	eor	r8, r8
    1380:	83 94       	inc	r8
    1382:	91 2c       	mov	r9, r1
    1384:	53 01       	movw	r10, r6
    1386:	12 c0       	rjmp	.+36     	; 0x13ac <vfprintf+0x14e>
    1388:	28 01       	movw	r4, r16
    138a:	f2 e0       	ldi	r31, 0x02	; 2
    138c:	4f 0e       	add	r4, r31
    138e:	51 1c       	adc	r5, r1
    1390:	f8 01       	movw	r30, r16
    1392:	a0 80       	ld	r10, Z
    1394:	b1 80       	ldd	r11, Z+1	; 0x01
    1396:	36 fe       	sbrs	r3, 6
    1398:	03 c0       	rjmp	.+6      	; 0x13a0 <vfprintf+0x142>
    139a:	69 2d       	mov	r22, r9
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <vfprintf+0x146>
    13a0:	6f ef       	ldi	r22, 0xFF	; 255
    13a2:	7f ef       	ldi	r23, 0xFF	; 255
    13a4:	c5 01       	movw	r24, r10
    13a6:	67 d3       	rcall	.+1742   	; 0x1a76 <strnlen>
    13a8:	4c 01       	movw	r8, r24
    13aa:	82 01       	movw	r16, r4
    13ac:	f3 2d       	mov	r31, r3
    13ae:	ff 77       	andi	r31, 0x7F	; 127
    13b0:	3f 2e       	mov	r3, r31
    13b2:	15 c0       	rjmp	.+42     	; 0x13de <vfprintf+0x180>
    13b4:	28 01       	movw	r4, r16
    13b6:	22 e0       	ldi	r18, 0x02	; 2
    13b8:	42 0e       	add	r4, r18
    13ba:	51 1c       	adc	r5, r1
    13bc:	f8 01       	movw	r30, r16
    13be:	a0 80       	ld	r10, Z
    13c0:	b1 80       	ldd	r11, Z+1	; 0x01
    13c2:	36 fe       	sbrs	r3, 6
    13c4:	03 c0       	rjmp	.+6      	; 0x13cc <vfprintf+0x16e>
    13c6:	69 2d       	mov	r22, r9
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <vfprintf+0x172>
    13cc:	6f ef       	ldi	r22, 0xFF	; 255
    13ce:	7f ef       	ldi	r23, 0xFF	; 255
    13d0:	c5 01       	movw	r24, r10
    13d2:	46 d3       	rcall	.+1676   	; 0x1a60 <strnlen_P>
    13d4:	4c 01       	movw	r8, r24
    13d6:	f3 2d       	mov	r31, r3
    13d8:	f0 68       	ori	r31, 0x80	; 128
    13da:	3f 2e       	mov	r3, r31
    13dc:	82 01       	movw	r16, r4
    13de:	33 fc       	sbrc	r3, 3
    13e0:	19 c0       	rjmp	.+50     	; 0x1414 <vfprintf+0x1b6>
    13e2:	82 2d       	mov	r24, r2
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	88 16       	cp	r8, r24
    13e8:	99 06       	cpc	r9, r25
    13ea:	a0 f4       	brcc	.+40     	; 0x1414 <vfprintf+0x1b6>
    13ec:	b6 01       	movw	r22, r12
    13ee:	80 e2       	ldi	r24, 0x20	; 32
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	4c d3       	rcall	.+1688   	; 0x1a8c <fputc>
    13f4:	2a 94       	dec	r2
    13f6:	f5 cf       	rjmp	.-22     	; 0x13e2 <vfprintf+0x184>
    13f8:	f5 01       	movw	r30, r10
    13fa:	37 fc       	sbrc	r3, 7
    13fc:	85 91       	lpm	r24, Z+
    13fe:	37 fe       	sbrs	r3, 7
    1400:	81 91       	ld	r24, Z+
    1402:	5f 01       	movw	r10, r30
    1404:	b6 01       	movw	r22, r12
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	41 d3       	rcall	.+1666   	; 0x1a8c <fputc>
    140a:	21 10       	cpse	r2, r1
    140c:	2a 94       	dec	r2
    140e:	21 e0       	ldi	r18, 0x01	; 1
    1410:	82 1a       	sub	r8, r18
    1412:	91 08       	sbc	r9, r1
    1414:	81 14       	cp	r8, r1
    1416:	91 04       	cpc	r9, r1
    1418:	79 f7       	brne	.-34     	; 0x13f8 <vfprintf+0x19a>
    141a:	e1 c0       	rjmp	.+450    	; 0x15de <vfprintf+0x380>
    141c:	84 36       	cpi	r24, 0x64	; 100
    141e:	11 f0       	breq	.+4      	; 0x1424 <vfprintf+0x1c6>
    1420:	89 36       	cpi	r24, 0x69	; 105
    1422:	39 f5       	brne	.+78     	; 0x1472 <vfprintf+0x214>
    1424:	f8 01       	movw	r30, r16
    1426:	37 fe       	sbrs	r3, 7
    1428:	07 c0       	rjmp	.+14     	; 0x1438 <vfprintf+0x1da>
    142a:	60 81       	ld	r22, Z
    142c:	71 81       	ldd	r23, Z+1	; 0x01
    142e:	82 81       	ldd	r24, Z+2	; 0x02
    1430:	93 81       	ldd	r25, Z+3	; 0x03
    1432:	0c 5f       	subi	r16, 0xFC	; 252
    1434:	1f 4f       	sbci	r17, 0xFF	; 255
    1436:	08 c0       	rjmp	.+16     	; 0x1448 <vfprintf+0x1ea>
    1438:	60 81       	ld	r22, Z
    143a:	71 81       	ldd	r23, Z+1	; 0x01
    143c:	07 2e       	mov	r0, r23
    143e:	00 0c       	add	r0, r0
    1440:	88 0b       	sbc	r24, r24
    1442:	99 0b       	sbc	r25, r25
    1444:	0e 5f       	subi	r16, 0xFE	; 254
    1446:	1f 4f       	sbci	r17, 0xFF	; 255
    1448:	f3 2d       	mov	r31, r3
    144a:	ff 76       	andi	r31, 0x6F	; 111
    144c:	3f 2e       	mov	r3, r31
    144e:	97 ff       	sbrs	r25, 7
    1450:	09 c0       	rjmp	.+18     	; 0x1464 <vfprintf+0x206>
    1452:	90 95       	com	r25
    1454:	80 95       	com	r24
    1456:	70 95       	com	r23
    1458:	61 95       	neg	r22
    145a:	7f 4f       	sbci	r23, 0xFF	; 255
    145c:	8f 4f       	sbci	r24, 0xFF	; 255
    145e:	9f 4f       	sbci	r25, 0xFF	; 255
    1460:	f0 68       	ori	r31, 0x80	; 128
    1462:	3f 2e       	mov	r3, r31
    1464:	2a e0       	ldi	r18, 0x0A	; 10
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	a3 01       	movw	r20, r6
    146a:	4c d3       	rcall	.+1688   	; 0x1b04 <__ultoa_invert>
    146c:	88 2e       	mov	r8, r24
    146e:	86 18       	sub	r8, r6
    1470:	44 c0       	rjmp	.+136    	; 0x14fa <vfprintf+0x29c>
    1472:	85 37       	cpi	r24, 0x75	; 117
    1474:	31 f4       	brne	.+12     	; 0x1482 <vfprintf+0x224>
    1476:	23 2d       	mov	r18, r3
    1478:	2f 7e       	andi	r18, 0xEF	; 239
    147a:	b2 2e       	mov	r11, r18
    147c:	2a e0       	ldi	r18, 0x0A	; 10
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	25 c0       	rjmp	.+74     	; 0x14cc <vfprintf+0x26e>
    1482:	93 2d       	mov	r25, r3
    1484:	99 7f       	andi	r25, 0xF9	; 249
    1486:	b9 2e       	mov	r11, r25
    1488:	8f 36       	cpi	r24, 0x6F	; 111
    148a:	c1 f0       	breq	.+48     	; 0x14bc <vfprintf+0x25e>
    148c:	18 f4       	brcc	.+6      	; 0x1494 <vfprintf+0x236>
    148e:	88 35       	cpi	r24, 0x58	; 88
    1490:	79 f0       	breq	.+30     	; 0x14b0 <vfprintf+0x252>
    1492:	ae c0       	rjmp	.+348    	; 0x15f0 <vfprintf+0x392>
    1494:	80 37       	cpi	r24, 0x70	; 112
    1496:	19 f0       	breq	.+6      	; 0x149e <vfprintf+0x240>
    1498:	88 37       	cpi	r24, 0x78	; 120
    149a:	21 f0       	breq	.+8      	; 0x14a4 <vfprintf+0x246>
    149c:	a9 c0       	rjmp	.+338    	; 0x15f0 <vfprintf+0x392>
    149e:	e9 2f       	mov	r30, r25
    14a0:	e0 61       	ori	r30, 0x10	; 16
    14a2:	be 2e       	mov	r11, r30
    14a4:	b4 fe       	sbrs	r11, 4
    14a6:	0d c0       	rjmp	.+26     	; 0x14c2 <vfprintf+0x264>
    14a8:	fb 2d       	mov	r31, r11
    14aa:	f4 60       	ori	r31, 0x04	; 4
    14ac:	bf 2e       	mov	r11, r31
    14ae:	09 c0       	rjmp	.+18     	; 0x14c2 <vfprintf+0x264>
    14b0:	34 fe       	sbrs	r3, 4
    14b2:	0a c0       	rjmp	.+20     	; 0x14c8 <vfprintf+0x26a>
    14b4:	29 2f       	mov	r18, r25
    14b6:	26 60       	ori	r18, 0x06	; 6
    14b8:	b2 2e       	mov	r11, r18
    14ba:	06 c0       	rjmp	.+12     	; 0x14c8 <vfprintf+0x26a>
    14bc:	28 e0       	ldi	r18, 0x08	; 8
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <vfprintf+0x26e>
    14c2:	20 e1       	ldi	r18, 0x10	; 16
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <vfprintf+0x26e>
    14c8:	20 e1       	ldi	r18, 0x10	; 16
    14ca:	32 e0       	ldi	r19, 0x02	; 2
    14cc:	f8 01       	movw	r30, r16
    14ce:	b7 fe       	sbrs	r11, 7
    14d0:	07 c0       	rjmp	.+14     	; 0x14e0 <vfprintf+0x282>
    14d2:	60 81       	ld	r22, Z
    14d4:	71 81       	ldd	r23, Z+1	; 0x01
    14d6:	82 81       	ldd	r24, Z+2	; 0x02
    14d8:	93 81       	ldd	r25, Z+3	; 0x03
    14da:	0c 5f       	subi	r16, 0xFC	; 252
    14dc:	1f 4f       	sbci	r17, 0xFF	; 255
    14de:	06 c0       	rjmp	.+12     	; 0x14ec <vfprintf+0x28e>
    14e0:	60 81       	ld	r22, Z
    14e2:	71 81       	ldd	r23, Z+1	; 0x01
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 5f       	subi	r16, 0xFE	; 254
    14ea:	1f 4f       	sbci	r17, 0xFF	; 255
    14ec:	a3 01       	movw	r20, r6
    14ee:	0a d3       	rcall	.+1556   	; 0x1b04 <__ultoa_invert>
    14f0:	88 2e       	mov	r8, r24
    14f2:	86 18       	sub	r8, r6
    14f4:	fb 2d       	mov	r31, r11
    14f6:	ff 77       	andi	r31, 0x7F	; 127
    14f8:	3f 2e       	mov	r3, r31
    14fa:	36 fe       	sbrs	r3, 6
    14fc:	0d c0       	rjmp	.+26     	; 0x1518 <vfprintf+0x2ba>
    14fe:	23 2d       	mov	r18, r3
    1500:	2e 7f       	andi	r18, 0xFE	; 254
    1502:	a2 2e       	mov	r10, r18
    1504:	89 14       	cp	r8, r9
    1506:	58 f4       	brcc	.+22     	; 0x151e <vfprintf+0x2c0>
    1508:	34 fe       	sbrs	r3, 4
    150a:	0b c0       	rjmp	.+22     	; 0x1522 <vfprintf+0x2c4>
    150c:	32 fc       	sbrc	r3, 2
    150e:	09 c0       	rjmp	.+18     	; 0x1522 <vfprintf+0x2c4>
    1510:	83 2d       	mov	r24, r3
    1512:	8e 7e       	andi	r24, 0xEE	; 238
    1514:	a8 2e       	mov	r10, r24
    1516:	05 c0       	rjmp	.+10     	; 0x1522 <vfprintf+0x2c4>
    1518:	b8 2c       	mov	r11, r8
    151a:	a3 2c       	mov	r10, r3
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <vfprintf+0x2c6>
    151e:	b8 2c       	mov	r11, r8
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <vfprintf+0x2c6>
    1522:	b9 2c       	mov	r11, r9
    1524:	a4 fe       	sbrs	r10, 4
    1526:	0f c0       	rjmp	.+30     	; 0x1546 <vfprintf+0x2e8>
    1528:	fe 01       	movw	r30, r28
    152a:	e8 0d       	add	r30, r8
    152c:	f1 1d       	adc	r31, r1
    152e:	80 81       	ld	r24, Z
    1530:	80 33       	cpi	r24, 0x30	; 48
    1532:	21 f4       	brne	.+8      	; 0x153c <vfprintf+0x2de>
    1534:	9a 2d       	mov	r25, r10
    1536:	99 7e       	andi	r25, 0xE9	; 233
    1538:	a9 2e       	mov	r10, r25
    153a:	09 c0       	rjmp	.+18     	; 0x154e <vfprintf+0x2f0>
    153c:	a2 fe       	sbrs	r10, 2
    153e:	06 c0       	rjmp	.+12     	; 0x154c <vfprintf+0x2ee>
    1540:	b3 94       	inc	r11
    1542:	b3 94       	inc	r11
    1544:	04 c0       	rjmp	.+8      	; 0x154e <vfprintf+0x2f0>
    1546:	8a 2d       	mov	r24, r10
    1548:	86 78       	andi	r24, 0x86	; 134
    154a:	09 f0       	breq	.+2      	; 0x154e <vfprintf+0x2f0>
    154c:	b3 94       	inc	r11
    154e:	a3 fc       	sbrc	r10, 3
    1550:	10 c0       	rjmp	.+32     	; 0x1572 <vfprintf+0x314>
    1552:	a0 fe       	sbrs	r10, 0
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <vfprintf+0x304>
    1556:	b2 14       	cp	r11, r2
    1558:	80 f4       	brcc	.+32     	; 0x157a <vfprintf+0x31c>
    155a:	28 0c       	add	r2, r8
    155c:	92 2c       	mov	r9, r2
    155e:	9b 18       	sub	r9, r11
    1560:	0d c0       	rjmp	.+26     	; 0x157c <vfprintf+0x31e>
    1562:	b2 14       	cp	r11, r2
    1564:	58 f4       	brcc	.+22     	; 0x157c <vfprintf+0x31e>
    1566:	b6 01       	movw	r22, r12
    1568:	80 e2       	ldi	r24, 0x20	; 32
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	8f d2       	rcall	.+1310   	; 0x1a8c <fputc>
    156e:	b3 94       	inc	r11
    1570:	f8 cf       	rjmp	.-16     	; 0x1562 <vfprintf+0x304>
    1572:	b2 14       	cp	r11, r2
    1574:	18 f4       	brcc	.+6      	; 0x157c <vfprintf+0x31e>
    1576:	2b 18       	sub	r2, r11
    1578:	02 c0       	rjmp	.+4      	; 0x157e <vfprintf+0x320>
    157a:	98 2c       	mov	r9, r8
    157c:	21 2c       	mov	r2, r1
    157e:	a4 fe       	sbrs	r10, 4
    1580:	0f c0       	rjmp	.+30     	; 0x15a0 <vfprintf+0x342>
    1582:	b6 01       	movw	r22, r12
    1584:	80 e3       	ldi	r24, 0x30	; 48
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	81 d2       	rcall	.+1282   	; 0x1a8c <fputc>
    158a:	a2 fe       	sbrs	r10, 2
    158c:	16 c0       	rjmp	.+44     	; 0x15ba <vfprintf+0x35c>
    158e:	a1 fc       	sbrc	r10, 1
    1590:	03 c0       	rjmp	.+6      	; 0x1598 <vfprintf+0x33a>
    1592:	88 e7       	ldi	r24, 0x78	; 120
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 c0       	rjmp	.+4      	; 0x159c <vfprintf+0x33e>
    1598:	88 e5       	ldi	r24, 0x58	; 88
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	b6 01       	movw	r22, r12
    159e:	0c c0       	rjmp	.+24     	; 0x15b8 <vfprintf+0x35a>
    15a0:	8a 2d       	mov	r24, r10
    15a2:	86 78       	andi	r24, 0x86	; 134
    15a4:	51 f0       	breq	.+20     	; 0x15ba <vfprintf+0x35c>
    15a6:	a1 fe       	sbrs	r10, 1
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <vfprintf+0x350>
    15aa:	8b e2       	ldi	r24, 0x2B	; 43
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <vfprintf+0x352>
    15ae:	80 e2       	ldi	r24, 0x20	; 32
    15b0:	a7 fc       	sbrc	r10, 7
    15b2:	8d e2       	ldi	r24, 0x2D	; 45
    15b4:	b6 01       	movw	r22, r12
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	69 d2       	rcall	.+1234   	; 0x1a8c <fputc>
    15ba:	89 14       	cp	r8, r9
    15bc:	30 f4       	brcc	.+12     	; 0x15ca <vfprintf+0x36c>
    15be:	b6 01       	movw	r22, r12
    15c0:	80 e3       	ldi	r24, 0x30	; 48
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	63 d2       	rcall	.+1222   	; 0x1a8c <fputc>
    15c6:	9a 94       	dec	r9
    15c8:	f8 cf       	rjmp	.-16     	; 0x15ba <vfprintf+0x35c>
    15ca:	8a 94       	dec	r8
    15cc:	f3 01       	movw	r30, r6
    15ce:	e8 0d       	add	r30, r8
    15d0:	f1 1d       	adc	r31, r1
    15d2:	80 81       	ld	r24, Z
    15d4:	b6 01       	movw	r22, r12
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	59 d2       	rcall	.+1202   	; 0x1a8c <fputc>
    15da:	81 10       	cpse	r8, r1
    15dc:	f6 cf       	rjmp	.-20     	; 0x15ca <vfprintf+0x36c>
    15de:	22 20       	and	r2, r2
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <vfprintf+0x386>
    15e2:	4e ce       	rjmp	.-868    	; 0x1280 <vfprintf+0x22>
    15e4:	b6 01       	movw	r22, r12
    15e6:	80 e2       	ldi	r24, 0x20	; 32
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	50 d2       	rcall	.+1184   	; 0x1a8c <fputc>
    15ec:	2a 94       	dec	r2
    15ee:	f7 cf       	rjmp	.-18     	; 0x15de <vfprintf+0x380>
    15f0:	f6 01       	movw	r30, r12
    15f2:	86 81       	ldd	r24, Z+6	; 0x06
    15f4:	97 81       	ldd	r25, Z+7	; 0x07
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <vfprintf+0x39e>
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	9f ef       	ldi	r25, 0xFF	; 255
    15fc:	2b 96       	adiw	r28, 0x0b	; 11
    15fe:	e2 e1       	ldi	r30, 0x12	; 18
    1600:	f8 c2       	rjmp	.+1520   	; 0x1bf2 <__epilogue_restores__>

00001602 <dtoa_prf>:
    1602:	a9 e0       	ldi	r26, 0x09	; 9
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e6 e0       	ldi	r30, 0x06	; 6
    1608:	fb e0       	ldi	r31, 0x0B	; 11
    160a:	e0 c2       	rjmp	.+1472   	; 0x1bcc <__prologue_saves__+0xc>
    160c:	6a 01       	movw	r12, r20
    160e:	12 2f       	mov	r17, r18
    1610:	b0 2e       	mov	r11, r16
    1612:	2b e3       	ldi	r18, 0x3B	; 59
    1614:	20 17       	cp	r18, r16
    1616:	20 f0       	brcs	.+8      	; 0x1620 <dtoa_prf+0x1e>
    1618:	ff 24       	eor	r15, r15
    161a:	f3 94       	inc	r15
    161c:	f0 0e       	add	r15, r16
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <dtoa_prf+0x22>
    1620:	2c e3       	ldi	r18, 0x3C	; 60
    1622:	f2 2e       	mov	r15, r18
    1624:	0f 2d       	mov	r16, r15
    1626:	27 e0       	ldi	r18, 0x07	; 7
    1628:	ae 01       	movw	r20, r28
    162a:	4f 5f       	subi	r20, 0xFF	; 255
    162c:	5f 4f       	sbci	r21, 0xFF	; 255
    162e:	40 d1       	rcall	.+640    	; 0x18b0 <__ftoa_engine>
    1630:	bc 01       	movw	r22, r24
    1632:	49 81       	ldd	r20, Y+1	; 0x01
    1634:	84 2f       	mov	r24, r20
    1636:	89 70       	andi	r24, 0x09	; 9
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	31 f0       	breq	.+12     	; 0x1648 <dtoa_prf+0x46>
    163c:	e1 fc       	sbrc	r14, 1
    163e:	06 c0       	rjmp	.+12     	; 0x164c <dtoa_prf+0x4a>
    1640:	e0 fe       	sbrs	r14, 0
    1642:	06 c0       	rjmp	.+12     	; 0x1650 <dtoa_prf+0x4e>
    1644:	90 e2       	ldi	r25, 0x20	; 32
    1646:	05 c0       	rjmp	.+10     	; 0x1652 <dtoa_prf+0x50>
    1648:	9d e2       	ldi	r25, 0x2D	; 45
    164a:	03 c0       	rjmp	.+6      	; 0x1652 <dtoa_prf+0x50>
    164c:	9b e2       	ldi	r25, 0x2B	; 43
    164e:	01 c0       	rjmp	.+2      	; 0x1652 <dtoa_prf+0x50>
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	5e 2d       	mov	r21, r14
    1654:	50 71       	andi	r21, 0x10	; 16
    1656:	43 ff       	sbrs	r20, 3
    1658:	3c c0       	rjmp	.+120    	; 0x16d2 <dtoa_prf+0xd0>
    165a:	91 11       	cpse	r25, r1
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <dtoa_prf+0x60>
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	01 c0       	rjmp	.+2      	; 0x1664 <dtoa_prf+0x62>
    1662:	84 e0       	ldi	r24, 0x04	; 4
    1664:	81 17       	cp	r24, r17
    1666:	18 f4       	brcc	.+6      	; 0x166e <dtoa_prf+0x6c>
    1668:	21 2f       	mov	r18, r17
    166a:	28 1b       	sub	r18, r24
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <dtoa_prf+0x6e>
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	51 11       	cpse	r21, r1
    1672:	0b c0       	rjmp	.+22     	; 0x168a <dtoa_prf+0x88>
    1674:	f6 01       	movw	r30, r12
    1676:	82 2f       	mov	r24, r18
    1678:	30 e2       	ldi	r19, 0x20	; 32
    167a:	88 23       	and	r24, r24
    167c:	19 f0       	breq	.+6      	; 0x1684 <dtoa_prf+0x82>
    167e:	31 93       	st	Z+, r19
    1680:	81 50       	subi	r24, 0x01	; 1
    1682:	fb cf       	rjmp	.-10     	; 0x167a <dtoa_prf+0x78>
    1684:	c2 0e       	add	r12, r18
    1686:	d1 1c       	adc	r13, r1
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	99 23       	and	r25, r25
    168c:	29 f0       	breq	.+10     	; 0x1698 <dtoa_prf+0x96>
    168e:	d6 01       	movw	r26, r12
    1690:	9c 93       	st	X, r25
    1692:	f6 01       	movw	r30, r12
    1694:	31 96       	adiw	r30, 0x01	; 1
    1696:	6f 01       	movw	r12, r30
    1698:	c6 01       	movw	r24, r12
    169a:	03 96       	adiw	r24, 0x03	; 3
    169c:	e2 fe       	sbrs	r14, 2
    169e:	0a c0       	rjmp	.+20     	; 0x16b4 <dtoa_prf+0xb2>
    16a0:	3e e4       	ldi	r19, 0x4E	; 78
    16a2:	d6 01       	movw	r26, r12
    16a4:	3c 93       	st	X, r19
    16a6:	41 e4       	ldi	r20, 0x41	; 65
    16a8:	11 96       	adiw	r26, 0x01	; 1
    16aa:	4c 93       	st	X, r20
    16ac:	11 97       	sbiw	r26, 0x01	; 1
    16ae:	12 96       	adiw	r26, 0x02	; 2
    16b0:	3c 93       	st	X, r19
    16b2:	06 c0       	rjmp	.+12     	; 0x16c0 <dtoa_prf+0xbe>
    16b4:	3e e6       	ldi	r19, 0x6E	; 110
    16b6:	f6 01       	movw	r30, r12
    16b8:	30 83       	st	Z, r19
    16ba:	41 e6       	ldi	r20, 0x61	; 97
    16bc:	41 83       	std	Z+1, r20	; 0x01
    16be:	32 83       	std	Z+2, r19	; 0x02
    16c0:	fc 01       	movw	r30, r24
    16c2:	32 2f       	mov	r19, r18
    16c4:	40 e2       	ldi	r20, 0x20	; 32
    16c6:	33 23       	and	r19, r19
    16c8:	09 f4       	brne	.+2      	; 0x16cc <dtoa_prf+0xca>
    16ca:	42 c0       	rjmp	.+132    	; 0x1750 <dtoa_prf+0x14e>
    16cc:	41 93       	st	Z+, r20
    16ce:	31 50       	subi	r19, 0x01	; 1
    16d0:	fa cf       	rjmp	.-12     	; 0x16c6 <dtoa_prf+0xc4>
    16d2:	42 ff       	sbrs	r20, 2
    16d4:	44 c0       	rjmp	.+136    	; 0x175e <dtoa_prf+0x15c>
    16d6:	91 11       	cpse	r25, r1
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <dtoa_prf+0xdc>
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <dtoa_prf+0xde>
    16de:	84 e0       	ldi	r24, 0x04	; 4
    16e0:	81 17       	cp	r24, r17
    16e2:	18 f4       	brcc	.+6      	; 0x16ea <dtoa_prf+0xe8>
    16e4:	21 2f       	mov	r18, r17
    16e6:	28 1b       	sub	r18, r24
    16e8:	01 c0       	rjmp	.+2      	; 0x16ec <dtoa_prf+0xea>
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	51 11       	cpse	r21, r1
    16ee:	0b c0       	rjmp	.+22     	; 0x1706 <dtoa_prf+0x104>
    16f0:	f6 01       	movw	r30, r12
    16f2:	82 2f       	mov	r24, r18
    16f4:	30 e2       	ldi	r19, 0x20	; 32
    16f6:	88 23       	and	r24, r24
    16f8:	19 f0       	breq	.+6      	; 0x1700 <dtoa_prf+0xfe>
    16fa:	31 93       	st	Z+, r19
    16fc:	81 50       	subi	r24, 0x01	; 1
    16fe:	fb cf       	rjmp	.-10     	; 0x16f6 <dtoa_prf+0xf4>
    1700:	c2 0e       	add	r12, r18
    1702:	d1 1c       	adc	r13, r1
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	99 23       	and	r25, r25
    1708:	29 f0       	breq	.+10     	; 0x1714 <dtoa_prf+0x112>
    170a:	d6 01       	movw	r26, r12
    170c:	9c 93       	st	X, r25
    170e:	f6 01       	movw	r30, r12
    1710:	31 96       	adiw	r30, 0x01	; 1
    1712:	6f 01       	movw	r12, r30
    1714:	c6 01       	movw	r24, r12
    1716:	03 96       	adiw	r24, 0x03	; 3
    1718:	e2 fe       	sbrs	r14, 2
    171a:	0b c0       	rjmp	.+22     	; 0x1732 <dtoa_prf+0x130>
    171c:	39 e4       	ldi	r19, 0x49	; 73
    171e:	d6 01       	movw	r26, r12
    1720:	3c 93       	st	X, r19
    1722:	3e e4       	ldi	r19, 0x4E	; 78
    1724:	11 96       	adiw	r26, 0x01	; 1
    1726:	3c 93       	st	X, r19
    1728:	11 97       	sbiw	r26, 0x01	; 1
    172a:	36 e4       	ldi	r19, 0x46	; 70
    172c:	12 96       	adiw	r26, 0x02	; 2
    172e:	3c 93       	st	X, r19
    1730:	07 c0       	rjmp	.+14     	; 0x1740 <dtoa_prf+0x13e>
    1732:	39 e6       	ldi	r19, 0x69	; 105
    1734:	f6 01       	movw	r30, r12
    1736:	30 83       	st	Z, r19
    1738:	3e e6       	ldi	r19, 0x6E	; 110
    173a:	31 83       	std	Z+1, r19	; 0x01
    173c:	36 e6       	ldi	r19, 0x66	; 102
    173e:	32 83       	std	Z+2, r19	; 0x02
    1740:	fc 01       	movw	r30, r24
    1742:	32 2f       	mov	r19, r18
    1744:	40 e2       	ldi	r20, 0x20	; 32
    1746:	33 23       	and	r19, r19
    1748:	19 f0       	breq	.+6      	; 0x1750 <dtoa_prf+0x14e>
    174a:	41 93       	st	Z+, r20
    174c:	31 50       	subi	r19, 0x01	; 1
    174e:	fb cf       	rjmp	.-10     	; 0x1746 <dtoa_prf+0x144>
    1750:	fc 01       	movw	r30, r24
    1752:	e2 0f       	add	r30, r18
    1754:	f1 1d       	adc	r31, r1
    1756:	10 82       	st	Z, r1
    1758:	8e ef       	ldi	r24, 0xFE	; 254
    175a:	9f ef       	ldi	r25, 0xFF	; 255
    175c:	a6 c0       	rjmp	.+332    	; 0x18aa <dtoa_prf+0x2a8>
    175e:	21 e0       	ldi	r18, 0x01	; 1
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	91 11       	cpse	r25, r1
    1764:	02 c0       	rjmp	.+4      	; 0x176a <dtoa_prf+0x168>
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	16 16       	cp	r1, r22
    176c:	17 06       	cpc	r1, r23
    176e:	1c f4       	brge	.+6      	; 0x1776 <dtoa_prf+0x174>
    1770:	fb 01       	movw	r30, r22
    1772:	31 96       	adiw	r30, 0x01	; 1
    1774:	02 c0       	rjmp	.+4      	; 0x177a <dtoa_prf+0x178>
    1776:	e1 e0       	ldi	r30, 0x01	; 1
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	2e 0f       	add	r18, r30
    177c:	3f 1f       	adc	r19, r31
    177e:	bb 20       	and	r11, r11
    1780:	21 f0       	breq	.+8      	; 0x178a <dtoa_prf+0x188>
    1782:	eb 2d       	mov	r30, r11
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	31 96       	adiw	r30, 0x01	; 1
    1788:	02 c0       	rjmp	.+4      	; 0x178e <dtoa_prf+0x18c>
    178a:	e0 e0       	ldi	r30, 0x00	; 0
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	2e 0f       	add	r18, r30
    1790:	3f 1f       	adc	r19, r31
    1792:	e1 2f       	mov	r30, r17
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	2e 17       	cp	r18, r30
    1798:	3f 07       	cpc	r19, r31
    179a:	1c f4       	brge	.+6      	; 0x17a2 <dtoa_prf+0x1a0>
    179c:	12 1b       	sub	r17, r18
    179e:	21 2f       	mov	r18, r17
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <dtoa_prf+0x1a2>
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	8e 2d       	mov	r24, r14
    17a6:	88 71       	andi	r24, 0x18	; 24
    17a8:	59 f4       	brne	.+22     	; 0x17c0 <dtoa_prf+0x1be>
    17aa:	f6 01       	movw	r30, r12
    17ac:	82 2f       	mov	r24, r18
    17ae:	30 e2       	ldi	r19, 0x20	; 32
    17b0:	88 23       	and	r24, r24
    17b2:	19 f0       	breq	.+6      	; 0x17ba <dtoa_prf+0x1b8>
    17b4:	31 93       	st	Z+, r19
    17b6:	81 50       	subi	r24, 0x01	; 1
    17b8:	fb cf       	rjmp	.-10     	; 0x17b0 <dtoa_prf+0x1ae>
    17ba:	c2 0e       	add	r12, r18
    17bc:	d1 1c       	adc	r13, r1
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	99 23       	and	r25, r25
    17c2:	29 f0       	breq	.+10     	; 0x17ce <dtoa_prf+0x1cc>
    17c4:	d6 01       	movw	r26, r12
    17c6:	9c 93       	st	X, r25
    17c8:	f6 01       	movw	r30, r12
    17ca:	31 96       	adiw	r30, 0x01	; 1
    17cc:	6f 01       	movw	r12, r30
    17ce:	51 11       	cpse	r21, r1
    17d0:	0b c0       	rjmp	.+22     	; 0x17e8 <dtoa_prf+0x1e6>
    17d2:	f6 01       	movw	r30, r12
    17d4:	82 2f       	mov	r24, r18
    17d6:	90 e3       	ldi	r25, 0x30	; 48
    17d8:	88 23       	and	r24, r24
    17da:	19 f0       	breq	.+6      	; 0x17e2 <dtoa_prf+0x1e0>
    17dc:	91 93       	st	Z+, r25
    17de:	81 50       	subi	r24, 0x01	; 1
    17e0:	fb cf       	rjmp	.-10     	; 0x17d8 <dtoa_prf+0x1d6>
    17e2:	c2 0e       	add	r12, r18
    17e4:	d1 1c       	adc	r13, r1
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	0f 2d       	mov	r16, r15
    17ea:	06 0f       	add	r16, r22
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	34 2f       	mov	r19, r20
    17f0:	30 71       	andi	r19, 0x10	; 16
    17f2:	44 ff       	sbrs	r20, 4
    17f4:	03 c0       	rjmp	.+6      	; 0x17fc <dtoa_prf+0x1fa>
    17f6:	91 33       	cpi	r25, 0x31	; 49
    17f8:	09 f4       	brne	.+2      	; 0x17fc <dtoa_prf+0x1fa>
    17fa:	01 50       	subi	r16, 0x01	; 1
    17fc:	10 16       	cp	r1, r16
    17fe:	24 f4       	brge	.+8      	; 0x1808 <dtoa_prf+0x206>
    1800:	09 30       	cpi	r16, 0x09	; 9
    1802:	18 f0       	brcs	.+6      	; 0x180a <dtoa_prf+0x208>
    1804:	08 e0       	ldi	r16, 0x08	; 8
    1806:	01 c0       	rjmp	.+2      	; 0x180a <dtoa_prf+0x208>
    1808:	01 e0       	ldi	r16, 0x01	; 1
    180a:	ab 01       	movw	r20, r22
    180c:	77 ff       	sbrs	r23, 7
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <dtoa_prf+0x212>
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	50 e0       	ldi	r21, 0x00	; 0
    1814:	fb 01       	movw	r30, r22
    1816:	e4 1b       	sub	r30, r20
    1818:	f5 0b       	sbc	r31, r21
    181a:	a1 e0       	ldi	r26, 0x01	; 1
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	ac 0f       	add	r26, r28
    1820:	bd 1f       	adc	r27, r29
    1822:	ea 0f       	add	r30, r26
    1824:	fb 1f       	adc	r31, r27
    1826:	8e e2       	ldi	r24, 0x2E	; 46
    1828:	a8 2e       	mov	r10, r24
    182a:	4b 01       	movw	r8, r22
    182c:	80 1a       	sub	r8, r16
    182e:	91 08       	sbc	r9, r1
    1830:	0b 2d       	mov	r16, r11
    1832:	10 e0       	ldi	r17, 0x00	; 0
    1834:	11 95       	neg	r17
    1836:	01 95       	neg	r16
    1838:	11 09       	sbc	r17, r1
    183a:	4f 3f       	cpi	r20, 0xFF	; 255
    183c:	bf ef       	ldi	r27, 0xFF	; 255
    183e:	5b 07       	cpc	r21, r27
    1840:	21 f4       	brne	.+8      	; 0x184a <dtoa_prf+0x248>
    1842:	d6 01       	movw	r26, r12
    1844:	ac 92       	st	X, r10
    1846:	11 96       	adiw	r26, 0x01	; 1
    1848:	6d 01       	movw	r12, r26
    184a:	64 17       	cp	r22, r20
    184c:	75 07       	cpc	r23, r21
    184e:	2c f0       	brlt	.+10     	; 0x185a <dtoa_prf+0x258>
    1850:	84 16       	cp	r8, r20
    1852:	95 06       	cpc	r9, r21
    1854:	14 f4       	brge	.+4      	; 0x185a <dtoa_prf+0x258>
    1856:	81 81       	ldd	r24, Z+1	; 0x01
    1858:	01 c0       	rjmp	.+2      	; 0x185c <dtoa_prf+0x25a>
    185a:	80 e3       	ldi	r24, 0x30	; 48
    185c:	41 50       	subi	r20, 0x01	; 1
    185e:	51 09       	sbc	r21, r1
    1860:	31 96       	adiw	r30, 0x01	; 1
    1862:	d6 01       	movw	r26, r12
    1864:	11 96       	adiw	r26, 0x01	; 1
    1866:	7d 01       	movw	r14, r26
    1868:	40 17       	cp	r20, r16
    186a:	51 07       	cpc	r21, r17
    186c:	24 f0       	brlt	.+8      	; 0x1876 <dtoa_prf+0x274>
    186e:	d6 01       	movw	r26, r12
    1870:	8c 93       	st	X, r24
    1872:	67 01       	movw	r12, r14
    1874:	e2 cf       	rjmp	.-60     	; 0x183a <dtoa_prf+0x238>
    1876:	64 17       	cp	r22, r20
    1878:	75 07       	cpc	r23, r21
    187a:	39 f4       	brne	.+14     	; 0x188a <dtoa_prf+0x288>
    187c:	96 33       	cpi	r25, 0x36	; 54
    187e:	20 f4       	brcc	.+8      	; 0x1888 <dtoa_prf+0x286>
    1880:	95 33       	cpi	r25, 0x35	; 53
    1882:	19 f4       	brne	.+6      	; 0x188a <dtoa_prf+0x288>
    1884:	31 11       	cpse	r19, r1
    1886:	01 c0       	rjmp	.+2      	; 0x188a <dtoa_prf+0x288>
    1888:	81 e3       	ldi	r24, 0x31	; 49
    188a:	f6 01       	movw	r30, r12
    188c:	80 83       	st	Z, r24
    188e:	f7 01       	movw	r30, r14
    1890:	82 2f       	mov	r24, r18
    1892:	90 e2       	ldi	r25, 0x20	; 32
    1894:	88 23       	and	r24, r24
    1896:	19 f0       	breq	.+6      	; 0x189e <dtoa_prf+0x29c>
    1898:	91 93       	st	Z+, r25
    189a:	81 50       	subi	r24, 0x01	; 1
    189c:	fb cf       	rjmp	.-10     	; 0x1894 <dtoa_prf+0x292>
    189e:	f7 01       	movw	r30, r14
    18a0:	e2 0f       	add	r30, r18
    18a2:	f1 1d       	adc	r31, r1
    18a4:	10 82       	st	Z, r1
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	29 96       	adiw	r28, 0x09	; 9
    18ac:	ec e0       	ldi	r30, 0x0C	; 12
    18ae:	a7 c1       	rjmp	.+846    	; 0x1bfe <__epilogue_restores__+0xc>

000018b0 <__ftoa_engine>:
    18b0:	28 30       	cpi	r18, 0x08	; 8
    18b2:	08 f0       	brcs	.+2      	; 0x18b6 <__ftoa_engine+0x6>
    18b4:	27 e0       	ldi	r18, 0x07	; 7
    18b6:	33 27       	eor	r19, r19
    18b8:	da 01       	movw	r26, r20
    18ba:	99 0f       	add	r25, r25
    18bc:	31 1d       	adc	r19, r1
    18be:	87 fd       	sbrc	r24, 7
    18c0:	91 60       	ori	r25, 0x01	; 1
    18c2:	00 96       	adiw	r24, 0x00	; 0
    18c4:	61 05       	cpc	r22, r1
    18c6:	71 05       	cpc	r23, r1
    18c8:	39 f4       	brne	.+14     	; 0x18d8 <__ftoa_engine+0x28>
    18ca:	32 60       	ori	r19, 0x02	; 2
    18cc:	2e 5f       	subi	r18, 0xFE	; 254
    18ce:	3d 93       	st	X+, r19
    18d0:	30 e3       	ldi	r19, 0x30	; 48
    18d2:	2a 95       	dec	r18
    18d4:	e1 f7       	brne	.-8      	; 0x18ce <__ftoa_engine+0x1e>
    18d6:	08 95       	ret
    18d8:	9f 3f       	cpi	r25, 0xFF	; 255
    18da:	30 f0       	brcs	.+12     	; 0x18e8 <__ftoa_engine+0x38>
    18dc:	80 38       	cpi	r24, 0x80	; 128
    18de:	71 05       	cpc	r23, r1
    18e0:	61 05       	cpc	r22, r1
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <__ftoa_engine+0x36>
    18e4:	3c 5f       	subi	r19, 0xFC	; 252
    18e6:	3c 5f       	subi	r19, 0xFC	; 252
    18e8:	3d 93       	st	X+, r19
    18ea:	91 30       	cpi	r25, 0x01	; 1
    18ec:	08 f0       	brcs	.+2      	; 0x18f0 <__ftoa_engine+0x40>
    18ee:	80 68       	ori	r24, 0x80	; 128
    18f0:	91 1d       	adc	r25, r1
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	1f 93       	push	r17
    18f8:	0f 93       	push	r16
    18fa:	ff 92       	push	r15
    18fc:	ef 92       	push	r14
    18fe:	19 2f       	mov	r17, r25
    1900:	98 7f       	andi	r25, 0xF8	; 248
    1902:	96 95       	lsr	r25
    1904:	e9 2f       	mov	r30, r25
    1906:	96 95       	lsr	r25
    1908:	96 95       	lsr	r25
    190a:	e9 0f       	add	r30, r25
    190c:	ff 27       	eor	r31, r31
    190e:	ea 54       	subi	r30, 0x4A	; 74
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	99 27       	eor	r25, r25
    1914:	33 27       	eor	r19, r19
    1916:	ee 24       	eor	r14, r14
    1918:	ff 24       	eor	r15, r15
    191a:	a7 01       	movw	r20, r14
    191c:	e7 01       	movw	r28, r14
    191e:	05 90       	lpm	r0, Z+
    1920:	08 94       	sec
    1922:	07 94       	ror	r0
    1924:	28 f4       	brcc	.+10     	; 0x1930 <__ftoa_engine+0x80>
    1926:	36 0f       	add	r19, r22
    1928:	e7 1e       	adc	r14, r23
    192a:	f8 1e       	adc	r15, r24
    192c:	49 1f       	adc	r20, r25
    192e:	51 1d       	adc	r21, r1
    1930:	66 0f       	add	r22, r22
    1932:	77 1f       	adc	r23, r23
    1934:	88 1f       	adc	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	06 94       	lsr	r0
    193a:	a1 f7       	brne	.-24     	; 0x1924 <__ftoa_engine+0x74>
    193c:	05 90       	lpm	r0, Z+
    193e:	07 94       	ror	r0
    1940:	28 f4       	brcc	.+10     	; 0x194c <__ftoa_engine+0x9c>
    1942:	e7 0e       	add	r14, r23
    1944:	f8 1e       	adc	r15, r24
    1946:	49 1f       	adc	r20, r25
    1948:	56 1f       	adc	r21, r22
    194a:	c1 1d       	adc	r28, r1
    194c:	77 0f       	add	r23, r23
    194e:	88 1f       	adc	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	66 1f       	adc	r22, r22
    1954:	06 94       	lsr	r0
    1956:	a1 f7       	brne	.-24     	; 0x1940 <__ftoa_engine+0x90>
    1958:	05 90       	lpm	r0, Z+
    195a:	07 94       	ror	r0
    195c:	28 f4       	brcc	.+10     	; 0x1968 <__ftoa_engine+0xb8>
    195e:	f8 0e       	add	r15, r24
    1960:	49 1f       	adc	r20, r25
    1962:	56 1f       	adc	r21, r22
    1964:	c7 1f       	adc	r28, r23
    1966:	d1 1d       	adc	r29, r1
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	66 1f       	adc	r22, r22
    196e:	77 1f       	adc	r23, r23
    1970:	06 94       	lsr	r0
    1972:	a1 f7       	brne	.-24     	; 0x195c <__ftoa_engine+0xac>
    1974:	05 90       	lpm	r0, Z+
    1976:	07 94       	ror	r0
    1978:	20 f4       	brcc	.+8      	; 0x1982 <__ftoa_engine+0xd2>
    197a:	49 0f       	add	r20, r25
    197c:	56 1f       	adc	r21, r22
    197e:	c7 1f       	adc	r28, r23
    1980:	d8 1f       	adc	r29, r24
    1982:	99 0f       	add	r25, r25
    1984:	66 1f       	adc	r22, r22
    1986:	77 1f       	adc	r23, r23
    1988:	88 1f       	adc	r24, r24
    198a:	06 94       	lsr	r0
    198c:	a9 f7       	brne	.-22     	; 0x1978 <__ftoa_engine+0xc8>
    198e:	84 91       	lpm	r24, Z
    1990:	10 95       	com	r17
    1992:	17 70       	andi	r17, 0x07	; 7
    1994:	41 f0       	breq	.+16     	; 0x19a6 <__ftoa_engine+0xf6>
    1996:	d6 95       	lsr	r29
    1998:	c7 95       	ror	r28
    199a:	57 95       	ror	r21
    199c:	47 95       	ror	r20
    199e:	f7 94       	ror	r15
    19a0:	e7 94       	ror	r14
    19a2:	1a 95       	dec	r17
    19a4:	c1 f7       	brne	.-16     	; 0x1996 <__ftoa_engine+0xe6>
    19a6:	ec e5       	ldi	r30, 0x5C	; 92
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	68 94       	set
    19ac:	15 90       	lpm	r1, Z+
    19ae:	15 91       	lpm	r17, Z+
    19b0:	35 91       	lpm	r19, Z+
    19b2:	65 91       	lpm	r22, Z+
    19b4:	95 91       	lpm	r25, Z+
    19b6:	05 90       	lpm	r0, Z+
    19b8:	7f e2       	ldi	r23, 0x2F	; 47
    19ba:	73 95       	inc	r23
    19bc:	e1 18       	sub	r14, r1
    19be:	f1 0a       	sbc	r15, r17
    19c0:	43 0b       	sbc	r20, r19
    19c2:	56 0b       	sbc	r21, r22
    19c4:	c9 0b       	sbc	r28, r25
    19c6:	d0 09       	sbc	r29, r0
    19c8:	c0 f7       	brcc	.-16     	; 0x19ba <__ftoa_engine+0x10a>
    19ca:	e1 0c       	add	r14, r1
    19cc:	f1 1e       	adc	r15, r17
    19ce:	43 1f       	adc	r20, r19
    19d0:	56 1f       	adc	r21, r22
    19d2:	c9 1f       	adc	r28, r25
    19d4:	d0 1d       	adc	r29, r0
    19d6:	7e f4       	brtc	.+30     	; 0x19f6 <__ftoa_engine+0x146>
    19d8:	70 33       	cpi	r23, 0x30	; 48
    19da:	11 f4       	brne	.+4      	; 0x19e0 <__ftoa_engine+0x130>
    19dc:	8a 95       	dec	r24
    19de:	e6 cf       	rjmp	.-52     	; 0x19ac <__ftoa_engine+0xfc>
    19e0:	e8 94       	clt
    19e2:	01 50       	subi	r16, 0x01	; 1
    19e4:	30 f0       	brcs	.+12     	; 0x19f2 <__ftoa_engine+0x142>
    19e6:	08 0f       	add	r16, r24
    19e8:	0a f4       	brpl	.+2      	; 0x19ec <__ftoa_engine+0x13c>
    19ea:	00 27       	eor	r16, r16
    19ec:	02 17       	cp	r16, r18
    19ee:	08 f4       	brcc	.+2      	; 0x19f2 <__ftoa_engine+0x142>
    19f0:	20 2f       	mov	r18, r16
    19f2:	23 95       	inc	r18
    19f4:	02 2f       	mov	r16, r18
    19f6:	7a 33       	cpi	r23, 0x3A	; 58
    19f8:	28 f0       	brcs	.+10     	; 0x1a04 <__ftoa_engine+0x154>
    19fa:	79 e3       	ldi	r23, 0x39	; 57
    19fc:	7d 93       	st	X+, r23
    19fe:	2a 95       	dec	r18
    1a00:	e9 f7       	brne	.-6      	; 0x19fc <__ftoa_engine+0x14c>
    1a02:	10 c0       	rjmp	.+32     	; 0x1a24 <__ftoa_engine+0x174>
    1a04:	7d 93       	st	X+, r23
    1a06:	2a 95       	dec	r18
    1a08:	89 f6       	brne	.-94     	; 0x19ac <__ftoa_engine+0xfc>
    1a0a:	06 94       	lsr	r0
    1a0c:	97 95       	ror	r25
    1a0e:	67 95       	ror	r22
    1a10:	37 95       	ror	r19
    1a12:	17 95       	ror	r17
    1a14:	17 94       	ror	r1
    1a16:	e1 18       	sub	r14, r1
    1a18:	f1 0a       	sbc	r15, r17
    1a1a:	43 0b       	sbc	r20, r19
    1a1c:	56 0b       	sbc	r21, r22
    1a1e:	c9 0b       	sbc	r28, r25
    1a20:	d0 09       	sbc	r29, r0
    1a22:	98 f0       	brcs	.+38     	; 0x1a4a <__ftoa_engine+0x19a>
    1a24:	23 95       	inc	r18
    1a26:	7e 91       	ld	r23, -X
    1a28:	73 95       	inc	r23
    1a2a:	7a 33       	cpi	r23, 0x3A	; 58
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <__ftoa_engine+0x180>
    1a2e:	70 e3       	ldi	r23, 0x30	; 48
    1a30:	7c 93       	st	X, r23
    1a32:	20 13       	cpse	r18, r16
    1a34:	b8 f7       	brcc	.-18     	; 0x1a24 <__ftoa_engine+0x174>
    1a36:	7e 91       	ld	r23, -X
    1a38:	70 61       	ori	r23, 0x10	; 16
    1a3a:	7d 93       	st	X+, r23
    1a3c:	30 f0       	brcs	.+12     	; 0x1a4a <__ftoa_engine+0x19a>
    1a3e:	83 95       	inc	r24
    1a40:	71 e3       	ldi	r23, 0x31	; 49
    1a42:	7d 93       	st	X+, r23
    1a44:	70 e3       	ldi	r23, 0x30	; 48
    1a46:	2a 95       	dec	r18
    1a48:	e1 f7       	brne	.-8      	; 0x1a42 <__ftoa_engine+0x192>
    1a4a:	11 24       	eor	r1, r1
    1a4c:	ef 90       	pop	r14
    1a4e:	ff 90       	pop	r15
    1a50:	0f 91       	pop	r16
    1a52:	1f 91       	pop	r17
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	99 27       	eor	r25, r25
    1a5a:	87 fd       	sbrc	r24, 7
    1a5c:	90 95       	com	r25
    1a5e:	08 95       	ret

00001a60 <strnlen_P>:
    1a60:	fc 01       	movw	r30, r24
    1a62:	05 90       	lpm	r0, Z+
    1a64:	61 50       	subi	r22, 0x01	; 1
    1a66:	70 40       	sbci	r23, 0x00	; 0
    1a68:	01 10       	cpse	r0, r1
    1a6a:	d8 f7       	brcc	.-10     	; 0x1a62 <strnlen_P+0x2>
    1a6c:	80 95       	com	r24
    1a6e:	90 95       	com	r25
    1a70:	8e 0f       	add	r24, r30
    1a72:	9f 1f       	adc	r25, r31
    1a74:	08 95       	ret

00001a76 <strnlen>:
    1a76:	fc 01       	movw	r30, r24
    1a78:	61 50       	subi	r22, 0x01	; 1
    1a7a:	70 40       	sbci	r23, 0x00	; 0
    1a7c:	01 90       	ld	r0, Z+
    1a7e:	01 10       	cpse	r0, r1
    1a80:	d8 f7       	brcc	.-10     	; 0x1a78 <strnlen+0x2>
    1a82:	80 95       	com	r24
    1a84:	90 95       	com	r25
    1a86:	8e 0f       	add	r24, r30
    1a88:	9f 1f       	adc	r25, r31
    1a8a:	08 95       	ret

00001a8c <fputc>:
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	fb 01       	movw	r30, r22
    1a96:	23 81       	ldd	r18, Z+3	; 0x03
    1a98:	21 fd       	sbrc	r18, 1
    1a9a:	03 c0       	rjmp	.+6      	; 0x1aa2 <fputc+0x16>
    1a9c:	8f ef       	ldi	r24, 0xFF	; 255
    1a9e:	9f ef       	ldi	r25, 0xFF	; 255
    1aa0:	2c c0       	rjmp	.+88     	; 0x1afa <fputc+0x6e>
    1aa2:	22 ff       	sbrs	r18, 2
    1aa4:	16 c0       	rjmp	.+44     	; 0x1ad2 <fputc+0x46>
    1aa6:	46 81       	ldd	r20, Z+6	; 0x06
    1aa8:	57 81       	ldd	r21, Z+7	; 0x07
    1aaa:	24 81       	ldd	r18, Z+4	; 0x04
    1aac:	35 81       	ldd	r19, Z+5	; 0x05
    1aae:	42 17       	cp	r20, r18
    1ab0:	53 07       	cpc	r21, r19
    1ab2:	44 f4       	brge	.+16     	; 0x1ac4 <fputc+0x38>
    1ab4:	a0 81       	ld	r26, Z
    1ab6:	b1 81       	ldd	r27, Z+1	; 0x01
    1ab8:	9d 01       	movw	r18, r26
    1aba:	2f 5f       	subi	r18, 0xFF	; 255
    1abc:	3f 4f       	sbci	r19, 0xFF	; 255
    1abe:	20 83       	st	Z, r18
    1ac0:	31 83       	std	Z+1, r19	; 0x01
    1ac2:	8c 93       	st	X, r24
    1ac4:	26 81       	ldd	r18, Z+6	; 0x06
    1ac6:	37 81       	ldd	r19, Z+7	; 0x07
    1ac8:	2f 5f       	subi	r18, 0xFF	; 255
    1aca:	3f 4f       	sbci	r19, 0xFF	; 255
    1acc:	26 83       	std	Z+6, r18	; 0x06
    1ace:	37 83       	std	Z+7, r19	; 0x07
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <fputc+0x6e>
    1ad2:	8b 01       	movw	r16, r22
    1ad4:	ec 01       	movw	r28, r24
    1ad6:	fb 01       	movw	r30, r22
    1ad8:	00 84       	ldd	r0, Z+8	; 0x08
    1ada:	f1 85       	ldd	r31, Z+9	; 0x09
    1adc:	e0 2d       	mov	r30, r0
    1ade:	09 95       	icall
    1ae0:	89 2b       	or	r24, r25
    1ae2:	e1 f6       	brne	.-72     	; 0x1a9c <fputc+0x10>
    1ae4:	d8 01       	movw	r26, r16
    1ae6:	16 96       	adiw	r26, 0x06	; 6
    1ae8:	8d 91       	ld	r24, X+
    1aea:	9c 91       	ld	r25, X
    1aec:	17 97       	sbiw	r26, 0x07	; 7
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	16 96       	adiw	r26, 0x06	; 6
    1af2:	8d 93       	st	X+, r24
    1af4:	9c 93       	st	X, r25
    1af6:	17 97       	sbiw	r26, 0x07	; 7
    1af8:	ce 01       	movw	r24, r28
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	1f 91       	pop	r17
    1b00:	0f 91       	pop	r16
    1b02:	08 95       	ret

00001b04 <__ultoa_invert>:
    1b04:	fa 01       	movw	r30, r20
    1b06:	aa 27       	eor	r26, r26
    1b08:	28 30       	cpi	r18, 0x08	; 8
    1b0a:	51 f1       	breq	.+84     	; 0x1b60 <__ultoa_invert+0x5c>
    1b0c:	20 31       	cpi	r18, 0x10	; 16
    1b0e:	81 f1       	breq	.+96     	; 0x1b70 <__ultoa_invert+0x6c>
    1b10:	e8 94       	clt
    1b12:	6f 93       	push	r22
    1b14:	6e 7f       	andi	r22, 0xFE	; 254
    1b16:	6e 5f       	subi	r22, 0xFE	; 254
    1b18:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	af 4f       	sbci	r26, 0xFF	; 255
    1b20:	b1 e0       	ldi	r27, 0x01	; 1
    1b22:	3e d0       	rcall	.+124    	; 0x1ba0 <__ultoa_invert+0x9c>
    1b24:	b4 e0       	ldi	r27, 0x04	; 4
    1b26:	3c d0       	rcall	.+120    	; 0x1ba0 <__ultoa_invert+0x9c>
    1b28:	67 0f       	add	r22, r23
    1b2a:	78 1f       	adc	r23, r24
    1b2c:	89 1f       	adc	r24, r25
    1b2e:	9a 1f       	adc	r25, r26
    1b30:	a1 1d       	adc	r26, r1
    1b32:	68 0f       	add	r22, r24
    1b34:	79 1f       	adc	r23, r25
    1b36:	8a 1f       	adc	r24, r26
    1b38:	91 1d       	adc	r25, r1
    1b3a:	a1 1d       	adc	r26, r1
    1b3c:	6a 0f       	add	r22, r26
    1b3e:	71 1d       	adc	r23, r1
    1b40:	81 1d       	adc	r24, r1
    1b42:	91 1d       	adc	r25, r1
    1b44:	a1 1d       	adc	r26, r1
    1b46:	20 d0       	rcall	.+64     	; 0x1b88 <__ultoa_invert+0x84>
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <__ultoa_invert+0x48>
    1b4a:	68 94       	set
    1b4c:	3f 91       	pop	r19
    1b4e:	2a e0       	ldi	r18, 0x0A	; 10
    1b50:	26 9f       	mul	r18, r22
    1b52:	11 24       	eor	r1, r1
    1b54:	30 19       	sub	r19, r0
    1b56:	30 5d       	subi	r19, 0xD0	; 208
    1b58:	31 93       	st	Z+, r19
    1b5a:	de f6       	brtc	.-74     	; 0x1b12 <__ultoa_invert+0xe>
    1b5c:	cf 01       	movw	r24, r30
    1b5e:	08 95       	ret
    1b60:	46 2f       	mov	r20, r22
    1b62:	47 70       	andi	r20, 0x07	; 7
    1b64:	40 5d       	subi	r20, 0xD0	; 208
    1b66:	41 93       	st	Z+, r20
    1b68:	b3 e0       	ldi	r27, 0x03	; 3
    1b6a:	0f d0       	rcall	.+30     	; 0x1b8a <__ultoa_invert+0x86>
    1b6c:	c9 f7       	brne	.-14     	; 0x1b60 <__ultoa_invert+0x5c>
    1b6e:	f6 cf       	rjmp	.-20     	; 0x1b5c <__ultoa_invert+0x58>
    1b70:	46 2f       	mov	r20, r22
    1b72:	4f 70       	andi	r20, 0x0F	; 15
    1b74:	40 5d       	subi	r20, 0xD0	; 208
    1b76:	4a 33       	cpi	r20, 0x3A	; 58
    1b78:	18 f0       	brcs	.+6      	; 0x1b80 <__ultoa_invert+0x7c>
    1b7a:	49 5d       	subi	r20, 0xD9	; 217
    1b7c:	31 fd       	sbrc	r19, 1
    1b7e:	40 52       	subi	r20, 0x20	; 32
    1b80:	41 93       	st	Z+, r20
    1b82:	02 d0       	rcall	.+4      	; 0x1b88 <__ultoa_invert+0x84>
    1b84:	a9 f7       	brne	.-22     	; 0x1b70 <__ultoa_invert+0x6c>
    1b86:	ea cf       	rjmp	.-44     	; 0x1b5c <__ultoa_invert+0x58>
    1b88:	b4 e0       	ldi	r27, 0x04	; 4
    1b8a:	a6 95       	lsr	r26
    1b8c:	97 95       	ror	r25
    1b8e:	87 95       	ror	r24
    1b90:	77 95       	ror	r23
    1b92:	67 95       	ror	r22
    1b94:	ba 95       	dec	r27
    1b96:	c9 f7       	brne	.-14     	; 0x1b8a <__ultoa_invert+0x86>
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	61 05       	cpc	r22, r1
    1b9c:	71 05       	cpc	r23, r1
    1b9e:	08 95       	ret
    1ba0:	9b 01       	movw	r18, r22
    1ba2:	ac 01       	movw	r20, r24
    1ba4:	0a 2e       	mov	r0, r26
    1ba6:	06 94       	lsr	r0
    1ba8:	57 95       	ror	r21
    1baa:	47 95       	ror	r20
    1bac:	37 95       	ror	r19
    1bae:	27 95       	ror	r18
    1bb0:	ba 95       	dec	r27
    1bb2:	c9 f7       	brne	.-14     	; 0x1ba6 <__ultoa_invert+0xa2>
    1bb4:	62 0f       	add	r22, r18
    1bb6:	73 1f       	adc	r23, r19
    1bb8:	84 1f       	adc	r24, r20
    1bba:	95 1f       	adc	r25, r21
    1bbc:	a0 1d       	adc	r26, r0
    1bbe:	08 95       	ret

00001bc0 <__prologue_saves__>:
    1bc0:	2f 92       	push	r2
    1bc2:	3f 92       	push	r3
    1bc4:	4f 92       	push	r4
    1bc6:	5f 92       	push	r5
    1bc8:	6f 92       	push	r6
    1bca:	7f 92       	push	r7
    1bcc:	8f 92       	push	r8
    1bce:	9f 92       	push	r9
    1bd0:	af 92       	push	r10
    1bd2:	bf 92       	push	r11
    1bd4:	cf 92       	push	r12
    1bd6:	df 92       	push	r13
    1bd8:	ef 92       	push	r14
    1bda:	ff 92       	push	r15
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	ca 1b       	sub	r28, r26
    1bea:	db 0b       	sbc	r29, r27
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	09 94       	ijmp

00001bf2 <__epilogue_restores__>:
    1bf2:	2a 88       	ldd	r2, Y+18	; 0x12
    1bf4:	39 88       	ldd	r3, Y+17	; 0x11
    1bf6:	48 88       	ldd	r4, Y+16	; 0x10
    1bf8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bfa:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bfc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bfe:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c00:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c02:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c04:	b9 84       	ldd	r11, Y+9	; 0x09
    1c06:	c8 84       	ldd	r12, Y+8	; 0x08
    1c08:	df 80       	ldd	r13, Y+7	; 0x07
    1c0a:	ee 80       	ldd	r14, Y+6	; 0x06
    1c0c:	fd 80       	ldd	r15, Y+5	; 0x05
    1c0e:	0c 81       	ldd	r16, Y+4	; 0x04
    1c10:	1b 81       	ldd	r17, Y+3	; 0x03
    1c12:	aa 81       	ldd	r26, Y+2	; 0x02
    1c14:	b9 81       	ldd	r27, Y+1	; 0x01
    1c16:	ce 0f       	add	r28, r30
    1c18:	d1 1d       	adc	r29, r1
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	ed 01       	movw	r28, r26
    1c20:	08 95       	ret

00001c22 <_exit>:
    1c22:	f8 94       	cli

00001c24 <__stop_program>:
    1c24:	ff cf       	rjmp	.-2      	; 0x1c24 <__stop_program>
