
Building_Brains_V4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00803800  00002458  0000250c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002402  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000056  0000a402  00002402  000024b6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000055  00803816  00803816  00002522  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002522  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002580  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004c8  00000000  00000000  000025c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000085e3  00000000  00000000  00002a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003688  00000000  00000000  0000b06b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000286e  00000000  00000000  0000e6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000890  00000000  00000000  00010f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000339f  00000000  00000000  000117f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000016f8  00000000  00000000  00014b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000340  00000000  00000000  0001628b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__vector_6>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	05 a8       	ldd	r0, Z+53	; 0x35
      a6:	4c cd       	rjmp	.-1384   	; 0xfffffb40 <__eeprom_end+0xff7efb40>
      a8:	b2 d4       	rcall	.+2404   	; 0xa0e <tinyLED_update+0x16e>
      aa:	4e b9       	out	0x0e, r20	; 14
      ac:	38 36       	cpi	r19, 0x68	; 104
      ae:	a9 02       	muls	r26, r25
      b0:	0c 50       	subi	r16, 0x0C	; 12
      b2:	b9 91       	ld	r27, Y+
      b4:	86 88       	ldd	r8, Z+22	; 0x16
      b6:	08 3c       	cpi	r16, 0xC8	; 200
      b8:	a6 aa       	std	Z+54, r10	; 0x36
      ba:	aa 2a       	or	r10, r26
      bc:	be 00       	.word	0x00be	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240

000000c2 <__trampolines_end>:
      c2:	00 40       	sbci	r16, 0x00	; 0
      c4:	7a 10       	cpse	r7, r10
      c6:	f3 5a       	subi	r31, 0xA3	; 163
      c8:	00 a0       	ldd	r0, Z+32	; 0x20
      ca:	72 4e       	sbci	r23, 0xE2	; 226
      cc:	18 09       	sbc	r17, r8
      ce:	00 10       	cpse	r0, r0
      d0:	a5 d4       	rcall	.+2378   	; 0xa1c <tinyLED_update+0x17c>
      d2:	e8 00       	.word	0x00e8	; ????
      d4:	00 e8       	ldi	r16, 0x80	; 128
      d6:	76 48       	sbci	r23, 0x86	; 134
      d8:	17 00       	.word	0x0017	; ????
      da:	00 e4       	ldi	r16, 0x40	; 64
      dc:	0b 54       	subi	r16, 0x4B	; 75
      de:	02 00       	.word	0x0002	; ????
      e0:	00 ca       	rjmp	.-3072   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
      e2:	9a 3b       	cpi	r25, 0xBA	; 186
      e4:	00 00       	nop
      e6:	00 e1       	ldi	r16, 0x10	; 16
      e8:	f5 05       	cpc	r31, r5
      ea:	00 00       	nop
      ec:	80 96       	adiw	r24, 0x20	; 32
      ee:	98 00       	.word	0x0098	; ????
      f0:	00 00       	nop
      f2:	40 42       	sbci	r20, 0x20	; 32
      f4:	0f 00       	.word	0x000f	; ????
      f6:	00 00       	nop
      f8:	a0 86       	std	Z+8, r10	; 0x08
      fa:	01 00       	.word	0x0001	; ????
      fc:	00 00       	nop
      fe:	10 27       	eor	r17, r16
     100:	00 00       	nop
     102:	00 00       	nop
     104:	e8 03       	fmulsu	r22, r16
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	64 00       	.word	0x0064	; ????
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	0a 00       	.word	0x000a	; ????
     112:	00 00       	nop
     114:	00 00       	nop
     116:	01 00       	.word	0x0001	; ????
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	2c 76       	andi	r18, 0x6C	; 108
     11e:	d8 88       	ldd	r13, Y+16	; 0x10
     120:	dc 67       	ori	r29, 0x7C	; 124
     122:	4f 08       	sbc	r4, r15
     124:	23 df       	rcall	.-442    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     126:	c1 df       	rcall	.-126    	; 0xaa <__SREG__+0x6b>
     128:	ae 59       	subi	r26, 0x9E	; 158
     12a:	e1 b1       	in	r30, 0x01	; 1
     12c:	b7 96       	adiw	r30, 0x27	; 39
     12e:	e5 e3       	ldi	r30, 0x35	; 53
     130:	e4 53       	subi	r30, 0x34	; 52
     132:	c6 3a       	cpi	r28, 0xA6	; 166
     134:	e6 51       	subi	r30, 0x16	; 22
     136:	99 76       	andi	r25, 0x69	; 105
     138:	96 e8       	ldi	r25, 0x86	; 134
     13a:	e6 c2       	rjmp	.+1484   	; 0x708 <main+0x5e>
     13c:	84 26       	eor	r8, r20
     13e:	eb 89       	ldd	r30, Y+19	; 0x13
     140:	8c 9b       	sbis	0x11, 4	; 17
     142:	62 ed       	ldi	r22, 0xD2	; 210
     144:	40 7c       	andi	r20, 0xC0	; 192
     146:	6f fc       	.word	0xfc6f	; ????
     148:	ef bc       	out	0x2f, r14	; 47
     14a:	9c 9f       	mul	r25, r28
     14c:	40 f2       	brcs	.-112    	; 0xde <__trampolines_end+0x1c>
     14e:	ba a5       	ldd	r27, Y+42	; 0x2a
     150:	6f a5       	ldd	r22, Y+47	; 0x2f
     152:	f4 90       	lpm	r15, Z
     154:	05 5a       	subi	r16, 0xA5	; 165
     156:	2a f7       	brpl	.-54     	; 0x122 <__trampolines_end+0x60>
     158:	5c 93       	st	X, r21
     15a:	6b 6c       	ori	r22, 0xCB	; 203
     15c:	f9 67       	ori	r31, 0x79	; 121
     15e:	6d c1       	rjmp	.+730    	; 0x43a <SPI_0_init+0x2>
     160:	1b fc       	.word	0xfc1b	; ????
     162:	e0 e4       	ldi	r30, 0x40	; 64
     164:	0d 47       	sbci	r16, 0x7D	; 125
     166:	fe f5       	brtc	.+126    	; 0x1e6 <.do_clear_bss_loop>
     168:	20 e6       	ldi	r18, 0x60	; 96
     16a:	b5 00       	.word	0x00b5	; ????
     16c:	d0 ed       	ldi	r29, 0xD0	; 208
     16e:	90 2e       	mov	r9, r16
     170:	03 00       	.word	0x0003	; ????
     172:	94 35       	cpi	r25, 0x54	; 84
     174:	77 05       	cpc	r23, r7
     176:	00 80       	ld	r0, Z
     178:	84 1e       	adc	r8, r20
     17a:	08 00       	.word	0x0008	; ????
     17c:	00 20       	and	r0, r0
     17e:	4e 0a       	sbc	r4, r30
     180:	00 00       	nop
     182:	00 c8       	rjmp	.-4096   	; 0xfffff184 <__eeprom_end+0xff7ef184>
     184:	0c 33       	cpi	r16, 0x3C	; 60
     186:	33 33       	cpi	r19, 0x33	; 51
     188:	33 0f       	add	r19, r19
     18a:	98 6e       	ori	r25, 0xE8	; 232
     18c:	12 83       	std	Z+2, r17	; 0x02
     18e:	11 41       	sbci	r17, 0x11	; 17
     190:	ef 8d       	ldd	r30, Y+31	; 0x1f
     192:	21 14       	cp	r2, r1
     194:	89 3b       	cpi	r24, 0xB9	; 185
     196:	e6 55       	subi	r30, 0x56	; 86
     198:	16 cf       	rjmp	.-468    	; 0xffffffc6 <__eeprom_end+0xff7effc6>
     19a:	fe e6       	ldi	r31, 0x6E	; 110
     19c:	db 18       	sub	r13, r11
     19e:	d1 84       	ldd	r13, Z+9	; 0x09
     1a0:	4b 38       	cpi	r20, 0x8B	; 139
     1a2:	1b f7       	brvc	.-58     	; 0x16a <__trampolines_end+0xa8>
     1a4:	7c 1d       	adc	r23, r12
     1a6:	90 1d       	adc	r25, r0
     1a8:	a4 bb       	out	0x14, r26	; 20
     1aa:	e4 24       	eor	r14, r4
     1ac:	20 32       	cpi	r18, 0x20	; 32
     1ae:	84 72       	andi	r24, 0x24	; 36
     1b0:	5e 22       	and	r5, r30
     1b2:	81 00       	.word	0x0081	; ????
     1b4:	c9 f1       	breq	.+114    	; 0x228 <ADC_get_conversion+0x16>
     1b6:	24 ec       	ldi	r18, 0xC4	; 196
     1b8:	a1 e5       	ldi	r26, 0x51	; 81
     1ba:	3d 27       	eor	r19, r29

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	df e3       	ldi	r29, 0x3F	; 63
     1c6:	de bf       	out	0x3e, r29	; 62

000001c8 <__do_copy_data>:
     1c8:	18 e3       	ldi	r17, 0x38	; 56
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b8 e3       	ldi	r27, 0x38	; 56
     1ce:	e8 e5       	ldi	r30, 0x58	; 88
     1d0:	f4 e2       	ldi	r31, 0x24	; 36
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
     1d4:	05 90       	lpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	a6 31       	cpi	r26, 0x16	; 22
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>

000001de <__do_clear_bss>:
     1de:	28 e3       	ldi	r18, 0x38	; 56
     1e0:	a6 e1       	ldi	r26, 0x16	; 22
     1e2:	b8 e3       	ldi	r27, 0x38	; 56
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	ab 36       	cpi	r26, 0x6B	; 107
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 55 03 	call	0x6aa	; 0x6aa <main>
     1f2:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     1fa:	0e 94 cd 01 	call	0x39a	; 0x39a <system_init>
     1fe:	08 95       	ret

00000200 <ADC_init>:
 * \return Conversion result read from the ADC ADC module
 */
adc_result_t ADC_get_conversion_result(void)
{
	return (ADC0.RES);
}
     200:	85 e0       	ldi	r24, 0x05	; 5
     202:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	08 95       	ret

0000020a <ADC_is_conversion_done>:
     20a:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     20e:	81 70       	andi	r24, 0x01	; 1
     210:	08 95       	ret

00000212 <ADC_get_conversion>:
 *
 * \return Nothing
 */
void ADC_start_conversion(adc_0_channel_t channel)
{
	ADC0.MUXPOS  = channel;
     212:	e0 e0       	ldi	r30, 0x00	; 0
     214:	f6 e0       	ldi	r31, 0x06	; 6
     216:	86 83       	std	Z+6, r24	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm;
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	80 87       	std	Z+8, r24	; 0x08
adc_result_t ADC_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_start_conversion(channel);
	while (!ADC_is_conversion_done())
     21c:	0e 94 05 01 	call	0x20a	; 0x20a <ADC_is_conversion_done>
     220:	88 23       	and	r24, r24
     222:	e1 f3       	breq	.-8      	; 0x21c <ADC_get_conversion+0xa>
 *
 * \return Conversion result read from the ADC ADC module
 */
adc_result_t ADC_get_conversion_result(void)
{
	return (ADC0.RES);
     224:	e0 e0       	ldi	r30, 0x00	; 0
     226:	f6 e0       	ldi	r31, 0x06	; 6
     228:	20 89       	ldd	r18, Z+16	; 0x10
     22a:	31 89       	ldd	r19, Z+17	; 0x11

	ADC_start_conversion(channel);
	while (!ADC_is_conversion_done())
		;
	res = ADC_get_conversion_result();
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
     22c:	93 85       	ldd	r25, Z+11	; 0x0b
     22e:	91 60       	ori	r25, 0x01	; 1
     230:	93 87       	std	Z+11, r25	; 0x0b
	return res;
}
     232:	c9 01       	movw	r24, r18
     234:	08 95       	ret

00000236 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp      /* voltage level monitor interrrupt enable: disabled */
     236:	82 e0       	ldi	r24, 0x02	; 2
     238:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	              | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	08 95       	ret

00000240 <DIGGSIGG_init>:
	//		 | CCL_EDGEDET_DIS_gc /* Edge detector is disabled */
	//		 | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	//		 | 0 << CCL_ENABLE_bp /* LUT Enable: disabled */
	//		 | 0 << CCL_OUTEN_bp; /* Output Enable: disabled */

	CCL.TRUTH1 = 168; /* Truth 1: 168 */
     240:	e0 ec       	ldi	r30, 0xC0	; 192
     242:	f1 e0       	ldi	r31, 0x01	; 1
     244:	88 ea       	ldi	r24, 0xA8	; 168
     246:	84 87       	std	Z+12, r24	; 0x0c

	CCL.LUT1CTRLC = CCL_INSEL2_TCA0_gc /* TCA0 WO2 input source */;
     248:	88 e0       	ldi	r24, 0x08	; 8
     24a:	83 87       	std	Z+11, r24	; 0x0b

	CCL.LUT1CTRLB = CCL_INSEL0_SPI0_gc /* SPI0 SCK source */
     24c:	8b eb       	ldi	r24, 0xBB	; 187
     24e:	82 87       	std	Z+10, r24	; 0x0a
	                | CCL_INSEL1_SPI0_gc /* SPI0 MOSI input source */;

	CCL.LUT1CTRLA = 0 << CCL_CLKSRC_bp       /* Clock Source Selection: disabled */
     250:	89 e0       	ldi	r24, 0x09	; 9
     252:	81 87       	std	Z+9, r24	; 0x09
	                | CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	                | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	                | 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	                | 1 << CCL_OUTEN_bp;     /* Output Enable: enabled */

	CCL.CTRLA = 1 << CCL_ENABLE_bp      /* Enable: enabled */
     254:	81 e4       	ldi	r24, 0x41	; 65
     256:	80 83       	st	Z, r24
	            | 1 << CCL_RUNSTDBY_bp; /* Run in Standby: enabled */

	return 0;
}
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	08 95       	ret

0000025c <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     25c:	47 e0       	ldi	r20, 0x07	; 7
     25e:	68 ed       	ldi	r22, 0xD8	; 216
     260:	8c e7       	ldi	r24, 0x7C	; 124
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <protected_write_io>
     268:	41 e0       	ldi	r20, 0x01	; 1
     26a:	68 ed       	ldi	r22, 0xD8	; 216
     26c:	81 e6       	ldi	r24, 0x61	; 97
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	08 95       	ret

00000278 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     278:	78 94       	sei

	return 0;
}
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	08 95       	ret

0000027e <DAC_init>:
 *
 * \return Nothing
 */
void DAC_disable()
{
	DAC0.CTRLA &= ~DAC_ENABLE_bm;
     27e:	81 e4       	ldi	r24, 0x41	; 65
     280:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 95       	ret

00000288 <DAC_set_output>:
 *
 * \return Nothing
 */
void DAC_set_output(dac_resolution_t value)
{
	DAC0.DATA = value;
     288:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     28c:	08 95       	ret

0000028e <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     28e:	e0 e1       	ldi	r30, 0x10	; 16
     290:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     292:	80 81       	ld	r24, Z
     294:	88 60       	ori	r24, 0x08	; 8
     296:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     298:	e8 31       	cpi	r30, 0x18	; 24
     29a:	84 e0       	ldi	r24, 0x04	; 4
     29c:	f8 07       	cpc	r31, r24
     29e:	c9 f7       	brne	.-14     	; 0x292 <mcu_init+0x4>
     2a0:	e0 e3       	ldi	r30, 0x30	; 48
     2a2:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     2a4:	80 81       	ld	r24, Z
     2a6:	88 60       	ori	r24, 0x08	; 8
     2a8:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     2aa:	e8 33       	cpi	r30, 0x38	; 56
     2ac:	84 e0       	ldi	r24, 0x04	; 4
     2ae:	f8 07       	cpc	r31, r24
     2b0:	c9 f7       	brne	.-14     	; 0x2a4 <mcu_init+0x16>
     2b2:	e0 e5       	ldi	r30, 0x50	; 80
     2b4:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     2b6:	80 81       	ld	r24, Z
     2b8:	88 60       	ori	r24, 0x08	; 8
     2ba:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     2bc:	e8 35       	cpi	r30, 0x58	; 88
     2be:	84 e0       	ldi	r24, 0x04	; 4
     2c0:	f8 07       	cpc	r31, r24
     2c2:	c9 f7       	brne	.-14     	; 0x2b6 <mcu_init+0x28>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     2c4:	08 95       	ret

000002c6 <ADC_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     2c6:	e5 e1       	ldi	r30, 0x15	; 21
     2c8:	f4 e0       	ldi	r31, 0x04	; 4
     2ca:	80 81       	ld	r24, Z
     2cc:	88 7f       	andi	r24, 0xF8	; 248
     2ce:	84 60       	ori	r24, 0x04	; 4
     2d0:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     2d2:	80 81       	ld	r24, Z
     2d4:	87 7f       	andi	r24, 0xF7	; 247
     2d6:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     2d8:	e7 e1       	ldi	r30, 0x17	; 23
     2da:	f4 e0       	ldi	r31, 0x04	; 4
     2dc:	80 81       	ld	r24, Z
     2de:	88 7f       	andi	r24, 0xF8	; 248
     2e0:	84 60       	ori	r24, 0x04	; 4
     2e2:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     2e4:	80 81       	ld	r24, Z
     2e6:	87 7f       	andi	r24, 0xF7	; 247
     2e8:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     2ea:	e4 e3       	ldi	r30, 0x34	; 52
     2ec:	f4 e0       	ldi	r31, 0x04	; 4
     2ee:	80 81       	ld	r24, Z
     2f0:	88 7f       	andi	r24, 0xF8	; 248
     2f2:	84 60       	ori	r24, 0x04	; 4
     2f4:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     2f6:	80 81       	ld	r24, Z
     2f8:	87 7f       	andi	r24, 0xF7	; 247
     2fa:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     2fc:	e1 e3       	ldi	r30, 0x31	; 49
     2fe:	f4 e0       	ldi	r31, 0x04	; 4
     300:	80 81       	ld	r24, Z
     302:	88 7f       	andi	r24, 0xF8	; 248
     304:	84 60       	ori	r24, 0x04	; 4
     306:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     308:	80 81       	ld	r24, Z
     30a:	87 7f       	andi	r24, 0xF7	; 247
     30c:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     30e:	e0 e3       	ldi	r30, 0x30	; 48
     310:	f4 e0       	ldi	r31, 0x04	; 4
     312:	80 81       	ld	r24, Z
     314:	88 7f       	andi	r24, 0xF8	; 248
     316:	84 60       	ori	r24, 0x04	; 4
     318:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     31a:	80 81       	ld	r24, Z
     31c:	87 7f       	andi	r24, 0xF7	; 247
     31e:	80 83       	st	Z, r24
	// Disable digital input buffer
	DEN4_PIN_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	DEN4_PIN_set_pull_mode(PORT_PULL_OFF);

	ADC_init();
     320:	0e 94 00 01 	call	0x200	; 0x200 <ADC_init>
     324:	08 95       	ret

00000326 <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     326:	23 98       	cbi	0x04, 3	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     328:	e3 e3       	ldi	r30, 0x33	; 51
     32a:	f4 e0       	ldi	r31, 0x04	; 4
     32c:	80 81       	ld	r24, Z
     32e:	87 7f       	andi	r24, 0xF7	; 247
     330:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     332:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     334:	2a 98       	cbi	0x05, 2	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     336:	0e 94 34 02 	call	0x468	; 0x468 <USART_0_init>
     33a:	08 95       	ret

0000033c <TIMER_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     33c:	25 9a       	sbi	0x04, 5	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     33e:	2d 98       	cbi	0x05, 5	; 5
	    // <false"> Low
	    // <true"> High
	    false);

	/* set the alternate pin mux */
	PORTMUX.CTRLC |= PORTMUX_TCA02_bm;
     340:	e0 e0       	ldi	r30, 0x00	; 0
     342:	f2 e0       	ldi	r31, 0x02	; 2
     344:	82 81       	ldd	r24, Z+2	; 0x02
     346:	84 60       	ori	r24, 0x04	; 4
     348:	82 83       	std	Z+2, r24	; 0x02

	TIMER_0_init();
     34a:	0e 94 24 02 	call	0x448	; 0x448 <TIMER_0_init>
     34e:	08 95       	ret

00000350 <DIGGSIGG_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     350:	41 9a       	sbi	0x08, 1	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     352:	49 98       	cbi	0x09, 1	; 9
	    // <false"> Low
	    // <true"> High
	    false);

	/* set the alternate pin mux */
	PORTMUX.CTRLA |= PORTMUX_LUT1_bm;
     354:	e0 e0       	ldi	r30, 0x00	; 0
     356:	f2 e0       	ldi	r31, 0x02	; 2
     358:	80 81       	ld	r24, Z
     35a:	80 62       	ori	r24, 0x20	; 32
     35c:	80 83       	st	Z, r24

	DIGGSIGG_init();
     35e:	0e 94 20 01 	call	0x240	; 0x240 <DIGGSIGG_init>
     362:	08 95       	ret

00000364 <SPI_0_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     364:	02 98       	cbi	0x00, 2	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     366:	e2 e1       	ldi	r30, 0x12	; 18
     368:	f4 e0       	ldi	r31, 0x04	; 4
     36a:	80 81       	ld	r24, Z
     36c:	87 7f       	andi	r24, 0xF7	; 247
     36e:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     370:	01 9a       	sbi	0x00, 1	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     372:	09 98       	cbi	0x01, 1	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     374:	03 9a       	sbi	0x00, 3	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     376:	0b 98       	cbi	0x01, 3	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     378:	04 9a       	sbi	0x00, 4	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     37a:	0c 98       	cbi	0x01, 4	; 1
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
     37c:	0e 94 1c 02 	call	0x438	; 0x438 <SPI_0_init>
     380:	08 95       	ret

00000382 <DAC_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     382:	e6 e1       	ldi	r30, 0x16	; 22
     384:	f4 e0       	ldi	r31, 0x04	; 4
     386:	80 81       	ld	r24, Z
     388:	88 7f       	andi	r24, 0xF8	; 248
     38a:	84 60       	ori	r24, 0x04	; 4
     38c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     38e:	80 81       	ld	r24, Z
     390:	87 7f       	andi	r24, 0xF7	; 247
     392:	80 83       	st	Z, r24
	// Disable digital input buffer
	AXON_PIN_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	AXON_PIN_set_pull_mode(PORT_PULL_OFF);

	DAC_init();
     394:	0e 94 3f 01 	call	0x27e	; 0x27e <DAC_init>
     398:	08 95       	ret

0000039a <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     39a:	0e 94 47 01 	call	0x28e	; 0x28e <mcu_init>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     39e:	26 98       	cbi	0x04, 6	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     3a0:	e6 e3       	ldi	r30, 0x36	; 54
     3a2:	f4 e0       	ldi	r31, 0x04	; 4
     3a4:	80 81       	ld	r24, Z
     3a6:	87 7f       	andi	r24, 0xF7	; 247
     3a8:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     3aa:	27 98       	cbi	0x04, 7	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     3ac:	e7 e3       	ldi	r30, 0x37	; 55
     3ae:	f4 e0       	ldi	r31, 0x04	; 4
     3b0:	80 81       	ld	r24, Z
     3b2:	87 7f       	andi	r24, 0xF7	; 247
     3b4:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     3b6:	42 98       	cbi	0x08, 2	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     3b8:	e2 e5       	ldi	r30, 0x52	; 82
     3ba:	f4 e0       	ldi	r31, 0x04	; 4
     3bc:	80 81       	ld	r24, Z
     3be:	88 60       	ori	r24, 0x08	; 8
     3c0:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     3c2:	45 9a       	sbi	0x08, 5	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     3c4:	4d 9a       	sbi	0x09, 5	; 9
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    true);

	CLKCTRL_init();
     3c6:	0e 94 2e 01 	call	0x25c	; 0x25c <CLKCTRL_init>

	RTC_init();
     3ca:	0e 94 fe 01 	call	0x3fc	; 0x3fc <RTC_init>

	ADC_initialization();
     3ce:	0e 94 63 01 	call	0x2c6	; 0x2c6 <ADC_initialization>

	USART_0_initialization();
     3d2:	0e 94 93 01 	call	0x326	; 0x326 <USART_0_initialization>

	TIMER_0_initialization();
     3d6:	0e 94 9e 01 	call	0x33c	; 0x33c <TIMER_0_initialization>

	DIGGSIGG_initialization();
     3da:	0e 94 a8 01 	call	0x350	; 0x350 <DIGGSIGG_initialization>

	SPI_0_initialization();
     3de:	0e 94 b2 01 	call	0x364	; 0x364 <SPI_0_initialization>

	DAC_initialization();
     3e2:	0e 94 c1 01 	call	0x382	; 0x382 <DAC_initialization>

	CPUINT_init();
     3e6:	0e 94 3c 01 	call	0x278	; 0x278 <CPUINT_init>

	SLPCTRL_init();
     3ea:	0e 94 1a 02 	call	0x434	; 0x434 <SLPCTRL_init>

	BOD_init();
     3ee:	0e 94 1b 01 	call	0x236	; 0x236 <BOD_init>
     3f2:	08 95       	ret

000003f4 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     3f4:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     3f6:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     3f8:	40 83       	st	Z, r20
	ret                             // Return to caller
     3fa:	08 95       	ret

000003fc <RTC_init>:
 * \return Initialization status.
 */
int8_t RTC_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     3fc:	e0 e4       	ldi	r30, 0x40	; 64
     3fe:	f1 e0       	ldi	r31, 0x01	; 1
     400:	81 81       	ldd	r24, Z+1	; 0x01
     402:	81 11       	cpse	r24, r1
     404:	fd cf       	rjmp	.-6      	; 0x400 <__LOCK_REGION_LENGTH__>
	}

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	RTC.CNT = 0x20; /* Counter: 0x20 */
     406:	e0 e4       	ldi	r30, 0x40	; 64
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	80 e2       	ldi	r24, 0x20	; 32
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	80 87       	std	Z+8, r24	; 0x08
     410:	91 87       	std	Z+9, r25	; 0x09

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     412:	81 e8       	ldi	r24, 0x81	; 129
     414:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.PER = 0x20 / TIMESCALE; /* Period: 0x20 */
     416:	80 e8       	ldi	r24, 0x80	; 128
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	82 87       	std	Z+10, r24	; 0x0a
     41c:	93 87       	std	Z+11, r25	; 0x0b

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	RTC.DBGCTRL = 1 << RTC_DBGRUN_bp; /* Run in debug: enabled */
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	85 83       	std	Z+5, r24	; 0x05

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
     422:	82 83       	std	Z+2, r24	; 0x02
	              | 1 << RTC_OVF_bp; /* Overflow Interrupt enable: enabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     424:	81 89       	ldd	r24, Z+17	; 0x11
     426:	81 11       	cpse	r24, r1
     428:	fd cf       	rjmp	.-6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	}

	RTC.PITCTRLA = RTC_PERIOD_OFF_gc    /* Off */
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	08 95       	ret

00000434 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	08 95       	ret

00000438 <SPI_0_init>:
 * \return Initialization status
 */
int8_t SPI_0_init()
{

	SPI0.CTRLA = 0 << SPI_CLK2X_bp     /* Enable Double Speed: disabled */
     438:	e0 e2       	ldi	r30, 0x20	; 32
     43a:	f8 e0       	ldi	r31, 0x08	; 8
     43c:	83 e2       	ldi	r24, 0x23	; 35
     43e:	80 83       	st	Z, r24
	             | 0 << SPI_DORD_bp    /* Data Order Setting: disabled */
	             | 1 << SPI_ENABLE_bp  /* Enable Module: enabled */
	             | 1 << SPI_MASTER_bp  /* SPI module in master mode */
	             | SPI_PRESC_DIV16_gc; /* System Clock / 16 */

	SPI0.CTRLB = 0 << SPI_BUFEN_bp   /* Buffer Mode Enable: disabled */
     440:	84 e0       	ldi	r24, 0x04	; 4
     442:	81 83       	std	Z+1, r24	; 0x01
	//		 | 0 << SPI_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << SPI_SSIE_bp /* Slave Select Trigger Interrupt Enable: disabled */
	//		 | 0 << SPI_TXCIE_bp; /* Transfer Complete Interrupt Enable: disabled */

	return 0;
}
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	08 95       	ret

00000448 <TIMER_0_init>:

	// TCA0.SINGLE.CMP0 = 0x0; /* Compare Register 0: 0x0 */

	// TCA0.SINGLE.CMP1 = 0x0; /* Compare Register 1: 0x0 */

	TCA0.SINGLE.CMP2 = 0x4; /* Compare Register 2: 0x4 */
     448:	e0 e0       	ldi	r30, 0x00	; 0
     44a:	fa e0       	ldi	r31, 0x0A	; 10
     44c:	84 e0       	ldi	r24, 0x04	; 4
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	84 a7       	std	Z+44, r24	; 0x2c
     452:	95 a7       	std	Z+45, r25	; 0x2d

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
     454:	83 e4       	ldi	r24, 0x43	; 67
     456:	81 83       	std	Z+1, r24	; 0x01
	                    | 0 << TCA_SINGLE_CMP0EN_bp         /* Compare 0 Enable: disabled */
	                    | 0 << TCA_SINGLE_CMP1EN_bp         /* Compare 1 Enable: disabled */
	                    | 1 << TCA_SINGLE_CMP2EN_bp         /* Compare 2 Enable: enabled */
	                    | TCA_SINGLE_WGMODE_SINGLESLOPE_gc; /*  */

	TCA0.SINGLE.CTRLC = 0 << TCA_SINGLE_CMP0OV_bp    /* Compare 0 Waveform Output Value: disabled */
     458:	84 e0       	ldi	r24, 0x04	; 4
     45a:	82 83       	std	Z+2, r24	; 0x02
	// TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp /* Compare 0 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	TCA0.SINGLE.PER = 0x7; /* Period: 0x7 */
     45c:	87 e0       	ldi	r24, 0x07	; 7
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	86 a3       	std	Z+38, r24	; 0x26
     462:	97 a3       	std	Z+39, r25	; 0x27

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp; /* Module Enable: disabled */

	return 0;
}
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	08 95       	ret

00000468 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART0.STATUS & USART_RXCIF_bm))
		;
	return USART0.RXDATAL;
}
     468:	e0 e0       	ldi	r30, 0x00	; 0
     46a:	f8 e0       	ldi	r31, 0x08	; 8
     46c:	87 e4       	ldi	r24, 0x47	; 71
     46e:	90 e1       	ldi	r25, 0x10	; 16
     470:	80 87       	std	Z+8, r24	; 0x08
     472:	91 87       	std	Z+9, r25	; 0x09
     474:	80 ec       	ldi	r24, 0xC0	; 192
     476:	86 83       	std	Z+6, r24	; 0x06
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	98 e3       	ldi	r25, 0x38	; 56
     47c:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <__iob+0x2>
     480:	90 93 68 38 	sts	0x3868, r25	; 0x803868 <__iob+0x3>
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	08 95       	ret

00000488 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
     488:	e0 e0       	ldi	r30, 0x00	; 0
     48a:	f8 e0       	ldi	r31, 0x08	; 8
     48c:	94 81       	ldd	r25, Z+4	; 0x04
     48e:	95 ff       	sbrs	r25, 5
     490:	fd cf       	rjmp	.-6      	; 0x48c <USART_0_write+0x4>
		;
	USART0.TXDATAL = data;
     492:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     496:	08 95       	ret

00000498 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
     498:	0e 94 44 02 	call	0x488	; 0x488 <USART_0_write>
	return 0;
}
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	08 95       	ret

000004a2 <tinyCharge_is_connected_to_charger>:

_Bool connected_to_charger;

_Bool tinyCharge_is_connected_to_charger(){
	return connected_to_charger;
}
     4a2:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <connected_to_charger>
     4a6:	08 95       	ret

000004a8 <tinyCharge_is_fully_charged>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     4a8:	86 b1       	in	r24, 0x06	; 6

_Bool tinyCharge_is_fully_charged(){
	return CHARGING_STATUS_PIN_get_level();
}
     4aa:	88 1f       	adc	r24, r24
     4ac:	88 27       	eor	r24, r24
     4ae:	88 1f       	adc	r24, r24
     4b0:	08 95       	ret

000004b2 <tinyCharge_switch_mode>:
	}
}

void tinyCharge_switch_mode(){
	
	if(connected_to_charger){
     4b2:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <connected_to_charger>
     4b6:	88 23       	and	r24, r24
     4b8:	51 f0       	breq	.+20     	; 0x4ce <tinyCharge_switch_mode+0x1c>
		// Switch from main to charging mode
		
		// Set LED
		tinyLED_set_color(OUT_LED, OFF);
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 ff 03 	call	0x7fe	; 0x7fe <tinyLED_set_color>
		tinyLED_set_color_mode(INN_LED, CHARGING_COLOR, SWING);
     4c2:	42 e0       	ldi	r20, 0x02	; 2
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	0e 94 10 04 	call	0x820	; 0x820 <tinyLED_set_color_mode>
     4cc:	08 95       	ret
	}
	else{
		// Switch from charge to main mode
		
		// Set LED
		tinyLED_set_color(OUT_LED, OFF);
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <tinyLED_set_color>
		tinyLED_set_color(INN_LED, OFF);
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	0e 94 ff 03 	call	0x7fe	; 0x7fe <tinyLED_set_color>
     4de:	08 95       	ret

000004e0 <tinyCharge_set_charging_mode>:
_Bool tinyCharge_is_fully_charged(){
	return CHARGING_STATUS_PIN_get_level();
}

void tinyCharge_set_charging_mode(_Bool charging_status){
	if(charging_status != connected_to_charger){
     4e0:	90 91 58 38 	lds	r25, 0x3858	; 0x803858 <connected_to_charger>
     4e4:	98 17       	cp	r25, r24
     4e6:	21 f0       	breq	.+8      	; 0x4f0 <tinyCharge_set_charging_mode+0x10>
		connected_to_charger = charging_status;
     4e8:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <connected_to_charger>
		tinyCharge_switch_mode();
     4ec:	0e 94 59 02 	call	0x4b2	; 0x4b2 <tinyCharge_switch_mode>
     4f0:	08 95       	ret

000004f2 <tinyCharge_set_transistors>:
	}
}


void tinyCharge_set_transistors(){
	if(connected_to_charger){
     4f2:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <connected_to_charger>
     4f6:	88 23       	and	r24, r24
     4f8:	11 f0       	breq	.+4      	; 0x4fe <tinyCharge_set_transistors+0xc>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     4fa:	4d 98       	cbi	0x09, 5	; 9
     4fc:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     4fe:	4d 9a       	sbi	0x09, 5	; 9
     500:	08 95       	ret

00000502 <tinyDebugger_send_uint32>:
		printf("%s:%5s\t", name, number);
	}
}
void tinyDebugger_send_string(const char* name, char * value){
	if(DEBUGGING && tinyDebugger_send_message){
		printf("%s:%s\t", name, value);
     502:	20 91 0e 38 	lds	r18, 0x380E	; 0x80380e <tinyDebugger_send_message>
     506:	22 23       	and	r18, r18
     508:	89 f0       	breq	.+34     	; 0x52c <tinyDebugger_send_uint32+0x2a>
     50a:	7f 93       	push	r23
     50c:	6f 93       	push	r22
     50e:	5f 93       	push	r21
     510:	4f 93       	push	r20
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	8a e0       	ldi	r24, 0x0A	; 10
     518:	94 ea       	ldi	r25, 0xA4	; 164
     51a:	9f 93       	push	r25
     51c:	8f 93       	push	r24
     51e:	0e 94 c5 0c 	call	0x198a	; 0x198a <printf>
     522:	8d b7       	in	r24, 0x3d	; 61
     524:	9e b7       	in	r25, 0x3e	; 62
     526:	08 96       	adiw	r24, 0x08	; 8
     528:	8d bf       	out	0x3d, r24	; 61
     52a:	9e bf       	out	0x3e, r25	; 62
     52c:	08 95       	ret

0000052e <tinyDebugger_send_uint8>:
     52e:	20 91 0e 38 	lds	r18, 0x380E	; 0x80380e <tinyDebugger_send_message>
     532:	22 23       	and	r18, r18
     534:	81 f0       	breq	.+32     	; 0x556 <tinyDebugger_send_uint8+0x28>
     536:	1f 92       	push	r1
     538:	6f 93       	push	r22
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	83 e1       	ldi	r24, 0x13	; 19
     540:	94 ea       	ldi	r25, 0xA4	; 164
     542:	9f 93       	push	r25
     544:	8f 93       	push	r24
     546:	0e 94 c5 0c 	call	0x198a	; 0x198a <printf>
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	08 95       	ret

00000558 <tinyDebugger_send_double>:
     558:	cf 92       	push	r12
     55a:	df 92       	push	r13
     55c:	ef 92       	push	r14
     55e:	ff 92       	push	r15
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	64 97       	sbiw	r28, 0x14	; 20
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	de bf       	out	0x3e, r29	; 62
     572:	38 2f       	mov	r19, r24
     574:	e9 2f       	mov	r30, r25
     576:	20 91 0e 38 	lds	r18, 0x380E	; 0x80380e <tinyDebugger_send_message>
     57a:	22 23       	and	r18, r18
     57c:	e9 f0       	breq	.+58     	; 0x5b8 <tinyDebugger_send_double+0x60>
     57e:	cb 01       	movw	r24, r22
     580:	ba 01       	movw	r22, r20
     582:	ee 2e       	mov	r14, r30
     584:	f3 2e       	mov	r15, r19
     586:	9e 01       	movw	r18, r28
     588:	2f 5f       	subi	r18, 0xFF	; 255
     58a:	3f 4f       	sbci	r19, 0xFF	; 255
     58c:	69 01       	movw	r12, r18
     58e:	89 01       	movw	r16, r18
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	41 e0       	ldi	r20, 0x01	; 1
     594:	0e 94 a5 0c 	call	0x194a	; 0x194a <dtostrf>
     598:	df 92       	push	r13
     59a:	cf 92       	push	r12
     59c:	ef 92       	push	r14
     59e:	ff 92       	push	r15
     5a0:	8b e1       	ldi	r24, 0x1B	; 27
     5a2:	94 ea       	ldi	r25, 0xA4	; 164
     5a4:	9f 93       	push	r25
     5a6:	8f 93       	push	r24
     5a8:	0e 94 c5 0c 	call	0x198a	; 0x198a <printf>
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	64 96       	adiw	r28, 0x14	; 20
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	df 90       	pop	r13
     5cc:	cf 90       	pop	r12
     5ce:	08 95       	ret

000005d0 <tinyDebugger_end_line>:
	}
}
void tinyDebugger_end_line(){
	if(DEBUGGING && tinyDebugger_send_message){
     5d0:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <tinyDebugger_send_message>
     5d4:	88 23       	and	r24, r24
     5d6:	21 f0       	breq	.+8      	; 0x5e0 <tinyDebugger_end_line+0x10>
		printf("\r\n");
     5d8:	8a e2       	ldi	r24, 0x2A	; 42
     5da:	94 ea       	ldi	r25, 0xA4	; 164
     5dc:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <puts>
	}
	tinyDebugger_print_attempts++;
     5e0:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <__data_end>
     5e4:	8f 5f       	subi	r24, 0xFF	; 255
     5e6:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <__data_end>
	tinyDebugger_send_message = tinyDebugger_print_attempts%DEBUG_EVERY == 0;
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <tinyDebugger_send_message>
     5f0:	08 95       	ret

000005f2 <tinyPulse_toggle_pulse_mode>:
uint32_t time_of_last_pulse = 0;
uint16_t time_since_last_pulse = 0;
uint16_t ideal_time_between_pulses = 1000/PULSEMODE_FREQUENCY;

void tinyPulse_toggle_pulse_mode(){
	pulse_mode = !pulse_mode;
     5f2:	90 91 1d 38 	lds	r25, 0x381D	; 0x80381d <pulse_mode>
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	89 27       	eor	r24, r25
     5fa:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <pulse_mode>
     5fe:	08 95       	ret

00000600 <tinyPulse_update_potential>:
}

double tinyPulse_update_potential(double potential){
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	6b 01       	movw	r12, r22
     60a:	7c 01       	movw	r14, r24
	if(pulse_mode){
     60c:	80 91 1d 38 	lds	r24, 0x381D	; 0x80381d <pulse_mode>
     610:	88 23       	and	r24, r24
     612:	39 f1       	breq	.+78     	; 0x662 <tinyPulse_update_potential+0x62>
		
		time_since_last_pulse = tinyTime_now() - time_of_last_pulse;
     614:	0e 94 4c 03 	call	0x698	; 0x698 <tinyTime_now>
     618:	20 91 19 38 	lds	r18, 0x3819	; 0x803819 <time_of_last_pulse>
     61c:	30 91 1a 38 	lds	r19, 0x381A	; 0x80381a <time_of_last_pulse+0x1>
     620:	62 1b       	sub	r22, r18
     622:	73 0b       	sbc	r23, r19
     624:	60 93 17 38 	sts	0x3817, r22	; 0x803817 <time_since_last_pulse>
     628:	70 93 18 38 	sts	0x3818, r23	; 0x803818 <time_since_last_pulse+0x1>
		
		if(time_since_last_pulse >= ideal_time_between_pulses){
     62c:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <ideal_time_between_pulses>
     630:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <ideal_time_between_pulses+0x1>
     634:	68 17       	cp	r22, r24
     636:	79 07       	cpc	r23, r25
     638:	a0 f0       	brcs	.+40     	; 0x662 <tinyPulse_update_potential+0x62>
			// This isn't actually a button press. You could have a separate variable for this, but it seems unnecessary.
			potential += BUTTON_PRESS_REACTION;
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	40 ed       	ldi	r20, 0xD0	; 208
     640:	51 e4       	ldi	r21, 0x41	; 65
     642:	c7 01       	movw	r24, r14
     644:	b6 01       	movw	r22, r12
     646:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__addsf3>
     64a:	6b 01       	movw	r12, r22
     64c:	7c 01       	movw	r14, r24
			time_of_last_pulse = tinyTime_now();			
     64e:	0e 94 4c 03 	call	0x698	; 0x698 <tinyTime_now>
     652:	60 93 19 38 	sts	0x3819, r22	; 0x803819 <time_of_last_pulse>
     656:	70 93 1a 38 	sts	0x381A, r23	; 0x80381a <time_of_last_pulse+0x1>
     65a:	80 93 1b 38 	sts	0x381B, r24	; 0x80381b <time_of_last_pulse+0x2>
     65e:	90 93 1c 38 	sts	0x381C, r25	; 0x80381c <time_of_last_pulse+0x3>
		}
	}
	return potential;
}
     662:	c7 01       	movw	r24, r14
     664:	b6 01       	movw	r22, r12
     666:	ff 90       	pop	r15
     668:	ef 90       	pop	r14
     66a:	df 90       	pop	r13
     66c:	cf 90       	pop	r12
     66e:	08 95       	ret

00000670 <tinyTime_counter_increment>:
If the Interrupt Service Routine is clocked by a crystal oscillator
it gives a very precise timer-counter.
*/
void tinyTime_counter_increment(void)
{
	time_counter++;
     670:	80 91 1e 38 	lds	r24, 0x381E	; 0x80381e <time_counter>
     674:	90 91 1f 38 	lds	r25, 0x381F	; 0x80381f <time_counter+0x1>
     678:	a0 91 20 38 	lds	r26, 0x3820	; 0x803820 <time_counter+0x2>
     67c:	b0 91 21 38 	lds	r27, 0x3821	; 0x803821 <time_counter+0x3>
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	a1 1d       	adc	r26, r1
     684:	b1 1d       	adc	r27, r1
     686:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <time_counter>
     68a:	90 93 1f 38 	sts	0x381F, r25	; 0x80381f <time_counter+0x1>
     68e:	a0 93 20 38 	sts	0x3820, r26	; 0x803820 <time_counter+0x2>
     692:	b0 93 21 38 	sts	0x3821, r27	; 0x803821 <time_counter+0x3>
     696:	08 95       	ret

00000698 <tinyTime_now>:
/*
This function is callable by external libraries to give them the counted time so far.
*/
uint32_t tinyTime_now(void)
{
	return time_counter;
     698:	60 91 1e 38 	lds	r22, 0x381E	; 0x80381e <time_counter>
     69c:	70 91 1f 38 	lds	r23, 0x381F	; 0x80381f <time_counter+0x1>
     6a0:	80 91 20 38 	lds	r24, 0x3820	; 0x803820 <time_counter+0x2>
     6a4:	90 91 21 38 	lds	r25, 0x3821	; 0x803821 <time_counter+0x3>
     6a8:	08 95       	ret

000006aa <main>:

int main(void)
{	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     6aa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <atmel_start_init>
	For some reason, the code below does not produce the desired results, but we suspect that since 35 is 00100011 in binary, this will give the desired settings
	
	VREF.CTRLA = VREF_ADC0REFSEL_2V5_gc;
	VREF.CTRLA = VREF_DAC0REFSEL_4V34_gc;
	*/
	VREF.CTRLA = 35;
     6ae:	83 e2       	ldi	r24, 0x23	; 35
     6b0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	 
	while (1)
	{
		// We don't want to update the neuron too often because of various reasons. The tinyISR_getflag is set every ms, and so the loop is only run once every ms.  
		if(tinyISR_getflag())
     6b4:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <tinyISR_getflag>
     6b8:	88 23       	and	r24, r24
     6ba:	e1 f3       	breq	.-8      	; 0x6b4 <main+0xa>
		{			
			
			if(tinyCharge_is_connected_to_charger()){
     6bc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <tinyCharge_is_connected_to_charger>
     6c0:	88 23       	and	r24, r24
     6c2:	59 f0       	breq	.+22     	; 0x6da <main+0x30>
				// Charge loop
				
				if(tinyCharge_is_fully_charged()){
     6c4:	0e 94 54 02 	call	0x4a8	; 0x4a8 <tinyCharge_is_fully_charged>
     6c8:	88 23       	and	r24, r24
     6ca:	21 f0       	breq	.+8      	; 0x6d4 <main+0x2a>
					tinyLED_set_color(OUT_LED, CHARGING_DONE_COLOR);
     6cc:	63 e0       	ldi	r22, 0x03	; 3
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <tinyLED_set_color>
				}				
				// We check the Dendrites in order to detect if we have stopped charging
				tinyDendrite_update_signals();
     6d4:	0e 94 5e 07 	call	0xebc	; 0xebc <tinyDendrite_update_signals>
     6d8:	0d c0       	rjmp	.+26     	; 0x6f4 <main+0x4a>
			}
			else{
				// Main loop			
				
				// Set LED
				if(tinyLED_get_color(OUT_LED) == OFF){
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	0e 94 08 04 	call	0x810	; 0x810 <tinyLED_get_color>
     6e0:	81 11       	cpse	r24, r1
     6e2:	04 c0       	rjmp	.+8      	; 0x6ec <main+0x42>
					tinyLED_set_color_mode(OUT_LED, PING_COLOR, PING);
     6e4:	43 e0       	ldi	r20, 0x03	; 3
     6e6:	62 e0       	ldi	r22, 0x02	; 2
     6e8:	0e 94 10 04 	call	0x820	; 0x820 <tinyLED_set_color_mode>
				}
				
				// Update button	
				tinyButton_update();
     6ec:	0e 94 8c 03 	call	0x718	; 0x718 <tinyButton_update>
				
				// Update the potential (This is where most of the important stuff happens)
				tinyPotential_update();
     6f0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <tinyPotential_update>
			}
			// Update LED
			tinyLED_update();
     6f4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <tinyLED_update>
				
			// Switch transistors
			tinyCharge_set_transistors();
     6f8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <tinyCharge_set_transistors>
			
			// Prepare for next cycle
			tinyISR_setflag(false);
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	0e 94 57 08 	call	0x10ae	; 0x10ae <tinyISR_setflag>
			tinyDebugger_send_uint32("time", tinyTime_now());
     702:	0e 94 4c 03 	call	0x698	; 0x698 <tinyTime_now>
     706:	ab 01       	movw	r20, r22
     708:	bc 01       	movw	r22, r24
     70a:	8c e2       	ldi	r24, 0x2C	; 44
     70c:	94 ea       	ldi	r25, 0xA4	; 164
     70e:	0e 94 81 02 	call	0x502	; 0x502 <tinyDebugger_send_uint32>
			tinyDebugger_end_line();
     712:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <tinyDebugger_end_line>
     716:	ce cf       	rjmp	.-100    	; 0x6b4 <main+0xa>

00000718 <tinyButton_update>:
/*
If the button has been let go, we change button_press to true. This only lasts one cycle, before it is set to false again.
If the button is held down for longer than PULSEMODE_BUTTON_PRESS_TIME, we toggle the pulse mode state.
*/
void tinyButton_update(void)
{
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
	button_press = false;
     720:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <button_press>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return VPORTC.IN & (1 << pin);
     724:	8a b1       	in	r24, 0x0a	; 10
	_Bool button_is_pushed_down = !BUTTON_PIN_get_level(); // The digital port will be read as low if the button is pushed down.
     726:	d1 e0       	ldi	r29, 0x01	; 1
     728:	c8 2f       	mov	r28, r24
     72a:	c4 70       	andi	r28, 0x04	; 4
     72c:	82 fd       	sbrc	r24, 2
     72e:	d0 e0       	ldi	r29, 0x00	; 0

	if (button_is_pushed_down && !button_was_pushed_down)
     730:	c1 11       	cpse	r28, r1
     732:	36 c0       	rjmp	.+108    	; 0x7a0 <tinyButton_update+0x88>
     734:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <button_was_pushed_down>
     738:	81 11       	cpse	r24, r1
     73a:	0e c0       	rjmp	.+28     	; 0x758 <tinyButton_update+0x40>
	{
		tinyButton_start_time = tinyTime_now();
     73c:	0e 94 4c 03 	call	0x698	; 0x698 <tinyTime_now>
     740:	60 93 22 38 	sts	0x3822, r22	; 0x803822 <tinyButton_start_time>
     744:	70 93 23 38 	sts	0x3823, r23	; 0x803823 <tinyButton_start_time+0x1>
     748:	80 93 24 38 	sts	0x3824, r24	; 0x803824 <tinyButton_start_time+0x2>
     74c:	90 93 25 38 	sts	0x3825, r25	; 0x803825 <tinyButton_start_time+0x3>
	}
	if (button_is_pushed_down && button_was_pushed_down)
     750:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <button_was_pushed_down>
     754:	88 23       	and	r24, r24
     756:	69 f1       	breq	.+90     	; 0x7b2 <tinyButton_update+0x9a>
	{
		if ((tinyTime_now() - tinyButton_start_time) > PULSEMODE_BUTTON_PRESS_TIME)
     758:	0e 94 4c 03 	call	0x698	; 0x698 <tinyTime_now>
     75c:	00 91 22 38 	lds	r16, 0x3822	; 0x803822 <tinyButton_start_time>
     760:	10 91 23 38 	lds	r17, 0x3823	; 0x803823 <tinyButton_start_time+0x1>
     764:	20 91 24 38 	lds	r18, 0x3824	; 0x803824 <tinyButton_start_time+0x2>
     768:	30 91 25 38 	lds	r19, 0x3825	; 0x803825 <tinyButton_start_time+0x3>
     76c:	60 1b       	sub	r22, r16
     76e:	71 0b       	sbc	r23, r17
     770:	82 0b       	sbc	r24, r18
     772:	93 0b       	sbc	r25, r19
     774:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__floatunsisf>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	48 ec       	ldi	r20, 0xC8	; 200
     77e:	52 e4       	ldi	r21, 0x42	; 66
     780:	0e 94 32 0b 	call	0x1664	; 0x1664 <__gesf2>
     784:	18 16       	cp	r1, r24
     786:	64 f4       	brge	.+24     	; 0x7a0 <tinyButton_update+0x88>
		{
			tinyPulse_toggle_pulse_mode();
     788:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <tinyPulse_toggle_pulse_mode>
			tinyButton_start_time = tinyTime_now();
     78c:	0e 94 4c 03 	call	0x698	; 0x698 <tinyTime_now>
     790:	60 93 22 38 	sts	0x3822, r22	; 0x803822 <tinyButton_start_time>
     794:	70 93 23 38 	sts	0x3823, r23	; 0x803823 <tinyButton_start_time+0x1>
     798:	80 93 24 38 	sts	0x3824, r24	; 0x803824 <tinyButton_start_time+0x2>
     79c:	90 93 25 38 	sts	0x3825, r25	; 0x803825 <tinyButton_start_time+0x3>
		}
	}
	if (!button_is_pushed_down && button_was_pushed_down)
     7a0:	cc 23       	and	r28, r28
     7a2:	39 f0       	breq	.+14     	; 0x7b2 <tinyButton_update+0x9a>
     7a4:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <button_was_pushed_down>
     7a8:	88 23       	and	r24, r24
     7aa:	19 f0       	breq	.+6      	; 0x7b2 <tinyButton_update+0x9a>
	{
		button_press = true;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <button_press>
	}
	button_was_pushed_down = button_is_pushed_down;
     7b2:	d0 93 27 38 	sts	0x3827, r29	; 0x803827 <button_was_pushed_down>
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	08 95       	ret

000007c0 <tinyButton_update_potential>:

double tinyButton_update_potential(double potential){
	if(button_press){
     7c0:	20 91 26 38 	lds	r18, 0x3826	; 0x803826 <button_press>
     7c4:	22 23       	and	r18, r18
     7c6:	31 f0       	breq	.+12     	; 0x7d4 <tinyButton_update_potential+0x14>
		potential += BUTTON_PRESS_REACTION;
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	40 ed       	ldi	r20, 0xD0	; 208
     7ce:	51 e4       	ldi	r21, 0x41	; 65
     7d0:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__addsf3>
	}
	return potential;
}
     7d4:	08 95       	ret

000007d6 <tinyLED_SPIWriteByte>:
Function used to send a byte over SPI, which in turn gets
translated to the bit-sequence required by the LEDs over the CCL.
*/
static void tinyLED_SPIWriteByte(uint8_t byte)
{
	SPI0.INTFLAGS = SPI0_INTFLAGS; // clear the write collision flag to allow writing
     7d6:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
     7da:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
	TCA0.SINGLE.CNT = 0; // reset TCA counter register to ensure the first rising edge of the PWM is predictable
     7de:	e0 e0       	ldi	r30, 0x00	; 0
     7e0:	fa e0       	ldi	r31, 0x0A	; 10
     7e2:	10 a2       	std	Z+32, r1	; 0x20
     7e4:	11 a2       	std	Z+33, r1	; 0x21
	
	// start TCA
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 1 << TCA_SPLIT_ENABLE_bp;
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	90 83       	st	Z, r25
	SPI0_DATA = byte;
     7ea:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>

	while((SPI0.INTFLAGS & SPI_RXCIE_bm) == 0){} // wait for transfer to complete
     7ee:	e0 e2       	ldi	r30, 0x20	; 32
     7f0:	f8 e0       	ldi	r31, 0x08	; 8
     7f2:	83 81       	ldd	r24, Z+3	; 0x03
     7f4:	88 23       	and	r24, r24
     7f6:	ec f7       	brge	.-6      	; 0x7f2 <tinyLED_SPIWriteByte+0x1c>
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
     7f8:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     7fc:	08 95       	ret

000007fe <tinyLED_set_color>:
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color_mode(uint8_t LED_id, enum Colors color, enum ColorModes mode)
{
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_colors[LED_id] = setting;
     7fe:	e8 2f       	mov	r30, r24
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	ee 0f       	add	r30, r30
     804:	ff 1f       	adc	r31, r31
     806:	ef 59       	subi	r30, 0x9F	; 159
     808:	f7 4c       	sbci	r31, 0xC7	; 199
     80a:	60 83       	st	Z, r22
     80c:	11 82       	std	Z+1, r1	; 0x01
     80e:	08 95       	ret

00000810 <tinyLED_get_color>:
	tinyLED_set_color_mode(LED_id, color, STABLE);
}

enum Colors tinyLED_get_color(uint8_t LED_id)
{
	return tinyLED_colors[LED_id].color;
     810:	e8 2f       	mov	r30, r24
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	ee 0f       	add	r30, r30
     816:	ff 1f       	adc	r31, r31
     818:	ef 59       	subi	r30, 0x9F	; 159
     81a:	f7 4c       	sbci	r31, 0xC7	; 199
}
     81c:	80 81       	ld	r24, Z
     81e:	08 95       	ret

00000820 <tinyLED_set_color_mode>:
changes the values in the variables stored in the LED-array.
*/
void tinyLED_set_color_mode(uint8_t LED_id, enum Colors color, enum ColorModes mode)
{
	struct ColorSetting setting = {.color=color, .mode=mode};
	tinyLED_colors[LED_id] = setting;
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	fc 01       	movw	r30, r24
     824:	ee 0f       	add	r30, r30
     826:	ff 1f       	adc	r31, r31
     828:	ef 59       	subi	r30, 0x9F	; 159
     82a:	f7 4c       	sbci	r31, 0xC7	; 199
     82c:	60 83       	st	Z, r22
     82e:	41 83       	std	Z+1, r20	; 0x01
	if (mode == FLASH_ONCE)
     830:	44 30       	cpi	r20, 0x04	; 4
     832:	29 f4       	brne	.+10     	; 0x83e <tinyLED_set_color_mode+0x1e>
	{
		tinyLED_flash_once_time[LED_id] = 1000*FLASH_TIME;
     834:	fc 01       	movw	r30, r24
     836:	e7 5a       	subi	r30, 0xA7	; 167
     838:	f7 4c       	sbci	r31, 0xC7	; 199
     83a:	2a e0       	ldi	r18, 0x0A	; 10
     83c:	20 83       	st	Z, r18
     83e:	08 95       	ret

00000840 <tinyLED_RGB_Color_Compare>:
	}
	return rgb_color;
			
};

_Bool tinyLED_RGB_Color_Compare(struct RGB_Color* a, struct RGB_Color* b){
     840:	dc 01       	movw	r26, r24
     842:	fb 01       	movw	r30, r22
	for (int i=0; i<NUMBER_OF_LEDS; i++)
	{
		if(!(a[i].red==b[i].red && a[i].green==b[i].green && a[i].blue==b[i].blue)){
     844:	9c 91       	ld	r25, X
     846:	80 81       	ld	r24, Z
     848:	98 13       	cpse	r25, r24
     84a:	20 c0       	rjmp	.+64     	; 0x88c <tinyLED_RGB_Color_Compare+0x4c>
     84c:	11 96       	adiw	r26, 0x01	; 1
     84e:	9c 91       	ld	r25, X
     850:	11 97       	sbiw	r26, 0x01	; 1
     852:	81 81       	ldd	r24, Z+1	; 0x01
     854:	98 13       	cpse	r25, r24
     856:	1c c0       	rjmp	.+56     	; 0x890 <tinyLED_RGB_Color_Compare+0x50>
     858:	12 96       	adiw	r26, 0x02	; 2
     85a:	9c 91       	ld	r25, X
     85c:	12 97       	sbiw	r26, 0x02	; 2
     85e:	82 81       	ldd	r24, Z+2	; 0x02
     860:	98 13       	cpse	r25, r24
     862:	18 c0       	rjmp	.+48     	; 0x894 <tinyLED_RGB_Color_Compare+0x54>
     864:	13 96       	adiw	r26, 0x03	; 3
     866:	9c 91       	ld	r25, X
     868:	13 97       	sbiw	r26, 0x03	; 3
     86a:	83 81       	ldd	r24, Z+3	; 0x03
     86c:	98 13       	cpse	r25, r24
     86e:	14 c0       	rjmp	.+40     	; 0x898 <tinyLED_RGB_Color_Compare+0x58>
     870:	14 96       	adiw	r26, 0x04	; 4
     872:	9c 91       	ld	r25, X
     874:	14 97       	sbiw	r26, 0x04	; 4
     876:	84 81       	ldd	r24, Z+4	; 0x04
     878:	98 13       	cpse	r25, r24
     87a:	10 c0       	rjmp	.+32     	; 0x89c <tinyLED_RGB_Color_Compare+0x5c>
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	15 96       	adiw	r26, 0x05	; 5
     880:	2c 91       	ld	r18, X
     882:	95 81       	ldd	r25, Z+5	; 0x05
     884:	29 17       	cp	r18, r25
     886:	59 f0       	breq	.+22     	; 0x89e <tinyLED_RGB_Color_Compare+0x5e>
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	08 95       	ret
			return false;
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	08 95       	ret
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	08 95       	ret
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	08 95       	ret
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	08 95       	ret
     89c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
     89e:	08 95       	ret

000008a0 <tinyLED_update>:
/*
function to write the current LED-array on to the LEDs and
effectively update the values stored in the LEDs to the values stored in the MCU.
*/
void tinyLED_update(void)
{
     8a0:	2f 92       	push	r2
     8a2:	3f 92       	push	r3
     8a4:	4f 92       	push	r4
     8a6:	5f 92       	push	r5
     8a8:	6f 92       	push	r6
     8aa:	7f 92       	push	r7
     8ac:	8f 92       	push	r8
     8ae:	9f 92       	push	r9
     8b0:	af 92       	push	r10
     8b2:	bf 92       	push	r11
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	6f 97       	sbiw	r28, 0x1f	; 31
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	de bf       	out	0x3e, r29	; 62
			
	uint32_t now = tinyTime_now();
     8ce:	0e 94 4c 03 	call	0x698	; 0x698 <tinyTime_now>
     8d2:	6b 01       	movw	r12, r22
     8d4:	7c 01       	movw	r14, r24
	double sinValue = 1+sin((double)now/(100*M_PI/SWING_RATE));
     8d6:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__floatunsisf>
     8da:	22 ed       	ldi	r18, 0xD2	; 210
     8dc:	33 e5       	ldi	r19, 0x53	; 83
     8de:	4b ef       	ldi	r20, 0xFB	; 251
     8e0:	51 e4       	ldi	r21, 0x41	; 65
     8e2:	0e 94 5f 09 	call	0x12be	; 0x12be <__divsf3>
     8e6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <sin>
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	40 e8       	ldi	r20, 0x80	; 128
     8f0:	5f e3       	ldi	r21, 0x3F	; 63
     8f2:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__addsf3>
     8f6:	69 87       	std	Y+9, r22	; 0x09
     8f8:	7a 87       	std	Y+10, r23	; 0x0a
     8fa:	8b 87       	std	Y+11, r24	; 0x0b
     8fc:	9c 87       	std	Y+12, r25	; 0x0c
	_Bool flash_on = now%(uint32_t)(1000/FLASH_RATE)   <   500/FLASH_RATE;
     8fe:	c7 01       	movw	r24, r14
     900:	b6 01       	movw	r22, r12
     902:	22 e3       	ldi	r18, 0x32	; 50
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
     90e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__floatunsisf>
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	48 ec       	ldi	r20, 0xC8	; 200
     918:	51 e4       	ldi	r21, 0x41	; 65
     91a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__cmpsf2>
     91e:	88 1f       	adc	r24, r24
     920:	88 27       	eor	r24, r24
     922:	88 1f       	adc	r24, r24
     924:	8d 87       	std	Y+13, r24	; 0x0d
	_Bool ping_on = now%(uint32_t)(1000/PING_RATE)   <   1000*FLASH_TIME;
     926:	c7 01       	movw	r24, r14
     928:	b6 01       	movw	r22, r12
     92a:	24 ef       	ldi	r18, 0xF4	; 244
     92c:	31 e0       	ldi	r19, 0x01	; 1
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
     936:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__floatunsisf>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e2       	ldi	r20, 0x20	; 32
     940:	51 e4       	ldi	r21, 0x41	; 65
     942:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__cmpsf2>
     946:	88 1f       	adc	r24, r24
     948:	88 27       	eor	r24, r24
     94a:	88 1f       	adc	r24, r24
     94c:	0f 2e       	mov	r0, r31
     94e:	f1 e6       	ldi	r31, 0x61	; 97
     950:	2f 2e       	mov	r2, r31
     952:	f8 e3       	ldi	r31, 0x38	; 56
     954:	3f 2e       	mov	r3, r31
     956:	f0 2d       	mov	r31, r0
     958:	9e 01       	movw	r18, r28
     95a:	2f 5f       	subi	r18, 0xFF	; 255
     95c:	3f 4f       	sbci	r19, 0xFF	; 255
     95e:	09 e5       	ldi	r16, 0x59	; 89
     960:	18 e3       	ldi	r17, 0x38	; 56
     962:	0f 2e       	mov	r0, r31
     964:	f5 e6       	ldi	r31, 0x65	; 101
     966:	cf 2e       	mov	r12, r31
     968:	f8 e3       	ldi	r31, 0x38	; 56
     96a:	df 2e       	mov	r13, r31
     96c:	f0 2d       	mov	r31, r0
     96e:	49 01       	movw	r8, r18
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
				break;
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     970:	48 2e       	mov	r4, r24
     972:	51 2c       	mov	r5, r1
     974:	61 2c       	mov	r6, r1
     976:	71 2c       	mov	r7, r1
     978:	2e 87       	std	Y+14, r18	; 0x0e
     97a:	3f 87       	std	Y+15, r19	; 0x0f
     97c:	f1 01       	movw	r30, r2
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc | 0 << TCA_SPLIT_ENABLE_bp; //Stop TCA
}

static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
     97e:	80 81       	ld	r24, Z
     980:	82 30       	cpi	r24, 0x02	; 2
     982:	a1 f0       	breq	.+40     	; 0x9ac <tinyLED_update+0x10c>
     984:	18 f4       	brcc	.+6      	; 0x98c <tinyLED_update+0xec>
     986:	81 30       	cpi	r24, 0x01	; 1
     988:	31 f0       	breq	.+12     	; 0x996 <tinyLED_update+0xf6>
     98a:	21 c0       	rjmp	.+66     	; 0x9ce <tinyLED_update+0x12e>
     98c:	83 30       	cpi	r24, 0x03	; 3
     98e:	39 f0       	breq	.+14     	; 0x99e <tinyLED_update+0xfe>
     990:	84 30       	cpi	r24, 0x04	; 4
     992:	99 f0       	breq	.+38     	; 0x9ba <tinyLED_update+0x11a>
     994:	1c c0       	rjmp	.+56     	; 0x9ce <tinyLED_update+0x12e>
	{
		case OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
			break;
		case RED:
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 0, 0};
     996:	f1 2c       	mov	r15, r1
     998:	e1 2c       	mov	r14, r1
     99a:	69 e1       	ldi	r22, 0x19	; 25
     99c:	1b c0       	rjmp	.+54     	; 0x9d4 <tinyLED_update+0x134>
			break;
		case GREEN:
			rgb_color = (struct RGB_Color){0, 255*LED_BRIGHTNESS, 0};
     99e:	f1 2c       	mov	r15, r1
     9a0:	0f 2e       	mov	r0, r31
     9a2:	f9 e1       	ldi	r31, 0x19	; 25
     9a4:	ef 2e       	mov	r14, r31
     9a6:	f0 2d       	mov	r31, r0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	14 c0       	rjmp	.+40     	; 0x9d4 <tinyLED_update+0x134>
			break;
		case BLUE:
			rgb_color = (struct RGB_Color){0, 0, 255*LED_BRIGHTNESS};
     9ac:	0f 2e       	mov	r0, r31
     9ae:	f9 e1       	ldi	r31, 0x19	; 25
     9b0:	ff 2e       	mov	r15, r31
     9b2:	f0 2d       	mov	r31, r0
     9b4:	e1 2c       	mov	r14, r1
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	0d c0       	rjmp	.+26     	; 0x9d4 <tinyLED_update+0x134>
			// Should the /3 be there? This requires testing.
			// After testing, findings were that at 0.1 brightness, one would see the three LEDs instead of one white led
			// We try with /2 instead.
			// We find that the best results come from not dividing by anything. At leasts in the lower brightness settings, and that
			// is where we suspect it will be most of the time.
			rgb_color = (struct RGB_Color){255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS, 255*LED_BRIGHTNESS};
     9ba:	0f 2e       	mov	r0, r31
     9bc:	f9 e1       	ldi	r31, 0x19	; 25
     9be:	ff 2e       	mov	r15, r31
     9c0:	f0 2d       	mov	r31, r0
     9c2:	0f 2e       	mov	r0, r31
     9c4:	f9 e1       	ldi	r31, 0x19	; 25
     9c6:	ef 2e       	mov	r14, r31
     9c8:	f0 2d       	mov	r31, r0
     9ca:	69 e1       	ldi	r22, 0x19	; 25
     9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <tinyLED_update+0x134>
static struct RGB_Color tinyLED_enum_to_RGB_Color(enum Colors color){
	struct RGB_Color rgb_color;
	switch(color)
	{
		case OFF:
			rgb_color = (struct RGB_Color){0, 0, 0};
     9ce:	f1 2c       	mov	r15, r1
     9d0:	e1 2c       	mov	r14, r1
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	8f 82       	std	Y+7, r8	; 0x07
     9d6:	98 86       	std	Y+8, r9	; 0x08
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
	{		
		// Convert enum to RGB_Color
		rgb_colors[i] = tinyLED_enum_to_RGB_Color(tinyLED_colors[i].color);
     9d8:	d4 01       	movw	r26, r8
     9da:	6c 93       	st	X, r22
     9dc:	11 96       	adiw	r26, 0x01	; 1
     9de:	ec 92       	st	X, r14
     9e0:	11 97       	sbiw	r26, 0x01	; 1
     9e2:	12 96       	adiw	r26, 0x02	; 2
     9e4:	fc 92       	st	X, r15
			
		// Adjust colors according to mode
		switch(tinyLED_colors[i].mode)
     9e6:	81 81       	ldd	r24, Z+1	; 0x01
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	d9 f0       	breq	.+54     	; 0xa22 <tinyLED_update+0x182>
     9ec:	18 f4       	brcc	.+6      	; 0x9f4 <tinyLED_update+0x154>
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	41 f0       	breq	.+16     	; 0xa02 <tinyLED_update+0x162>
     9f2:	03 c1       	rjmp	.+518    	; 0xbfa <tinyLED_update+0x35a>
     9f4:	83 30       	cpi	r24, 0x03	; 3
     9f6:	09 f4       	brne	.+2      	; 0x9fa <tinyLED_update+0x15a>
     9f8:	45 c0       	rjmp	.+138    	; 0xa84 <tinyLED_update+0x1e4>
     9fa:	84 30       	cpi	r24, 0x04	; 4
     9fc:	09 f4       	brne	.+2      	; 0xa00 <tinyLED_update+0x160>
     9fe:	c0 c0       	rjmp	.+384    	; 0xb80 <tinyLED_update+0x2e0>
     a00:	fc c0       	rjmp	.+504    	; 0xbfa <tinyLED_update+0x35a>
		{
			case STABLE:
				break;
			case FLASH:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*flash_on, rgb_colors[i].green*flash_on, rgb_colors[i].blue*flash_on};
     a02:	bd 85       	ldd	r27, Y+13	; 0x0d
     a04:	b6 9f       	mul	r27, r22
     a06:	60 2d       	mov	r22, r0
     a08:	11 24       	eor	r1, r1
     a0a:	ef 81       	ldd	r30, Y+7	; 0x07
     a0c:	f8 85       	ldd	r31, Y+8	; 0x08
     a0e:	60 83       	st	Z, r22
     a10:	be 9d       	mul	r27, r14
     a12:	e0 2c       	mov	r14, r0
     a14:	11 24       	eor	r1, r1
     a16:	e1 82       	std	Z+1, r14	; 0x01
     a18:	bf 9d       	mul	r27, r15
     a1a:	f0 2c       	mov	r15, r0
     a1c:	11 24       	eor	r1, r1
     a1e:	f2 82       	std	Z+2, r15	; 0x02
				break;
     a20:	ec c0       	rjmp	.+472    	; 0xbfa <tinyLED_update+0x35a>
			case SWING:
				rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__floatsisf>
     a2c:	29 85       	ldd	r18, Y+9	; 0x09
     a2e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a30:	4b 85       	ldd	r20, Y+11	; 0x0b
     a32:	5c 85       	ldd	r21, Y+12	; 0x0c
     a34:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3>
     a38:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__fixunssfsi>
     a3c:	d4 01       	movw	r26, r8
     a3e:	6c 93       	st	X, r22
     a40:	6e 2d       	mov	r22, r14
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__floatsisf>
     a4c:	29 85       	ldd	r18, Y+9	; 0x09
     a4e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a50:	4b 85       	ldd	r20, Y+11	; 0x0b
     a52:	5c 85       	ldd	r21, Y+12	; 0x0c
     a54:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3>
     a58:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__fixunssfsi>
     a5c:	f4 01       	movw	r30, r8
     a5e:	61 83       	std	Z+1, r22	; 0x01
     a60:	6f 2d       	mov	r22, r15
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__floatsisf>
     a6c:	29 85       	ldd	r18, Y+9	; 0x09
     a6e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a70:	4b 85       	ldd	r20, Y+11	; 0x0b
     a72:	5c 85       	ldd	r21, Y+12	; 0x0c
     a74:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3>
     a78:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__fixunssfsi>
     a7c:	d4 01       	movw	r26, r8
     a7e:	12 96       	adiw	r26, 0x02	; 2
     a80:	6c 93       	st	X, r22
				break;
     a82:	bb c0       	rjmp	.+374    	; 0xbfa <tinyLED_update+0x35a>
			case PING:
				// in the line below, fmin will either return 1 or 0, so each rgb color is either 0 or 255*PING_BRIGHTNESS
				rgb_colors[i] = (struct RGB_Color){255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].red)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].green)*ping_on, 255*PING_BRIGHTNESS*fmin(1,rgb_colors[i].blue)*ping_on};
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__floatunsisf>
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	80 e8       	ldi	r24, 0x80	; 128
     a98:	9f e3       	ldi	r25, 0x3F	; 63
     a9a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fmin>
     a9e:	6c 8b       	std	Y+20, r22	; 0x14
     aa0:	7d 8b       	std	Y+21, r23	; 0x15
     aa2:	8e 8b       	std	Y+22, r24	; 0x16
     aa4:	9f 8b       	std	Y+23, r25	; 0x17
     aa6:	c3 01       	movw	r24, r6
     aa8:	b2 01       	movw	r22, r4
     aaa:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__floatsisf>
     aae:	68 8b       	std	Y+16, r22	; 0x10
     ab0:	79 8b       	std	Y+17, r23	; 0x11
     ab2:	8a 8b       	std	Y+18, r24	; 0x12
     ab4:	9b 8b       	std	Y+19, r25	; 0x13
     ab6:	6e 2d       	mov	r22, r14
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__floatunsisf>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	80 e8       	ldi	r24, 0x80	; 128
     acc:	9f e3       	ldi	r25, 0x3F	; 63
     ace:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fmin>
     ad2:	68 8f       	std	Y+24, r22	; 0x18
     ad4:	79 8f       	std	Y+25, r23	; 0x19
     ad6:	8a 8f       	std	Y+26, r24	; 0x1a
     ad8:	9b 8f       	std	Y+27, r25	; 0x1b
     ada:	6f 2d       	mov	r22, r15
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__floatunsisf>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	80 e8       	ldi	r24, 0x80	; 128
     af0:	9f e3       	ldi	r25, 0x3F	; 63
     af2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fmin>
     af6:	6c 8f       	std	Y+28, r22	; 0x1c
     af8:	7d 8f       	std	Y+29, r23	; 0x1d
     afa:	8e 8f       	std	Y+30, r24	; 0x1e
     afc:	9f 8f       	std	Y+31, r25	; 0x1f
     afe:	23 e3       	ldi	r18, 0x33	; 51
     b00:	33 e3       	ldi	r19, 0x33	; 51
     b02:	43 ea       	ldi	r20, 0xA3	; 163
     b04:	50 e4       	ldi	r21, 0x40	; 64
     b06:	6c 89       	ldd	r22, Y+20	; 0x14
     b08:	7d 89       	ldd	r23, Y+21	; 0x15
     b0a:	8e 89       	ldd	r24, Y+22	; 0x16
     b0c:	9f 89       	ldd	r25, Y+23	; 0x17
     b0e:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3>
     b12:	28 89       	ldd	r18, Y+16	; 0x10
     b14:	39 89       	ldd	r19, Y+17	; 0x11
     b16:	4a 89       	ldd	r20, Y+18	; 0x12
     b18:	5b 89       	ldd	r21, Y+19	; 0x13
     b1a:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3>
     b1e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__fixunssfsi>
     b22:	ef 81       	ldd	r30, Y+7	; 0x07
     b24:	f8 85       	ldd	r31, Y+8	; 0x08
     b26:	60 83       	st	Z, r22
     b28:	23 e3       	ldi	r18, 0x33	; 51
     b2a:	33 e3       	ldi	r19, 0x33	; 51
     b2c:	43 ea       	ldi	r20, 0xA3	; 163
     b2e:	50 e4       	ldi	r21, 0x40	; 64
     b30:	68 8d       	ldd	r22, Y+24	; 0x18
     b32:	79 8d       	ldd	r23, Y+25	; 0x19
     b34:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b36:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b38:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3>
     b3c:	28 89       	ldd	r18, Y+16	; 0x10
     b3e:	39 89       	ldd	r19, Y+17	; 0x11
     b40:	4a 89       	ldd	r20, Y+18	; 0x12
     b42:	5b 89       	ldd	r21, Y+19	; 0x13
     b44:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3>
     b48:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__fixunssfsi>
     b4c:	af 81       	ldd	r26, Y+7	; 0x07
     b4e:	b8 85       	ldd	r27, Y+8	; 0x08
     b50:	11 96       	adiw	r26, 0x01	; 1
     b52:	6c 93       	st	X, r22
     b54:	23 e3       	ldi	r18, 0x33	; 51
     b56:	33 e3       	ldi	r19, 0x33	; 51
     b58:	43 ea       	ldi	r20, 0xA3	; 163
     b5a:	50 e4       	ldi	r21, 0x40	; 64
     b5c:	6c 8d       	ldd	r22, Y+28	; 0x1c
     b5e:	7d 8d       	ldd	r23, Y+29	; 0x1d
     b60:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b62:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b64:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3>
     b68:	28 89       	ldd	r18, Y+16	; 0x10
     b6a:	39 89       	ldd	r19, Y+17	; 0x11
     b6c:	4a 89       	ldd	r20, Y+18	; 0x12
     b6e:	5b 89       	ldd	r21, Y+19	; 0x13
     b70:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3>
     b74:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__fixunssfsi>
     b78:	ef 81       	ldd	r30, Y+7	; 0x07
     b7a:	f8 85       	ldd	r31, Y+8	; 0x08
     b7c:	62 83       	std	Z+2, r22	; 0x02
				break;
     b7e:	3d c0       	rjmp	.+122    	; 0xbfa <tinyLED_update+0x35a>
			case FLASH_ONCE:
				if(tinyLED_flash_once_time[i]>0){
     b80:	d8 01       	movw	r26, r16
     b82:	bc 90       	ld	r11, X
     b84:	bb 20       	and	r11, r11
     b86:	c1 f1       	breq	.+112    	; 0xbf8 <tinyLED_update+0x358>
					rgb_colors[i] = (struct RGB_Color){rgb_colors[i].red*sinValue, rgb_colors[i].green*sinValue, rgb_colors[i].blue*sinValue};
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__floatsisf>
     b92:	29 85       	ldd	r18, Y+9	; 0x09
     b94:	3a 85       	ldd	r19, Y+10	; 0x0a
     b96:	4b 85       	ldd	r20, Y+11	; 0x0b
     b98:	5c 85       	ldd	r21, Y+12	; 0x0c
     b9a:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3>
     b9e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__fixunssfsi>
     ba2:	ef 81       	ldd	r30, Y+7	; 0x07
     ba4:	f8 85       	ldd	r31, Y+8	; 0x08
     ba6:	60 83       	st	Z, r22
     ba8:	6e 2d       	mov	r22, r14
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__floatsisf>
     bb4:	29 85       	ldd	r18, Y+9	; 0x09
     bb6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bb8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bba:	5c 85       	ldd	r21, Y+12	; 0x0c
     bbc:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3>
     bc0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__fixunssfsi>
     bc4:	af 81       	ldd	r26, Y+7	; 0x07
     bc6:	b8 85       	ldd	r27, Y+8	; 0x08
     bc8:	11 96       	adiw	r26, 0x01	; 1
     bca:	6c 93       	st	X, r22
     bcc:	6f 2d       	mov	r22, r15
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__floatsisf>
     bd8:	29 85       	ldd	r18, Y+9	; 0x09
     bda:	3a 85       	ldd	r19, Y+10	; 0x0a
     bdc:	4b 85       	ldd	r20, Y+11	; 0x0b
     bde:	5c 85       	ldd	r21, Y+12	; 0x0c
     be0:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3>
     be4:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__fixunssfsi>
     be8:	ef 81       	ldd	r30, Y+7	; 0x07
     bea:	f8 85       	ldd	r31, Y+8	; 0x08
     bec:	62 83       	std	Z+2, r22	; 0x02
					tinyLED_flash_once_time[i]--;
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	8b 0d       	add	r24, r11
     bf2:	d8 01       	movw	r26, r16
     bf4:	8c 93       	st	X, r24
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <tinyLED_update+0x35a>
				}
				else{
					tinyLED_colors[i].color = OFF;
     bf8:	10 82       	st	Z, r1
     bfa:	b2 e0       	ldi	r27, 0x02	; 2
     bfc:	2b 0e       	add	r2, r27
     bfe:	31 1c       	adc	r3, r1
     c00:	e3 e0       	ldi	r30, 0x03	; 3
     c02:	8e 0e       	add	r8, r30
     c04:	91 1c       	adc	r9, r1
     c06:	0f 5f       	subi	r16, 0xFF	; 255
     c08:	1f 4f       	sbci	r17, 0xFF	; 255
	_Bool flash_on = now%(uint32_t)(1000/FLASH_RATE)   <   500/FLASH_RATE;
	_Bool ping_on = now%(uint32_t)(1000/PING_RATE)   <   1000*FLASH_TIME;
	struct RGB_Color rgb_colors[NUMBER_OF_LEDS];
	
		
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
     c0a:	2c 14       	cp	r2, r12
     c0c:	3d 04       	cpc	r3, r13
     c0e:	09 f0       	breq	.+2      	; 0xc12 <tinyLED_update+0x372>
     c10:	b5 ce       	rjmp	.-662    	; 0x97c <tinyLED_update+0xdc>
     c12:	ae 84       	ldd	r10, Y+14	; 0x0e
     c14:	bf 84       	ldd	r11, Y+15	; 0x0f
				break;
			default:
				break;
		}
	}
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
     c16:	6b e5       	ldi	r22, 0x5B	; 91
     c18:	78 e3       	ldi	r23, 0x38	; 56
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	0e 94 20 04 	call	0x840	; 0x840 <tinyLED_RGB_Color_Compare>
     c22:	81 11       	cpse	r24, r1
     c24:	21 c0       	rjmp	.+66     	; 0xc68 <tinyLED_update+0x3c8>
     c26:	0b e5       	ldi	r16, 0x5B	; 91
     c28:	18 e3       	ldi	r17, 0x38	; 56
     c2a:	7e 01       	movw	r14, r28
     c2c:	f7 e0       	ldi	r31, 0x07	; 7
     c2e:	ef 0e       	add	r14, r31
     c30:	f1 1c       	adc	r15, r1
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
		{
			// Write to LEDs
			//For some reason unknown to the writer the data-bus to the LEDs is serialized as GRB
			//which means the 24-bit data-bus will look like [Green[0:7], Red[0:7], Blue[0:7]]
			tinyLED_SPIWriteByte(rgb_colors[i].green);
     c32:	d5 01       	movw	r26, r10
     c34:	11 96       	adiw	r26, 0x01	; 1
     c36:	8c 91       	ld	r24, X
     c38:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].red);
     c3c:	f5 01       	movw	r30, r10
     c3e:	80 81       	ld	r24, Z
     c40:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <tinyLED_SPIWriteByte>
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
     c44:	d5 01       	movw	r26, r10
     c46:	12 96       	adiw	r26, 0x02	; 2
     c48:	8c 91       	ld	r24, X
     c4a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <tinyLED_SPIWriteByte>
			tinyLED_old_colors[i] = rgb_colors[i];
     c4e:	f5 01       	movw	r30, r10
     c50:	81 91       	ld	r24, Z+
     c52:	91 91       	ld	r25, Z+
     c54:	a1 91       	ld	r26, Z+
     c56:	5f 01       	movw	r10, r30
     c58:	f8 01       	movw	r30, r16
     c5a:	81 93       	st	Z+, r24
     c5c:	91 93       	st	Z+, r25
     c5e:	a1 93       	st	Z+, r26
     c60:	8f 01       	movw	r16, r30
			default:
				break;
		}
	}
	if(!tinyLED_RGB_Color_Compare(&rgb_colors, &tinyLED_old_colors)){
		for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++)
     c62:	ae 14       	cp	r10, r14
     c64:	bf 04       	cpc	r11, r15
     c66:	29 f7       	brne	.-54     	; 0xc32 <tinyLED_update+0x392>
			tinyLED_SPIWriteByte(rgb_colors[i].red);
			tinyLED_SPIWriteByte(rgb_colors[i].blue);
			tinyLED_old_colors[i] = rgb_colors[i];
		}
	}
}
     c68:	6f 96       	adiw	r28, 0x1f	; 31
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	cf 90       	pop	r12
     c7e:	bf 90       	pop	r11
     c80:	af 90       	pop	r10
     c82:	9f 90       	pop	r9
     c84:	8f 90       	pop	r8
     c86:	7f 90       	pop	r7
     c88:	6f 90       	pop	r6
     c8a:	5f 90       	pop	r5
     c8c:	4f 90       	pop	r4
     c8e:	3f 90       	pop	r3
     c90:	2f 90       	pop	r2
     c92:	08 95       	ret

00000c94 <tinyAxon_add_pulse>:
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
	{
		if(pulse_queue[i] == 0){
     c94:	20 91 29 38 	lds	r18, 0x3829	; 0x803829 <pulse_queue>
     c98:	30 91 2a 38 	lds	r19, 0x382A	; 0x80382a <pulse_queue+0x1>
     c9c:	23 2b       	or	r18, r19
     c9e:	51 f0       	breq	.+20     	; 0xcb4 <tinyAxon_add_pulse+0x20>
     ca0:	eb e2       	ldi	r30, 0x2B	; 43
     ca2:	f8 e3       	ldi	r31, 0x38	; 56
     ca4:	21 e0       	ldi	r18, 0x01	; 1
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	b9 01       	movw	r22, r18
     caa:	41 91       	ld	r20, Z+
     cac:	51 91       	ld	r21, Z+
     cae:	45 2b       	or	r20, r21
     cb0:	81 f4       	brne	.+32     	; 0xcd2 <tinyAxon_add_pulse+0x3e>
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <tinyAxon_add_pulse+0x24>
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	70 e0       	ldi	r23, 0x00	; 0
			pulse_queue[i] = new_pulse;
     cb8:	66 0f       	add	r22, r22
     cba:	77 1f       	adc	r23, r23
     cbc:	fb 01       	movw	r30, r22
     cbe:	e7 5d       	subi	r30, 0xD7	; 215
     cc0:	f7 4c       	sbci	r31, 0xC7	; 199
     cc2:	80 83       	st	Z, r24
     cc4:	91 83       	std	Z+1, r25	; 0x01
			pulses_in_queue++;
     cc6:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <pulses_in_queue>
     cca:	8f 5f       	subi	r24, 0xFF	; 255
     ccc:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <pulses_in_queue>
			// We return so we only ever add one
			break;
     cd0:	08 95       	ret
     cd2:	2f 5f       	subi	r18, 0xFF	; 255
     cd4:	3f 4f       	sbci	r19, 0xFF	; 255
*/
static void tinyAxon_add_pulse(uint16_t new_pulse)
{
	// We want to check each slot in the pulse_queue, and
	// if we find an empty slot (0), we add a pulse.
	for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     cd6:	2a 30       	cpi	r18, 0x0A	; 10
     cd8:	31 05       	cpc	r19, r1
     cda:	31 f7       	brne	.-52     	; 0xca8 <tinyAxon_add_pulse+0x14>
     cdc:	08 95       	ret

00000cde <find_newest_pulse>:
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
     cde:	40 91 29 38 	lds	r20, 0x3829	; 0x803829 <pulse_queue>
     ce2:	50 91 2a 38 	lds	r21, 0x382A	; 0x80382a <pulse_queue+0x1>
     ce6:	eb e2       	ldi	r30, 0x2B	; 43
     ce8:	f8 e3       	ldi	r31, 0x38	; 56
	
// This function will be used with pulse_queue to find the newest pulse
uint8_t find_newest_pulse() {
	uint16_t max;
	uint8_t current_index = 0;
	uint8_t return_index = 0;
     cea:	80 e0       	ldi	r24, 0x00	; 0
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     cec:	91 e0       	ldi	r25, 0x01	; 1
		if (pulse_queue[current_index] > max) {
     cee:	21 91       	ld	r18, Z+
     cf0:	31 91       	ld	r19, Z+
     cf2:	42 17       	cp	r20, r18
     cf4:	53 07       	cpc	r21, r19
     cf6:	10 f4       	brcc	.+4      	; 0xcfc <find_newest_pulse+0x1e>
     cf8:	89 2f       	mov	r24, r25
			return_index = current_index;
			max = pulse_queue[current_index];
     cfa:	a9 01       	movw	r20, r18
	uint8_t current_index = 0;
	uint8_t return_index = 0;
	
	max = pulse_queue[current_index];
	
	for (current_index = 1; current_index < MAX_NUMBER_OF_PULSES; current_index++) {
     cfc:	9f 5f       	subi	r25, 0xFF	; 255
     cfe:	9a 30       	cpi	r25, 0x0A	; 10
     d00:	b1 f7       	brne	.-20     	; 0xcee <find_newest_pulse+0x10>
			return_index = current_index;
			max = pulse_queue[current_index];
		}
	}
	return return_index;
}
     d02:	08 95       	ret

00000d04 <tinyAxon_remove_pulse>:

/*
If the potential is very low, we want to try to remove a pulse.
*/
bool tinyAxon_remove_pulse(void)
{
     d04:	cf 93       	push	r28
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
     d06:	c0 91 3d 38 	lds	r28, 0x383D	; 0x80383d <pulses_in_queue>
     d0a:	cc 23       	and	r28, r28
     d0c:	c9 f0       	breq	.+50     	; 0xd40 <tinyAxon_remove_pulse+0x3c>
		//There was no pulse to remove.
		return false;
	}
	else{
		// If we are to remove a pulse, we want to remove the one that will fire last.
		uint8_t pulse_index = find_newest_pulse();
     d0e:	0e 94 6f 06 	call	0xcde	; 0xcde <find_newest_pulse>
		uint16_t newest_pulse = pulse_queue[pulse_index];
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	fc 01       	movw	r30, r24
     d16:	ee 0f       	add	r30, r30
     d18:	ff 1f       	adc	r31, r31
     d1a:	e7 5d       	subi	r30, 0xD7	; 215
     d1c:	f7 4c       	sbci	r31, 0xC7	; 199
	
		// Now we want to check if the pulse is too far away to be affected by the low potential, or close enough that we decide to remove it.
		// (When we say that the pulse is too far away, it refers to the biological process of how the potential spreads from Dendrites to axon).
		if(newest_pulse > PULSE_NO_RETURN_TIME){
     d1e:	20 81       	ld	r18, Z
     d20:	31 81       	ldd	r19, Z+1	; 0x01
     d22:	2d 33       	cpi	r18, 0x3D	; 61
     d24:	31 05       	cpc	r19, r1
     d26:	70 f0       	brcs	.+28     	; 0xd44 <tinyAxon_remove_pulse+0x40>
			// We decided to remove the pulse
			pulse_queue[pulse_index] = 0;
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	fc 01       	movw	r30, r24
     d2e:	e7 5d       	subi	r30, 0xD7	; 215
     d30:	f7 4c       	sbci	r31, 0xC7	; 199
     d32:	10 82       	st	Z, r1
     d34:	11 82       	std	Z+1, r1	; 0x01
			pulses_in_queue--;
     d36:	c1 50       	subi	r28, 0x01	; 1
     d38:	c0 93 3d 38 	sts	0x383D, r28	; 0x80383d <pulses_in_queue>
			return true;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <tinyAxon_remove_pulse+0x42>
bool tinyAxon_remove_pulse(void)
{
	// We want to return a bool indicating whether or not a pulse actually was removed.
	if(pulses_in_queue == 0){
		//There was no pulse to remove.
		return false;
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <tinyAxon_remove_pulse+0x42>
			pulses_in_queue--;
			return true;
		}
		// Here we have found that there is a pulse queued, but it is old enough to let pass anyway, so now we need to put it back into the queue.
		else{
			return false;
     d44:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <tinyAxon_update_potential>:
/*
Decides whether or not the axon should fire
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
     d4a:	cf 92       	push	r12
     d4c:	df 92       	push	r13
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	6b 01       	movw	r12, r22
     d54:	7c 01       	movw	r14, r24
	//While the neuron has enough potential to fire, we want to fire more
	while (potential > THRESHOLD_POTENTIAL)
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	48 ec       	ldi	r20, 0xC8	; 200
     d5c:	51 e4       	ldi	r21, 0x41	; 65
     d5e:	0e 94 32 0b 	call	0x1664	; 0x1664 <__gesf2>
     d62:	18 16       	cp	r1, r24
     d64:	bc f5       	brge	.+110    	; 0xdd4 <tinyAxon_update_potential+0x8a>
	{
		// We have to check if there are already queued pulses, so that the frequency never exceeds FIRE_DELAY
		if(pulses_in_queue>0){
     d66:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <pulses_in_queue>
     d6a:	88 23       	and	r24, r24
     d6c:	b1 f0       	breq	.+44     	; 0xd9a <tinyAxon_update_potential+0x50>
			uint16_t newest_pulse = pulse_queue[find_newest_pulse()];
     d6e:	0e 94 6f 06 	call	0xcde	; 0xcde <find_newest_pulse>
     d72:	e8 2f       	mov	r30, r24
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	e7 5d       	subi	r30, 0xD7	; 215
     d7c:	f7 4c       	sbci	r31, 0xC7	; 199
			
			// There is at least one pulse in the queue, and it is so close, that we need to offset the new pulse, so that we keep at least
			// one FIRE_DELAY between each pulse
			if(newest_pulse + FIRE_DELAY > TRAVLE_DELAY){
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	c2 96       	adiw	r24, 0x32	; 50
     d84:	85 36       	cpi	r24, 0x65	; 101
     d86:	91 05       	cpc	r25, r1
     d88:	18 f0       	brcs	.+6      	; 0xd90 <tinyAxon_update_potential+0x46>
				tinyAxon_add_pulse(newest_pulse + FIRE_DELAY);
     d8a:	0e 94 4a 06 	call	0xc94	; 0xc94 <tinyAxon_add_pulse>
     d8e:	09 c0       	rjmp	.+18     	; 0xda2 <tinyAxon_update_potential+0x58>
			}
			// There is at least one pulse in the queue, but it's far enough away to ignore
			else{
				tinyAxon_add_pulse(TRAVLE_DELAY);
     d90:	84 e6       	ldi	r24, 0x64	; 100
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 4a 06 	call	0xc94	; 0xc94 <tinyAxon_add_pulse>
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <tinyAxon_update_potential+0x58>
			}
		}
		// There are no pulses in the queue, so we add a pulse as normal
		else{
			tinyAxon_add_pulse(TRAVLE_DELAY);		
     d9a:	84 e6       	ldi	r24, 0x64	; 100
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 4a 06 	call	0xc94	; 0xc94 <tinyAxon_add_pulse>
		}
		
		potential += POSTFIRE_POTENTIAL_REACTION; // This is usually defined as a negative value, don't be confused by the +=
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 ef       	ldi	r20, 0xF0	; 240
     da8:	51 e4       	ldi	r21, 0x41	; 65
     daa:	c7 01       	movw	r24, r14
     dac:	b6 01       	movw	r22, r12
     dae:	0e 94 ed 08 	call	0x11da	; 0x11da <__subsf3>
     db2:	6b 01       	movw	r12, r22
     db4:	7c 01       	movw	r14, r24
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
     db6:	44 e0       	ldi	r20, 0x04	; 4
     db8:	63 e0       	ldi	r22, 0x03	; 3
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	0e 94 10 04 	call	0x820	; 0x820 <tinyLED_set_color_mode>
If the axon does fire, the potential is reduced
*/
double tinyAxon_update_potential(double potential)
{	
	//While the neuron has enough potential to fire, we want to fire more
	while (potential > THRESHOLD_POTENTIAL)
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	48 ec       	ldi	r20, 0xC8	; 200
     dc6:	51 e4       	ldi	r21, 0x41	; 65
     dc8:	c7 01       	movw	r24, r14
     dca:	b6 01       	movw	r22, r12
     dcc:	0e 94 32 0b 	call	0x1664	; 0x1664 <__gesf2>
     dd0:	18 16       	cp	r1, r24
     dd2:	4c f2       	brlt	.-110    	; 0xd66 <tinyAxon_update_potential+0x1c>
		
		tinyLED_set_color_mode(INN_LED, GREEN, FLASH_ONCE);
	}
	
	// If the neuron has a very low potential, we want to remove a pulse from the queue (if there is one)
	if(potential < -THRESHOLD_POTENTIAL && pulses_in_queue > 0) // Perhaps this should be a separate variable? For now, we will just simply use -THRESHOLD_POTENTIAL
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	48 ec       	ldi	r20, 0xC8	; 200
     dda:	51 ec       	ldi	r21, 0xC1	; 193
     ddc:	c7 01       	movw	r24, r14
     dde:	b6 01       	movw	r22, r12
     de0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__cmpsf2>
     de4:	88 23       	and	r24, r24
     de6:	0c f0       	brlt	.+2      	; 0xdea <tinyAxon_update_potential+0xa0>
     de8:	4b c0       	rjmp	.+150    	; 0xe80 <tinyAxon_update_potential+0x136>
     dea:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <pulses_in_queue>
     dee:	88 23       	and	r24, r24
     df0:	19 f1       	breq	.+70     	; 0xe38 <tinyAxon_update_potential+0xee>
	{
		// The neurons potential is low enough to attempt to remove a queued fire (Fire less)
		if(tinyAxon_remove_pulse())
     df2:	0e 94 82 06 	call	0xd04	; 0xd04 <tinyAxon_remove_pulse>
     df6:	88 23       	and	r24, r24
     df8:	09 f4       	brne	.+2      	; 0xdfc <tinyAxon_update_potential+0xb2>
     dfa:	42 c0       	rjmp	.+132    	; 0xe80 <tinyAxon_update_potential+0x136>
		{
			// The potential has evened out a bit
			potential += THRESHOLD_POTENTIAL;
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	48 ec       	ldi	r20, 0xC8	; 200
     e02:	51 e4       	ldi	r21, 0x41	; 65
     e04:	c7 01       	movw	r24, r14
     e06:	b6 01       	movw	r22, r12
     e08:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__addsf3>
     e0c:	6b 01       	movw	r12, r22
     e0e:	7c 01       	movw	r14, r24
     e10:	37 c0       	rjmp	.+110    	; 0xe80 <tinyAxon_update_potential+0x136>
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
		{
			if(pulse_queue[i] != 0){
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	39 f0       	breq	.+14     	; 0xe28 <tinyAxon_update_potential+0xde>
				pulse_queue[i]--;
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	80 83       	st	Z, r24
     e1e:	91 83       	std	Z+1, r25	; 0x01
				
				// If the time went from 1 to 0, we fire the axon
				if(pulse_queue[i] == 0){
     e20:	89 2b       	or	r24, r25
     e22:	11 f4       	brne	.+4      	; 0xe28 <tinyAxon_update_potential+0xde>
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
	pulses_in_queue--;
     e24:	41 50       	subi	r20, 0x01	; 1
Function to set firing.
Function also updates the pulse queue accordingly.
*/
static void tinyAxon_fire_pulse()
{
	tinyAxon_should_fire = true;
     e26:	51 e0       	ldi	r21, 0x01	; 1
     e28:	32 96       	adiw	r30, 0x02	; 2
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
	{
		for (uint8_t i = 0; i<MAX_NUMBER_OF_PULSES; i++)
     e2a:	e2 17       	cp	r30, r18
     e2c:	f3 07       	cpc	r31, r19
     e2e:	89 f7       	brne	.-30     	; 0xe12 <tinyAxon_update_potential+0xc8>
     e30:	50 93 3e 38 	sts	0x383E, r21	; 0x80383e <tinyAxon_should_fire>
     e34:	40 93 3d 38 	sts	0x383D, r20	; 0x80383d <pulses_in_queue>
The function should set the DAC to fire for two
update cycles once the pulse flag is set high.
*/
static void tinyAxon_update_pulse_transmitter(void)
{
	if (tinyAxon_should_fire)
     e38:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <tinyAxon_should_fire>
     e3c:	88 23       	and	r24, r24
     e3e:	91 f0       	breq	.+36     	; 0xe64 <tinyAxon_update_potential+0x11a>
	{
		tinyAxon_should_fire = false;
     e40:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <tinyAxon_should_fire>
		tinyAxon_has_fired = true;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <tinyAxon_has_fired>
*/
static void tinyAxon_start_sending_pulse()
{
	if (NEURONTYPE == EXCITATORY_NEURON)
	{
		DAC_set_output(EXCITATORY_NEURON_OUTPUT);
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 44 01 	call	0x288	; 0x288 <DAC_set_output>
		axonOutputValue=EXCITATORY_NEURON_OUTPUT;
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <axonOutputValue>
	{
		DAC_set_output(INHIBITORY_NEURON_OUTPUT);
		axonOutputValue=INHIBITORY_NEURON_OUTPUT;
	}
	
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
     e58:	44 e0       	ldi	r20, 0x04	; 4
     e5a:	64 e0       	ldi	r22, 0x04	; 4
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	0e 94 10 04 	call	0x820	; 0x820 <tinyLED_set_color_mode>
     e62:	19 c0       	rjmp	.+50     	; 0xe96 <tinyAxon_update_potential+0x14c>
		tinyAxon_should_fire = false;
		tinyAxon_has_fired = true;
		
		tinyAxon_start_sending_pulse();
	}
	else if (tinyAxon_has_fired)
     e64:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <tinyAxon_has_fired>
     e68:	88 23       	and	r24, r24
     e6a:	19 f0       	breq	.+6      	; 0xe72 <tinyAxon_update_potential+0x128>
	{
		tinyAxon_has_fired = false;
     e6c:	10 92 3f 38 	sts	0x383F, r1	; 0x80383f <tinyAxon_has_fired>
     e70:	12 c0       	rjmp	.+36     	; 0xe96 <tinyAxon_update_potential+0x14c>
	tinyLED_set_color_mode(OUT_LED, WHITE, FLASH_ONCE);
}

static void tinyAxon_stop_sending_pulse()
{
	DAC_set_output(NO_SIGNAL_OUTPUT);
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 44 01 	call	0x288	; 0x288 <DAC_set_output>
	axonOutputValue=NO_SIGNAL_OUTPUT;
     e7a:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <axonOutputValue>
     e7e:	0b c0       	rjmp	.+22     	; 0xe96 <tinyAxon_update_potential+0x14c>
			potential += THRESHOLD_POTENTIAL;
		}
	}
	
	// If there are pulses in the queue, we want to reduce the time in each of the pulse_queue elements
	if (pulses_in_queue > 0)
     e80:	40 91 3d 38 	lds	r20, 0x383D	; 0x80383d <pulses_in_queue>
     e84:	44 23       	and	r20, r20
     e86:	c1 f2       	breq	.-80     	; 0xe38 <tinyAxon_update_potential+0xee>
     e88:	50 91 3e 38 	lds	r21, 0x383E	; 0x80383e <tinyAxon_should_fire>
     e8c:	e9 e2       	ldi	r30, 0x29	; 41
     e8e:	f8 e3       	ldi	r31, 0x38	; 56
     e90:	2d e3       	ldi	r18, 0x3D	; 61
     e92:	38 e3       	ldi	r19, 0x38	; 56
     e94:	be cf       	rjmp	.-132    	; 0xe12 <tinyAxon_update_potential+0xc8>
	}
	
	// Here we set the actual output of the DAC (Digital to Analog Converter)
	tinyAxon_update_pulse_transmitter();
	
	tinyDebugger_send_uint8("Axon", axonOutputValue);
     e96:	60 91 28 38 	lds	r22, 0x3828	; 0x803828 <axonOutputValue>
     e9a:	81 e3       	ldi	r24, 0x31	; 49
     e9c:	94 ea       	ldi	r25, 0xA4	; 164
     e9e:	0e 94 97 02 	call	0x52e	; 0x52e <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("Pulses", pulses_in_queue);
     ea2:	60 91 3d 38 	lds	r22, 0x383D	; 0x80383d <pulses_in_queue>
     ea6:	86 e3       	ldi	r24, 0x36	; 54
     ea8:	94 ea       	ldi	r25, 0xA4	; 164
     eaa:	0e 94 97 02 	call	0x52e	; 0x52e <tinyDebugger_send_uint8>
	
	return potential;
}
     eae:	c7 01       	movw	r24, r14
     eb0:	b6 01       	movw	r22, r12
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	08 95       	ret

00000ebc <tinyDendrite_update_signals>:
/*
This function converts the 8 bit value from the ADC into one of the signal types defined in DendriteSignal
We also update the charging state
*/
void tinyDendrite_update_signals(void)
{
     ebc:	af 92       	push	r10
     ebe:	bf 92       	push	r11
     ec0:	cf 92       	push	r12
     ec2:	df 92       	push	r13
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	c1 e1       	ldi	r28, 0x11	; 17
     ed2:	d8 e3       	ldi	r29, 0x38	; 56
     ed4:	0a e4       	ldi	r16, 0x4A	; 74
     ed6:	18 e3       	ldi	r17, 0x38	; 56
     ed8:	0f 2e       	mov	r0, r31
     eda:	f6 e1       	ldi	r31, 0x16	; 22
     edc:	cf 2e       	mov	r12, r31
     ede:	f8 e3       	ldi	r31, 0x38	; 56
     ee0:	df 2e       	mov	r13, r31
     ee2:	f0 2d       	mov	r31, r0
     ee4:	78 01       	movw	r14, r16
*/
static void tinyDendrite_read_signals(void)
{
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_values[i] = ADC_get_conversion(Dendrite_ports[i]);
     ee6:	89 91       	ld	r24, Y+
     ee8:	0e 94 09 01 	call	0x212	; 0x212 <ADC_get_conversion>
     eec:	d7 01       	movw	r26, r14
     eee:	8d 93       	st	X+, r24
     ef0:	7d 01       	movw	r14, r26
/*
This function reads the voltage at the Dendrite inputs with the ADC
*/
static void tinyDendrite_read_signals(void)
{
	for (int i = 0; i < TINYDENDRITE_COUNT; i++)
     ef2:	cc 15       	cp	r28, r12
     ef4:	dd 05       	cpc	r29, r13
     ef6:	b9 f7       	brne	.-18     	; 0xee6 <tinyDendrite_update_signals+0x2a>
	{
		tinyDendrite_values[i] = ADC_get_conversion(Dendrite_ports[i]);
	}
	tinyDebugger_send_uint8("D1", tinyDendrite_values[0]);
     ef8:	ca e4       	ldi	r28, 0x4A	; 74
     efa:	d8 e3       	ldi	r29, 0x38	; 56
     efc:	68 81       	ld	r22, Y
     efe:	8d e3       	ldi	r24, 0x3D	; 61
     f00:	94 ea       	ldi	r25, 0xA4	; 164
     f02:	0e 94 97 02 	call	0x52e	; 0x52e <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D2", tinyDendrite_values[1]);
     f06:	69 81       	ldd	r22, Y+1	; 0x01
     f08:	80 e4       	ldi	r24, 0x40	; 64
     f0a:	94 ea       	ldi	r25, 0xA4	; 164
     f0c:	0e 94 97 02 	call	0x52e	; 0x52e <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D3", tinyDendrite_values[2]);
     f10:	6a 81       	ldd	r22, Y+2	; 0x02
     f12:	83 e4       	ldi	r24, 0x43	; 67
     f14:	94 ea       	ldi	r25, 0xA4	; 164
     f16:	0e 94 97 02 	call	0x52e	; 0x52e <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D4", tinyDendrite_values[3]);
     f1a:	6b 81       	ldd	r22, Y+3	; 0x03
     f1c:	86 e4       	ldi	r24, 0x46	; 70
     f1e:	94 ea       	ldi	r25, 0xA4	; 164
     f20:	0e 94 97 02 	call	0x52e	; 0x52e <tinyDebugger_send_uint8>
	tinyDebugger_send_uint8("D5", tinyDendrite_values[4]);
     f24:	6c 81       	ldd	r22, Y+4	; 0x04
     f26:	89 e4       	ldi	r24, 0x49	; 73
     f28:	94 ea       	ldi	r25, 0xA4	; 164
     f2a:	0e 94 97 02 	call	0x52e	; 0x52e <tinyDebugger_send_uint8>
     f2e:	e5 e4       	ldi	r30, 0x45	; 69
     f30:	f8 e3       	ldi	r31, 0x38	; 56
     f32:	c0 e4       	ldi	r28, 0x40	; 64
     f34:	d8 e3       	ldi	r29, 0x38	; 56
     f36:	4a e4       	ldi	r20, 0x4A	; 74
     f38:	58 e3       	ldi	r21, 0x38	; 56
{
	
	//Read the analog voltage values on each of the Dendrites
	tinyDendrite_read_signals();
	
	_Bool charging = false;
     f3a:	80 e0       	ldi	r24, 0x00	; 0
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     f3c:	31 e0       	ldi	r19, 0x01	; 1
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     f3e:	0f 2e       	mov	r0, r31
     f40:	f3 e0       	ldi	r31, 0x03	; 3
     f42:	cf 2e       	mov	r12, r31
     f44:	f0 2d       	mov	r31, r0
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     f46:	68 94       	set
     f48:	dd 24       	eor	r13, r13
     f4a:	d1 f8       	bld	r13, 1
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     f4c:	68 94       	set
     f4e:	ee 24       	eor	r14, r14
     f50:	e2 f8       	bld	r14, 2
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     f52:	0f 2e       	mov	r0, r31
     f54:	f6 e0       	ldi	r31, 0x06	; 6
     f56:	ff 2e       	mov	r15, r31
     f58:	f0 2d       	mov	r31, r0
			tinyDendrite_current_signals[i] = CHARGING;
			charging = true;
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     f5a:	75 e0       	ldi	r23, 0x05	; 5
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
		{
			tinyDendrite_current_signals[i] = CHARGING;
     f5c:	67 e0       	ldi	r22, 0x07	; 7
     f5e:	5f 01       	movw	r10, r30
	
	_Bool charging = false;
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		tinyDendrite_previous_signals[i] = tinyDendrite_current_signals[i];
     f60:	90 81       	ld	r25, Z
     f62:	99 93       	st	Y+, r25
		if (tinyDendrite_values[i] > CHARGING_THRESHOLD)
     f64:	d8 01       	movw	r26, r16
     f66:	2d 91       	ld	r18, X+
     f68:	8d 01       	movw	r16, r26
     f6a:	29 3e       	cpi	r18, 0xE9	; 233
     f6c:	18 f0       	brcs	.+6      	; 0xf74 <tinyDendrite_update_signals+0xb8>
		{
			tinyDendrite_current_signals[i] = CHARGING;
     f6e:	60 83       	st	Z, r22
			charging = true;
     f70:	83 2f       	mov	r24, r19
     f72:	19 c0       	rjmp	.+50     	; 0xfa6 <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > NORMAL_EXCITE_THRESHOLD)
     f74:	28 3c       	cpi	r18, 0xC8	; 200
     f76:	10 f0       	brcs	.+4      	; 0xf7c <tinyDendrite_update_signals+0xc0>
		{
			tinyDendrite_current_signals[i] = NORMAL_EXCITE;
     f78:	70 83       	st	Z, r23
     f7a:	15 c0       	rjmp	.+42     	; 0xfa6 <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > HIGH_EXCITE_THRESHOLD)
     f7c:	27 3a       	cpi	r18, 0xA7	; 167
     f7e:	10 f0       	brcs	.+4      	; 0xf84 <tinyDendrite_update_signals+0xc8>
		{
			tinyDendrite_current_signals[i] = HIGH_EXCITE;
     f80:	f0 82       	st	Z, r15
     f82:	11 c0       	rjmp	.+34     	; 0xfa6 <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > LOW_EXCITE_THRESHOLD)
     f84:	25 38       	cpi	r18, 0x85	; 133
     f86:	10 f0       	brcs	.+4      	; 0xf8c <tinyDendrite_update_signals+0xd0>
		{
			tinyDendrite_current_signals[i] = LOW_EXCITE;
     f88:	e0 82       	st	Z, r14
     f8a:	0d c0       	rjmp	.+26     	; 0xfa6 <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > NORMAL_INHIB_THRESHOLD)
     f8c:	24 36       	cpi	r18, 0x64	; 100
     f8e:	10 f0       	brcs	.+4      	; 0xf94 <tinyDendrite_update_signals+0xd8>
		{
			tinyDendrite_current_signals[i] = NORMAL_INHIB;
     f90:	d0 82       	st	Z, r13
     f92:	09 c0       	rjmp	.+18     	; 0xfa6 <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > HIGH_INHIB_THRESHOLD)
     f94:	23 34       	cpi	r18, 0x43	; 67
     f96:	10 f0       	brcs	.+4      	; 0xf9c <tinyDendrite_update_signals+0xe0>
		{
			tinyDendrite_current_signals[i] = HIGH_INHIB;
     f98:	c0 82       	st	Z, r12
     f9a:	05 c0       	rjmp	.+10     	; 0xfa6 <tinyDendrite_update_signals+0xea>
		}
		else if (tinyDendrite_values[i] > LOW_INHIB_THRESHOLD)
     f9c:	22 32       	cpi	r18, 0x22	; 34
     f9e:	10 f0       	brcs	.+4      	; 0xfa4 <tinyDendrite_update_signals+0xe8>
		{
			tinyDendrite_current_signals[i] = LOW_INHIB;
     fa0:	30 83       	st	Z, r19
     fa2:	01 c0       	rjmp	.+2      	; 0xfa6 <tinyDendrite_update_signals+0xea>
		}
		else
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     fa4:	10 82       	st	Z, r1
		}
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
     fa6:	d5 01       	movw	r26, r10
     fa8:	2c 91       	ld	r18, X
     faa:	92 13       	cpse	r25, r18
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <tinyDendrite_update_signals+0xf4>
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
     fae:	1c 92       	st	X, r1
     fb0:	31 96       	adiw	r30, 0x01	; 1
	//Read the analog voltage values on each of the Dendrites
	tinyDendrite_read_signals();
	
	_Bool charging = false;
	
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
     fb2:	e4 17       	cp	r30, r20
     fb4:	f5 07       	cpc	r31, r21
     fb6:	99 f6       	brne	.-90     	; 0xf5e <tinyDendrite_update_signals+0xa2>
		if (tinyDendrite_current_signals[i] == tinyDendrite_previous_signals[i])
		{
			tinyDendrite_current_signals[i] = NO_SIGNAL;
		}
	}
	tinyCharge_set_charging_mode(charging);
     fb8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <tinyCharge_set_charging_mode>
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	bf 90       	pop	r11
     fce:	af 90       	pop	r10
     fd0:	08 95       	ret

00000fd2 <tinyDendrite_get_potential>:
outside. It uses the previously declared functions to return the potential.
*/
int16_t tinyDendrite_get_potential()
{
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
     fd2:	0e 94 5e 07 	call	0xebc	; 0xebc <tinyDendrite_update_signals>
     fd6:	e5 e4       	ldi	r30, 0x45	; 69
     fd8:	f8 e3       	ldi	r31, 0x38	; 56
     fda:	4a e4       	ldi	r20, 0x4A	; 74
     fdc:	58 e3       	ldi	r21, 0x38	; 56
	
	int16_t return_potential_val = 0;
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
	{
		switch(tinyDendrite_current_signals[i])
     fe2:	91 91       	ld	r25, Z+
     fe4:	93 30       	cpi	r25, 0x03	; 3
     fe6:	a1 f0       	breq	.+40     	; 0x1010 <tinyDendrite_get_potential+0x3e>
     fe8:	28 f4       	brcc	.+10     	; 0xff4 <tinyDendrite_get_potential+0x22>
     fea:	91 30       	cpi	r25, 0x01	; 1
     fec:	b9 f0       	breq	.+46     	; 0x101c <tinyDendrite_get_potential+0x4a>
     fee:	92 30       	cpi	r25, 0x02	; 2
     ff0:	91 f0       	breq	.+36     	; 0x1016 <tinyDendrite_get_potential+0x44>
     ff2:	16 c0       	rjmp	.+44     	; 0x1020 <tinyDendrite_get_potential+0x4e>
     ff4:	95 30       	cpi	r25, 0x05	; 5
     ff6:	31 f0       	breq	.+12     	; 0x1004 <tinyDendrite_get_potential+0x32>
     ff8:	40 f0       	brcs	.+16     	; 0x100a <tinyDendrite_get_potential+0x38>
     ffa:	96 30       	cpi	r25, 0x06	; 6
     ffc:	89 f4       	brne	.+34     	; 0x1020 <tinyDendrite_get_potential+0x4e>
		{
			case NO_SIGNAL:
				return_potential_val += NO_SIGNAL_REACTION;
				break;
			case HIGH_EXCITE:
				return_potential_val += HIGH_EXCITE_REACTION;
     ffe:	2c 5c       	subi	r18, 0xCC	; 204
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
    1002:	0e c0       	rjmp	.+28     	; 0x1020 <tinyDendrite_get_potential+0x4e>
			case NORMAL_EXCITE:
				return_potential_val += NORMAL_EXCITE_REACTION;
    1004:	26 5e       	subi	r18, 0xE6	; 230
    1006:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
    1008:	0b c0       	rjmp	.+22     	; 0x1020 <tinyDendrite_get_potential+0x4e>
			case LOW_EXCITE:
				return_potential_val += LOW_EXCITE_REACTION;
    100a:	2c 5e       	subi	r18, 0xEC	; 236
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
    100e:	08 c0       	rjmp	.+16     	; 0x1020 <tinyDendrite_get_potential+0x4e>
			case HIGH_INHIB:
				return_potential_val += HIGH_INHIB_REACTION;
    1010:	22 53       	subi	r18, 0x32	; 50
    1012:	31 09       	sbc	r19, r1
				break;
    1014:	05 c0       	rjmp	.+10     	; 0x1020 <tinyDendrite_get_potential+0x4e>
			case NORMAL_INHIB:
				return_potential_val += NORMAL_INHIB_REACTION;
    1016:	2a 51       	subi	r18, 0x1A	; 26
    1018:	31 09       	sbc	r19, r1
				break;
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <tinyDendrite_get_potential+0x4e>
			case LOW_INHIB:
				return_potential_val += LOW_INHIB_REACTION;
    101c:	24 51       	subi	r18, 0x14	; 20
    101e:	31 09       	sbc	r19, r1
{
	//Convert the digital value to the various signals defined in DendriteSignalType
	tinyDendrite_update_signals();
	
	int16_t return_potential_val = 0;
	for (uint8_t i = 0; i < TINYDENDRITE_COUNT; i++)
    1020:	e4 17       	cp	r30, r20
    1022:	f5 07       	cpc	r31, r21
    1024:	f1 f6       	brne	.-68     	; 0xfe2 <tinyDendrite_get_potential+0x10>
			default:
				break;
		}
	}
	return return_potential_val;
}
    1026:	c9 01       	movw	r24, r18
    1028:	08 95       	ret

0000102a <tinyDendrite_update_potential>:

double tinyDendrite_update_potential(double potential){
    102a:	cf 92       	push	r12
    102c:	df 92       	push	r13
    102e:	ef 92       	push	r14
    1030:	ff 92       	push	r15
    1032:	6b 01       	movw	r12, r22
    1034:	7c 01       	movw	r14, r24
	
	int16_t potential_change = tinyDendrite_get_potential();
    1036:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <tinyDendrite_get_potential>
	potential += potential_change;
	return potential;
    103a:	bc 01       	movw	r22, r24
    103c:	99 0f       	add	r25, r25
    103e:	88 0b       	sbc	r24, r24
    1040:	99 0b       	sbc	r25, r25
    1042:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__floatsisf>
    1046:	a7 01       	movw	r20, r14
    1048:	96 01       	movw	r18, r12
    104a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__addsf3>
    104e:	ff 90       	pop	r15
    1050:	ef 90       	pop	r14
    1052:	df 90       	pop	r13
    1054:	cf 90       	pop	r12
    1056:	08 95       	ret

00001058 <__vector_6>:
This function is called every time the RTC (Real Time Clock) counter overflows.
With the current settings, it will be called every ms.
The RTC clock runs at 1kHz, and the number of cycles before overflow is set with RTC.PER = someHexValue (e.g. 0x20) in src/rtc.c
*/
ISR(RTC_CNT_vect)
{
    1058:	1f 92       	push	r1
    105a:	0f 92       	push	r0
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	0f 92       	push	r0
    1060:	11 24       	eor	r1, r1
    1062:	2f 93       	push	r18
    1064:	3f 93       	push	r19
    1066:	4f 93       	push	r20
    1068:	5f 93       	push	r21
    106a:	6f 93       	push	r22
    106c:	7f 93       	push	r23
    106e:	8f 93       	push	r24
    1070:	9f 93       	push	r25
    1072:	af 93       	push	r26
    1074:	bf 93       	push	r27
    1076:	cf 93       	push	r28
    1078:	ef 93       	push	r30
    107a:	ff 93       	push	r31
static _Bool tinyISR_interrupt_flag = false;


void tinyISR_setflag(_Bool new_flag_val)
{
	tinyISR_interrupt_flag = new_flag_val;
    107c:	c1 e0       	ldi	r28, 0x01	; 1
    107e:	c0 93 4f 38 	sts	0x384F, r28	; 0x80384f <tinyISR_interrupt_flag>
{
	// Set flag to let main loop run a new cycle
	tinyISR_setflag(true);
	
	// Timer counter incrementation
	tinyTime_counter_increment();
    1082:	0e 94 38 03 	call	0x670	; 0x670 <tinyTime_counter_increment>

	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
    1086:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
}
    108a:	ff 91       	pop	r31
    108c:	ef 91       	pop	r30
    108e:	cf 91       	pop	r28
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <tinyISR_setflag>:
static _Bool tinyISR_interrupt_flag = false;


void tinyISR_setflag(_Bool new_flag_val)
{
	tinyISR_interrupt_flag = new_flag_val;
    10ae:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <tinyISR_interrupt_flag>
    10b2:	08 95       	ret

000010b4 <tinyISR_getflag>:
}

_Bool tinyISR_getflag(void)
{
	return tinyISR_interrupt_flag;
}
    10b4:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <tinyISR_interrupt_flag>
    10b8:	08 95       	ret

000010ba <tinyPotential_update>:

/*
Update the potential
*/
void tinyPotential_update()
{
    10ba:	cf 92       	push	r12
    10bc:	df 92       	push	r13
    10be:	ef 92       	push	r14
    10c0:	ff 92       	push	r15
Function to decay the potential towards 0
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
    10c2:	0e 94 4c 03 	call	0x698	; 0x698 <tinyTime_now>
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    10c6:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <previous_update_time>
    10ca:	68 1b       	sub	r22, r24
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__floatunsisf>
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	48 ec       	ldi	r20, 0xC8	; 200
    10dc:	52 e4       	ldi	r21, 0x42	; 66
    10de:	0e 94 5f 09 	call	0x12be	; 0x12be <__divsf3>
    10e2:	90 58       	subi	r25, 0x80	; 128
    10e4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <exp>
    10e8:	20 91 54 38 	lds	r18, 0x3854	; 0x803854 <tinyPotential_potential>
    10ec:	30 91 55 38 	lds	r19, 0x3855	; 0x803855 <tinyPotential_potential+0x1>
    10f0:	40 91 56 38 	lds	r20, 0x3856	; 0x803856 <tinyPotential_potential+0x2>
    10f4:	50 91 57 38 	lds	r21, 0x3857	; 0x803857 <tinyPotential_potential+0x3>
    10f8:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3>
    10fc:	6b 01       	movw	r12, r22
    10fe:	7c 01       	movw	r14, r24
	if(fabs(tinyPotential_potential)<0.1){
    1100:	9f 77       	andi	r25, 0x7F	; 127
    1102:	2d ec       	ldi	r18, 0xCD	; 205
    1104:	3c ec       	ldi	r19, 0xCC	; 204
    1106:	4c ec       	ldi	r20, 0xCC	; 204
    1108:	5d e3       	ldi	r21, 0x3D	; 61
    110a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__cmpsf2>
    110e:	88 23       	and	r24, r24
    1110:	4c f0       	brlt	.+18     	; 0x1124 <tinyPotential_update+0x6a>
*/
static void tinyPotential_decay()
{
		
	uint8_t time_since_last_update = tinyTime_now() - previous_update_time;
	tinyPotential_potential *= (exp(-((float)time_since_last_update/(float)TINYPOTENTIAL_TIME_CONST)));
    1112:	c0 92 54 38 	sts	0x3854, r12	; 0x803854 <tinyPotential_potential>
    1116:	d0 92 55 38 	sts	0x3855, r13	; 0x803855 <tinyPotential_potential+0x1>
    111a:	e0 92 56 38 	sts	0x3856, r14	; 0x803856 <tinyPotential_potential+0x2>
    111e:	f0 92 57 38 	sts	0x3857, r15	; 0x803857 <tinyPotential_potential+0x3>
    1122:	08 c0       	rjmp	.+16     	; 0x1134 <tinyPotential_update+0x7a>
	if(fabs(tinyPotential_potential)<0.1){
		tinyPotential_potential=0;
    1124:	10 92 54 38 	sts	0x3854, r1	; 0x803854 <tinyPotential_potential>
    1128:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <tinyPotential_potential+0x1>
    112c:	10 92 56 38 	sts	0x3856, r1	; 0x803856 <tinyPotential_potential+0x2>
    1130:	10 92 57 38 	sts	0x3857, r1	; 0x803857 <tinyPotential_potential+0x3>
	}
	previous_update_time = tinyTime_now();
    1134:	0e 94 4c 03 	call	0x698	; 0x698 <tinyTime_now>
    1138:	60 93 50 38 	sts	0x3850, r22	; 0x803850 <previous_update_time>
    113c:	70 93 51 38 	sts	0x3851, r23	; 0x803851 <previous_update_time+0x1>
    1140:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <previous_update_time+0x2>
    1144:	90 93 53 38 	sts	0x3853, r25	; 0x803853 <previous_update_time+0x3>
void tinyPotential_update()
{
	//Some of the potential in the neuron has decayed away
	tinyPotential_decay();
	// Update potential with values from Dendrites
	tinyPotential_potential = tinyDendrite_update_potential(tinyPotential_potential);
    1148:	60 91 54 38 	lds	r22, 0x3854	; 0x803854 <tinyPotential_potential>
    114c:	70 91 55 38 	lds	r23, 0x3855	; 0x803855 <tinyPotential_potential+0x1>
    1150:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <tinyPotential_potential+0x2>
    1154:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <tinyPotential_potential+0x3>
    1158:	0e 94 15 08 	call	0x102a	; 0x102a <tinyDendrite_update_potential>
    115c:	ab 01       	movw	r20, r22
    115e:	bc 01       	movw	r22, r24
    1160:	40 93 54 38 	sts	0x3854, r20	; 0x803854 <tinyPotential_potential>
    1164:	50 93 55 38 	sts	0x3855, r21	; 0x803855 <tinyPotential_potential+0x1>
    1168:	60 93 56 38 	sts	0x3856, r22	; 0x803856 <tinyPotential_potential+0x2>
    116c:	70 93 57 38 	sts	0x3857, r23	; 0x803857 <tinyPotential_potential+0x3>
	tinyDebugger_send_double("DendP", tinyPotential_potential);
    1170:	8c e4       	ldi	r24, 0x4C	; 76
    1172:	94 ea       	ldi	r25, 0xA4	; 164
    1174:	0e 94 ac 02 	call	0x558	; 0x558 <tinyDebugger_send_double>
	
	// Update potential from button press
	tinyPotential_potential = tinyButton_update_potential(tinyPotential_potential);
    1178:	60 91 54 38 	lds	r22, 0x3854	; 0x803854 <tinyPotential_potential>
    117c:	70 91 55 38 	lds	r23, 0x3855	; 0x803855 <tinyPotential_potential+0x1>
    1180:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <tinyPotential_potential+0x2>
    1184:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <tinyPotential_potential+0x3>
    1188:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <tinyButton_update_potential>
    118c:	60 93 54 38 	sts	0x3854, r22	; 0x803854 <tinyPotential_potential>
    1190:	70 93 55 38 	sts	0x3855, r23	; 0x803855 <tinyPotential_potential+0x1>
    1194:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <tinyPotential_potential+0x2>
    1198:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <tinyPotential_potential+0x3>
	
	// Update potential with values from spontaneous pulse.
	tinyPotential_potential = tinyPulse_update_potential(tinyPotential_potential);
    119c:	0e 94 00 03 	call	0x600	; 0x600 <tinyPulse_update_potential>
    11a0:	60 93 54 38 	sts	0x3854, r22	; 0x803854 <tinyPotential_potential>
    11a4:	70 93 55 38 	sts	0x3855, r23	; 0x803855 <tinyPotential_potential+0x1>
    11a8:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <tinyPotential_potential+0x2>
    11ac:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <tinyPotential_potential+0x3>
	
	// Let the axon affect the potential
	// This is also where we decide whether or not the axon should fire
	tinyPotential_potential = tinyAxon_update_potential(tinyPotential_potential);
    11b0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <tinyAxon_update_potential>
    11b4:	ab 01       	movw	r20, r22
    11b6:	bc 01       	movw	r22, r24
    11b8:	40 93 54 38 	sts	0x3854, r20	; 0x803854 <tinyPotential_potential>
    11bc:	50 93 55 38 	sts	0x3855, r21	; 0x803855 <tinyPotential_potential+0x1>
    11c0:	60 93 56 38 	sts	0x3856, r22	; 0x803856 <tinyPotential_potential+0x2>
    11c4:	70 93 57 38 	sts	0x3857, r23	; 0x803857 <tinyPotential_potential+0x3>
	tinyDebugger_send_double("AxonP", tinyPotential_potential);
    11c8:	82 e5       	ldi	r24, 0x52	; 82
    11ca:	94 ea       	ldi	r25, 0xA4	; 164
    11cc:	0e 94 ac 02 	call	0x558	; 0x558 <tinyDebugger_send_double>
}
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	df 90       	pop	r13
    11d6:	cf 90       	pop	r12
    11d8:	08 95       	ret

000011da <__subsf3>:
    11da:	50 58       	subi	r21, 0x80	; 128

000011dc <__addsf3>:
    11dc:	bb 27       	eor	r27, r27
    11de:	aa 27       	eor	r26, r26
    11e0:	0e 94 05 09 	call	0x120a	; 0x120a <__addsf3x>
    11e4:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_round>
    11e8:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_pscA>
    11ec:	38 f0       	brcs	.+14     	; 0x11fc <__addsf3+0x20>
    11ee:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__fp_pscB>
    11f2:	20 f0       	brcs	.+8      	; 0x11fc <__addsf3+0x20>
    11f4:	39 f4       	brne	.+14     	; 0x1204 <__addsf3+0x28>
    11f6:	9f 3f       	cpi	r25, 0xFF	; 255
    11f8:	19 f4       	brne	.+6      	; 0x1200 <__addsf3+0x24>
    11fa:	26 f4       	brtc	.+8      	; 0x1204 <__addsf3+0x28>
    11fc:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__fp_nan>
    1200:	0e f4       	brtc	.+2      	; 0x1204 <__addsf3+0x28>
    1202:	e0 95       	com	r30
    1204:	e7 fb       	bst	r30, 7
    1206:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__fp_inf>

0000120a <__addsf3x>:
    120a:	e9 2f       	mov	r30, r25
    120c:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_split3>
    1210:	58 f3       	brcs	.-42     	; 0x11e8 <__addsf3+0xc>
    1212:	ba 17       	cp	r27, r26
    1214:	62 07       	cpc	r22, r18
    1216:	73 07       	cpc	r23, r19
    1218:	84 07       	cpc	r24, r20
    121a:	95 07       	cpc	r25, r21
    121c:	20 f0       	brcs	.+8      	; 0x1226 <__addsf3x+0x1c>
    121e:	79 f4       	brne	.+30     	; 0x123e <__addsf3x+0x34>
    1220:	a6 f5       	brtc	.+104    	; 0x128a <__addsf3x+0x80>
    1222:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_zero>
    1226:	0e f4       	brtc	.+2      	; 0x122a <__addsf3x+0x20>
    1228:	e0 95       	com	r30
    122a:	0b 2e       	mov	r0, r27
    122c:	ba 2f       	mov	r27, r26
    122e:	a0 2d       	mov	r26, r0
    1230:	0b 01       	movw	r0, r22
    1232:	b9 01       	movw	r22, r18
    1234:	90 01       	movw	r18, r0
    1236:	0c 01       	movw	r0, r24
    1238:	ca 01       	movw	r24, r20
    123a:	a0 01       	movw	r20, r0
    123c:	11 24       	eor	r1, r1
    123e:	ff 27       	eor	r31, r31
    1240:	59 1b       	sub	r21, r25
    1242:	99 f0       	breq	.+38     	; 0x126a <__addsf3x+0x60>
    1244:	59 3f       	cpi	r21, 0xF9	; 249
    1246:	50 f4       	brcc	.+20     	; 0x125c <__addsf3x+0x52>
    1248:	50 3e       	cpi	r21, 0xE0	; 224
    124a:	68 f1       	brcs	.+90     	; 0x12a6 <__addsf3x+0x9c>
    124c:	1a 16       	cp	r1, r26
    124e:	f0 40       	sbci	r31, 0x00	; 0
    1250:	a2 2f       	mov	r26, r18
    1252:	23 2f       	mov	r18, r19
    1254:	34 2f       	mov	r19, r20
    1256:	44 27       	eor	r20, r20
    1258:	58 5f       	subi	r21, 0xF8	; 248
    125a:	f3 cf       	rjmp	.-26     	; 0x1242 <__addsf3x+0x38>
    125c:	46 95       	lsr	r20
    125e:	37 95       	ror	r19
    1260:	27 95       	ror	r18
    1262:	a7 95       	ror	r26
    1264:	f0 40       	sbci	r31, 0x00	; 0
    1266:	53 95       	inc	r21
    1268:	c9 f7       	brne	.-14     	; 0x125c <__addsf3x+0x52>
    126a:	7e f4       	brtc	.+30     	; 0x128a <__addsf3x+0x80>
    126c:	1f 16       	cp	r1, r31
    126e:	ba 0b       	sbc	r27, r26
    1270:	62 0b       	sbc	r22, r18
    1272:	73 0b       	sbc	r23, r19
    1274:	84 0b       	sbc	r24, r20
    1276:	ba f0       	brmi	.+46     	; 0x12a6 <__addsf3x+0x9c>
    1278:	91 50       	subi	r25, 0x01	; 1
    127a:	a1 f0       	breq	.+40     	; 0x12a4 <__addsf3x+0x9a>
    127c:	ff 0f       	add	r31, r31
    127e:	bb 1f       	adc	r27, r27
    1280:	66 1f       	adc	r22, r22
    1282:	77 1f       	adc	r23, r23
    1284:	88 1f       	adc	r24, r24
    1286:	c2 f7       	brpl	.-16     	; 0x1278 <__addsf3x+0x6e>
    1288:	0e c0       	rjmp	.+28     	; 0x12a6 <__addsf3x+0x9c>
    128a:	ba 0f       	add	r27, r26
    128c:	62 1f       	adc	r22, r18
    128e:	73 1f       	adc	r23, r19
    1290:	84 1f       	adc	r24, r20
    1292:	48 f4       	brcc	.+18     	; 0x12a6 <__addsf3x+0x9c>
    1294:	87 95       	ror	r24
    1296:	77 95       	ror	r23
    1298:	67 95       	ror	r22
    129a:	b7 95       	ror	r27
    129c:	f7 95       	ror	r31
    129e:	9e 3f       	cpi	r25, 0xFE	; 254
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <__addsf3x+0x9a>
    12a2:	b0 cf       	rjmp	.-160    	; 0x1204 <__addsf3+0x28>
    12a4:	93 95       	inc	r25
    12a6:	88 0f       	add	r24, r24
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <__addsf3x+0xa2>
    12aa:	99 27       	eor	r25, r25
    12ac:	ee 0f       	add	r30, r30
    12ae:	97 95       	ror	r25
    12b0:	87 95       	ror	r24
    12b2:	08 95       	ret

000012b4 <__cmpsf2>:
    12b4:	0e 94 96 0a 	call	0x152c	; 0x152c <__fp_cmp>
    12b8:	08 f4       	brcc	.+2      	; 0x12bc <__cmpsf2+0x8>
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	08 95       	ret

000012be <__divsf3>:
    12be:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__divsf3x>
    12c2:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_round>
    12c6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__fp_pscB>
    12ca:	58 f0       	brcs	.+22     	; 0x12e2 <__divsf3+0x24>
    12cc:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_pscA>
    12d0:	40 f0       	brcs	.+16     	; 0x12e2 <__divsf3+0x24>
    12d2:	29 f4       	brne	.+10     	; 0x12de <__divsf3+0x20>
    12d4:	5f 3f       	cpi	r21, 0xFF	; 255
    12d6:	29 f0       	breq	.+10     	; 0x12e2 <__divsf3+0x24>
    12d8:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__fp_inf>
    12dc:	51 11       	cpse	r21, r1
    12de:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_szero>
    12e2:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__fp_nan>

000012e6 <__divsf3x>:
    12e6:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_split3>
    12ea:	68 f3       	brcs	.-38     	; 0x12c6 <__divsf3+0x8>

000012ec <__divsf3_pse>:
    12ec:	99 23       	and	r25, r25
    12ee:	b1 f3       	breq	.-20     	; 0x12dc <__divsf3+0x1e>
    12f0:	55 23       	and	r21, r21
    12f2:	91 f3       	breq	.-28     	; 0x12d8 <__divsf3+0x1a>
    12f4:	95 1b       	sub	r25, r21
    12f6:	55 0b       	sbc	r21, r21
    12f8:	bb 27       	eor	r27, r27
    12fa:	aa 27       	eor	r26, r26
    12fc:	62 17       	cp	r22, r18
    12fe:	73 07       	cpc	r23, r19
    1300:	84 07       	cpc	r24, r20
    1302:	38 f0       	brcs	.+14     	; 0x1312 <__divsf3_pse+0x26>
    1304:	9f 5f       	subi	r25, 0xFF	; 255
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	44 1f       	adc	r20, r20
    130e:	aa 1f       	adc	r26, r26
    1310:	a9 f3       	breq	.-22     	; 0x12fc <__divsf3_pse+0x10>
    1312:	35 d0       	rcall	.+106    	; 0x137e <__divsf3_pse+0x92>
    1314:	0e 2e       	mov	r0, r30
    1316:	3a f0       	brmi	.+14     	; 0x1326 <__divsf3_pse+0x3a>
    1318:	e0 e8       	ldi	r30, 0x80	; 128
    131a:	32 d0       	rcall	.+100    	; 0x1380 <__divsf3_pse+0x94>
    131c:	91 50       	subi	r25, 0x01	; 1
    131e:	50 40       	sbci	r21, 0x00	; 0
    1320:	e6 95       	lsr	r30
    1322:	00 1c       	adc	r0, r0
    1324:	ca f7       	brpl	.-14     	; 0x1318 <__divsf3_pse+0x2c>
    1326:	2b d0       	rcall	.+86     	; 0x137e <__divsf3_pse+0x92>
    1328:	fe 2f       	mov	r31, r30
    132a:	29 d0       	rcall	.+82     	; 0x137e <__divsf3_pse+0x92>
    132c:	66 0f       	add	r22, r22
    132e:	77 1f       	adc	r23, r23
    1330:	88 1f       	adc	r24, r24
    1332:	bb 1f       	adc	r27, r27
    1334:	26 17       	cp	r18, r22
    1336:	37 07       	cpc	r19, r23
    1338:	48 07       	cpc	r20, r24
    133a:	ab 07       	cpc	r26, r27
    133c:	b0 e8       	ldi	r27, 0x80	; 128
    133e:	09 f0       	breq	.+2      	; 0x1342 <__divsf3_pse+0x56>
    1340:	bb 0b       	sbc	r27, r27
    1342:	80 2d       	mov	r24, r0
    1344:	bf 01       	movw	r22, r30
    1346:	ff 27       	eor	r31, r31
    1348:	93 58       	subi	r25, 0x83	; 131
    134a:	5f 4f       	sbci	r21, 0xFF	; 255
    134c:	3a f0       	brmi	.+14     	; 0x135c <__divsf3_pse+0x70>
    134e:	9e 3f       	cpi	r25, 0xFE	; 254
    1350:	51 05       	cpc	r21, r1
    1352:	78 f0       	brcs	.+30     	; 0x1372 <__divsf3_pse+0x86>
    1354:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__fp_inf>
    1358:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_szero>
    135c:	5f 3f       	cpi	r21, 0xFF	; 255
    135e:	e4 f3       	brlt	.-8      	; 0x1358 <__divsf3_pse+0x6c>
    1360:	98 3e       	cpi	r25, 0xE8	; 232
    1362:	d4 f3       	brlt	.-12     	; 0x1358 <__divsf3_pse+0x6c>
    1364:	86 95       	lsr	r24
    1366:	77 95       	ror	r23
    1368:	67 95       	ror	r22
    136a:	b7 95       	ror	r27
    136c:	f7 95       	ror	r31
    136e:	9f 5f       	subi	r25, 0xFF	; 255
    1370:	c9 f7       	brne	.-14     	; 0x1364 <__divsf3_pse+0x78>
    1372:	88 0f       	add	r24, r24
    1374:	91 1d       	adc	r25, r1
    1376:	96 95       	lsr	r25
    1378:	87 95       	ror	r24
    137a:	97 f9       	bld	r25, 7
    137c:	08 95       	ret
    137e:	e1 e0       	ldi	r30, 0x01	; 1
    1380:	66 0f       	add	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	88 1f       	adc	r24, r24
    1386:	bb 1f       	adc	r27, r27
    1388:	62 17       	cp	r22, r18
    138a:	73 07       	cpc	r23, r19
    138c:	84 07       	cpc	r24, r20
    138e:	ba 07       	cpc	r27, r26
    1390:	20 f0       	brcs	.+8      	; 0x139a <__divsf3_pse+0xae>
    1392:	62 1b       	sub	r22, r18
    1394:	73 0b       	sbc	r23, r19
    1396:	84 0b       	sbc	r24, r20
    1398:	ba 0b       	sbc	r27, r26
    139a:	ee 1f       	adc	r30, r30
    139c:	88 f7       	brcc	.-30     	; 0x1380 <__divsf3_pse+0x94>
    139e:	e0 95       	com	r30
    13a0:	08 95       	ret
    13a2:	29 f4       	brne	.+10     	; 0x13ae <__divsf3_pse+0xc2>
    13a4:	16 f0       	brts	.+4      	; 0x13aa <__divsf3_pse+0xbe>
    13a6:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__fp_inf>
    13aa:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_zero>
    13ae:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__fp_nan>

000013b2 <exp>:
    13b2:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fp_splitA>
    13b6:	a8 f3       	brcs	.-22     	; 0x13a2 <__divsf3_pse+0xb6>
    13b8:	96 38       	cpi	r25, 0x86	; 134
    13ba:	a0 f7       	brcc	.-24     	; 0x13a4 <__divsf3_pse+0xb8>
    13bc:	07 f8       	bld	r0, 7
    13be:	0f 92       	push	r0
    13c0:	e8 94       	clt
    13c2:	2b e3       	ldi	r18, 0x3B	; 59
    13c4:	3a ea       	ldi	r19, 0xAA	; 170
    13c6:	48 eb       	ldi	r20, 0xB8	; 184
    13c8:	5f e7       	ldi	r21, 0x7F	; 127
    13ca:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__mulsf3_pse>
    13ce:	0f 92       	push	r0
    13d0:	0f 92       	push	r0
    13d2:	0f 92       	push	r0
    13d4:	4d b7       	in	r20, 0x3d	; 61
    13d6:	5e b7       	in	r21, 0x3e	; 62
    13d8:	0f 92       	push	r0
    13da:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <modf>
    13de:	ec e7       	ldi	r30, 0x7C	; 124
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__fp_powser>
    13e6:	4f 91       	pop	r20
    13e8:	5f 91       	pop	r21
    13ea:	ef 91       	pop	r30
    13ec:	ff 91       	pop	r31
    13ee:	e5 95       	asr	r30
    13f0:	ee 1f       	adc	r30, r30
    13f2:	ff 1f       	adc	r31, r31
    13f4:	49 f0       	breq	.+18     	; 0x1408 <exp+0x56>
    13f6:	fe 57       	subi	r31, 0x7E	; 126
    13f8:	e0 68       	ori	r30, 0x80	; 128
    13fa:	44 27       	eor	r20, r20
    13fc:	ee 0f       	add	r30, r30
    13fe:	44 1f       	adc	r20, r20
    1400:	fa 95       	dec	r31
    1402:	e1 f7       	brne	.-8      	; 0x13fc <exp+0x4a>
    1404:	41 95       	neg	r20
    1406:	55 0b       	sbc	r21, r21
    1408:	0e 94 43 0b 	call	0x1686	; 0x1686 <ldexp>
    140c:	0f 90       	pop	r0
    140e:	07 fe       	sbrs	r0, 7
    1410:	0c 94 37 0b 	jmp	0x166e	; 0x166e <inverse>
    1414:	08 95       	ret

00001416 <__fixunssfsi>:
    1416:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fp_splitA>
    141a:	88 f0       	brcs	.+34     	; 0x143e <__fixunssfsi+0x28>
    141c:	9f 57       	subi	r25, 0x7F	; 127
    141e:	98 f0       	brcs	.+38     	; 0x1446 <__fixunssfsi+0x30>
    1420:	b9 2f       	mov	r27, r25
    1422:	99 27       	eor	r25, r25
    1424:	b7 51       	subi	r27, 0x17	; 23
    1426:	b0 f0       	brcs	.+44     	; 0x1454 <__fixunssfsi+0x3e>
    1428:	e1 f0       	breq	.+56     	; 0x1462 <__fixunssfsi+0x4c>
    142a:	66 0f       	add	r22, r22
    142c:	77 1f       	adc	r23, r23
    142e:	88 1f       	adc	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	1a f0       	brmi	.+6      	; 0x143a <__fixunssfsi+0x24>
    1434:	ba 95       	dec	r27
    1436:	c9 f7       	brne	.-14     	; 0x142a <__fixunssfsi+0x14>
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <__fixunssfsi+0x4c>
    143a:	b1 30       	cpi	r27, 0x01	; 1
    143c:	91 f0       	breq	.+36     	; 0x1462 <__fixunssfsi+0x4c>
    143e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__fp_zero>
    1442:	b1 e0       	ldi	r27, 0x01	; 1
    1444:	08 95       	ret
    1446:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_zero>
    144a:	67 2f       	mov	r22, r23
    144c:	78 2f       	mov	r23, r24
    144e:	88 27       	eor	r24, r24
    1450:	b8 5f       	subi	r27, 0xF8	; 248
    1452:	39 f0       	breq	.+14     	; 0x1462 <__fixunssfsi+0x4c>
    1454:	b9 3f       	cpi	r27, 0xF9	; 249
    1456:	cc f3       	brlt	.-14     	; 0x144a <__fixunssfsi+0x34>
    1458:	86 95       	lsr	r24
    145a:	77 95       	ror	r23
    145c:	67 95       	ror	r22
    145e:	b3 95       	inc	r27
    1460:	d9 f7       	brne	.-10     	; 0x1458 <__fixunssfsi+0x42>
    1462:	3e f4       	brtc	.+14     	; 0x1472 <__fixunssfsi+0x5c>
    1464:	90 95       	com	r25
    1466:	80 95       	com	r24
    1468:	70 95       	com	r23
    146a:	61 95       	neg	r22
    146c:	7f 4f       	sbci	r23, 0xFF	; 255
    146e:	8f 4f       	sbci	r24, 0xFF	; 255
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	08 95       	ret

00001474 <__floatunsisf>:
    1474:	e8 94       	clt
    1476:	09 c0       	rjmp	.+18     	; 0x148a <__floatsisf+0x12>

00001478 <__floatsisf>:
    1478:	97 fb       	bst	r25, 7
    147a:	3e f4       	brtc	.+14     	; 0x148a <__floatsisf+0x12>
    147c:	90 95       	com	r25
    147e:	80 95       	com	r24
    1480:	70 95       	com	r23
    1482:	61 95       	neg	r22
    1484:	7f 4f       	sbci	r23, 0xFF	; 255
    1486:	8f 4f       	sbci	r24, 0xFF	; 255
    1488:	9f 4f       	sbci	r25, 0xFF	; 255
    148a:	99 23       	and	r25, r25
    148c:	a9 f0       	breq	.+42     	; 0x14b8 <__floatsisf+0x40>
    148e:	f9 2f       	mov	r31, r25
    1490:	96 e9       	ldi	r25, 0x96	; 150
    1492:	bb 27       	eor	r27, r27
    1494:	93 95       	inc	r25
    1496:	f6 95       	lsr	r31
    1498:	87 95       	ror	r24
    149a:	77 95       	ror	r23
    149c:	67 95       	ror	r22
    149e:	b7 95       	ror	r27
    14a0:	f1 11       	cpse	r31, r1
    14a2:	f8 cf       	rjmp	.-16     	; 0x1494 <__floatsisf+0x1c>
    14a4:	fa f4       	brpl	.+62     	; 0x14e4 <__floatsisf+0x6c>
    14a6:	bb 0f       	add	r27, r27
    14a8:	11 f4       	brne	.+4      	; 0x14ae <__floatsisf+0x36>
    14aa:	60 ff       	sbrs	r22, 0
    14ac:	1b c0       	rjmp	.+54     	; 0x14e4 <__floatsisf+0x6c>
    14ae:	6f 5f       	subi	r22, 0xFF	; 255
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255
    14b2:	8f 4f       	sbci	r24, 0xFF	; 255
    14b4:	9f 4f       	sbci	r25, 0xFF	; 255
    14b6:	16 c0       	rjmp	.+44     	; 0x14e4 <__floatsisf+0x6c>
    14b8:	88 23       	and	r24, r24
    14ba:	11 f0       	breq	.+4      	; 0x14c0 <__floatsisf+0x48>
    14bc:	96 e9       	ldi	r25, 0x96	; 150
    14be:	11 c0       	rjmp	.+34     	; 0x14e2 <__floatsisf+0x6a>
    14c0:	77 23       	and	r23, r23
    14c2:	21 f0       	breq	.+8      	; 0x14cc <__floatsisf+0x54>
    14c4:	9e e8       	ldi	r25, 0x8E	; 142
    14c6:	87 2f       	mov	r24, r23
    14c8:	76 2f       	mov	r23, r22
    14ca:	05 c0       	rjmp	.+10     	; 0x14d6 <__floatsisf+0x5e>
    14cc:	66 23       	and	r22, r22
    14ce:	71 f0       	breq	.+28     	; 0x14ec <__floatsisf+0x74>
    14d0:	96 e8       	ldi	r25, 0x86	; 134
    14d2:	86 2f       	mov	r24, r22
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	2a f0       	brmi	.+10     	; 0x14e4 <__floatsisf+0x6c>
    14da:	9a 95       	dec	r25
    14dc:	66 0f       	add	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	da f7       	brpl	.-10     	; 0x14da <__floatsisf+0x62>
    14e4:	88 0f       	add	r24, r24
    14e6:	96 95       	lsr	r25
    14e8:	87 95       	ror	r24
    14ea:	97 f9       	bld	r25, 7
    14ec:	08 95       	ret

000014ee <fmin>:
    14ee:	99 0f       	add	r25, r25
    14f0:	bb 0b       	sbc	r27, r27
    14f2:	55 0f       	add	r21, r21
    14f4:	aa 0b       	sbc	r26, r26
    14f6:	e0 e8       	ldi	r30, 0x80	; 128
    14f8:	fe ef       	ldi	r31, 0xFE	; 254
    14fa:	16 16       	cp	r1, r22
    14fc:	17 06       	cpc	r1, r23
    14fe:	e8 07       	cpc	r30, r24
    1500:	f9 07       	cpc	r31, r25
    1502:	70 f0       	brcs	.+28     	; 0x1520 <fmin+0x32>
    1504:	12 16       	cp	r1, r18
    1506:	13 06       	cpc	r1, r19
    1508:	e4 07       	cpc	r30, r20
    150a:	f5 07       	cpc	r31, r21
    150c:	60 f0       	brcs	.+24     	; 0x1526 <fmin+0x38>
    150e:	ba 17       	cp	r27, r26
    1510:	54 f0       	brlt	.+20     	; 0x1526 <fmin+0x38>
    1512:	31 f4       	brne	.+12     	; 0x1520 <fmin+0x32>
    1514:	26 17       	cp	r18, r22
    1516:	37 07       	cpc	r19, r23
    1518:	48 07       	cpc	r20, r24
    151a:	59 07       	cpc	r21, r25
    151c:	a7 95       	ror	r26
    151e:	1b f4       	brvc	.+6      	; 0x1526 <fmin+0x38>
    1520:	b9 01       	movw	r22, r18
    1522:	ca 01       	movw	r24, r20
    1524:	ba 2f       	mov	r27, r26
    1526:	b6 95       	lsr	r27
    1528:	97 95       	ror	r25
    152a:	08 95       	ret

0000152c <__fp_cmp>:
    152c:	99 0f       	add	r25, r25
    152e:	00 08       	sbc	r0, r0
    1530:	55 0f       	add	r21, r21
    1532:	aa 0b       	sbc	r26, r26
    1534:	e0 e8       	ldi	r30, 0x80	; 128
    1536:	fe ef       	ldi	r31, 0xFE	; 254
    1538:	16 16       	cp	r1, r22
    153a:	17 06       	cpc	r1, r23
    153c:	e8 07       	cpc	r30, r24
    153e:	f9 07       	cpc	r31, r25
    1540:	c0 f0       	brcs	.+48     	; 0x1572 <__fp_cmp+0x46>
    1542:	12 16       	cp	r1, r18
    1544:	13 06       	cpc	r1, r19
    1546:	e4 07       	cpc	r30, r20
    1548:	f5 07       	cpc	r31, r21
    154a:	98 f0       	brcs	.+38     	; 0x1572 <__fp_cmp+0x46>
    154c:	62 1b       	sub	r22, r18
    154e:	73 0b       	sbc	r23, r19
    1550:	84 0b       	sbc	r24, r20
    1552:	95 0b       	sbc	r25, r21
    1554:	39 f4       	brne	.+14     	; 0x1564 <__fp_cmp+0x38>
    1556:	0a 26       	eor	r0, r26
    1558:	61 f0       	breq	.+24     	; 0x1572 <__fp_cmp+0x46>
    155a:	23 2b       	or	r18, r19
    155c:	24 2b       	or	r18, r20
    155e:	25 2b       	or	r18, r21
    1560:	21 f4       	brne	.+8      	; 0x156a <__fp_cmp+0x3e>
    1562:	08 95       	ret
    1564:	0a 26       	eor	r0, r26
    1566:	09 f4       	brne	.+2      	; 0x156a <__fp_cmp+0x3e>
    1568:	a1 40       	sbci	r26, 0x01	; 1
    156a:	a6 95       	lsr	r26
    156c:	8f ef       	ldi	r24, 0xFF	; 255
    156e:	81 1d       	adc	r24, r1
    1570:	81 1d       	adc	r24, r1
    1572:	08 95       	ret

00001574 <__fp_inf>:
    1574:	97 f9       	bld	r25, 7
    1576:	9f 67       	ori	r25, 0x7F	; 127
    1578:	80 e8       	ldi	r24, 0x80	; 128
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	08 95       	ret

00001580 <__fp_nan>:
    1580:	9f ef       	ldi	r25, 0xFF	; 255
    1582:	80 ec       	ldi	r24, 0xC0	; 192
    1584:	08 95       	ret

00001586 <__fp_powser>:
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	1f 93       	push	r17
    158c:	0f 93       	push	r16
    158e:	ff 92       	push	r15
    1590:	ef 92       	push	r14
    1592:	df 92       	push	r13
    1594:	7b 01       	movw	r14, r22
    1596:	8c 01       	movw	r16, r24
    1598:	68 94       	set
    159a:	06 c0       	rjmp	.+12     	; 0x15a8 <__fp_powser+0x22>
    159c:	da 2e       	mov	r13, r26
    159e:	ef 01       	movw	r28, r30
    15a0:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__mulsf3x>
    15a4:	fe 01       	movw	r30, r28
    15a6:	e8 94       	clt
    15a8:	a5 91       	lpm	r26, Z+
    15aa:	25 91       	lpm	r18, Z+
    15ac:	35 91       	lpm	r19, Z+
    15ae:	45 91       	lpm	r20, Z+
    15b0:	55 91       	lpm	r21, Z+
    15b2:	a6 f3       	brts	.-24     	; 0x159c <__fp_powser+0x16>
    15b4:	ef 01       	movw	r28, r30
    15b6:	0e 94 05 09 	call	0x120a	; 0x120a <__addsf3x>
    15ba:	fe 01       	movw	r30, r28
    15bc:	97 01       	movw	r18, r14
    15be:	a8 01       	movw	r20, r16
    15c0:	da 94       	dec	r13
    15c2:	69 f7       	brne	.-38     	; 0x159e <__fp_powser+0x18>
    15c4:	df 90       	pop	r13
    15c6:	ef 90       	pop	r14
    15c8:	ff 90       	pop	r15
    15ca:	0f 91       	pop	r16
    15cc:	1f 91       	pop	r17
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <__fp_pscA>:
    15d4:	00 24       	eor	r0, r0
    15d6:	0a 94       	dec	r0
    15d8:	16 16       	cp	r1, r22
    15da:	17 06       	cpc	r1, r23
    15dc:	18 06       	cpc	r1, r24
    15de:	09 06       	cpc	r0, r25
    15e0:	08 95       	ret

000015e2 <__fp_pscB>:
    15e2:	00 24       	eor	r0, r0
    15e4:	0a 94       	dec	r0
    15e6:	12 16       	cp	r1, r18
    15e8:	13 06       	cpc	r1, r19
    15ea:	14 06       	cpc	r1, r20
    15ec:	05 06       	cpc	r0, r21
    15ee:	08 95       	ret

000015f0 <__fp_round>:
    15f0:	09 2e       	mov	r0, r25
    15f2:	03 94       	inc	r0
    15f4:	00 0c       	add	r0, r0
    15f6:	11 f4       	brne	.+4      	; 0x15fc <__fp_round+0xc>
    15f8:	88 23       	and	r24, r24
    15fa:	52 f0       	brmi	.+20     	; 0x1610 <__fp_round+0x20>
    15fc:	bb 0f       	add	r27, r27
    15fe:	40 f4       	brcc	.+16     	; 0x1610 <__fp_round+0x20>
    1600:	bf 2b       	or	r27, r31
    1602:	11 f4       	brne	.+4      	; 0x1608 <__fp_round+0x18>
    1604:	60 ff       	sbrs	r22, 0
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <__fp_round+0x20>
    1608:	6f 5f       	subi	r22, 0xFF	; 255
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	8f 4f       	sbci	r24, 0xFF	; 255
    160e:	9f 4f       	sbci	r25, 0xFF	; 255
    1610:	08 95       	ret

00001612 <__fp_split3>:
    1612:	57 fd       	sbrc	r21, 7
    1614:	90 58       	subi	r25, 0x80	; 128
    1616:	44 0f       	add	r20, r20
    1618:	55 1f       	adc	r21, r21
    161a:	59 f0       	breq	.+22     	; 0x1632 <__fp_splitA+0x10>
    161c:	5f 3f       	cpi	r21, 0xFF	; 255
    161e:	71 f0       	breq	.+28     	; 0x163c <__fp_splitA+0x1a>
    1620:	47 95       	ror	r20

00001622 <__fp_splitA>:
    1622:	88 0f       	add	r24, r24
    1624:	97 fb       	bst	r25, 7
    1626:	99 1f       	adc	r25, r25
    1628:	61 f0       	breq	.+24     	; 0x1642 <__fp_splitA+0x20>
    162a:	9f 3f       	cpi	r25, 0xFF	; 255
    162c:	79 f0       	breq	.+30     	; 0x164c <__fp_splitA+0x2a>
    162e:	87 95       	ror	r24
    1630:	08 95       	ret
    1632:	12 16       	cp	r1, r18
    1634:	13 06       	cpc	r1, r19
    1636:	14 06       	cpc	r1, r20
    1638:	55 1f       	adc	r21, r21
    163a:	f2 cf       	rjmp	.-28     	; 0x1620 <__fp_split3+0xe>
    163c:	46 95       	lsr	r20
    163e:	f1 df       	rcall	.-30     	; 0x1622 <__fp_splitA>
    1640:	08 c0       	rjmp	.+16     	; 0x1652 <__fp_splitA+0x30>
    1642:	16 16       	cp	r1, r22
    1644:	17 06       	cpc	r1, r23
    1646:	18 06       	cpc	r1, r24
    1648:	99 1f       	adc	r25, r25
    164a:	f1 cf       	rjmp	.-30     	; 0x162e <__fp_splitA+0xc>
    164c:	86 95       	lsr	r24
    164e:	71 05       	cpc	r23, r1
    1650:	61 05       	cpc	r22, r1
    1652:	08 94       	sec
    1654:	08 95       	ret

00001656 <__fp_zero>:
    1656:	e8 94       	clt

00001658 <__fp_szero>:
    1658:	bb 27       	eor	r27, r27
    165a:	66 27       	eor	r22, r22
    165c:	77 27       	eor	r23, r23
    165e:	cb 01       	movw	r24, r22
    1660:	97 f9       	bld	r25, 7
    1662:	08 95       	ret

00001664 <__gesf2>:
    1664:	0e 94 96 0a 	call	0x152c	; 0x152c <__fp_cmp>
    1668:	08 f4       	brcc	.+2      	; 0x166c <__gesf2+0x8>
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	08 95       	ret

0000166e <inverse>:
    166e:	9b 01       	movw	r18, r22
    1670:	ac 01       	movw	r20, r24
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	80 e8       	ldi	r24, 0x80	; 128
    1678:	9f e3       	ldi	r25, 0x3F	; 63
    167a:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__divsf3>
    167e:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__fp_inf>
    1682:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__fp_mpack>

00001686 <ldexp>:
    1686:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fp_splitA>
    168a:	d8 f3       	brcs	.-10     	; 0x1682 <inverse+0x14>
    168c:	99 23       	and	r25, r25
    168e:	c9 f3       	breq	.-14     	; 0x1682 <inverse+0x14>
    1690:	94 0f       	add	r25, r20
    1692:	51 1d       	adc	r21, r1
    1694:	a3 f3       	brvs	.-24     	; 0x167e <inverse+0x10>
    1696:	91 50       	subi	r25, 0x01	; 1
    1698:	50 40       	sbci	r21, 0x00	; 0
    169a:	94 f0       	brlt	.+36     	; 0x16c0 <ldexp+0x3a>
    169c:	59 f0       	breq	.+22     	; 0x16b4 <ldexp+0x2e>
    169e:	88 23       	and	r24, r24
    16a0:	32 f0       	brmi	.+12     	; 0x16ae <ldexp+0x28>
    16a2:	66 0f       	add	r22, r22
    16a4:	77 1f       	adc	r23, r23
    16a6:	88 1f       	adc	r24, r24
    16a8:	91 50       	subi	r25, 0x01	; 1
    16aa:	50 40       	sbci	r21, 0x00	; 0
    16ac:	c1 f7       	brne	.-16     	; 0x169e <ldexp+0x18>
    16ae:	9e 3f       	cpi	r25, 0xFE	; 254
    16b0:	51 05       	cpc	r21, r1
    16b2:	2c f7       	brge	.-54     	; 0x167e <inverse+0x10>
    16b4:	88 0f       	add	r24, r24
    16b6:	91 1d       	adc	r25, r1
    16b8:	96 95       	lsr	r25
    16ba:	87 95       	ror	r24
    16bc:	97 f9       	bld	r25, 7
    16be:	08 95       	ret
    16c0:	5f 3f       	cpi	r21, 0xFF	; 255
    16c2:	ac f0       	brlt	.+42     	; 0x16ee <ldexp+0x68>
    16c4:	98 3e       	cpi	r25, 0xE8	; 232
    16c6:	9c f0       	brlt	.+38     	; 0x16ee <ldexp+0x68>
    16c8:	bb 27       	eor	r27, r27
    16ca:	86 95       	lsr	r24
    16cc:	77 95       	ror	r23
    16ce:	67 95       	ror	r22
    16d0:	b7 95       	ror	r27
    16d2:	08 f4       	brcc	.+2      	; 0x16d6 <ldexp+0x50>
    16d4:	b1 60       	ori	r27, 0x01	; 1
    16d6:	93 95       	inc	r25
    16d8:	c1 f7       	brne	.-16     	; 0x16ca <ldexp+0x44>
    16da:	bb 0f       	add	r27, r27
    16dc:	58 f7       	brcc	.-42     	; 0x16b4 <ldexp+0x2e>
    16de:	11 f4       	brne	.+4      	; 0x16e4 <ldexp+0x5e>
    16e0:	60 ff       	sbrs	r22, 0
    16e2:	e8 cf       	rjmp	.-48     	; 0x16b4 <ldexp+0x2e>
    16e4:	6f 5f       	subi	r22, 0xFF	; 255
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ea:	9f 4f       	sbci	r25, 0xFF	; 255
    16ec:	e3 cf       	rjmp	.-58     	; 0x16b4 <ldexp+0x2e>
    16ee:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_szero>

000016f2 <modf>:
    16f2:	fa 01       	movw	r30, r20
    16f4:	dc 01       	movw	r26, r24
    16f6:	aa 0f       	add	r26, r26
    16f8:	bb 1f       	adc	r27, r27
    16fa:	9b 01       	movw	r18, r22
    16fc:	ac 01       	movw	r20, r24
    16fe:	bf 57       	subi	r27, 0x7F	; 127
    1700:	28 f4       	brcc	.+10     	; 0x170c <modf+0x1a>
    1702:	22 27       	eor	r18, r18
    1704:	33 27       	eor	r19, r19
    1706:	44 27       	eor	r20, r20
    1708:	50 78       	andi	r21, 0x80	; 128
    170a:	20 c0       	rjmp	.+64     	; 0x174c <modf+0x5a>
    170c:	b7 51       	subi	r27, 0x17	; 23
    170e:	90 f4       	brcc	.+36     	; 0x1734 <modf+0x42>
    1710:	ab 2f       	mov	r26, r27
    1712:	00 24       	eor	r0, r0
    1714:	46 95       	lsr	r20
    1716:	37 95       	ror	r19
    1718:	27 95       	ror	r18
    171a:	01 1c       	adc	r0, r1
    171c:	a3 95       	inc	r26
    171e:	d2 f3       	brmi	.-12     	; 0x1714 <modf+0x22>
    1720:	00 20       	and	r0, r0
    1722:	71 f0       	breq	.+28     	; 0x1740 <modf+0x4e>
    1724:	22 0f       	add	r18, r18
    1726:	33 1f       	adc	r19, r19
    1728:	44 1f       	adc	r20, r20
    172a:	b3 95       	inc	r27
    172c:	da f3       	brmi	.-10     	; 0x1724 <modf+0x32>
    172e:	0e d0       	rcall	.+28     	; 0x174c <modf+0x5a>
    1730:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__subsf3>
    1734:	61 30       	cpi	r22, 0x01	; 1
    1736:	71 05       	cpc	r23, r1
    1738:	a0 e8       	ldi	r26, 0x80	; 128
    173a:	8a 07       	cpc	r24, r26
    173c:	b9 46       	sbci	r27, 0x69	; 105
    173e:	30 f4       	brcc	.+12     	; 0x174c <modf+0x5a>
    1740:	9b 01       	movw	r18, r22
    1742:	ac 01       	movw	r20, r24
    1744:	66 27       	eor	r22, r22
    1746:	77 27       	eor	r23, r23
    1748:	88 27       	eor	r24, r24
    174a:	90 78       	andi	r25, 0x80	; 128
    174c:	30 96       	adiw	r30, 0x00	; 0
    174e:	21 f0       	breq	.+8      	; 0x1758 <modf+0x66>
    1750:	20 83       	st	Z, r18
    1752:	31 83       	std	Z+1, r19	; 0x01
    1754:	42 83       	std	Z+2, r20	; 0x02
    1756:	53 83       	std	Z+3, r21	; 0x03
    1758:	08 95       	ret

0000175a <__mulsf3>:
    175a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__mulsf3x>
    175e:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_round>
    1762:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_pscA>
    1766:	38 f0       	brcs	.+14     	; 0x1776 <__mulsf3+0x1c>
    1768:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__fp_pscB>
    176c:	20 f0       	brcs	.+8      	; 0x1776 <__mulsf3+0x1c>
    176e:	95 23       	and	r25, r21
    1770:	11 f0       	breq	.+4      	; 0x1776 <__mulsf3+0x1c>
    1772:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__fp_inf>
    1776:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__fp_nan>
    177a:	11 24       	eor	r1, r1
    177c:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_szero>

00001780 <__mulsf3x>:
    1780:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_split3>
    1784:	70 f3       	brcs	.-36     	; 0x1762 <__mulsf3+0x8>

00001786 <__mulsf3_pse>:
    1786:	95 9f       	mul	r25, r21
    1788:	c1 f3       	breq	.-16     	; 0x177a <__mulsf3+0x20>
    178a:	95 0f       	add	r25, r21
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	55 1f       	adc	r21, r21
    1790:	62 9f       	mul	r22, r18
    1792:	f0 01       	movw	r30, r0
    1794:	72 9f       	mul	r23, r18
    1796:	bb 27       	eor	r27, r27
    1798:	f0 0d       	add	r31, r0
    179a:	b1 1d       	adc	r27, r1
    179c:	63 9f       	mul	r22, r19
    179e:	aa 27       	eor	r26, r26
    17a0:	f0 0d       	add	r31, r0
    17a2:	b1 1d       	adc	r27, r1
    17a4:	aa 1f       	adc	r26, r26
    17a6:	64 9f       	mul	r22, r20
    17a8:	66 27       	eor	r22, r22
    17aa:	b0 0d       	add	r27, r0
    17ac:	a1 1d       	adc	r26, r1
    17ae:	66 1f       	adc	r22, r22
    17b0:	82 9f       	mul	r24, r18
    17b2:	22 27       	eor	r18, r18
    17b4:	b0 0d       	add	r27, r0
    17b6:	a1 1d       	adc	r26, r1
    17b8:	62 1f       	adc	r22, r18
    17ba:	73 9f       	mul	r23, r19
    17bc:	b0 0d       	add	r27, r0
    17be:	a1 1d       	adc	r26, r1
    17c0:	62 1f       	adc	r22, r18
    17c2:	83 9f       	mul	r24, r19
    17c4:	a0 0d       	add	r26, r0
    17c6:	61 1d       	adc	r22, r1
    17c8:	22 1f       	adc	r18, r18
    17ca:	74 9f       	mul	r23, r20
    17cc:	33 27       	eor	r19, r19
    17ce:	a0 0d       	add	r26, r0
    17d0:	61 1d       	adc	r22, r1
    17d2:	23 1f       	adc	r18, r19
    17d4:	84 9f       	mul	r24, r20
    17d6:	60 0d       	add	r22, r0
    17d8:	21 1d       	adc	r18, r1
    17da:	82 2f       	mov	r24, r18
    17dc:	76 2f       	mov	r23, r22
    17de:	6a 2f       	mov	r22, r26
    17e0:	11 24       	eor	r1, r1
    17e2:	9f 57       	subi	r25, 0x7F	; 127
    17e4:	50 40       	sbci	r21, 0x00	; 0
    17e6:	9a f0       	brmi	.+38     	; 0x180e <__mulsf3_pse+0x88>
    17e8:	f1 f0       	breq	.+60     	; 0x1826 <__mulsf3_pse+0xa0>
    17ea:	88 23       	and	r24, r24
    17ec:	4a f0       	brmi	.+18     	; 0x1800 <__mulsf3_pse+0x7a>
    17ee:	ee 0f       	add	r30, r30
    17f0:	ff 1f       	adc	r31, r31
    17f2:	bb 1f       	adc	r27, r27
    17f4:	66 1f       	adc	r22, r22
    17f6:	77 1f       	adc	r23, r23
    17f8:	88 1f       	adc	r24, r24
    17fa:	91 50       	subi	r25, 0x01	; 1
    17fc:	50 40       	sbci	r21, 0x00	; 0
    17fe:	a9 f7       	brne	.-22     	; 0x17ea <__mulsf3_pse+0x64>
    1800:	9e 3f       	cpi	r25, 0xFE	; 254
    1802:	51 05       	cpc	r21, r1
    1804:	80 f0       	brcs	.+32     	; 0x1826 <__mulsf3_pse+0xa0>
    1806:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__fp_inf>
    180a:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_szero>
    180e:	5f 3f       	cpi	r21, 0xFF	; 255
    1810:	e4 f3       	brlt	.-8      	; 0x180a <__mulsf3_pse+0x84>
    1812:	98 3e       	cpi	r25, 0xE8	; 232
    1814:	d4 f3       	brlt	.-12     	; 0x180a <__mulsf3_pse+0x84>
    1816:	86 95       	lsr	r24
    1818:	77 95       	ror	r23
    181a:	67 95       	ror	r22
    181c:	b7 95       	ror	r27
    181e:	f7 95       	ror	r31
    1820:	e7 95       	ror	r30
    1822:	9f 5f       	subi	r25, 0xFF	; 255
    1824:	c1 f7       	brne	.-16     	; 0x1816 <__mulsf3_pse+0x90>
    1826:	fe 2b       	or	r31, r30
    1828:	88 0f       	add	r24, r24
    182a:	91 1d       	adc	r25, r1
    182c:	96 95       	lsr	r25
    182e:	87 95       	ror	r24
    1830:	97 f9       	bld	r25, 7
    1832:	08 95       	ret

00001834 <sin>:
    1834:	9f 93       	push	r25
    1836:	0e 94 32 0c 	call	0x1864	; 0x1864 <__fp_rempio2>
    183a:	0f 90       	pop	r0
    183c:	07 fc       	sbrc	r0, 7
    183e:	ee 5f       	subi	r30, 0xFE	; 254
    1840:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__fp_sinus>

00001844 <__fp_mpack>:
    1844:	9f 3f       	cpi	r25, 0xFF	; 255
    1846:	31 f0       	breq	.+12     	; 0x1854 <__fp_mpack_finite+0xc>

00001848 <__fp_mpack_finite>:
    1848:	91 50       	subi	r25, 0x01	; 1
    184a:	20 f4       	brcc	.+8      	; 0x1854 <__fp_mpack_finite+0xc>
    184c:	87 95       	ror	r24
    184e:	77 95       	ror	r23
    1850:	67 95       	ror	r22
    1852:	b7 95       	ror	r27
    1854:	88 0f       	add	r24, r24
    1856:	91 1d       	adc	r25, r1
    1858:	96 95       	lsr	r25
    185a:	87 95       	ror	r24
    185c:	97 f9       	bld	r25, 7
    185e:	08 95       	ret
    1860:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__fp_nan>

00001864 <__fp_rempio2>:
    1864:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fp_splitA>
    1868:	d8 f3       	brcs	.-10     	; 0x1860 <__fp_mpack_finite+0x18>
    186a:	e8 94       	clt
    186c:	e0 e0       	ldi	r30, 0x00	; 0
    186e:	bb 27       	eor	r27, r27
    1870:	9f 57       	subi	r25, 0x7F	; 127
    1872:	f0 f0       	brcs	.+60     	; 0x18b0 <__fp_rempio2+0x4c>
    1874:	2a ed       	ldi	r18, 0xDA	; 218
    1876:	3f e0       	ldi	r19, 0x0F	; 15
    1878:	49 ec       	ldi	r20, 0xC9	; 201
    187a:	06 c0       	rjmp	.+12     	; 0x1888 <__fp_rempio2+0x24>
    187c:	ee 0f       	add	r30, r30
    187e:	bb 0f       	add	r27, r27
    1880:	66 1f       	adc	r22, r22
    1882:	77 1f       	adc	r23, r23
    1884:	88 1f       	adc	r24, r24
    1886:	28 f0       	brcs	.+10     	; 0x1892 <__fp_rempio2+0x2e>
    1888:	b2 3a       	cpi	r27, 0xA2	; 162
    188a:	62 07       	cpc	r22, r18
    188c:	73 07       	cpc	r23, r19
    188e:	84 07       	cpc	r24, r20
    1890:	28 f0       	brcs	.+10     	; 0x189c <__fp_rempio2+0x38>
    1892:	b2 5a       	subi	r27, 0xA2	; 162
    1894:	62 0b       	sbc	r22, r18
    1896:	73 0b       	sbc	r23, r19
    1898:	84 0b       	sbc	r24, r20
    189a:	e3 95       	inc	r30
    189c:	9a 95       	dec	r25
    189e:	72 f7       	brpl	.-36     	; 0x187c <__fp_rempio2+0x18>
    18a0:	80 38       	cpi	r24, 0x80	; 128
    18a2:	30 f4       	brcc	.+12     	; 0x18b0 <__fp_rempio2+0x4c>
    18a4:	9a 95       	dec	r25
    18a6:	bb 0f       	add	r27, r27
    18a8:	66 1f       	adc	r22, r22
    18aa:	77 1f       	adc	r23, r23
    18ac:	88 1f       	adc	r24, r24
    18ae:	d2 f7       	brpl	.-12     	; 0x18a4 <__fp_rempio2+0x40>
    18b0:	90 48       	sbci	r25, 0x80	; 128
    18b2:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__fp_mpack_finite>

000018b6 <__fp_sinus>:
    18b6:	ef 93       	push	r30
    18b8:	e0 ff       	sbrs	r30, 0
    18ba:	07 c0       	rjmp	.+14     	; 0x18ca <__fp_sinus+0x14>
    18bc:	a2 ea       	ldi	r26, 0xA2	; 162
    18be:	2a ed       	ldi	r18, 0xDA	; 218
    18c0:	3f e0       	ldi	r19, 0x0F	; 15
    18c2:	49 ec       	ldi	r20, 0xC9	; 201
    18c4:	5f eb       	ldi	r21, 0xBF	; 191
    18c6:	0e 94 05 09 	call	0x120a	; 0x120a <__addsf3x>
    18ca:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__fp_round>
    18ce:	0f 90       	pop	r0
    18d0:	03 94       	inc	r0
    18d2:	01 fc       	sbrc	r0, 1
    18d4:	90 58       	subi	r25, 0x80	; 128
    18d6:	e4 ea       	ldi	r30, 0xA4	; 164
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__fp_powsodd>

000018de <__fp_powsodd>:
    18de:	9f 93       	push	r25
    18e0:	8f 93       	push	r24
    18e2:	7f 93       	push	r23
    18e4:	6f 93       	push	r22
    18e6:	ff 93       	push	r31
    18e8:	ef 93       	push	r30
    18ea:	9b 01       	movw	r18, r22
    18ec:	ac 01       	movw	r20, r24
    18ee:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3>
    18f2:	ef 91       	pop	r30
    18f4:	ff 91       	pop	r31
    18f6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__fp_powser>
    18fa:	2f 91       	pop	r18
    18fc:	3f 91       	pop	r19
    18fe:	4f 91       	pop	r20
    1900:	5f 91       	pop	r21
    1902:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__mulsf3>

00001906 <__udivmodsi4>:
    1906:	a1 e2       	ldi	r26, 0x21	; 33
    1908:	1a 2e       	mov	r1, r26
    190a:	aa 1b       	sub	r26, r26
    190c:	bb 1b       	sub	r27, r27
    190e:	fd 01       	movw	r30, r26
    1910:	0d c0       	rjmp	.+26     	; 0x192c <__udivmodsi4_ep>

00001912 <__udivmodsi4_loop>:
    1912:	aa 1f       	adc	r26, r26
    1914:	bb 1f       	adc	r27, r27
    1916:	ee 1f       	adc	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	a2 17       	cp	r26, r18
    191c:	b3 07       	cpc	r27, r19
    191e:	e4 07       	cpc	r30, r20
    1920:	f5 07       	cpc	r31, r21
    1922:	20 f0       	brcs	.+8      	; 0x192c <__udivmodsi4_ep>
    1924:	a2 1b       	sub	r26, r18
    1926:	b3 0b       	sbc	r27, r19
    1928:	e4 0b       	sbc	r30, r20
    192a:	f5 0b       	sbc	r31, r21

0000192c <__udivmodsi4_ep>:
    192c:	66 1f       	adc	r22, r22
    192e:	77 1f       	adc	r23, r23
    1930:	88 1f       	adc	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	1a 94       	dec	r1
    1936:	69 f7       	brne	.-38     	; 0x1912 <__udivmodsi4_loop>
    1938:	60 95       	com	r22
    193a:	70 95       	com	r23
    193c:	80 95       	com	r24
    193e:	90 95       	com	r25
    1940:	9b 01       	movw	r18, r22
    1942:	ac 01       	movw	r20, r24
    1944:	bd 01       	movw	r22, r26
    1946:	cf 01       	movw	r24, r30
    1948:	08 95       	ret

0000194a <dtostrf>:
    194a:	ef 92       	push	r14
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	e8 01       	movw	r28, r16
    1956:	47 fd       	sbrc	r20, 7
    1958:	02 c0       	rjmp	.+4      	; 0x195e <dtostrf+0x14>
    195a:	34 e0       	ldi	r19, 0x04	; 4
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <dtostrf+0x16>
    195e:	34 e1       	ldi	r19, 0x14	; 20
    1960:	04 2e       	mov	r0, r20
    1962:	00 0c       	add	r0, r0
    1964:	55 0b       	sbc	r21, r21
    1966:	57 ff       	sbrs	r21, 7
    1968:	03 c0       	rjmp	.+6      	; 0x1970 <dtostrf+0x26>
    196a:	51 95       	neg	r21
    196c:	41 95       	neg	r20
    196e:	51 09       	sbc	r21, r1
    1970:	e3 2e       	mov	r14, r19
    1972:	02 2f       	mov	r16, r18
    1974:	24 2f       	mov	r18, r20
    1976:	ae 01       	movw	r20, r28
    1978:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <dtoa_prf>
    197c:	ce 01       	movw	r24, r28
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	ef 90       	pop	r14
    1988:	08 95       	ret

0000198a <printf>:
    198a:	a0 e0       	ldi	r26, 0x00	; 0
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	eb ec       	ldi	r30, 0xCB	; 203
    1990:	fc e0       	ldi	r31, 0x0C	; 12
    1992:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__prologue_saves__+0x20>
    1996:	ae 01       	movw	r20, r28
    1998:	4b 5f       	subi	r20, 0xFB	; 251
    199a:	5f 4f       	sbci	r21, 0xFF	; 255
    199c:	fa 01       	movw	r30, r20
    199e:	61 91       	ld	r22, Z+
    19a0:	71 91       	ld	r23, Z+
    19a2:	af 01       	movw	r20, r30
    19a4:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <__iob+0x2>
    19a8:	90 91 68 38 	lds	r25, 0x3868	; 0x803868 <__iob+0x3>
    19ac:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <vfprintf>
    19b0:	e2 e0       	ldi	r30, 0x02	; 2
    19b2:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__epilogue_restores__+0x20>

000019b6 <puts>:
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	e0 91 67 38 	lds	r30, 0x3867	; 0x803867 <__iob+0x2>
    19c2:	f0 91 68 38 	lds	r31, 0x3868	; 0x803868 <__iob+0x3>
    19c6:	23 81       	ldd	r18, Z+3	; 0x03
    19c8:	21 ff       	sbrs	r18, 1
    19ca:	1b c0       	rjmp	.+54     	; 0x1a02 <puts+0x4c>
    19cc:	8c 01       	movw	r16, r24
    19ce:	d0 e0       	ldi	r29, 0x00	; 0
    19d0:	c0 e0       	ldi	r28, 0x00	; 0
    19d2:	f8 01       	movw	r30, r16
    19d4:	81 91       	ld	r24, Z+
    19d6:	8f 01       	movw	r16, r30
    19d8:	60 91 67 38 	lds	r22, 0x3867	; 0x803867 <__iob+0x2>
    19dc:	70 91 68 38 	lds	r23, 0x3868	; 0x803868 <__iob+0x3>
    19e0:	db 01       	movw	r26, r22
    19e2:	18 96       	adiw	r26, 0x08	; 8
    19e4:	ed 91       	ld	r30, X+
    19e6:	fc 91       	ld	r31, X
    19e8:	19 97       	sbiw	r26, 0x09	; 9
    19ea:	88 23       	and	r24, r24
    19ec:	31 f0       	breq	.+12     	; 0x19fa <puts+0x44>
    19ee:	09 95       	icall
    19f0:	89 2b       	or	r24, r25
    19f2:	79 f3       	breq	.-34     	; 0x19d2 <puts+0x1c>
    19f4:	df ef       	ldi	r29, 0xFF	; 255
    19f6:	cf ef       	ldi	r28, 0xFF	; 255
    19f8:	ec cf       	rjmp	.-40     	; 0x19d2 <puts+0x1c>
    19fa:	8a e0       	ldi	r24, 0x0A	; 10
    19fc:	09 95       	icall
    19fe:	89 2b       	or	r24, r25
    1a00:	19 f0       	breq	.+6      	; 0x1a08 <puts+0x52>
    1a02:	8f ef       	ldi	r24, 0xFF	; 255
    1a04:	9f ef       	ldi	r25, 0xFF	; 255
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <puts+0x56>
    1a08:	8d 2f       	mov	r24, r29
    1a0a:	9c 2f       	mov	r25, r28
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	08 95       	ret

00001a16 <vfprintf>:
    1a16:	ab e0       	ldi	r26, 0x0B	; 11
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e1 e1       	ldi	r30, 0x11	; 17
    1a1c:	fd e0       	ldi	r31, 0x0D	; 13
    1a1e:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__prologue_saves__>
    1a22:	6c 01       	movw	r12, r24
    1a24:	7b 01       	movw	r14, r22
    1a26:	8a 01       	movw	r16, r20
    1a28:	fc 01       	movw	r30, r24
    1a2a:	16 82       	std	Z+6, r1	; 0x06
    1a2c:	17 82       	std	Z+7, r1	; 0x07
    1a2e:	83 81       	ldd	r24, Z+3	; 0x03
    1a30:	81 ff       	sbrs	r24, 1
    1a32:	cc c1       	rjmp	.+920    	; 0x1dcc <vfprintf+0x3b6>
    1a34:	ce 01       	movw	r24, r28
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	3c 01       	movw	r6, r24
    1a3a:	f6 01       	movw	r30, r12
    1a3c:	93 81       	ldd	r25, Z+3	; 0x03
    1a3e:	f7 01       	movw	r30, r14
    1a40:	93 fd       	sbrc	r25, 3
    1a42:	85 91       	lpm	r24, Z+
    1a44:	93 ff       	sbrs	r25, 3
    1a46:	81 91       	ld	r24, Z+
    1a48:	7f 01       	movw	r14, r30
    1a4a:	88 23       	and	r24, r24
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <vfprintf+0x3a>
    1a4e:	ba c1       	rjmp	.+884    	; 0x1dc4 <vfprintf+0x3ae>
    1a50:	85 32       	cpi	r24, 0x25	; 37
    1a52:	39 f4       	brne	.+14     	; 0x1a62 <vfprintf+0x4c>
    1a54:	93 fd       	sbrc	r25, 3
    1a56:	85 91       	lpm	r24, Z+
    1a58:	93 ff       	sbrs	r25, 3
    1a5a:	81 91       	ld	r24, Z+
    1a5c:	7f 01       	movw	r14, r30
    1a5e:	85 32       	cpi	r24, 0x25	; 37
    1a60:	29 f4       	brne	.+10     	; 0x1a6c <vfprintf+0x56>
    1a62:	b6 01       	movw	r22, r12
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 34 11 	call	0x2268	; 0x2268 <fputc>
    1a6a:	e7 cf       	rjmp	.-50     	; 0x1a3a <vfprintf+0x24>
    1a6c:	91 2c       	mov	r9, r1
    1a6e:	21 2c       	mov	r2, r1
    1a70:	31 2c       	mov	r3, r1
    1a72:	ff e1       	ldi	r31, 0x1F	; 31
    1a74:	f3 15       	cp	r31, r3
    1a76:	d8 f0       	brcs	.+54     	; 0x1aae <vfprintf+0x98>
    1a78:	8b 32       	cpi	r24, 0x2B	; 43
    1a7a:	79 f0       	breq	.+30     	; 0x1a9a <vfprintf+0x84>
    1a7c:	38 f4       	brcc	.+14     	; 0x1a8c <vfprintf+0x76>
    1a7e:	80 32       	cpi	r24, 0x20	; 32
    1a80:	79 f0       	breq	.+30     	; 0x1aa0 <vfprintf+0x8a>
    1a82:	83 32       	cpi	r24, 0x23	; 35
    1a84:	a1 f4       	brne	.+40     	; 0x1aae <vfprintf+0x98>
    1a86:	23 2d       	mov	r18, r3
    1a88:	20 61       	ori	r18, 0x10	; 16
    1a8a:	1d c0       	rjmp	.+58     	; 0x1ac6 <vfprintf+0xb0>
    1a8c:	8d 32       	cpi	r24, 0x2D	; 45
    1a8e:	61 f0       	breq	.+24     	; 0x1aa8 <vfprintf+0x92>
    1a90:	80 33       	cpi	r24, 0x30	; 48
    1a92:	69 f4       	brne	.+26     	; 0x1aae <vfprintf+0x98>
    1a94:	23 2d       	mov	r18, r3
    1a96:	21 60       	ori	r18, 0x01	; 1
    1a98:	16 c0       	rjmp	.+44     	; 0x1ac6 <vfprintf+0xb0>
    1a9a:	83 2d       	mov	r24, r3
    1a9c:	82 60       	ori	r24, 0x02	; 2
    1a9e:	38 2e       	mov	r3, r24
    1aa0:	e3 2d       	mov	r30, r3
    1aa2:	e4 60       	ori	r30, 0x04	; 4
    1aa4:	3e 2e       	mov	r3, r30
    1aa6:	2a c0       	rjmp	.+84     	; 0x1afc <vfprintf+0xe6>
    1aa8:	f3 2d       	mov	r31, r3
    1aaa:	f8 60       	ori	r31, 0x08	; 8
    1aac:	1d c0       	rjmp	.+58     	; 0x1ae8 <vfprintf+0xd2>
    1aae:	37 fc       	sbrc	r3, 7
    1ab0:	2d c0       	rjmp	.+90     	; 0x1b0c <vfprintf+0xf6>
    1ab2:	20 ed       	ldi	r18, 0xD0	; 208
    1ab4:	28 0f       	add	r18, r24
    1ab6:	2a 30       	cpi	r18, 0x0A	; 10
    1ab8:	40 f0       	brcs	.+16     	; 0x1aca <vfprintf+0xb4>
    1aba:	8e 32       	cpi	r24, 0x2E	; 46
    1abc:	b9 f4       	brne	.+46     	; 0x1aec <vfprintf+0xd6>
    1abe:	36 fc       	sbrc	r3, 6
    1ac0:	81 c1       	rjmp	.+770    	; 0x1dc4 <vfprintf+0x3ae>
    1ac2:	23 2d       	mov	r18, r3
    1ac4:	20 64       	ori	r18, 0x40	; 64
    1ac6:	32 2e       	mov	r3, r18
    1ac8:	19 c0       	rjmp	.+50     	; 0x1afc <vfprintf+0xe6>
    1aca:	36 fe       	sbrs	r3, 6
    1acc:	06 c0       	rjmp	.+12     	; 0x1ada <vfprintf+0xc4>
    1ace:	8a e0       	ldi	r24, 0x0A	; 10
    1ad0:	98 9e       	mul	r9, r24
    1ad2:	20 0d       	add	r18, r0
    1ad4:	11 24       	eor	r1, r1
    1ad6:	92 2e       	mov	r9, r18
    1ad8:	11 c0       	rjmp	.+34     	; 0x1afc <vfprintf+0xe6>
    1ada:	ea e0       	ldi	r30, 0x0A	; 10
    1adc:	2e 9e       	mul	r2, r30
    1ade:	20 0d       	add	r18, r0
    1ae0:	11 24       	eor	r1, r1
    1ae2:	22 2e       	mov	r2, r18
    1ae4:	f3 2d       	mov	r31, r3
    1ae6:	f0 62       	ori	r31, 0x20	; 32
    1ae8:	3f 2e       	mov	r3, r31
    1aea:	08 c0       	rjmp	.+16     	; 0x1afc <vfprintf+0xe6>
    1aec:	8c 36       	cpi	r24, 0x6C	; 108
    1aee:	21 f4       	brne	.+8      	; 0x1af8 <vfprintf+0xe2>
    1af0:	83 2d       	mov	r24, r3
    1af2:	80 68       	ori	r24, 0x80	; 128
    1af4:	38 2e       	mov	r3, r24
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <vfprintf+0xe6>
    1af8:	88 36       	cpi	r24, 0x68	; 104
    1afa:	41 f4       	brne	.+16     	; 0x1b0c <vfprintf+0xf6>
    1afc:	f7 01       	movw	r30, r14
    1afe:	93 fd       	sbrc	r25, 3
    1b00:	85 91       	lpm	r24, Z+
    1b02:	93 ff       	sbrs	r25, 3
    1b04:	81 91       	ld	r24, Z+
    1b06:	7f 01       	movw	r14, r30
    1b08:	81 11       	cpse	r24, r1
    1b0a:	b3 cf       	rjmp	.-154    	; 0x1a72 <vfprintf+0x5c>
    1b0c:	98 2f       	mov	r25, r24
    1b0e:	9f 7d       	andi	r25, 0xDF	; 223
    1b10:	95 54       	subi	r25, 0x45	; 69
    1b12:	93 30       	cpi	r25, 0x03	; 3
    1b14:	28 f4       	brcc	.+10     	; 0x1b20 <vfprintf+0x10a>
    1b16:	0c 5f       	subi	r16, 0xFC	; 252
    1b18:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1a:	9f e3       	ldi	r25, 0x3F	; 63
    1b1c:	99 83       	std	Y+1, r25	; 0x01
    1b1e:	0d c0       	rjmp	.+26     	; 0x1b3a <vfprintf+0x124>
    1b20:	83 36       	cpi	r24, 0x63	; 99
    1b22:	31 f0       	breq	.+12     	; 0x1b30 <vfprintf+0x11a>
    1b24:	83 37       	cpi	r24, 0x73	; 115
    1b26:	71 f0       	breq	.+28     	; 0x1b44 <vfprintf+0x12e>
    1b28:	83 35       	cpi	r24, 0x53	; 83
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <vfprintf+0x118>
    1b2c:	59 c0       	rjmp	.+178    	; 0x1be0 <vfprintf+0x1ca>
    1b2e:	21 c0       	rjmp	.+66     	; 0x1b72 <vfprintf+0x15c>
    1b30:	f8 01       	movw	r30, r16
    1b32:	80 81       	ld	r24, Z
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	0e 5f       	subi	r16, 0xFE	; 254
    1b38:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3a:	88 24       	eor	r8, r8
    1b3c:	83 94       	inc	r8
    1b3e:	91 2c       	mov	r9, r1
    1b40:	53 01       	movw	r10, r6
    1b42:	13 c0       	rjmp	.+38     	; 0x1b6a <vfprintf+0x154>
    1b44:	28 01       	movw	r4, r16
    1b46:	f2 e0       	ldi	r31, 0x02	; 2
    1b48:	4f 0e       	add	r4, r31
    1b4a:	51 1c       	adc	r5, r1
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	a0 80       	ld	r10, Z
    1b50:	b1 80       	ldd	r11, Z+1	; 0x01
    1b52:	36 fe       	sbrs	r3, 6
    1b54:	03 c0       	rjmp	.+6      	; 0x1b5c <vfprintf+0x146>
    1b56:	69 2d       	mov	r22, r9
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <vfprintf+0x14a>
    1b5c:	6f ef       	ldi	r22, 0xFF	; 255
    1b5e:	7f ef       	ldi	r23, 0xFF	; 255
    1b60:	c5 01       	movw	r24, r10
    1b62:	0e 94 29 11 	call	0x2252	; 0x2252 <strnlen>
    1b66:	4c 01       	movw	r8, r24
    1b68:	82 01       	movw	r16, r4
    1b6a:	f3 2d       	mov	r31, r3
    1b6c:	ff 77       	andi	r31, 0x7F	; 127
    1b6e:	3f 2e       	mov	r3, r31
    1b70:	16 c0       	rjmp	.+44     	; 0x1b9e <vfprintf+0x188>
    1b72:	28 01       	movw	r4, r16
    1b74:	22 e0       	ldi	r18, 0x02	; 2
    1b76:	42 0e       	add	r4, r18
    1b78:	51 1c       	adc	r5, r1
    1b7a:	f8 01       	movw	r30, r16
    1b7c:	a0 80       	ld	r10, Z
    1b7e:	b1 80       	ldd	r11, Z+1	; 0x01
    1b80:	36 fe       	sbrs	r3, 6
    1b82:	03 c0       	rjmp	.+6      	; 0x1b8a <vfprintf+0x174>
    1b84:	69 2d       	mov	r22, r9
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <vfprintf+0x178>
    1b8a:	6f ef       	ldi	r22, 0xFF	; 255
    1b8c:	7f ef       	ldi	r23, 0xFF	; 255
    1b8e:	c5 01       	movw	r24, r10
    1b90:	0e 94 1e 11 	call	0x223c	; 0x223c <strnlen_P>
    1b94:	4c 01       	movw	r8, r24
    1b96:	f3 2d       	mov	r31, r3
    1b98:	f0 68       	ori	r31, 0x80	; 128
    1b9a:	3f 2e       	mov	r3, r31
    1b9c:	82 01       	movw	r16, r4
    1b9e:	33 fc       	sbrc	r3, 3
    1ba0:	1b c0       	rjmp	.+54     	; 0x1bd8 <vfprintf+0x1c2>
    1ba2:	82 2d       	mov	r24, r2
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	88 16       	cp	r8, r24
    1ba8:	99 06       	cpc	r9, r25
    1baa:	b0 f4       	brcc	.+44     	; 0x1bd8 <vfprintf+0x1c2>
    1bac:	b6 01       	movw	r22, r12
    1bae:	80 e2       	ldi	r24, 0x20	; 32
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 34 11 	call	0x2268	; 0x2268 <fputc>
    1bb6:	2a 94       	dec	r2
    1bb8:	f4 cf       	rjmp	.-24     	; 0x1ba2 <vfprintf+0x18c>
    1bba:	f5 01       	movw	r30, r10
    1bbc:	37 fc       	sbrc	r3, 7
    1bbe:	85 91       	lpm	r24, Z+
    1bc0:	37 fe       	sbrs	r3, 7
    1bc2:	81 91       	ld	r24, Z+
    1bc4:	5f 01       	movw	r10, r30
    1bc6:	b6 01       	movw	r22, r12
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 34 11 	call	0x2268	; 0x2268 <fputc>
    1bce:	21 10       	cpse	r2, r1
    1bd0:	2a 94       	dec	r2
    1bd2:	21 e0       	ldi	r18, 0x01	; 1
    1bd4:	82 1a       	sub	r8, r18
    1bd6:	91 08       	sbc	r9, r1
    1bd8:	81 14       	cp	r8, r1
    1bda:	91 04       	cpc	r9, r1
    1bdc:	71 f7       	brne	.-36     	; 0x1bba <vfprintf+0x1a4>
    1bde:	e8 c0       	rjmp	.+464    	; 0x1db0 <vfprintf+0x39a>
    1be0:	84 36       	cpi	r24, 0x64	; 100
    1be2:	11 f0       	breq	.+4      	; 0x1be8 <vfprintf+0x1d2>
    1be4:	89 36       	cpi	r24, 0x69	; 105
    1be6:	41 f5       	brne	.+80     	; 0x1c38 <vfprintf+0x222>
    1be8:	f8 01       	movw	r30, r16
    1bea:	37 fe       	sbrs	r3, 7
    1bec:	07 c0       	rjmp	.+14     	; 0x1bfc <vfprintf+0x1e6>
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	0c 5f       	subi	r16, 0xFC	; 252
    1bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfa:	08 c0       	rjmp	.+16     	; 0x1c0c <vfprintf+0x1f6>
    1bfc:	60 81       	ld	r22, Z
    1bfe:	71 81       	ldd	r23, Z+1	; 0x01
    1c00:	07 2e       	mov	r0, r23
    1c02:	00 0c       	add	r0, r0
    1c04:	88 0b       	sbc	r24, r24
    1c06:	99 0b       	sbc	r25, r25
    1c08:	0e 5f       	subi	r16, 0xFE	; 254
    1c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0c:	f3 2d       	mov	r31, r3
    1c0e:	ff 76       	andi	r31, 0x6F	; 111
    1c10:	3f 2e       	mov	r3, r31
    1c12:	97 ff       	sbrs	r25, 7
    1c14:	09 c0       	rjmp	.+18     	; 0x1c28 <vfprintf+0x212>
    1c16:	90 95       	com	r25
    1c18:	80 95       	com	r24
    1c1a:	70 95       	com	r23
    1c1c:	61 95       	neg	r22
    1c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c20:	8f 4f       	sbci	r24, 0xFF	; 255
    1c22:	9f 4f       	sbci	r25, 0xFF	; 255
    1c24:	f0 68       	ori	r31, 0x80	; 128
    1c26:	3f 2e       	mov	r3, r31
    1c28:	2a e0       	ldi	r18, 0x0A	; 10
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	a3 01       	movw	r20, r6
    1c2e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__ultoa_invert>
    1c32:	88 2e       	mov	r8, r24
    1c34:	86 18       	sub	r8, r6
    1c36:	45 c0       	rjmp	.+138    	; 0x1cc2 <vfprintf+0x2ac>
    1c38:	85 37       	cpi	r24, 0x75	; 117
    1c3a:	31 f4       	brne	.+12     	; 0x1c48 <vfprintf+0x232>
    1c3c:	23 2d       	mov	r18, r3
    1c3e:	2f 7e       	andi	r18, 0xEF	; 239
    1c40:	b2 2e       	mov	r11, r18
    1c42:	2a e0       	ldi	r18, 0x0A	; 10
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	25 c0       	rjmp	.+74     	; 0x1c92 <vfprintf+0x27c>
    1c48:	93 2d       	mov	r25, r3
    1c4a:	99 7f       	andi	r25, 0xF9	; 249
    1c4c:	b9 2e       	mov	r11, r25
    1c4e:	8f 36       	cpi	r24, 0x6F	; 111
    1c50:	c1 f0       	breq	.+48     	; 0x1c82 <vfprintf+0x26c>
    1c52:	18 f4       	brcc	.+6      	; 0x1c5a <vfprintf+0x244>
    1c54:	88 35       	cpi	r24, 0x58	; 88
    1c56:	79 f0       	breq	.+30     	; 0x1c76 <vfprintf+0x260>
    1c58:	b5 c0       	rjmp	.+362    	; 0x1dc4 <vfprintf+0x3ae>
    1c5a:	80 37       	cpi	r24, 0x70	; 112
    1c5c:	19 f0       	breq	.+6      	; 0x1c64 <vfprintf+0x24e>
    1c5e:	88 37       	cpi	r24, 0x78	; 120
    1c60:	21 f0       	breq	.+8      	; 0x1c6a <vfprintf+0x254>
    1c62:	b0 c0       	rjmp	.+352    	; 0x1dc4 <vfprintf+0x3ae>
    1c64:	e9 2f       	mov	r30, r25
    1c66:	e0 61       	ori	r30, 0x10	; 16
    1c68:	be 2e       	mov	r11, r30
    1c6a:	b4 fe       	sbrs	r11, 4
    1c6c:	0d c0       	rjmp	.+26     	; 0x1c88 <vfprintf+0x272>
    1c6e:	fb 2d       	mov	r31, r11
    1c70:	f4 60       	ori	r31, 0x04	; 4
    1c72:	bf 2e       	mov	r11, r31
    1c74:	09 c0       	rjmp	.+18     	; 0x1c88 <vfprintf+0x272>
    1c76:	34 fe       	sbrs	r3, 4
    1c78:	0a c0       	rjmp	.+20     	; 0x1c8e <vfprintf+0x278>
    1c7a:	29 2f       	mov	r18, r25
    1c7c:	26 60       	ori	r18, 0x06	; 6
    1c7e:	b2 2e       	mov	r11, r18
    1c80:	06 c0       	rjmp	.+12     	; 0x1c8e <vfprintf+0x278>
    1c82:	28 e0       	ldi	r18, 0x08	; 8
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	05 c0       	rjmp	.+10     	; 0x1c92 <vfprintf+0x27c>
    1c88:	20 e1       	ldi	r18, 0x10	; 16
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <vfprintf+0x27c>
    1c8e:	20 e1       	ldi	r18, 0x10	; 16
    1c90:	32 e0       	ldi	r19, 0x02	; 2
    1c92:	f8 01       	movw	r30, r16
    1c94:	b7 fe       	sbrs	r11, 7
    1c96:	07 c0       	rjmp	.+14     	; 0x1ca6 <vfprintf+0x290>
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	0c 5f       	subi	r16, 0xFC	; 252
    1ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca4:	06 c0       	rjmp	.+12     	; 0x1cb2 <vfprintf+0x29c>
    1ca6:	60 81       	ld	r22, Z
    1ca8:	71 81       	ldd	r23, Z+1	; 0x01
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 5f       	subi	r16, 0xFE	; 254
    1cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb2:	a3 01       	movw	r20, r6
    1cb4:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__ultoa_invert>
    1cb8:	88 2e       	mov	r8, r24
    1cba:	86 18       	sub	r8, r6
    1cbc:	fb 2d       	mov	r31, r11
    1cbe:	ff 77       	andi	r31, 0x7F	; 127
    1cc0:	3f 2e       	mov	r3, r31
    1cc2:	36 fe       	sbrs	r3, 6
    1cc4:	0d c0       	rjmp	.+26     	; 0x1ce0 <vfprintf+0x2ca>
    1cc6:	23 2d       	mov	r18, r3
    1cc8:	2e 7f       	andi	r18, 0xFE	; 254
    1cca:	a2 2e       	mov	r10, r18
    1ccc:	89 14       	cp	r8, r9
    1cce:	58 f4       	brcc	.+22     	; 0x1ce6 <vfprintf+0x2d0>
    1cd0:	34 fe       	sbrs	r3, 4
    1cd2:	0b c0       	rjmp	.+22     	; 0x1cea <vfprintf+0x2d4>
    1cd4:	32 fc       	sbrc	r3, 2
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <vfprintf+0x2d4>
    1cd8:	83 2d       	mov	r24, r3
    1cda:	8e 7e       	andi	r24, 0xEE	; 238
    1cdc:	a8 2e       	mov	r10, r24
    1cde:	05 c0       	rjmp	.+10     	; 0x1cea <vfprintf+0x2d4>
    1ce0:	b8 2c       	mov	r11, r8
    1ce2:	a3 2c       	mov	r10, r3
    1ce4:	03 c0       	rjmp	.+6      	; 0x1cec <vfprintf+0x2d6>
    1ce6:	b8 2c       	mov	r11, r8
    1ce8:	01 c0       	rjmp	.+2      	; 0x1cec <vfprintf+0x2d6>
    1cea:	b9 2c       	mov	r11, r9
    1cec:	a4 fe       	sbrs	r10, 4
    1cee:	0f c0       	rjmp	.+30     	; 0x1d0e <vfprintf+0x2f8>
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	e8 0d       	add	r30, r8
    1cf4:	f1 1d       	adc	r31, r1
    1cf6:	80 81       	ld	r24, Z
    1cf8:	80 33       	cpi	r24, 0x30	; 48
    1cfa:	21 f4       	brne	.+8      	; 0x1d04 <vfprintf+0x2ee>
    1cfc:	9a 2d       	mov	r25, r10
    1cfe:	99 7e       	andi	r25, 0xE9	; 233
    1d00:	a9 2e       	mov	r10, r25
    1d02:	09 c0       	rjmp	.+18     	; 0x1d16 <vfprintf+0x300>
    1d04:	a2 fe       	sbrs	r10, 2
    1d06:	06 c0       	rjmp	.+12     	; 0x1d14 <vfprintf+0x2fe>
    1d08:	b3 94       	inc	r11
    1d0a:	b3 94       	inc	r11
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <vfprintf+0x300>
    1d0e:	8a 2d       	mov	r24, r10
    1d10:	86 78       	andi	r24, 0x86	; 134
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <vfprintf+0x300>
    1d14:	b3 94       	inc	r11
    1d16:	a3 fc       	sbrc	r10, 3
    1d18:	11 c0       	rjmp	.+34     	; 0x1d3c <vfprintf+0x326>
    1d1a:	a0 fe       	sbrs	r10, 0
    1d1c:	06 c0       	rjmp	.+12     	; 0x1d2a <vfprintf+0x314>
    1d1e:	b2 14       	cp	r11, r2
    1d20:	88 f4       	brcc	.+34     	; 0x1d44 <vfprintf+0x32e>
    1d22:	28 0c       	add	r2, r8
    1d24:	92 2c       	mov	r9, r2
    1d26:	9b 18       	sub	r9, r11
    1d28:	0e c0       	rjmp	.+28     	; 0x1d46 <vfprintf+0x330>
    1d2a:	b2 14       	cp	r11, r2
    1d2c:	60 f4       	brcc	.+24     	; 0x1d46 <vfprintf+0x330>
    1d2e:	b6 01       	movw	r22, r12
    1d30:	80 e2       	ldi	r24, 0x20	; 32
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	0e 94 34 11 	call	0x2268	; 0x2268 <fputc>
    1d38:	b3 94       	inc	r11
    1d3a:	f7 cf       	rjmp	.-18     	; 0x1d2a <vfprintf+0x314>
    1d3c:	b2 14       	cp	r11, r2
    1d3e:	18 f4       	brcc	.+6      	; 0x1d46 <vfprintf+0x330>
    1d40:	2b 18       	sub	r2, r11
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <vfprintf+0x332>
    1d44:	98 2c       	mov	r9, r8
    1d46:	21 2c       	mov	r2, r1
    1d48:	a4 fe       	sbrs	r10, 4
    1d4a:	10 c0       	rjmp	.+32     	; 0x1d6c <vfprintf+0x356>
    1d4c:	b6 01       	movw	r22, r12
    1d4e:	80 e3       	ldi	r24, 0x30	; 48
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 34 11 	call	0x2268	; 0x2268 <fputc>
    1d56:	a2 fe       	sbrs	r10, 2
    1d58:	17 c0       	rjmp	.+46     	; 0x1d88 <vfprintf+0x372>
    1d5a:	a1 fc       	sbrc	r10, 1
    1d5c:	03 c0       	rjmp	.+6      	; 0x1d64 <vfprintf+0x34e>
    1d5e:	88 e7       	ldi	r24, 0x78	; 120
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <vfprintf+0x352>
    1d64:	88 e5       	ldi	r24, 0x58	; 88
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	b6 01       	movw	r22, r12
    1d6a:	0c c0       	rjmp	.+24     	; 0x1d84 <vfprintf+0x36e>
    1d6c:	8a 2d       	mov	r24, r10
    1d6e:	86 78       	andi	r24, 0x86	; 134
    1d70:	59 f0       	breq	.+22     	; 0x1d88 <vfprintf+0x372>
    1d72:	a1 fe       	sbrs	r10, 1
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <vfprintf+0x364>
    1d76:	8b e2       	ldi	r24, 0x2B	; 43
    1d78:	01 c0       	rjmp	.+2      	; 0x1d7c <vfprintf+0x366>
    1d7a:	80 e2       	ldi	r24, 0x20	; 32
    1d7c:	a7 fc       	sbrc	r10, 7
    1d7e:	8d e2       	ldi	r24, 0x2D	; 45
    1d80:	b6 01       	movw	r22, r12
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 34 11 	call	0x2268	; 0x2268 <fputc>
    1d88:	89 14       	cp	r8, r9
    1d8a:	38 f4       	brcc	.+14     	; 0x1d9a <vfprintf+0x384>
    1d8c:	b6 01       	movw	r22, r12
    1d8e:	80 e3       	ldi	r24, 0x30	; 48
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	0e 94 34 11 	call	0x2268	; 0x2268 <fputc>
    1d96:	9a 94       	dec	r9
    1d98:	f7 cf       	rjmp	.-18     	; 0x1d88 <vfprintf+0x372>
    1d9a:	8a 94       	dec	r8
    1d9c:	f3 01       	movw	r30, r6
    1d9e:	e8 0d       	add	r30, r8
    1da0:	f1 1d       	adc	r31, r1
    1da2:	80 81       	ld	r24, Z
    1da4:	b6 01       	movw	r22, r12
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	0e 94 34 11 	call	0x2268	; 0x2268 <fputc>
    1dac:	81 10       	cpse	r8, r1
    1dae:	f5 cf       	rjmp	.-22     	; 0x1d9a <vfprintf+0x384>
    1db0:	22 20       	and	r2, r2
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <vfprintf+0x3a0>
    1db4:	42 ce       	rjmp	.-892    	; 0x1a3a <vfprintf+0x24>
    1db6:	b6 01       	movw	r22, r12
    1db8:	80 e2       	ldi	r24, 0x20	; 32
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	0e 94 34 11 	call	0x2268	; 0x2268 <fputc>
    1dc0:	2a 94       	dec	r2
    1dc2:	f6 cf       	rjmp	.-20     	; 0x1db0 <vfprintf+0x39a>
    1dc4:	f6 01       	movw	r30, r12
    1dc6:	86 81       	ldd	r24, Z+6	; 0x06
    1dc8:	97 81       	ldd	r25, Z+7	; 0x07
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <vfprintf+0x3ba>
    1dcc:	8f ef       	ldi	r24, 0xFF	; 255
    1dce:	9f ef       	ldi	r25, 0xFF	; 255
    1dd0:	2b 96       	adiw	r28, 0x0b	; 11
    1dd2:	e2 e1       	ldi	r30, 0x12	; 18
    1dd4:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__epilogue_restores__>

00001dd8 <dtoa_prf>:
    1dd8:	a9 e0       	ldi	r26, 0x09	; 9
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e2 ef       	ldi	r30, 0xF2	; 242
    1dde:	fe e0       	ldi	r31, 0x0E	; 14
    1de0:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__prologue_saves__+0xc>
    1de4:	6a 01       	movw	r12, r20
    1de6:	12 2f       	mov	r17, r18
    1de8:	b0 2e       	mov	r11, r16
    1dea:	2b e3       	ldi	r18, 0x3B	; 59
    1dec:	20 17       	cp	r18, r16
    1dee:	20 f0       	brcs	.+8      	; 0x1df8 <dtoa_prf+0x20>
    1df0:	ff 24       	eor	r15, r15
    1df2:	f3 94       	inc	r15
    1df4:	f0 0e       	add	r15, r16
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <dtoa_prf+0x24>
    1df8:	2c e3       	ldi	r18, 0x3C	; 60
    1dfa:	f2 2e       	mov	r15, r18
    1dfc:	0f 2d       	mov	r16, r15
    1dfe:	27 e0       	ldi	r18, 0x07	; 7
    1e00:	ae 01       	movw	r20, r28
    1e02:	4f 5f       	subi	r20, 0xFF	; 255
    1e04:	5f 4f       	sbci	r21, 0xFF	; 255
    1e06:	0e 94 46 10 	call	0x208c	; 0x208c <__ftoa_engine>
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	49 81       	ldd	r20, Y+1	; 0x01
    1e0e:	84 2f       	mov	r24, r20
    1e10:	89 70       	andi	r24, 0x09	; 9
    1e12:	81 30       	cpi	r24, 0x01	; 1
    1e14:	31 f0       	breq	.+12     	; 0x1e22 <dtoa_prf+0x4a>
    1e16:	e1 fc       	sbrc	r14, 1
    1e18:	06 c0       	rjmp	.+12     	; 0x1e26 <dtoa_prf+0x4e>
    1e1a:	e0 fe       	sbrs	r14, 0
    1e1c:	06 c0       	rjmp	.+12     	; 0x1e2a <dtoa_prf+0x52>
    1e1e:	90 e2       	ldi	r25, 0x20	; 32
    1e20:	05 c0       	rjmp	.+10     	; 0x1e2c <dtoa_prf+0x54>
    1e22:	9d e2       	ldi	r25, 0x2D	; 45
    1e24:	03 c0       	rjmp	.+6      	; 0x1e2c <dtoa_prf+0x54>
    1e26:	9b e2       	ldi	r25, 0x2B	; 43
    1e28:	01 c0       	rjmp	.+2      	; 0x1e2c <dtoa_prf+0x54>
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	5e 2d       	mov	r21, r14
    1e2e:	50 71       	andi	r21, 0x10	; 16
    1e30:	43 ff       	sbrs	r20, 3
    1e32:	3c c0       	rjmp	.+120    	; 0x1eac <dtoa_prf+0xd4>
    1e34:	91 11       	cpse	r25, r1
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <dtoa_prf+0x64>
    1e38:	83 e0       	ldi	r24, 0x03	; 3
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <dtoa_prf+0x66>
    1e3c:	84 e0       	ldi	r24, 0x04	; 4
    1e3e:	81 17       	cp	r24, r17
    1e40:	18 f4       	brcc	.+6      	; 0x1e48 <dtoa_prf+0x70>
    1e42:	21 2f       	mov	r18, r17
    1e44:	28 1b       	sub	r18, r24
    1e46:	01 c0       	rjmp	.+2      	; 0x1e4a <dtoa_prf+0x72>
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	51 11       	cpse	r21, r1
    1e4c:	0b c0       	rjmp	.+22     	; 0x1e64 <dtoa_prf+0x8c>
    1e4e:	f6 01       	movw	r30, r12
    1e50:	82 2f       	mov	r24, r18
    1e52:	30 e2       	ldi	r19, 0x20	; 32
    1e54:	88 23       	and	r24, r24
    1e56:	19 f0       	breq	.+6      	; 0x1e5e <dtoa_prf+0x86>
    1e58:	31 93       	st	Z+, r19
    1e5a:	81 50       	subi	r24, 0x01	; 1
    1e5c:	fb cf       	rjmp	.-10     	; 0x1e54 <dtoa_prf+0x7c>
    1e5e:	c2 0e       	add	r12, r18
    1e60:	d1 1c       	adc	r13, r1
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	99 23       	and	r25, r25
    1e66:	29 f0       	breq	.+10     	; 0x1e72 <dtoa_prf+0x9a>
    1e68:	d6 01       	movw	r26, r12
    1e6a:	9c 93       	st	X, r25
    1e6c:	f6 01       	movw	r30, r12
    1e6e:	31 96       	adiw	r30, 0x01	; 1
    1e70:	6f 01       	movw	r12, r30
    1e72:	c6 01       	movw	r24, r12
    1e74:	03 96       	adiw	r24, 0x03	; 3
    1e76:	e2 fe       	sbrs	r14, 2
    1e78:	0a c0       	rjmp	.+20     	; 0x1e8e <dtoa_prf+0xb6>
    1e7a:	3e e4       	ldi	r19, 0x4E	; 78
    1e7c:	d6 01       	movw	r26, r12
    1e7e:	3c 93       	st	X, r19
    1e80:	41 e4       	ldi	r20, 0x41	; 65
    1e82:	11 96       	adiw	r26, 0x01	; 1
    1e84:	4c 93       	st	X, r20
    1e86:	11 97       	sbiw	r26, 0x01	; 1
    1e88:	12 96       	adiw	r26, 0x02	; 2
    1e8a:	3c 93       	st	X, r19
    1e8c:	06 c0       	rjmp	.+12     	; 0x1e9a <dtoa_prf+0xc2>
    1e8e:	3e e6       	ldi	r19, 0x6E	; 110
    1e90:	f6 01       	movw	r30, r12
    1e92:	30 83       	st	Z, r19
    1e94:	41 e6       	ldi	r20, 0x61	; 97
    1e96:	41 83       	std	Z+1, r20	; 0x01
    1e98:	32 83       	std	Z+2, r19	; 0x02
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	32 2f       	mov	r19, r18
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	33 23       	and	r19, r19
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <dtoa_prf+0xce>
    1ea4:	42 c0       	rjmp	.+132    	; 0x1f2a <dtoa_prf+0x152>
    1ea6:	41 93       	st	Z+, r20
    1ea8:	31 50       	subi	r19, 0x01	; 1
    1eaa:	fa cf       	rjmp	.-12     	; 0x1ea0 <dtoa_prf+0xc8>
    1eac:	42 ff       	sbrs	r20, 2
    1eae:	44 c0       	rjmp	.+136    	; 0x1f38 <dtoa_prf+0x160>
    1eb0:	91 11       	cpse	r25, r1
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <dtoa_prf+0xe0>
    1eb4:	83 e0       	ldi	r24, 0x03	; 3
    1eb6:	01 c0       	rjmp	.+2      	; 0x1eba <dtoa_prf+0xe2>
    1eb8:	84 e0       	ldi	r24, 0x04	; 4
    1eba:	81 17       	cp	r24, r17
    1ebc:	18 f4       	brcc	.+6      	; 0x1ec4 <dtoa_prf+0xec>
    1ebe:	21 2f       	mov	r18, r17
    1ec0:	28 1b       	sub	r18, r24
    1ec2:	01 c0       	rjmp	.+2      	; 0x1ec6 <dtoa_prf+0xee>
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	51 11       	cpse	r21, r1
    1ec8:	0b c0       	rjmp	.+22     	; 0x1ee0 <dtoa_prf+0x108>
    1eca:	f6 01       	movw	r30, r12
    1ecc:	82 2f       	mov	r24, r18
    1ece:	30 e2       	ldi	r19, 0x20	; 32
    1ed0:	88 23       	and	r24, r24
    1ed2:	19 f0       	breq	.+6      	; 0x1eda <dtoa_prf+0x102>
    1ed4:	31 93       	st	Z+, r19
    1ed6:	81 50       	subi	r24, 0x01	; 1
    1ed8:	fb cf       	rjmp	.-10     	; 0x1ed0 <dtoa_prf+0xf8>
    1eda:	c2 0e       	add	r12, r18
    1edc:	d1 1c       	adc	r13, r1
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	99 23       	and	r25, r25
    1ee2:	29 f0       	breq	.+10     	; 0x1eee <dtoa_prf+0x116>
    1ee4:	d6 01       	movw	r26, r12
    1ee6:	9c 93       	st	X, r25
    1ee8:	f6 01       	movw	r30, r12
    1eea:	31 96       	adiw	r30, 0x01	; 1
    1eec:	6f 01       	movw	r12, r30
    1eee:	c6 01       	movw	r24, r12
    1ef0:	03 96       	adiw	r24, 0x03	; 3
    1ef2:	e2 fe       	sbrs	r14, 2
    1ef4:	0b c0       	rjmp	.+22     	; 0x1f0c <dtoa_prf+0x134>
    1ef6:	39 e4       	ldi	r19, 0x49	; 73
    1ef8:	d6 01       	movw	r26, r12
    1efa:	3c 93       	st	X, r19
    1efc:	3e e4       	ldi	r19, 0x4E	; 78
    1efe:	11 96       	adiw	r26, 0x01	; 1
    1f00:	3c 93       	st	X, r19
    1f02:	11 97       	sbiw	r26, 0x01	; 1
    1f04:	36 e4       	ldi	r19, 0x46	; 70
    1f06:	12 96       	adiw	r26, 0x02	; 2
    1f08:	3c 93       	st	X, r19
    1f0a:	07 c0       	rjmp	.+14     	; 0x1f1a <dtoa_prf+0x142>
    1f0c:	39 e6       	ldi	r19, 0x69	; 105
    1f0e:	f6 01       	movw	r30, r12
    1f10:	30 83       	st	Z, r19
    1f12:	3e e6       	ldi	r19, 0x6E	; 110
    1f14:	31 83       	std	Z+1, r19	; 0x01
    1f16:	36 e6       	ldi	r19, 0x66	; 102
    1f18:	32 83       	std	Z+2, r19	; 0x02
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	32 2f       	mov	r19, r18
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	33 23       	and	r19, r19
    1f22:	19 f0       	breq	.+6      	; 0x1f2a <dtoa_prf+0x152>
    1f24:	41 93       	st	Z+, r20
    1f26:	31 50       	subi	r19, 0x01	; 1
    1f28:	fb cf       	rjmp	.-10     	; 0x1f20 <dtoa_prf+0x148>
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	e2 0f       	add	r30, r18
    1f2e:	f1 1d       	adc	r31, r1
    1f30:	10 82       	st	Z, r1
    1f32:	8e ef       	ldi	r24, 0xFE	; 254
    1f34:	9f ef       	ldi	r25, 0xFF	; 255
    1f36:	a6 c0       	rjmp	.+332    	; 0x2084 <dtoa_prf+0x2ac>
    1f38:	21 e0       	ldi	r18, 0x01	; 1
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	91 11       	cpse	r25, r1
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <dtoa_prf+0x16c>
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	16 16       	cp	r1, r22
    1f46:	17 06       	cpc	r1, r23
    1f48:	1c f4       	brge	.+6      	; 0x1f50 <dtoa_prf+0x178>
    1f4a:	fb 01       	movw	r30, r22
    1f4c:	31 96       	adiw	r30, 0x01	; 1
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <dtoa_prf+0x17c>
    1f50:	e1 e0       	ldi	r30, 0x01	; 1
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	2e 0f       	add	r18, r30
    1f56:	3f 1f       	adc	r19, r31
    1f58:	bb 20       	and	r11, r11
    1f5a:	21 f0       	breq	.+8      	; 0x1f64 <dtoa_prf+0x18c>
    1f5c:	eb 2d       	mov	r30, r11
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	31 96       	adiw	r30, 0x01	; 1
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <dtoa_prf+0x190>
    1f64:	e0 e0       	ldi	r30, 0x00	; 0
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	2e 0f       	add	r18, r30
    1f6a:	3f 1f       	adc	r19, r31
    1f6c:	e1 2f       	mov	r30, r17
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	2e 17       	cp	r18, r30
    1f72:	3f 07       	cpc	r19, r31
    1f74:	1c f4       	brge	.+6      	; 0x1f7c <dtoa_prf+0x1a4>
    1f76:	12 1b       	sub	r17, r18
    1f78:	21 2f       	mov	r18, r17
    1f7a:	01 c0       	rjmp	.+2      	; 0x1f7e <dtoa_prf+0x1a6>
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	8e 2d       	mov	r24, r14
    1f80:	88 71       	andi	r24, 0x18	; 24
    1f82:	59 f4       	brne	.+22     	; 0x1f9a <dtoa_prf+0x1c2>
    1f84:	f6 01       	movw	r30, r12
    1f86:	82 2f       	mov	r24, r18
    1f88:	30 e2       	ldi	r19, 0x20	; 32
    1f8a:	88 23       	and	r24, r24
    1f8c:	19 f0       	breq	.+6      	; 0x1f94 <dtoa_prf+0x1bc>
    1f8e:	31 93       	st	Z+, r19
    1f90:	81 50       	subi	r24, 0x01	; 1
    1f92:	fb cf       	rjmp	.-10     	; 0x1f8a <dtoa_prf+0x1b2>
    1f94:	c2 0e       	add	r12, r18
    1f96:	d1 1c       	adc	r13, r1
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	99 23       	and	r25, r25
    1f9c:	29 f0       	breq	.+10     	; 0x1fa8 <dtoa_prf+0x1d0>
    1f9e:	d6 01       	movw	r26, r12
    1fa0:	9c 93       	st	X, r25
    1fa2:	f6 01       	movw	r30, r12
    1fa4:	31 96       	adiw	r30, 0x01	; 1
    1fa6:	6f 01       	movw	r12, r30
    1fa8:	51 11       	cpse	r21, r1
    1faa:	0b c0       	rjmp	.+22     	; 0x1fc2 <dtoa_prf+0x1ea>
    1fac:	f6 01       	movw	r30, r12
    1fae:	82 2f       	mov	r24, r18
    1fb0:	90 e3       	ldi	r25, 0x30	; 48
    1fb2:	88 23       	and	r24, r24
    1fb4:	19 f0       	breq	.+6      	; 0x1fbc <dtoa_prf+0x1e4>
    1fb6:	91 93       	st	Z+, r25
    1fb8:	81 50       	subi	r24, 0x01	; 1
    1fba:	fb cf       	rjmp	.-10     	; 0x1fb2 <dtoa_prf+0x1da>
    1fbc:	c2 0e       	add	r12, r18
    1fbe:	d1 1c       	adc	r13, r1
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	0f 2d       	mov	r16, r15
    1fc4:	06 0f       	add	r16, r22
    1fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc8:	34 2f       	mov	r19, r20
    1fca:	30 71       	andi	r19, 0x10	; 16
    1fcc:	44 ff       	sbrs	r20, 4
    1fce:	03 c0       	rjmp	.+6      	; 0x1fd6 <dtoa_prf+0x1fe>
    1fd0:	91 33       	cpi	r25, 0x31	; 49
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <dtoa_prf+0x1fe>
    1fd4:	01 50       	subi	r16, 0x01	; 1
    1fd6:	10 16       	cp	r1, r16
    1fd8:	24 f4       	brge	.+8      	; 0x1fe2 <dtoa_prf+0x20a>
    1fda:	09 30       	cpi	r16, 0x09	; 9
    1fdc:	18 f0       	brcs	.+6      	; 0x1fe4 <dtoa_prf+0x20c>
    1fde:	08 e0       	ldi	r16, 0x08	; 8
    1fe0:	01 c0       	rjmp	.+2      	; 0x1fe4 <dtoa_prf+0x20c>
    1fe2:	01 e0       	ldi	r16, 0x01	; 1
    1fe4:	ab 01       	movw	r20, r22
    1fe6:	77 ff       	sbrs	r23, 7
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <dtoa_prf+0x216>
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	50 e0       	ldi	r21, 0x00	; 0
    1fee:	fb 01       	movw	r30, r22
    1ff0:	e4 1b       	sub	r30, r20
    1ff2:	f5 0b       	sbc	r31, r21
    1ff4:	a1 e0       	ldi	r26, 0x01	; 1
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	ac 0f       	add	r26, r28
    1ffa:	bd 1f       	adc	r27, r29
    1ffc:	ea 0f       	add	r30, r26
    1ffe:	fb 1f       	adc	r31, r27
    2000:	8e e2       	ldi	r24, 0x2E	; 46
    2002:	a8 2e       	mov	r10, r24
    2004:	4b 01       	movw	r8, r22
    2006:	80 1a       	sub	r8, r16
    2008:	91 08       	sbc	r9, r1
    200a:	0b 2d       	mov	r16, r11
    200c:	10 e0       	ldi	r17, 0x00	; 0
    200e:	11 95       	neg	r17
    2010:	01 95       	neg	r16
    2012:	11 09       	sbc	r17, r1
    2014:	4f 3f       	cpi	r20, 0xFF	; 255
    2016:	bf ef       	ldi	r27, 0xFF	; 255
    2018:	5b 07       	cpc	r21, r27
    201a:	21 f4       	brne	.+8      	; 0x2024 <dtoa_prf+0x24c>
    201c:	d6 01       	movw	r26, r12
    201e:	ac 92       	st	X, r10
    2020:	11 96       	adiw	r26, 0x01	; 1
    2022:	6d 01       	movw	r12, r26
    2024:	64 17       	cp	r22, r20
    2026:	75 07       	cpc	r23, r21
    2028:	2c f0       	brlt	.+10     	; 0x2034 <dtoa_prf+0x25c>
    202a:	84 16       	cp	r8, r20
    202c:	95 06       	cpc	r9, r21
    202e:	14 f4       	brge	.+4      	; 0x2034 <dtoa_prf+0x25c>
    2030:	81 81       	ldd	r24, Z+1	; 0x01
    2032:	01 c0       	rjmp	.+2      	; 0x2036 <dtoa_prf+0x25e>
    2034:	80 e3       	ldi	r24, 0x30	; 48
    2036:	41 50       	subi	r20, 0x01	; 1
    2038:	51 09       	sbc	r21, r1
    203a:	31 96       	adiw	r30, 0x01	; 1
    203c:	d6 01       	movw	r26, r12
    203e:	11 96       	adiw	r26, 0x01	; 1
    2040:	7d 01       	movw	r14, r26
    2042:	40 17       	cp	r20, r16
    2044:	51 07       	cpc	r21, r17
    2046:	24 f0       	brlt	.+8      	; 0x2050 <dtoa_prf+0x278>
    2048:	d6 01       	movw	r26, r12
    204a:	8c 93       	st	X, r24
    204c:	67 01       	movw	r12, r14
    204e:	e2 cf       	rjmp	.-60     	; 0x2014 <dtoa_prf+0x23c>
    2050:	64 17       	cp	r22, r20
    2052:	75 07       	cpc	r23, r21
    2054:	39 f4       	brne	.+14     	; 0x2064 <dtoa_prf+0x28c>
    2056:	96 33       	cpi	r25, 0x36	; 54
    2058:	20 f4       	brcc	.+8      	; 0x2062 <dtoa_prf+0x28a>
    205a:	95 33       	cpi	r25, 0x35	; 53
    205c:	19 f4       	brne	.+6      	; 0x2064 <dtoa_prf+0x28c>
    205e:	31 11       	cpse	r19, r1
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <dtoa_prf+0x28c>
    2062:	81 e3       	ldi	r24, 0x31	; 49
    2064:	f6 01       	movw	r30, r12
    2066:	80 83       	st	Z, r24
    2068:	f7 01       	movw	r30, r14
    206a:	82 2f       	mov	r24, r18
    206c:	90 e2       	ldi	r25, 0x20	; 32
    206e:	88 23       	and	r24, r24
    2070:	19 f0       	breq	.+6      	; 0x2078 <dtoa_prf+0x2a0>
    2072:	91 93       	st	Z+, r25
    2074:	81 50       	subi	r24, 0x01	; 1
    2076:	fb cf       	rjmp	.-10     	; 0x206e <dtoa_prf+0x296>
    2078:	f7 01       	movw	r30, r14
    207a:	e2 0f       	add	r30, r18
    207c:	f1 1d       	adc	r31, r1
    207e:	10 82       	st	Z, r1
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	29 96       	adiw	r28, 0x09	; 9
    2086:	ec e0       	ldi	r30, 0x0C	; 12
    2088:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__epilogue_restores__+0xc>

0000208c <__ftoa_engine>:
    208c:	28 30       	cpi	r18, 0x08	; 8
    208e:	08 f0       	brcs	.+2      	; 0x2092 <__ftoa_engine+0x6>
    2090:	27 e0       	ldi	r18, 0x07	; 7
    2092:	33 27       	eor	r19, r19
    2094:	da 01       	movw	r26, r20
    2096:	99 0f       	add	r25, r25
    2098:	31 1d       	adc	r19, r1
    209a:	87 fd       	sbrc	r24, 7
    209c:	91 60       	ori	r25, 0x01	; 1
    209e:	00 96       	adiw	r24, 0x00	; 0
    20a0:	61 05       	cpc	r22, r1
    20a2:	71 05       	cpc	r23, r1
    20a4:	39 f4       	brne	.+14     	; 0x20b4 <__ftoa_engine+0x28>
    20a6:	32 60       	ori	r19, 0x02	; 2
    20a8:	2e 5f       	subi	r18, 0xFE	; 254
    20aa:	3d 93       	st	X+, r19
    20ac:	30 e3       	ldi	r19, 0x30	; 48
    20ae:	2a 95       	dec	r18
    20b0:	e1 f7       	brne	.-8      	; 0x20aa <__ftoa_engine+0x1e>
    20b2:	08 95       	ret
    20b4:	9f 3f       	cpi	r25, 0xFF	; 255
    20b6:	30 f0       	brcs	.+12     	; 0x20c4 <__ftoa_engine+0x38>
    20b8:	80 38       	cpi	r24, 0x80	; 128
    20ba:	71 05       	cpc	r23, r1
    20bc:	61 05       	cpc	r22, r1
    20be:	09 f0       	breq	.+2      	; 0x20c2 <__ftoa_engine+0x36>
    20c0:	3c 5f       	subi	r19, 0xFC	; 252
    20c2:	3c 5f       	subi	r19, 0xFC	; 252
    20c4:	3d 93       	st	X+, r19
    20c6:	91 30       	cpi	r25, 0x01	; 1
    20c8:	08 f0       	brcs	.+2      	; 0x20cc <__ftoa_engine+0x40>
    20ca:	80 68       	ori	r24, 0x80	; 128
    20cc:	91 1d       	adc	r25, r1
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	1f 93       	push	r17
    20d4:	0f 93       	push	r16
    20d6:	ff 92       	push	r15
    20d8:	ef 92       	push	r14
    20da:	19 2f       	mov	r17, r25
    20dc:	98 7f       	andi	r25, 0xF8	; 248
    20de:	96 95       	lsr	r25
    20e0:	e9 2f       	mov	r30, r25
    20e2:	96 95       	lsr	r25
    20e4:	96 95       	lsr	r25
    20e6:	e9 0f       	add	r30, r25
    20e8:	ff 27       	eor	r31, r31
    20ea:	e4 5e       	subi	r30, 0xE4	; 228
    20ec:	fe 4f       	sbci	r31, 0xFE	; 254
    20ee:	99 27       	eor	r25, r25
    20f0:	33 27       	eor	r19, r19
    20f2:	ee 24       	eor	r14, r14
    20f4:	ff 24       	eor	r15, r15
    20f6:	a7 01       	movw	r20, r14
    20f8:	e7 01       	movw	r28, r14
    20fa:	05 90       	lpm	r0, Z+
    20fc:	08 94       	sec
    20fe:	07 94       	ror	r0
    2100:	28 f4       	brcc	.+10     	; 0x210c <__ftoa_engine+0x80>
    2102:	36 0f       	add	r19, r22
    2104:	e7 1e       	adc	r14, r23
    2106:	f8 1e       	adc	r15, r24
    2108:	49 1f       	adc	r20, r25
    210a:	51 1d       	adc	r21, r1
    210c:	66 0f       	add	r22, r22
    210e:	77 1f       	adc	r23, r23
    2110:	88 1f       	adc	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	06 94       	lsr	r0
    2116:	a1 f7       	brne	.-24     	; 0x2100 <__ftoa_engine+0x74>
    2118:	05 90       	lpm	r0, Z+
    211a:	07 94       	ror	r0
    211c:	28 f4       	brcc	.+10     	; 0x2128 <__ftoa_engine+0x9c>
    211e:	e7 0e       	add	r14, r23
    2120:	f8 1e       	adc	r15, r24
    2122:	49 1f       	adc	r20, r25
    2124:	56 1f       	adc	r21, r22
    2126:	c1 1d       	adc	r28, r1
    2128:	77 0f       	add	r23, r23
    212a:	88 1f       	adc	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	66 1f       	adc	r22, r22
    2130:	06 94       	lsr	r0
    2132:	a1 f7       	brne	.-24     	; 0x211c <__ftoa_engine+0x90>
    2134:	05 90       	lpm	r0, Z+
    2136:	07 94       	ror	r0
    2138:	28 f4       	brcc	.+10     	; 0x2144 <__ftoa_engine+0xb8>
    213a:	f8 0e       	add	r15, r24
    213c:	49 1f       	adc	r20, r25
    213e:	56 1f       	adc	r21, r22
    2140:	c7 1f       	adc	r28, r23
    2142:	d1 1d       	adc	r29, r1
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	66 1f       	adc	r22, r22
    214a:	77 1f       	adc	r23, r23
    214c:	06 94       	lsr	r0
    214e:	a1 f7       	brne	.-24     	; 0x2138 <__ftoa_engine+0xac>
    2150:	05 90       	lpm	r0, Z+
    2152:	07 94       	ror	r0
    2154:	20 f4       	brcc	.+8      	; 0x215e <__ftoa_engine+0xd2>
    2156:	49 0f       	add	r20, r25
    2158:	56 1f       	adc	r21, r22
    215a:	c7 1f       	adc	r28, r23
    215c:	d8 1f       	adc	r29, r24
    215e:	99 0f       	add	r25, r25
    2160:	66 1f       	adc	r22, r22
    2162:	77 1f       	adc	r23, r23
    2164:	88 1f       	adc	r24, r24
    2166:	06 94       	lsr	r0
    2168:	a9 f7       	brne	.-22     	; 0x2154 <__ftoa_engine+0xc8>
    216a:	84 91       	lpm	r24, Z
    216c:	10 95       	com	r17
    216e:	17 70       	andi	r17, 0x07	; 7
    2170:	41 f0       	breq	.+16     	; 0x2182 <__ftoa_engine+0xf6>
    2172:	d6 95       	lsr	r29
    2174:	c7 95       	ror	r28
    2176:	57 95       	ror	r21
    2178:	47 95       	ror	r20
    217a:	f7 94       	ror	r15
    217c:	e7 94       	ror	r14
    217e:	1a 95       	dec	r17
    2180:	c1 f7       	brne	.-16     	; 0x2172 <__ftoa_engine+0xe6>
    2182:	e2 ec       	ldi	r30, 0xC2	; 194
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	68 94       	set
    2188:	15 90       	lpm	r1, Z+
    218a:	15 91       	lpm	r17, Z+
    218c:	35 91       	lpm	r19, Z+
    218e:	65 91       	lpm	r22, Z+
    2190:	95 91       	lpm	r25, Z+
    2192:	05 90       	lpm	r0, Z+
    2194:	7f e2       	ldi	r23, 0x2F	; 47
    2196:	73 95       	inc	r23
    2198:	e1 18       	sub	r14, r1
    219a:	f1 0a       	sbc	r15, r17
    219c:	43 0b       	sbc	r20, r19
    219e:	56 0b       	sbc	r21, r22
    21a0:	c9 0b       	sbc	r28, r25
    21a2:	d0 09       	sbc	r29, r0
    21a4:	c0 f7       	brcc	.-16     	; 0x2196 <__ftoa_engine+0x10a>
    21a6:	e1 0c       	add	r14, r1
    21a8:	f1 1e       	adc	r15, r17
    21aa:	43 1f       	adc	r20, r19
    21ac:	56 1f       	adc	r21, r22
    21ae:	c9 1f       	adc	r28, r25
    21b0:	d0 1d       	adc	r29, r0
    21b2:	7e f4       	brtc	.+30     	; 0x21d2 <__ftoa_engine+0x146>
    21b4:	70 33       	cpi	r23, 0x30	; 48
    21b6:	11 f4       	brne	.+4      	; 0x21bc <__ftoa_engine+0x130>
    21b8:	8a 95       	dec	r24
    21ba:	e6 cf       	rjmp	.-52     	; 0x2188 <__ftoa_engine+0xfc>
    21bc:	e8 94       	clt
    21be:	01 50       	subi	r16, 0x01	; 1
    21c0:	30 f0       	brcs	.+12     	; 0x21ce <__ftoa_engine+0x142>
    21c2:	08 0f       	add	r16, r24
    21c4:	0a f4       	brpl	.+2      	; 0x21c8 <__ftoa_engine+0x13c>
    21c6:	00 27       	eor	r16, r16
    21c8:	02 17       	cp	r16, r18
    21ca:	08 f4       	brcc	.+2      	; 0x21ce <__ftoa_engine+0x142>
    21cc:	20 2f       	mov	r18, r16
    21ce:	23 95       	inc	r18
    21d0:	02 2f       	mov	r16, r18
    21d2:	7a 33       	cpi	r23, 0x3A	; 58
    21d4:	28 f0       	brcs	.+10     	; 0x21e0 <__ftoa_engine+0x154>
    21d6:	79 e3       	ldi	r23, 0x39	; 57
    21d8:	7d 93       	st	X+, r23
    21da:	2a 95       	dec	r18
    21dc:	e9 f7       	brne	.-6      	; 0x21d8 <__ftoa_engine+0x14c>
    21de:	10 c0       	rjmp	.+32     	; 0x2200 <__ftoa_engine+0x174>
    21e0:	7d 93       	st	X+, r23
    21e2:	2a 95       	dec	r18
    21e4:	89 f6       	brne	.-94     	; 0x2188 <__ftoa_engine+0xfc>
    21e6:	06 94       	lsr	r0
    21e8:	97 95       	ror	r25
    21ea:	67 95       	ror	r22
    21ec:	37 95       	ror	r19
    21ee:	17 95       	ror	r17
    21f0:	17 94       	ror	r1
    21f2:	e1 18       	sub	r14, r1
    21f4:	f1 0a       	sbc	r15, r17
    21f6:	43 0b       	sbc	r20, r19
    21f8:	56 0b       	sbc	r21, r22
    21fa:	c9 0b       	sbc	r28, r25
    21fc:	d0 09       	sbc	r29, r0
    21fe:	98 f0       	brcs	.+38     	; 0x2226 <__ftoa_engine+0x19a>
    2200:	23 95       	inc	r18
    2202:	7e 91       	ld	r23, -X
    2204:	73 95       	inc	r23
    2206:	7a 33       	cpi	r23, 0x3A	; 58
    2208:	08 f0       	brcs	.+2      	; 0x220c <__ftoa_engine+0x180>
    220a:	70 e3       	ldi	r23, 0x30	; 48
    220c:	7c 93       	st	X, r23
    220e:	20 13       	cpse	r18, r16
    2210:	b8 f7       	brcc	.-18     	; 0x2200 <__ftoa_engine+0x174>
    2212:	7e 91       	ld	r23, -X
    2214:	70 61       	ori	r23, 0x10	; 16
    2216:	7d 93       	st	X+, r23
    2218:	30 f0       	brcs	.+12     	; 0x2226 <__ftoa_engine+0x19a>
    221a:	83 95       	inc	r24
    221c:	71 e3       	ldi	r23, 0x31	; 49
    221e:	7d 93       	st	X+, r23
    2220:	70 e3       	ldi	r23, 0x30	; 48
    2222:	2a 95       	dec	r18
    2224:	e1 f7       	brne	.-8      	; 0x221e <__ftoa_engine+0x192>
    2226:	11 24       	eor	r1, r1
    2228:	ef 90       	pop	r14
    222a:	ff 90       	pop	r15
    222c:	0f 91       	pop	r16
    222e:	1f 91       	pop	r17
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	99 27       	eor	r25, r25
    2236:	87 fd       	sbrc	r24, 7
    2238:	90 95       	com	r25
    223a:	08 95       	ret

0000223c <strnlen_P>:
    223c:	fc 01       	movw	r30, r24
    223e:	05 90       	lpm	r0, Z+
    2240:	61 50       	subi	r22, 0x01	; 1
    2242:	70 40       	sbci	r23, 0x00	; 0
    2244:	01 10       	cpse	r0, r1
    2246:	d8 f7       	brcc	.-10     	; 0x223e <strnlen_P+0x2>
    2248:	80 95       	com	r24
    224a:	90 95       	com	r25
    224c:	8e 0f       	add	r24, r30
    224e:	9f 1f       	adc	r25, r31
    2250:	08 95       	ret

00002252 <strnlen>:
    2252:	fc 01       	movw	r30, r24
    2254:	61 50       	subi	r22, 0x01	; 1
    2256:	70 40       	sbci	r23, 0x00	; 0
    2258:	01 90       	ld	r0, Z+
    225a:	01 10       	cpse	r0, r1
    225c:	d8 f7       	brcc	.-10     	; 0x2254 <strnlen+0x2>
    225e:	80 95       	com	r24
    2260:	90 95       	com	r25
    2262:	8e 0f       	add	r24, r30
    2264:	9f 1f       	adc	r25, r31
    2266:	08 95       	ret

00002268 <fputc>:
    2268:	0f 93       	push	r16
    226a:	1f 93       	push	r17
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
    2270:	fb 01       	movw	r30, r22
    2272:	23 81       	ldd	r18, Z+3	; 0x03
    2274:	21 fd       	sbrc	r18, 1
    2276:	03 c0       	rjmp	.+6      	; 0x227e <fputc+0x16>
    2278:	8f ef       	ldi	r24, 0xFF	; 255
    227a:	9f ef       	ldi	r25, 0xFF	; 255
    227c:	2c c0       	rjmp	.+88     	; 0x22d6 <fputc+0x6e>
    227e:	22 ff       	sbrs	r18, 2
    2280:	16 c0       	rjmp	.+44     	; 0x22ae <fputc+0x46>
    2282:	46 81       	ldd	r20, Z+6	; 0x06
    2284:	57 81       	ldd	r21, Z+7	; 0x07
    2286:	24 81       	ldd	r18, Z+4	; 0x04
    2288:	35 81       	ldd	r19, Z+5	; 0x05
    228a:	42 17       	cp	r20, r18
    228c:	53 07       	cpc	r21, r19
    228e:	44 f4       	brge	.+16     	; 0x22a0 <fputc+0x38>
    2290:	a0 81       	ld	r26, Z
    2292:	b1 81       	ldd	r27, Z+1	; 0x01
    2294:	9d 01       	movw	r18, r26
    2296:	2f 5f       	subi	r18, 0xFF	; 255
    2298:	3f 4f       	sbci	r19, 0xFF	; 255
    229a:	20 83       	st	Z, r18
    229c:	31 83       	std	Z+1, r19	; 0x01
    229e:	8c 93       	st	X, r24
    22a0:	26 81       	ldd	r18, Z+6	; 0x06
    22a2:	37 81       	ldd	r19, Z+7	; 0x07
    22a4:	2f 5f       	subi	r18, 0xFF	; 255
    22a6:	3f 4f       	sbci	r19, 0xFF	; 255
    22a8:	26 83       	std	Z+6, r18	; 0x06
    22aa:	37 83       	std	Z+7, r19	; 0x07
    22ac:	14 c0       	rjmp	.+40     	; 0x22d6 <fputc+0x6e>
    22ae:	8b 01       	movw	r16, r22
    22b0:	ec 01       	movw	r28, r24
    22b2:	fb 01       	movw	r30, r22
    22b4:	00 84       	ldd	r0, Z+8	; 0x08
    22b6:	f1 85       	ldd	r31, Z+9	; 0x09
    22b8:	e0 2d       	mov	r30, r0
    22ba:	09 95       	icall
    22bc:	89 2b       	or	r24, r25
    22be:	e1 f6       	brne	.-72     	; 0x2278 <fputc+0x10>
    22c0:	d8 01       	movw	r26, r16
    22c2:	16 96       	adiw	r26, 0x06	; 6
    22c4:	8d 91       	ld	r24, X+
    22c6:	9c 91       	ld	r25, X
    22c8:	17 97       	sbiw	r26, 0x07	; 7
    22ca:	01 96       	adiw	r24, 0x01	; 1
    22cc:	16 96       	adiw	r26, 0x06	; 6
    22ce:	8d 93       	st	X+, r24
    22d0:	9c 93       	st	X, r25
    22d2:	17 97       	sbiw	r26, 0x07	; 7
    22d4:	ce 01       	movw	r24, r28
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	08 95       	ret

000022e0 <__ultoa_invert>:
    22e0:	fa 01       	movw	r30, r20
    22e2:	aa 27       	eor	r26, r26
    22e4:	28 30       	cpi	r18, 0x08	; 8
    22e6:	51 f1       	breq	.+84     	; 0x233c <__ultoa_invert+0x5c>
    22e8:	20 31       	cpi	r18, 0x10	; 16
    22ea:	81 f1       	breq	.+96     	; 0x234c <__ultoa_invert+0x6c>
    22ec:	e8 94       	clt
    22ee:	6f 93       	push	r22
    22f0:	6e 7f       	andi	r22, 0xFE	; 254
    22f2:	6e 5f       	subi	r22, 0xFE	; 254
    22f4:	7f 4f       	sbci	r23, 0xFF	; 255
    22f6:	8f 4f       	sbci	r24, 0xFF	; 255
    22f8:	9f 4f       	sbci	r25, 0xFF	; 255
    22fa:	af 4f       	sbci	r26, 0xFF	; 255
    22fc:	b1 e0       	ldi	r27, 0x01	; 1
    22fe:	3e d0       	rcall	.+124    	; 0x237c <__ultoa_invert+0x9c>
    2300:	b4 e0       	ldi	r27, 0x04	; 4
    2302:	3c d0       	rcall	.+120    	; 0x237c <__ultoa_invert+0x9c>
    2304:	67 0f       	add	r22, r23
    2306:	78 1f       	adc	r23, r24
    2308:	89 1f       	adc	r24, r25
    230a:	9a 1f       	adc	r25, r26
    230c:	a1 1d       	adc	r26, r1
    230e:	68 0f       	add	r22, r24
    2310:	79 1f       	adc	r23, r25
    2312:	8a 1f       	adc	r24, r26
    2314:	91 1d       	adc	r25, r1
    2316:	a1 1d       	adc	r26, r1
    2318:	6a 0f       	add	r22, r26
    231a:	71 1d       	adc	r23, r1
    231c:	81 1d       	adc	r24, r1
    231e:	91 1d       	adc	r25, r1
    2320:	a1 1d       	adc	r26, r1
    2322:	20 d0       	rcall	.+64     	; 0x2364 <__ultoa_invert+0x84>
    2324:	09 f4       	brne	.+2      	; 0x2328 <__ultoa_invert+0x48>
    2326:	68 94       	set
    2328:	3f 91       	pop	r19
    232a:	2a e0       	ldi	r18, 0x0A	; 10
    232c:	26 9f       	mul	r18, r22
    232e:	11 24       	eor	r1, r1
    2330:	30 19       	sub	r19, r0
    2332:	30 5d       	subi	r19, 0xD0	; 208
    2334:	31 93       	st	Z+, r19
    2336:	de f6       	brtc	.-74     	; 0x22ee <__ultoa_invert+0xe>
    2338:	cf 01       	movw	r24, r30
    233a:	08 95       	ret
    233c:	46 2f       	mov	r20, r22
    233e:	47 70       	andi	r20, 0x07	; 7
    2340:	40 5d       	subi	r20, 0xD0	; 208
    2342:	41 93       	st	Z+, r20
    2344:	b3 e0       	ldi	r27, 0x03	; 3
    2346:	0f d0       	rcall	.+30     	; 0x2366 <__ultoa_invert+0x86>
    2348:	c9 f7       	brne	.-14     	; 0x233c <__ultoa_invert+0x5c>
    234a:	f6 cf       	rjmp	.-20     	; 0x2338 <__ultoa_invert+0x58>
    234c:	46 2f       	mov	r20, r22
    234e:	4f 70       	andi	r20, 0x0F	; 15
    2350:	40 5d       	subi	r20, 0xD0	; 208
    2352:	4a 33       	cpi	r20, 0x3A	; 58
    2354:	18 f0       	brcs	.+6      	; 0x235c <__ultoa_invert+0x7c>
    2356:	49 5d       	subi	r20, 0xD9	; 217
    2358:	31 fd       	sbrc	r19, 1
    235a:	40 52       	subi	r20, 0x20	; 32
    235c:	41 93       	st	Z+, r20
    235e:	02 d0       	rcall	.+4      	; 0x2364 <__ultoa_invert+0x84>
    2360:	a9 f7       	brne	.-22     	; 0x234c <__ultoa_invert+0x6c>
    2362:	ea cf       	rjmp	.-44     	; 0x2338 <__ultoa_invert+0x58>
    2364:	b4 e0       	ldi	r27, 0x04	; 4
    2366:	a6 95       	lsr	r26
    2368:	97 95       	ror	r25
    236a:	87 95       	ror	r24
    236c:	77 95       	ror	r23
    236e:	67 95       	ror	r22
    2370:	ba 95       	dec	r27
    2372:	c9 f7       	brne	.-14     	; 0x2366 <__ultoa_invert+0x86>
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	61 05       	cpc	r22, r1
    2378:	71 05       	cpc	r23, r1
    237a:	08 95       	ret
    237c:	9b 01       	movw	r18, r22
    237e:	ac 01       	movw	r20, r24
    2380:	0a 2e       	mov	r0, r26
    2382:	06 94       	lsr	r0
    2384:	57 95       	ror	r21
    2386:	47 95       	ror	r20
    2388:	37 95       	ror	r19
    238a:	27 95       	ror	r18
    238c:	ba 95       	dec	r27
    238e:	c9 f7       	brne	.-14     	; 0x2382 <__ultoa_invert+0xa2>
    2390:	62 0f       	add	r22, r18
    2392:	73 1f       	adc	r23, r19
    2394:	84 1f       	adc	r24, r20
    2396:	95 1f       	adc	r25, r21
    2398:	a0 1d       	adc	r26, r0
    239a:	08 95       	ret

0000239c <__prologue_saves__>:
    239c:	2f 92       	push	r2
    239e:	3f 92       	push	r3
    23a0:	4f 92       	push	r4
    23a2:	5f 92       	push	r5
    23a4:	6f 92       	push	r6
    23a6:	7f 92       	push	r7
    23a8:	8f 92       	push	r8
    23aa:	9f 92       	push	r9
    23ac:	af 92       	push	r10
    23ae:	bf 92       	push	r11
    23b0:	cf 92       	push	r12
    23b2:	df 92       	push	r13
    23b4:	ef 92       	push	r14
    23b6:	ff 92       	push	r15
    23b8:	0f 93       	push	r16
    23ba:	1f 93       	push	r17
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	ca 1b       	sub	r28, r26
    23c6:	db 0b       	sbc	r29, r27
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	09 94       	ijmp

000023ce <__epilogue_restores__>:
    23ce:	2a 88       	ldd	r2, Y+18	; 0x12
    23d0:	39 88       	ldd	r3, Y+17	; 0x11
    23d2:	48 88       	ldd	r4, Y+16	; 0x10
    23d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23da:	8c 84       	ldd	r8, Y+12	; 0x0c
    23dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    23de:	aa 84       	ldd	r10, Y+10	; 0x0a
    23e0:	b9 84       	ldd	r11, Y+9	; 0x09
    23e2:	c8 84       	ldd	r12, Y+8	; 0x08
    23e4:	df 80       	ldd	r13, Y+7	; 0x07
    23e6:	ee 80       	ldd	r14, Y+6	; 0x06
    23e8:	fd 80       	ldd	r15, Y+5	; 0x05
    23ea:	0c 81       	ldd	r16, Y+4	; 0x04
    23ec:	1b 81       	ldd	r17, Y+3	; 0x03
    23ee:	aa 81       	ldd	r26, Y+2	; 0x02
    23f0:	b9 81       	ldd	r27, Y+1	; 0x01
    23f2:	ce 0f       	add	r28, r30
    23f4:	d1 1d       	adc	r29, r1
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	ed 01       	movw	r28, r26
    23fc:	08 95       	ret

000023fe <_exit>:
    23fe:	f8 94       	cli

00002400 <__stop_program>:
    2400:	ff cf       	rjmp	.-2      	; 0x2400 <__stop_program>
